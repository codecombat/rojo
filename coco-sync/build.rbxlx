<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Workspace" referent="10">
		<Properties>
			<bool name="AllowThirdPartySales">false</bool>
			<token name="AnimationWeightedBlendFix">0</token>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<token name="ClientAnimatorThrottling">0</token>
			<string name="CollisionGroups">Default^0^-1</string>
			<Ref name="CurrentCamera">RBX45a22a0b2e384846afb23769e37e4e7a</Ref>
			<double name="DistributedGameTime">0</double>
			<bool name="ExplicitAutoJoints">true</bool>
			<float name="FallenPartsDestroyHeight">-500</float>
			<Vector3 name="GlobalWind">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
			</Vector3>
			<float name="Gravity">196.199997</float>
			<token name="HumanoidOnlySetCollisionsOnStateChange">0</token>
			<token name="InterpolationThrottling">0</token>
			<token name="LevelOfDetail">0</token>
			<token name="MeshPartHeadsAndAccessories">0</token>
			<CoordinateFrame name="ModelMeshCFrame">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
			<Vector3 name="ModelMeshSize">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
			</Vector3>
			<string name="Name">Workspace</string>
			<bool name="NeedsPivotMigration">false</bool>
			<token name="PhysicsSteppingMethod">0</token>
			<Ref name="PrimaryPart">null</Ref>
			<token name="ReplicateInstanceDestroySetting">0</token>
			<token name="Retargeting">0</token>
			<token name="SignalBehavior">0</token>
			<int64 name="SourceAssetId">-1</int64>
			<token name="StreamOutBehavior">0</token>
			<bool name="StreamingEnabled">false</bool>
			<token name="StreamingIntegrityMode">0</token>
			<int name="StreamingMinRadius">64</int>
			<token name="StreamingPauseMode">0</token>
			<int name="StreamingTargetRadius">1024</int>
			<BinaryString name="Tags"></BinaryString>
			<bool name="TerrainWeldsFixed">true</bool>
			<bool name="TouchesUseCollisionGroups">false</bool>
			<token name="UnionsScaleNonuniformly">0</token>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00020279</UniqueId>
			<OptionalCoordinateFrame name="WorldPivotData">
				<CFrame>
					<X>0</X>
					<Y>-10</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CFrame>
			</OptionalCoordinateFrame>
		</Properties>
		<Item class="Camera" referent="RBX45a22a0b2e384846afb23769e37e4e7a">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<CoordinateFrame name="CFrame">
					<X>27.4822826</X>
					<Y>57.5023079</Y>
					<Z>46.9425316</Z>
					<R00>0.966817498</R00>
					<R01>-0.175724149</R01>
					<R02>0.185432345</R02>
					<R10>7.45058237e-09</R10>
					<R11>0.72585237</R11>
					<R12>0.687850595</R12>
					<R20>-0.255468488</R20>
					<R21>-0.665026009</R21>
					<R22>0.70176661</R22>
				</CoordinateFrame>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<float name="FieldOfView">70</float>
				<token name="FieldOfViewMode">0</token>
				<CoordinateFrame name="Focus">
					<X>27.1114178</X>
					<Y>56.126606</Y>
					<Z>45.5389977</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="HeadLocked">true</bool>
				<float name="HeadScale">1</float>
				<string name="Name">Camera</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f70</UniqueId>
			</Properties>
		</Item>
		<Item class="Part" referent="11">
			<Properties>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>-10</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CanQuery">true</bool>
				<bool name="CanTouch">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4284636770</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<string name="MaterialVariantSerialized"></string>
				<string name="Name">Baseplate</string>
				<CoordinateFrame name="PivotOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021fdf</UniqueId>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">1</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>512</X>
					<Y>20</Y>
					<Z>512</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="Terrain" referent="RBX09229c21aa4540fdac8a643a0c61c345">
			<Properties>
				<token name="AcquisitionMethod">0</token>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CanQuery">true</bool>
				<bool name="CanTouch">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<bool name="Decoration">false</bool>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<BinaryString name="MaterialColors"><![CDATA[AAAAAAAAan8/P39rf2Y/ilY+j35fi21PZmxvZbDqw8faiVpHOi4kHh4lZlw76JxKc3trhHta
gcLgc4RKxr21zq2UlJSM]]></BinaryString>
				<string name="MaterialVariantSerialized"></string>
				<string name="Name">Terrain</string>
				<BinaryString name="PhysicsGrid">AgMAAAAAAAAAAAAAAAA=</BinaryString>
				<CoordinateFrame name="PivotOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<BinaryString name="SmoothGrid">AQU=</BinaryString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021fe0</UniqueId>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<Color3 name="WaterColor">
					<R>0.0500000007</R>
					<G>0.330000013</G>
					<B>0.360000014</B>
				</Color3>
				<float name="WaterReflectance">1</float>
				<float name="WaterTransparency">0.300000012</float>
				<float name="WaterWaveSize">0.150000006</float>
				<float name="WaterWaveSpeed">10</float>
				<Vector3 name="size">
					<X>2044</X>
					<Y>252</Y>
					<Z>2044</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="Part" referent="RBXe8715ff237f64feaa50f3cb02d740347">
			<Properties>
				<bool name="Anchored">false</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>26.4699993</X>
					<Y>18.7430992</Y>
					<Z>9.11999989</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CanQuery">true</bool>
				<bool name="CanTouch">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<string name="MaterialVariantSerialized"></string>
				<string name="Name">Part</string>
				<CoordinateFrame name="PivotOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00032975</UniqueId>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">1</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>4</X>
					<Y>37.4861755</Y>
					<Z>2</Z>
				</Vector3>
			</Properties>
		</Item>
	</Item>
	<Item class="SoundService" referent="6">
		<Properties>
			<token name="AmbientReverb">0</token>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="DistanceFactor">3.32999992</float>
			<float name="DopplerScale">1</float>
			<string name="Name">SoundService</string>
			<bool name="RespectFilteringEnabled">true</bool>
			<float name="RolloffScale">1</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f23</UniqueId>
			<token name="VolumetricAudio">1</token>
		</Properties>
	</Item>
	<Item class="VideoCaptureService" referent="RBXdec987a815594b87adddae5a6dbc535b">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f2f</UniqueId>
		</Properties>
	</Item>
	<Item class="NonReplicatedCSGDictionaryService" referent="RBX78ac23535e2a431a89aae76b0cd2713b">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">NonReplicatedCSGDictionaryService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f30</UniqueId>
		</Properties>
	</Item>
	<Item class="CSGDictionaryService" referent="RBX9918c334e51649d3a8fb14cdd341cb15">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CSGDictionaryService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f31</UniqueId>
		</Properties>
	</Item>
	<Item class="Chat" referent="RBXd8e304561e7a49389167e1bcd767b45d">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="BubbleChatEnabled">false</bool>
			<bool name="LoadDefaultChat">true</bool>
			<string name="Name">Chat</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f36</UniqueId>
		</Properties>
	</Item>
	<Item class="TimerService" referent="RBX59e05f8f1beb4a67a6a210f61d3654cb">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f37</UniqueId>
		</Properties>
	</Item>
	<Item class="Players" referent="RBXf5bc617289004796b4e616a6f80f7d4b">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="CharacterAutoLoads">true</bool>
			<int name="MaxPlayersInternal">12</int>
			<string name="Name">Players</string>
			<int name="PreferredPlayersInternal">0</int>
			<float name="RespawnTime">5</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f39</UniqueId>
		</Properties>
	</Item>
	<Item class="ReplicatedFirst" referent="RBX2e45d5cf1d3a4cec93919add9319af2b">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedFirst</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f3d</UniqueId>
		</Properties>
	</Item>
	<Item class="TweenService" referent="RBX4119f97b22084a979d9fcda601aecf4e">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TweenService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f3f</UniqueId>
		</Properties>
	</Item>
	<Item class="MaterialService" referent="RBX0280fef11be74c008d5a6522fb711962">
		<Properties>
			<string name="AsphaltName">Asphalt</string>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="BasaltName">Basalt</string>
			<string name="BrickName">Brick</string>
			<string name="CobblestoneName">Cobblestone</string>
			<string name="ConcreteName">Concrete</string>
			<string name="CorrodedMetalName">CorrodedMetal</string>
			<string name="CrackedLavaName">CrackedLava</string>
			<string name="DiamondPlateName">DiamondPlate</string>
			<string name="FabricName">Fabric</string>
			<string name="FoilName">Foil</string>
			<string name="GlacierName">Glacier</string>
			<string name="GraniteName">Granite</string>
			<string name="GrassName">Grass</string>
			<string name="GroundName">Ground</string>
			<string name="IceName">Ice</string>
			<string name="LeafyGrassName">LeafyGrass</string>
			<string name="LimestoneName">Limestone</string>
			<string name="MarbleName">Marble</string>
			<string name="MetalName">Metal</string>
			<string name="MudName">Mud</string>
			<string name="Name">MaterialService</string>
			<string name="PavementName">Pavement</string>
			<string name="PebbleName">Pebble</string>
			<string name="PlasticName">Plastic</string>
			<string name="RockName">Rock</string>
			<string name="SaltName">Salt</string>
			<string name="SandName">Sand</string>
			<string name="SandstoneName">Sandstone</string>
			<string name="SlateName">Slate</string>
			<string name="SmoothPlasticName">SmoothPlastic</string>
			<string name="SnowName">Snow</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f40</UniqueId>
			<bool name="Use2022MaterialsXml">false</bool>
			<string name="WoodName">Wood</string>
			<string name="WoodPlanksName">WoodPlanks</string>
		</Properties>
	</Item>
	<Item class="PermissionsService" referent="RBX334ad18d8b3a4a488bf07b009f8762bb">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PermissionsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f44</UniqueId>
		</Properties>
	</Item>
	<Item class="PlayerEmulatorService" referent="RBX3a342931c3664d078aa02c4f6f49d789">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="CustomPoliciesEnabled">false</bool>
			<string name="EmulatedCountryCode"></string>
			<string name="EmulatedGameLocale"></string>
			<string name="Name">PlayerEmulatorService</string>
			<bool name="PlayerEmulationEnabled">false</bool>
			<BinaryString name="SerializedEmulatedPolicyInfo"></BinaryString>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f46</UniqueId>
		</Properties>
	</Item>
	<Item class="StudioData" referent="RBX8822120805504f14825b17807e89437d">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int64 name="CommitInflightAuthorId">0</int64>
			<string name="CommitInflightGuid"></string>
			<int name="CommitInflightPlaceVersion">0</int>
			<bool name="EnableScriptCollabByDefaultOnLoad">false</bool>
			<string name="Name">StudioData</string>
			<int64 name="SourceAssetId">-1</int64>
			<int64 name="SrcPlaceId">0</int64>
			<int64 name="SrcUniverseId">0</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f49</UniqueId>
		</Properties>
	</Item>
	<Item class="StarterPlayer" referent="7">
		<Properties>
			<bool name="AllowCustomAnimations">true</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoJumpEnabled">true</bool>
			<float name="CameraMaxZoomDistance">400</float>
			<float name="CameraMinZoomDistance">0.5</float>
			<token name="CameraMode">0</token>
			<float name="CharacterJumpHeight">7.19999981</float>
			<float name="CharacterJumpPower">50</float>
			<float name="CharacterMaxSlopeAngle">89</float>
			<bool name="CharacterUseJumpPower">true</bool>
			<float name="CharacterWalkSpeed">16</float>
			<token name="DevCameraOcclusionMode">0</token>
			<token name="DevComputerCameraMovementMode">0</token>
			<token name="DevComputerMovementMode">0</token>
			<token name="DevTouchCameraMovementMode">0</token>
			<token name="DevTouchMovementMode">0</token>
			<token name="EnableDynamicHeads">0</token>
			<bool name="EnableMouseLockOption">true</bool>
			<int64 name="GameSettingsAssetIDFace">0</int64>
			<int64 name="GameSettingsAssetIDHead">0</int64>
			<int64 name="GameSettingsAssetIDLeftArm">0</int64>
			<int64 name="GameSettingsAssetIDLeftLeg">0</int64>
			<int64 name="GameSettingsAssetIDPants">0</int64>
			<int64 name="GameSettingsAssetIDRightArm">0</int64>
			<int64 name="GameSettingsAssetIDRightLeg">0</int64>
			<int64 name="GameSettingsAssetIDShirt">0</int64>
			<int64 name="GameSettingsAssetIDTeeShirt">0</int64>
			<int64 name="GameSettingsAssetIDTorso">0</int64>
			<token name="GameSettingsAvatar">1</token>
			<token name="GameSettingsR15Collision">0</token>
			<NumberRange name="GameSettingsScaleRangeBodyType">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHead">0.95 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHeight">0.9 1.05 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeProportion">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeWidth">0.7 1 </NumberRange>
			<float name="HealthDisplayDistance">100</float>
			<bool name="LoadCharacterAppearance">true</bool>
			<token name="LoadCharacterLayeredClothing">0</token>
			<string name="Name">StarterPlayer</string>
			<float name="NameDisplayDistance">100</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f4a</UniqueId>
			<bool name="UserEmotesEnabled">true</bool>
		</Properties>
		<Item class="StarterPlayerScripts" referent="8">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterPlayerScripts</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021fdd</UniqueId>
			</Properties>
			<Item class="LocalScript" referent="9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Client</string>
					<token name="RunContext">0</token>
					<string name="ScriptGuid">{4cf4f59b-81e4-4672-bca0-a914230810cb}</string>
					<ProtectedString name="Source">print(&quot;Hello world, from client!&quot;)</ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021fde</UniqueId>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBX2fd809396cc44279b89c2ab2b3872e6e">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">Rojo</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e85e</UniqueId>
				</Properties>
				<Item class="ModuleScript" referent="RBX38f1272fc8944bccb615effac1290408">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Fmt</string>
						<string name="ScriptGuid">{92531dcd-6f1e-4cd5-b25d-13c4a64e24bb}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	This library describes a formatting mechanism akin to Rust's std::fmt.

	It has a couple building blocks:

	* A new syntax for formatting strings, taken verbatim from Rust. It'd also
	  be possible to use printf-style formatting specifiers to integrate with
	  the existing string.format utility.

	* An equivalent to Rust's `Display` trait. We're mapping the semantics of
	  tostring and the __tostring metamethod onto this trait. A lot of types
	  should already have __tostring implementations, too!

	* An equivalent to Rust's `Debug` trait. This library Lua-ifies that idea by
	  inventing a new metamethod, `__fmtDebug`. We pass along the "extended
	  form" attribute which is the equivalent of the "alternate mode" in Rust's
	  Debug trait since it's the author's opinion that treating it as a
	  verbosity flag is semantically accurate.
]]

--[[
	The default implementation of __fmtDebug for tables when the extended option
	is not set.
]]
local function defaultTableDebug(buffer, input)
	buffer:writeRaw("{")

	for key, value in pairs(input) do
		buffer:write("[{:?}] = {:?}", key, value)

		if next(input, key) ~= nil then
			buffer:writeRaw(", ")
		end
	end

	buffer:writeRaw("}")
end

--[[
	The default implementation of __fmtDebug for tables with the extended option
	set.
]]
local function defaultTableDebugExtended(buffer, input)
	-- Special case for empty tables.
	if next(input) == nil then
		buffer:writeRaw("{}")
		return
	end

	buffer:writeLineRaw("{")
	buffer:indent()

	for key, value in pairs(input) do
		buffer:writeLine("[{:?}] = {:#?},", key, value)
	end

	buffer:unindent()
	buffer:writeRaw("}")
end

--[[
	The default debug representation for all types.
]]
local function debugImpl(buffer, value, extendedForm)
	local valueType = typeof(value)

	if valueType == "string" then
		local formatted = string.format("%q", value)
		buffer:writeRaw(formatted)
	elseif valueType == "table" then
		local valueMeta = getmetatable(value)

		if valueMeta ~= nil and  valueMeta.__fmtDebug ~= nil then
			-- This type implement's the metamethod we made up to line up with
			-- Rust's 'Debug' trait.

			valueMeta.__fmtDebug(value, buffer, extendedForm)
		else
			if extendedForm then
				defaultTableDebugExtended(buffer, value)
			else
				defaultTableDebug(buffer, value)
			end
		end
	elseif valueType == "Instance" then
		buffer:writeRaw(value:GetFullName())
	else
		buffer:writeRaw(tostring(value))
	end
end

--[[
	Defines and implements the library's template syntax.
]]
local function writeFmt(buffer, template, ...)
	local currentArg = 0
	local i = 1
	local len = #template

	while i <= len do
		local openBrace = template:find("{", i)

		if openBrace == nil then
			-- There are no remaining open braces in this string, so we can
			-- write the rest of the string to the buffer.

			buffer:writeRaw(template:sub(i))
			break
		else
			-- We found an open brace! This could be:
			-- - A literal '{', written as '{{'
			-- - The beginning of an interpolation, like '{}'
			-- - An error, if there's no matching '}'

			local charAfterBrace = template:sub(openBrace + 1, openBrace + 1)
			if charAfterBrace == "{" then
				-- This is a literal brace, so we'll write everything up to this
				-- point (including the first brace), and then skip over the
				-- second brace.

				buffer:writeRaw(template:sub(i, openBrace))
				i = openBrace + 2
			else
				-- This SHOULD be an interpolation. We'll find our matching
				-- brace and treat the contents as the formatting specifier.

				-- If there were any unwritten characters before this
				-- interpolation, write them to the buffer.
				if openBrace - i > 0 then
					buffer:writeRaw(template:sub(i, openBrace - 1))
				end

				local closeBrace = template:find("}", openBrace + 1)
				assert(closeBrace ~= nil, "Unclosed formatting specifier. Use '{{' to write an open brace.")

				local formatSpecifier = template:sub(openBrace + 1, closeBrace - 1)
				currentArg = currentArg + 1
				local arg = select(currentArg, ...)

				if formatSpecifier == "" then
					-- This should use the equivalent of Rust's 'Display', ie
					-- tostring and the __tostring metamethod.

					buffer:writeRaw(tostring(arg))
				elseif formatSpecifier == ":?" then
					-- This should use the equivalent of Rust's 'Debug',
					-- invented for this library as __fmtDebug.

					debugImpl(buffer, arg, false)
				elseif formatSpecifier == ":#?" then
					-- This should use the equivlant of Rust's 'Debug' with the
					-- 'alternate' (ie expanded) flag set.

					debugImpl(buffer, arg, true)
				else
					error("unsupported format specifier " .. formatSpecifier, 2)
				end

				i = closeBrace + 1
			end
		end
	end
end

local function debugOutputBuffer()
	local buffer = {}
	local startOfLine = true
	local indentLevel = 0
	local indentation = ""

	function buffer:writeLine(template, ...)
		writeFmt(self, template, ...)
		self:nextLine()
	end

	function buffer:writeLineRaw(value)
		self:writeRaw(value)
		self:nextLine()
	end

	function buffer:write(template, ...)
		return writeFmt(self, template, ...)
	end

	function buffer:writeRaw(value)
		if #value > 0 then
			if startOfLine and #indentation > 0 then
				startOfLine = false
				table.insert(self, indentation)
			end

			table.insert(self, value)
			startOfLine = false
		end
	end

	function buffer:nextLine()
		table.insert(self, "\n")
		startOfLine = true
	end

	function buffer:indent()
		indentLevel = indentLevel + 1
		indentation = string.rep("    ", indentLevel)
	end

	function buffer:unindent()
		indentLevel = math.max(0, indentLevel - 1)
		indentation = string.rep("    ", indentLevel)
	end

	function buffer:finish()
		return table.concat(self, "")
	end

	return buffer
end

local function fmt(template, ...)
	local buffer = debugOutputBuffer()
	writeFmt(buffer, template, ...)
	return buffer:finish()
end

--[[
	Wrap the given object in a type that implements the given function as its
	Debug implementation, and forwards __tostring to the type's underlying
	tostring implementation.
]]
local function debugify(object, fmtFunc)
	return setmetatable({}, {
		__fmtDebug = function(_, ...)
			return fmtFunc(object, ...)
		end,
		__tostring = function()
			return tostring(object)
		end,
	})
end

return {
	debugOutputBuffer = debugOutputBuffer,
	fmt = fmt,
	debugify = debugify,
}]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e85f</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX6c482ac841e74be3ad913b366723e5d6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Http</string>
						<string name="ScriptGuid">{a8e0080f-b60a-4351-838f-9b78a9c2d588}</string>
						<ProtectedString name="Source"><![CDATA[local HttpService = game:GetService("HttpService")

local Promise = require(script.Parent.Promise)
local Log = require(script.Parent.Log)

local HttpError = require(script.Error)
local HttpResponse = require(script.Response)

local lastRequestId = 0

local Http = {}

Http.Error = HttpError
Http.Response = HttpResponse

local function performRequest(requestParams)
	local requestId = lastRequestId + 1
	lastRequestId = requestId

	Log.trace("HTTP {}({}) {}", requestParams.Method, requestId, requestParams.Url)

	if requestParams.Body ~= nil then
		Log.trace("{}", requestParams.Body)
	end

	return Promise.new(function(resolve, reject)
		coroutine.wrap(function()
			local success, response = pcall(function()
				return HttpService:RequestAsync(requestParams)
			end)

			if success then
				Log.trace("Request {} success, status code {}", requestId, response.StatusCode)
				resolve(HttpResponse.fromRobloxResponse(response))
			else
				Log.trace("Request {} failure: {:?}", requestId, response)
				reject(HttpError.fromRobloxErrorString(response))
			end
		end)()
	end)
end

function Http.get(url)
	return performRequest({
		Url = url,
		Method = "GET",
	})
end

function Http.post(url, body)
	return performRequest({
		Url = url,
		Method = "POST",
		Body = body,
	})
end

function Http.jsonEncode(object)
	return HttpService:JSONEncode(object)
end

function Http.jsonDecode(source)
	return HttpService:JSONDecode(source)
end

return Http]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e860</UniqueId>
					</Properties>
					<Item class="ModuleScript" referent="RBXca1d301b590947409da1db9b997e5085">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Error</string>
							<string name="ScriptGuid">{d1935428-8206-4463-b24c-bc4ae48a904c}</string>
							<ProtectedString name="Source"><![CDATA[local Error = {}
Error.__index = Error

Error.Kind = {
	HttpNotEnabled = {
		message = "Rojo requires HTTP access, which is not enabled.\n" ..
			"Check your game settings, located in the 'Home' tab of Studio.",
	},
	ConnectFailed = {
		message = "Couldn't connect to the Rojo server.\n" ..
			"Make sure the server is running — use 'rojo serve' to run it!",
	},
	Timeout = {
		message = "HTTP request timed out.",
	},
	Unknown = {
		message = "Unknown HTTP error: {{message}}",
	},
}

setmetatable(Error.Kind, {
	__index = function(_, key)
		error(("%q is not a valid member of Http.Error.Kind"):format(tostring(key)), 2)
	end,
})

function Error.new(type, extraMessage)
	extraMessage = extraMessage or ""
	local message = type.message:gsub("{{message}}", extraMessage)

	local err = {
		type = type,
		message = message,
	}

	setmetatable(err, Error)

	return err
end

function Error:__tostring()
	return self.message
end

--[[
	This method shouldn't have to exist. Ugh.
]]
function Error.fromRobloxErrorString(message)
	local lower = message:lower()

	if lower:find("^http requests are not enabled") then
		return Error.new(Error.Kind.HttpNotEnabled)
	end

	if lower:find("^httperror: timedout") then
		return Error.new(Error.Kind.Timeout)
	end

	if lower:find("^httperror: connectfail") then
		return Error.new(Error.Kind.ConnectFailed)
	end

	return Error.new(Error.Kind.Unknown, message)
end

return Error
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e861</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX6d9971e3abc04c50abf23269167f831e">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Response</string>
							<string name="ScriptGuid">{5b8d593c-72d9-424e-88b9-81cd89aa72fe}</string>
							<ProtectedString name="Source"><![CDATA[local HttpService = game:GetService("HttpService")

local stringTemplate = [[
Http.Response {
	code: %d
	body: %s
}]]

local Response = {}
Response.__index = Response

function Response:__tostring()
	return stringTemplate:format(self.code, self.body)
end

function Response.fromRobloxResponse(response)
	local self = {
		body = response.Body,
		code = response.StatusCode,
		headers = response.Headers,
	}

	return setmetatable(self, Response)
end

function Response:isSuccess()
	return self.code >= 200 and self.code < 300
end

function Response:json()
	return HttpService:JSONDecode(self.body)
end

return Response]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e862</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXaf2f6bf1fb234d418a7315c2c2fda811">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">init.spec</string>
							<string name="ScriptGuid">{a3a68a3a-ec94-40ff-8e07-9045c958f15b}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	it("should load", function()
		require(script.Parent)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e863</UniqueId>
						</Properties>
					</Item>
				</Item>
				<Item class="ModuleScript" referent="RBXf83ad81a7b7f4fd29572ff841455dc58">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Log</string>
						<string name="ScriptGuid">{b399855e-8bab-471b-92f4-43d70e015050}</string>
						<ProtectedString name="Source"><![CDATA[local Fmt = require(script.Parent.Fmt)

local Level = {
	Error = 0,
	Warning = 1,
	Info = 2,
	Debug = 3,
	Trace = 4,
}

local function getLogLevel()
	return Level.Info
end

local function addTags(tag, message)
	return tag .. message:gsub("\n", "\n" .. tag)
end

local TRACE_TAG = (" "):rep(15) .. "[Rojo-Trace] "
local INFO_TAG = (" "):rep(15) .. "[Rojo-Info] "
local DEBUG_TAG = (" "):rep(15) .. "[Rojo-Debug] "
local WARN_TAG = "[Rojo-Warn] "

local Log = {}

Log.Level = Level

function Log.setLogLevelThunk(thunk)
	getLogLevel = thunk
end

function Log.trace(template, ...)
	if getLogLevel() >= Level.Trace then
		print(addTags(TRACE_TAG, Fmt.fmt(template, ...)))
	end
end

function Log.info(template, ...)
	if getLogLevel() >= Level.Info then
		print(addTags(INFO_TAG, Fmt.fmt(template, ...)))
	end
end

function Log.debug(template, ...)
	if getLogLevel() >= Level.Debug then
		print(addTags(DEBUG_TAG, Fmt.fmt(template, ...)))
	end
end

function Log.warn(template, ...)
	if getLogLevel() >= Level.Warning then
		warn(addTags(WARN_TAG, Fmt.fmt(template, ...)))
	end
end

function Log.error(template, ...)
	error(Fmt.fmt(template, ...))
end

return Log]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e864</UniqueId>
					</Properties>
					<Item class="ModuleScript" referent="RBX00bdfb5b45f04c9ba1f56be12865de63">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">init.spec</string>
							<string name="ScriptGuid">{9ea5ca3e-4c5f-467c-abf1-29775b81e8fa}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	it("should load", function()
		require(script.Parent)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e865</UniqueId>
						</Properties>
					</Item>
				</Item>
				<Item class="Folder" referent="RBXe1d301307d20447db626fd2651096911">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Packages</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e866</UniqueId>
					</Properties>
					<Item class="ModuleScript" referent="RBX5a140ae0d488449b8ec7f8b5954e2b61">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Flipper</string>
							<string name="ScriptGuid">{42f91400-2877-413c-8548-79c0cf7350e8}</string>
							<ProtectedString name="Source"><![CDATA[return require(script.Parent._Index["reselim_flipper@2.0.0"]["flipper"])
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e867</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX7f5e88c86d324fb7b2032de14ff77cc6">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Promise</string>
							<string name="ScriptGuid">{0188dba9-6752-4d6e-86e1-294a2467d8d3}</string>
							<ProtectedString name="Source"><![CDATA[return require(script.Parent._Index["evaera_promise@4.0.0"]["promise"])
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e868</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXf8045c6e759f4959a46c2e4d21f03127">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Roact</string>
							<string name="ScriptGuid">{ce3c4967-9f60-4792-994d-b96546ceea43}</string>
							<ProtectedString name="Source"><![CDATA[return require(script.Parent._Index["roblox_roact@1.4.4"]["roact"])
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e869</UniqueId>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBX5f19b899a01c46c9b9ed900050f53f9f">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<string name="Name">_Index</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e86a</UniqueId>
						</Properties>
						<Item class="Folder" referent="RBX9f7215d6a55d401e830a3bcba7432414">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<string name="Name">evaera_promise@4.0.0</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e86b</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBXceac64de25744078b773f91173241d28">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">promise</string>
									<string name="ScriptGuid">{5c24b07a-4a4d-4b40-ad80-28ab2579af5b}</string>
									<ProtectedString name="Source"><![CDATA[--[[
	An implementation of Promises similar to Promise/A+.
]]

local ERROR_NON_PROMISE_IN_LIST = "Non-promise value passed into %s at index %s"
local ERROR_NON_LIST = "Please pass a list of promises to %s"
local ERROR_NON_FUNCTION = "Please pass a handler function to %s!"
local MODE_KEY_METATABLE = { __mode = "k" }

local function isCallable(value)
	if type(value) == "function" then
		return true
	end

	if type(value) == "table" then
		local metatable = getmetatable(value)
		if metatable and type(rawget(metatable, "__call")) == "function" then
			return true
		end
	end

	return false
end

--[[
	Creates an enum dictionary with some metamethods to prevent common mistakes.
]]
local function makeEnum(enumName, members)
	local enum = {}

	for _, memberName in ipairs(members) do
		enum[memberName] = memberName
	end

	return setmetatable(enum, {
		__index = function(_, k)
			error(string.format("%s is not in %s!", k, enumName), 2)
		end,
		__newindex = function()
			error(string.format("Creating new members in %s is not allowed!", enumName), 2)
		end,
	})
end

--[=[
	An object to represent runtime errors that occur during execution.
	Promises that experience an error like this will be rejected with
	an instance of this object.

	@class Error
]=]
local Error
do
	Error = {
		Kind = makeEnum("Promise.Error.Kind", {
			"ExecutionError",
			"AlreadyCancelled",
			"NotResolvedInTime",
			"TimedOut",
		}),
	}
	Error.__index = Error

	function Error.new(options, parent)
		options = options or {}
		return setmetatable({
			error = tostring(options.error) or "[This error has no error text.]",
			trace = options.trace,
			context = options.context,
			kind = options.kind,
			parent = parent,
			createdTick = os.clock(),
			createdTrace = debug.traceback(),
		}, Error)
	end

	function Error.is(anything)
		if type(anything) == "table" then
			local metatable = getmetatable(anything)

			if type(metatable) == "table" then
				return rawget(anything, "error") ~= nil and type(rawget(metatable, "extend")) == "function"
			end
		end

		return false
	end

	function Error.isKind(anything, kind)
		assert(kind ~= nil, "Argument #2 to Promise.Error.isKind must not be nil")

		return Error.is(anything) and anything.kind == kind
	end

	function Error:extend(options)
		options = options or {}

		options.kind = options.kind or self.kind

		return Error.new(options, self)
	end

	function Error:getErrorChain()
		local runtimeErrors = { self }

		while runtimeErrors[#runtimeErrors].parent do
			table.insert(runtimeErrors, runtimeErrors[#runtimeErrors].parent)
		end

		return runtimeErrors
	end

	function Error:__tostring()
		local errorStrings = {
			string.format("-- Promise.Error(%s) --", self.kind or "?"),
		}

		for _, runtimeError in ipairs(self:getErrorChain()) do
			table.insert(
				errorStrings,
				table.concat({
					runtimeError.trace or runtimeError.error,
					runtimeError.context,
				}, "\n")
			)
		end

		return table.concat(errorStrings, "\n")
	end
end

--[[
	Packs a number of arguments into a table and returns its length.

	Used to cajole varargs without dropping sparse values.
]]
local function pack(...)
	return select("#", ...), { ... }
end

--[[
	Returns first value (success), and packs all following values.
]]
local function packResult(success, ...)
	return success, select("#", ...), { ... }
end

local function makeErrorHandler(traceback)
	assert(traceback ~= nil, "traceback is nil")

	return function(err)
		-- If the error object is already a table, forward it directly.
		-- Should we extend the error here and add our own trace?

		if type(err) == "table" then
			return err
		end

		return Error.new({
			error = err,
			kind = Error.Kind.ExecutionError,
			trace = debug.traceback(tostring(err), 2),
			context = "Promise created at:\n\n" .. traceback,
		})
	end
end

--[[
	Calls a Promise executor with error handling.
]]
local function runExecutor(traceback, callback, ...)
	return packResult(xpcall(callback, makeErrorHandler(traceback), ...))
end

--[[
	Creates a function that invokes a callback with correct error handling and
	resolution mechanisms.
]]
local function createAdvancer(traceback, callback, resolve, reject)
	return function(...)
		local ok, resultLength, result = runExecutor(traceback, callback, ...)

		if ok then
			resolve(unpack(result, 1, resultLength))
		else
			reject(result[1])
		end
	end
end

local function isEmpty(t)
	return next(t) == nil
end

--[=[
	An enum value used to represent the Promise's status.
	@interface Status
	@tag enum
	@within Promise
	.Started "Started" -- The Promise is executing, and not settled yet.
	.Resolved "Resolved" -- The Promise finished successfully.
	.Rejected "Rejected" -- The Promise was rejected.
	.Cancelled "Cancelled" -- The Promise was cancelled before it finished.
]=]
--[=[
	@prop Status Status
	@within Promise
	@readonly
	@tag enums
	A table containing all members of the `Status` enum, e.g., `Promise.Status.Resolved`.
]=]
--[=[
	A Promise is an object that represents a value that will exist in the future, but doesn't right now.
	Promises allow you to then attach callbacks that can run once the value becomes available (known as *resolving*),
	or if an error has occurred (known as *rejecting*).

	@class Promise
	@__index prototype
]=]
local Promise = {
	Error = Error,
	Status = makeEnum("Promise.Status", { "Started", "Resolved", "Rejected", "Cancelled" }),
	_getTime = os.clock,
	_timeEvent = game:GetService("RunService").Heartbeat,
	_unhandledRejectionCallbacks = {},
}
Promise.prototype = {}
Promise.__index = Promise.prototype

function Promise._new(traceback, callback, parent)
	if parent ~= nil and not Promise.is(parent) then
		error("Argument #2 to Promise.new must be a promise or nil", 2)
	end

	local self = {
		-- The executor thread.
		_thread = nil,

		-- Used to locate where a promise was created
		_source = traceback,

		_status = Promise.Status.Started,

		-- A table containing a list of all results, whether success or failure.
		-- Only valid if _status is set to something besides Started
		_values = nil,

		-- Lua doesn't like sparse arrays very much, so we explicitly store the
		-- length of _values to handle middle nils.
		_valuesLength = -1,

		-- Tracks if this Promise has no error observers..
		_unhandledRejection = true,

		-- Queues representing functions we should invoke when we update!
		_queuedResolve = {},
		_queuedReject = {},
		_queuedFinally = {},

		-- The function to run when/if this promise is cancelled.
		_cancellationHook = nil,

		-- The "parent" of this promise in a promise chain. Required for
		-- cancellation propagation upstream.
		_parent = parent,

		-- Consumers are Promises that have chained onto this one.
		-- We track them for cancellation propagation downstream.
		_consumers = setmetatable({}, MODE_KEY_METATABLE),
	}

	if parent and parent._status == Promise.Status.Started then
		parent._consumers[self] = true
	end

	setmetatable(self, Promise)

	local function resolve(...)
		self:_resolve(...)
	end

	local function reject(...)
		self:_reject(...)
	end

	local function onCancel(cancellationHook)
		if cancellationHook then
			if self._status == Promise.Status.Cancelled then
				cancellationHook()
			else
				self._cancellationHook = cancellationHook
			end
		end

		return self._status == Promise.Status.Cancelled
	end

	self._thread = coroutine.create(function()
		local ok, _, result = runExecutor(self._source, callback, resolve, reject, onCancel)

		if not ok then
			reject(result[1])
		end
	end)

	task.spawn(self._thread)

	return self
end

--[=[
	Construct a new Promise that will be resolved or rejected with the given callbacks.

	If you `resolve` with a Promise, it will be chained onto.

	You can safely yield within the executor function and it will not block the creating thread.

	```lua
	local myFunction()
		return Promise.new(function(resolve, reject, onCancel)
			wait(1)
			resolve("Hello world!")
		end)
	end

	myFunction():andThen(print)
	```

	You do not need to use `pcall` within a Promise. Errors that occur during execution will be caught and turned into a rejection automatically. If `error()` is called with a table, that table will be the rejection value. Otherwise, string errors will be converted into `Promise.Error(Promise.Error.Kind.ExecutionError)` objects for tracking debug information.

	You may register an optional cancellation hook by using the `onCancel` argument:

	* This should be used to abort any ongoing operations leading up to the promise being settled.
	* Call the `onCancel` function with a function callback as its only argument to set a hook which will in turn be called when/if the promise is cancelled.
	* `onCancel` returns `true` if the Promise was already cancelled when you called `onCancel`.
	* Calling `onCancel` with no argument will not override a previously set cancellation hook, but it will still return `true` if the Promise is currently cancelled.
	* You can set the cancellation hook at any time before resolving.
	* When a promise is cancelled, calls to `resolve` or `reject` will be ignored, regardless of if you set a cancellation hook or not.

	:::caution
	If the Promise is cancelled, the `executor` thread is closed with `coroutine.close` after the cancellation hook is called.

	You must perform any cleanup code in the cancellation hook: any time your executor yields, it **may never resume**.
	:::

	@param executor (resolve: (...: any) -> (), reject: (...: any) -> (), onCancel: (abortHandler?: () -> ()) -> boolean) -> ()
	@return Promise
]=]
function Promise.new(executor)
	return Promise._new(debug.traceback(nil, 2), executor)
end

function Promise:__tostring()
	return string.format("Promise(%s)", self._status)
end

--[=[
	The same as [Promise.new](/api/Promise#new), except execution begins after the next `Heartbeat` event.

	This is a spiritual replacement for `spawn`, but it does not suffer from the same [issues](https://eryn.io/gist/3db84579866c099cdd5bb2ff37947cec) as `spawn`.

	```lua
	local function waitForChild(instance, childName, timeout)
	  return Promise.defer(function(resolve, reject)
		local child = instance:WaitForChild(childName, timeout)

		;(child and resolve or reject)(child)
	  end)
	end
	```

	@param executor (resolve: (...: any) -> (), reject: (...: any) -> (), onCancel: (abortHandler?: () -> ()) -> boolean) -> ()
	@return Promise
]=]
function Promise.defer(executor)
	local traceback = debug.traceback(nil, 2)
	local promise
	promise = Promise._new(traceback, function(resolve, reject, onCancel)
		local connection
		connection = Promise._timeEvent:Connect(function()
			connection:Disconnect()
			local ok, _, result = runExecutor(traceback, executor, resolve, reject, onCancel)

			if not ok then
				reject(result[1])
			end
		end)
	end)

	return promise
end

-- Backwards compatibility
Promise.async = Promise.defer

--[=[
	Creates an immediately resolved Promise with the given value.

	```lua
	-- Example using Promise.resolve to deliver cached values:
	function getSomething(name)
		if cache[name] then
			return Promise.resolve(cache[name])
		else
			return Promise.new(function(resolve, reject)
				local thing = getTheThing()
				cache[name] = thing

				resolve(thing)
			end)
		end
	end
	```

	@param ... any
	@return Promise<...any>
]=]
function Promise.resolve(...)
	local length, values = pack(...)
	return Promise._new(debug.traceback(nil, 2), function(resolve)
		resolve(unpack(values, 1, length))
	end)
end

--[=[
	Creates an immediately rejected Promise with the given value.

	:::caution
	Something needs to consume this rejection (i.e. `:catch()` it), otherwise it will emit an unhandled Promise rejection warning on the next frame. Thus, you should not create and store rejected Promises for later use. Only create them on-demand as needed.
	:::

	@param ... any
	@return Promise<...any>
]=]
function Promise.reject(...)
	local length, values = pack(...)
	return Promise._new(debug.traceback(nil, 2), function(_, reject)
		reject(unpack(values, 1, length))
	end)
end

--[[
	Runs a non-promise-returning function as a Promise with the
  given arguments.
]]
function Promise._try(traceback, callback, ...)
	local valuesLength, values = pack(...)

	return Promise._new(traceback, function(resolve)
		resolve(callback(unpack(values, 1, valuesLength)))
	end)
end

--[=[
	Begins a Promise chain, calling a function and returning a Promise resolving with its return value. If the function errors, the returned Promise will be rejected with the error. You can safely yield within the Promise.try callback.

	:::info
	`Promise.try` is similar to [Promise.promisify](#promisify), except the callback is invoked immediately instead of returning a new function.
	:::

	```lua
	Promise.try(function()
		return math.random(1, 2) == 1 and "ok" or error("Oh an error!")
	end)
		:andThen(function(text)
			print(text)
		end)
		:catch(function(err)
			warn("Something went wrong")
		end)
	```

	@param callback (...: T...) -> ...any
	@param ... T... -- Additional arguments passed to `callback`
	@return Promise
]=]
function Promise.try(callback, ...)
	return Promise._try(debug.traceback(nil, 2), callback, ...)
end

--[[
	Returns a new promise that:
		* is resolved when all input promises resolve
		* is rejected if ANY input promises reject
]]
function Promise._all(traceback, promises, amount)
	if type(promises) ~= "table" then
		error(string.format(ERROR_NON_LIST, "Promise.all"), 3)
	end

	-- We need to check that each value is a promise here so that we can produce
	-- a proper error rather than a rejected promise with our error.
	for i, promise in pairs(promises) do
		if not Promise.is(promise) then
			error(string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.all", tostring(i)), 3)
		end
	end

	-- If there are no values then return an already resolved promise.
	if #promises == 0 or amount == 0 then
		return Promise.resolve({})
	end

	return Promise._new(traceback, function(resolve, reject, onCancel)
		-- An array to contain our resolved values from the given promises.
		local resolvedValues = {}
		local newPromises = {}

		-- Keep a count of resolved promises because just checking the resolved
		-- values length wouldn't account for promises that resolve with nil.
		local resolvedCount = 0
		local rejectedCount = 0
		local done = false

		local function cancel()
			for _, promise in ipairs(newPromises) do
				promise:cancel()
			end
		end

		-- Called when a single value is resolved and resolves if all are done.
		local function resolveOne(i, ...)
			if done then
				return
			end

			resolvedCount = resolvedCount + 1

			if amount == nil then
				resolvedValues[i] = ...
			else
				resolvedValues[resolvedCount] = ...
			end

			if resolvedCount >= (amount or #promises) then
				done = true
				resolve(resolvedValues)
				cancel()
			end
		end

		onCancel(cancel)

		-- We can assume the values inside `promises` are all promises since we
		-- checked above.
		for i, promise in ipairs(promises) do
			newPromises[i] = promise:andThen(function(...)
				resolveOne(i, ...)
			end, function(...)
				rejectedCount = rejectedCount + 1

				if amount == nil or #promises - rejectedCount < amount then
					cancel()
					done = true

					reject(...)
				end
			end)
		end

		if done then
			cancel()
		end
	end)
end

--[=[
	Accepts an array of Promises and returns a new promise that:
	* is resolved after all input promises resolve.
	* is rejected if *any* input promises reject.

	:::info
	Only the first return value from each promise will be present in the resulting array.
	:::

	After any input Promise rejects, all other input Promises that are still pending will be cancelled if they have no other consumers.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.all(promises)
	```

	@param promises {Promise<T>}
	@return Promise<{T}>
]=]
function Promise.all(promises)
	return Promise._all(debug.traceback(nil, 2), promises)
end

--[=[
	Folds an array of values or promises into a single value. The array is traversed sequentially.

	The reducer function can return a promise or value directly. Each iteration receives the resolved value from the previous, and the first receives your defined initial value.

	The folding will stop at the first rejection encountered.
	```lua
	local basket = {"blueberry", "melon", "pear", "melon"}
	Promise.fold(basket, function(cost, fruit)
		if fruit == "blueberry" then
			return cost -- blueberries are free!
		else
			-- call a function that returns a promise with the fruit price
			return fetchPrice(fruit):andThen(function(fruitCost)
				return cost + fruitCost
			end)
		end
	end, 0)
	```

	@since v3.1.0
	@param list {T | Promise<T>}
	@param reducer (accumulator: U, value: T, index: number) -> U | Promise<U>
	@param initialValue U
]=]
function Promise.fold(list, reducer, initialValue)
	assert(type(list) == "table", "Bad argument #1 to Promise.fold: must be a table")
	assert(isCallable(reducer), "Bad argument #2 to Promise.fold: must be a function")

	local accumulator = Promise.resolve(initialValue)
	return Promise.each(list, function(resolvedElement, i)
		accumulator = accumulator:andThen(function(previousValueResolved)
			return reducer(previousValueResolved, resolvedElement, i)
		end)
	end):andThen(function()
		return accumulator
	end)
end

--[=[
	Accepts an array of Promises and returns a Promise that is resolved as soon as `count` Promises are resolved from the input array. The resolved array values are in the order that the Promises resolved in. When this Promise resolves, all other pending Promises are cancelled if they have no other consumers.

	`count` 0 results in an empty array. The resultant array will never have more than `count` elements.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.some(promises, 2) -- Only resolves with first 2 promises to resolve
	```

	@param promises {Promise<T>}
	@param count number
	@return Promise<{T}>
]=]
function Promise.some(promises, count)
	assert(type(count) == "number", "Bad argument #2 to Promise.some: must be a number")

	return Promise._all(debug.traceback(nil, 2), promises, count)
end

--[=[
	Accepts an array of Promises and returns a Promise that is resolved as soon as *any* of the input Promises resolves. It will reject only if *all* input Promises reject. As soon as one Promises resolves, all other pending Promises are cancelled if they have no other consumers.

	Resolves directly with the value of the first resolved Promise. This is essentially [[Promise.some]] with `1` count, except the Promise resolves with the value directly instead of an array with one element.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.any(promises) -- Resolves with first value to resolve (only rejects if all 3 rejected)
	```

	@param promises {Promise<T>}
	@return Promise<T>
]=]
function Promise.any(promises)
	return Promise._all(debug.traceback(nil, 2), promises, 1):andThen(function(values)
		return values[1]
	end)
end

--[=[
	Accepts an array of Promises and returns a new Promise that resolves with an array of in-place Statuses when all input Promises have settled. This is equivalent to mapping `promise:finally` over the array of Promises.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.allSettled(promises)
	```

	@param promises {Promise<T>}
	@return Promise<{Status}>
]=]
function Promise.allSettled(promises)
	if type(promises) ~= "table" then
		error(string.format(ERROR_NON_LIST, "Promise.allSettled"), 2)
	end

	-- We need to check that each value is a promise here so that we can produce
	-- a proper error rather than a rejected promise with our error.
	for i, promise in pairs(promises) do
		if not Promise.is(promise) then
			error(string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.allSettled", tostring(i)), 2)
		end
	end

	-- If there are no values then return an already resolved promise.
	if #promises == 0 then
		return Promise.resolve({})
	end

	return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
		-- An array to contain our resolved values from the given promises.
		local fates = {}
		local newPromises = {}

		-- Keep a count of resolved promises because just checking the resolved
		-- values length wouldn't account for promises that resolve with nil.
		local finishedCount = 0

		-- Called when a single value is resolved and resolves if all are done.
		local function resolveOne(i, ...)
			finishedCount = finishedCount + 1

			fates[i] = ...

			if finishedCount >= #promises then
				resolve(fates)
			end
		end

		onCancel(function()
			for _, promise in ipairs(newPromises) do
				promise:cancel()
			end
		end)

		-- We can assume the values inside `promises` are all promises since we
		-- checked above.
		for i, promise in ipairs(promises) do
			newPromises[i] = promise:finally(function(...)
				resolveOne(i, ...)
			end)
		end
	end)
end

--[=[
	Accepts an array of Promises and returns a new promise that is resolved or rejected as soon as any Promise in the array resolves or rejects.

	:::warning
	If the first Promise to settle from the array settles with a rejection, the resulting Promise from `race` will reject.

	If you instead want to tolerate rejections, and only care about at least one Promise resolving, you should use [Promise.any](#any) or [Promise.some](#some) instead.
	:::

	All other Promises that don't win the race will be cancelled if they have no other consumers.

	```lua
	local promises = {
		returnsAPromise("example 1"),
		returnsAPromise("example 2"),
		returnsAPromise("example 3"),
	}

	return Promise.race(promises) -- Only returns 1st value to resolve or reject
	```

	@param promises {Promise<T>}
	@return Promise<T>
]=]
function Promise.race(promises)
	assert(type(promises) == "table", string.format(ERROR_NON_LIST, "Promise.race"))

	for i, promise in pairs(promises) do
		assert(Promise.is(promise), string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.race", tostring(i)))
	end

	return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
		local newPromises = {}
		local finished = false

		local function cancel()
			for _, promise in ipairs(newPromises) do
				promise:cancel()
			end
		end

		local function finalize(callback)
			return function(...)
				cancel()
				finished = true
				return callback(...)
			end
		end

		if onCancel(finalize(reject)) then
			return
		end

		for i, promise in ipairs(promises) do
			newPromises[i] = promise:andThen(finalize(resolve), finalize(reject))
		end

		if finished then
			cancel()
		end
	end)
end

--[=[
	Iterates serially over the given an array of values, calling the predicate callback on each value before continuing.

	If the predicate returns a Promise, we wait for that Promise to resolve before moving on to the next item
	in the array.

	:::info
	`Promise.each` is similar to `Promise.all`, except the Promises are ran in order instead of all at once.

	But because Promises are eager, by the time they are created, they're already running. Thus, we need a way to defer creation of each Promise until a later time.

	The predicate function exists as a way for us to operate on our data instead of creating a new closure for each Promise. If you would prefer, you can pass in an array of functions, and in the predicate, call the function and return its return value.
	:::

	```lua
	Promise.each({
		"foo",
		"bar",
		"baz",
		"qux"
	}, function(value, index)
		return Promise.delay(1):andThen(function()
		print(("%d) Got %s!"):format(index, value))
		end)
	end)

	--[[
		(1 second passes)
		> 1) Got foo!
		(1 second passes)
		> 2) Got bar!
		(1 second passes)
		> 3) Got baz!
		(1 second passes)
		> 4) Got qux!
	]]
	```

	If the Promise a predicate returns rejects, the Promise from `Promise.each` is also rejected with the same value.

	If the array of values contains a Promise, when we get to that point in the list, we wait for the Promise to resolve before calling the predicate with the value.

	If a Promise in the array of values is already Rejected when `Promise.each` is called, `Promise.each` rejects with that value immediately (the predicate callback will never be called even once). If a Promise in the list is already Cancelled when `Promise.each` is called, `Promise.each` rejects with `Promise.Error(Promise.Error.Kind.AlreadyCancelled`). If a Promise in the array of values is Started at first, but later rejects, `Promise.each` will reject with that value and iteration will not continue once iteration encounters that value.

	Returns a Promise containing an array of the returned/resolved values from the predicate for each item in the array of values.

	If this Promise returned from `Promise.each` rejects or is cancelled for any reason, the following are true:
	- Iteration will not continue.
	- Any Promises within the array of values will now be cancelled if they have no other consumers.
	- The Promise returned from the currently active predicate will be cancelled if it hasn't resolved yet.

	@since 3.0.0
	@param list {T | Promise<T>}
	@param predicate (value: T, index: number) -> U | Promise<U>
	@return Promise<{U}>
]=]
function Promise.each(list, predicate)
	assert(type(list) == "table", string.format(ERROR_NON_LIST, "Promise.each"))
	assert(isCallable(predicate), string.format(ERROR_NON_FUNCTION, "Promise.each"))

	return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
		local results = {}
		local promisesToCancel = {}

		local cancelled = false

		local function cancel()
			for _, promiseToCancel in ipairs(promisesToCancel) do
				promiseToCancel:cancel()
			end
		end

		onCancel(function()
			cancelled = true

			cancel()
		end)

		-- We need to preprocess the list of values and look for Promises.
		-- If we find some, we must register our andThen calls now, so that those Promises have a consumer
		-- from us registered. If we don't do this, those Promises might get cancelled by something else
		-- before we get to them in the series because it's not possible to tell that we plan to use it
		-- unless we indicate it here.

		local preprocessedList = {}

		for index, value in ipairs(list) do
			if Promise.is(value) then
				if value:getStatus() == Promise.Status.Cancelled then
					cancel()
					return reject(Error.new({
						error = "Promise is cancelled",
						kind = Error.Kind.AlreadyCancelled,
						context = string.format(
							"The Promise that was part of the array at index %d passed into Promise.each was already cancelled when Promise.each began.\n\nThat Promise was created at:\n\n%s",
							index,
							value._source
						),
					}))
				elseif value:getStatus() == Promise.Status.Rejected then
					cancel()
					return reject(select(2, value:await()))
				end

				-- Chain a new Promise from this one so we only cancel ours
				local ourPromise = value:andThen(function(...)
					return ...
				end)

				table.insert(promisesToCancel, ourPromise)
				preprocessedList[index] = ourPromise
			else
				preprocessedList[index] = value
			end
		end

		for index, value in ipairs(preprocessedList) do
			if Promise.is(value) then
				local success
				success, value = value:await()

				if not success then
					cancel()
					return reject(value)
				end
			end

			if cancelled then
				return
			end

			local predicatePromise = Promise.resolve(predicate(value, index))

			table.insert(promisesToCancel, predicatePromise)

			local success, result = predicatePromise:await()

			if not success then
				cancel()
				return reject(result)
			end

			results[index] = result
		end

		resolve(results)
	end)
end

--[=[
	Checks whether the given object is a Promise via duck typing. This only checks if the object is a table and has an `andThen` method.

	@param object any
	@return boolean -- `true` if the given `object` is a Promise.
]=]
function Promise.is(object)
	if type(object) ~= "table" then
		return false
	end

	local objectMetatable = getmetatable(object)

	if objectMetatable == Promise then
		-- The Promise came from this library.
		return true
	elseif objectMetatable == nil then
		-- No metatable, but we should still chain onto tables with andThen methods
		return isCallable(object.andThen)
	elseif
		type(objectMetatable) == "table"
		and type(rawget(objectMetatable, "__index")) == "table"
		and isCallable(rawget(rawget(objectMetatable, "__index"), "andThen"))
	then
		-- Maybe this came from a different or older Promise library.
		return true
	end

	return false
end

--[=[
	Wraps a function that yields into one that returns a Promise.

	Any errors that occur while executing the function will be turned into rejections.

	:::info
	`Promise.promisify` is similar to [Promise.try](#try), except the callback is returned as a callable function instead of being invoked immediately.
	:::

	```lua
	local sleep = Promise.promisify(wait)

	sleep(1):andThen(print)
	```

	```lua
	local isPlayerInGroup = Promise.promisify(function(player, groupId)
		return player:IsInGroup(groupId)
	end)
	```

	@param callback (...: any) -> ...any
	@return (...: any) -> Promise
]=]
function Promise.promisify(callback)
	return function(...)
		return Promise._try(debug.traceback(nil, 2), callback, ...)
	end
end

--[=[
	Returns a Promise that resolves after `seconds` seconds have passed. The Promise resolves with the actual amount of time that was waited.

	This function is **not** a wrapper around `wait`. `Promise.delay` uses a custom scheduler which provides more accurate timing. As an optimization, cancelling this Promise instantly removes the task from the scheduler.

	:::warning
	Passing `NaN`, infinity, or a number less than 1/60 is equivalent to passing 1/60.
	:::

	```lua
		Promise.delay(5):andThenCall(print, "This prints after 5 seconds")
	```

	@function delay
	@within Promise
	@param seconds number
	@return Promise<number>
]=]
do
	-- uses a sorted doubly linked list (queue) to achieve O(1) remove operations and O(n) for insert

	-- the initial node in the linked list
	local first
	local connection

	function Promise.delay(seconds)
		assert(type(seconds) == "number", "Bad argument #1 to Promise.delay, must be a number.")
		-- If seconds is -INF, INF, NaN, or less than 1 / 60, assume seconds is 1 / 60.
		-- This mirrors the behavior of wait()
		if not (seconds >= 1 / 60) or seconds == math.huge then
			seconds = 1 / 60
		end

		return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
			local startTime = Promise._getTime()
			local endTime = startTime + seconds

			local node = {
				resolve = resolve,
				startTime = startTime,
				endTime = endTime,
			}

			if connection == nil then -- first is nil when connection is nil
				first = node
				connection = Promise._timeEvent:Connect(function()
					local threadStart = Promise._getTime()

					while first ~= nil and first.endTime < threadStart do
						local current = first
						first = current.next

						if first == nil then
							connection:Disconnect()
							connection = nil
						else
							first.previous = nil
						end

						current.resolve(Promise._getTime() - current.startTime)
					end
				end)
			else -- first is non-nil
				if first.endTime < endTime then -- if `node` should be placed after `first`
					-- we will insert `node` between `current` and `next`
					-- (i.e. after `current` if `next` is nil)
					local current = first
					local next = current.next

					while next ~= nil and next.endTime < endTime do
						current = next
						next = current.next
					end

					-- `current` must be non-nil, but `next` could be `nil` (i.e. last item in list)
					current.next = node
					node.previous = current

					if next ~= nil then
						node.next = next
						next.previous = node
					end
				else
					-- set `node` to `first`
					node.next = first
					first.previous = node
					first = node
				end
			end

			onCancel(function()
				-- remove node from queue
				local next = node.next

				if first == node then
					if next == nil then -- if `node` is the first and last
						connection:Disconnect()
						connection = nil
					else -- if `node` is `first` and not the last
						next.previous = nil
					end
					first = next
				else
					local previous = node.previous
					-- since `node` is not `first`, then we know `previous` is non-nil
					previous.next = next

					if next ~= nil then
						next.previous = previous
					end
				end
			end)
		end)
	end
end

--[=[
	Returns a new Promise that resolves if the chained Promise resolves within `seconds` seconds, or rejects if execution time exceeds `seconds`. The chained Promise will be cancelled if the timeout is reached.

	Rejects with `rejectionValue` if it is non-nil. If a `rejectionValue` is not given, it will reject with a `Promise.Error(Promise.Error.Kind.TimedOut)`. This can be checked with [[Error.isKind]].

	```lua
	getSomething():timeout(5):andThen(function(something)
		-- got something and it only took at max 5 seconds
	end):catch(function(e)
		-- Either getting something failed or the time was exceeded.

		if Promise.Error.isKind(e, Promise.Error.Kind.TimedOut) then
			warn("Operation timed out!")
		else
			warn("Operation encountered an error!")
		end
	end)
	```

	Sugar for:

	```lua
	Promise.race({
		Promise.delay(seconds):andThen(function()
			return Promise.reject(
				rejectionValue == nil
				and Promise.Error.new({ kind = Promise.Error.Kind.TimedOut })
				or rejectionValue
			)
		end),
		promise
	})
	```

	@param seconds number
	@param rejectionValue? any -- The value to reject with if the timeout is reached
	@return Promise
]=]
function Promise.prototype:timeout(seconds, rejectionValue)
	local traceback = debug.traceback(nil, 2)

	return Promise.race({
		Promise.delay(seconds):andThen(function()
			return Promise.reject(rejectionValue == nil and Error.new({
				kind = Error.Kind.TimedOut,
				error = "Timed out",
				context = string.format(
					"Timeout of %d seconds exceeded.\n:timeout() called at:\n\n%s",
					seconds,
					traceback
				),
			}) or rejectionValue)
		end),
		self,
	})
end

--[=[
	Returns the current Promise status.

	@return Status
]=]
function Promise.prototype:getStatus()
	return self._status
end

--[[
	Creates a new promise that receives the result of this promise.

	The given callbacks are invoked depending on that result.
]]
function Promise.prototype:_andThen(traceback, successHandler, failureHandler)
	self._unhandledRejection = false

	-- If we are already cancelled, we return a cancelled Promise
	if self._status == Promise.Status.Cancelled then
		local promise = Promise.new(function() end)
		promise:cancel()

		return promise
	end

	-- Create a new promise to follow this part of the chain
	return Promise._new(traceback, function(resolve, reject, onCancel)
		-- Our default callbacks just pass values onto the next promise.
		-- This lets success and failure cascade correctly!

		local successCallback = resolve
		if successHandler then
			successCallback = createAdvancer(traceback, successHandler, resolve, reject)
		end

		local failureCallback = reject
		if failureHandler then
			failureCallback = createAdvancer(traceback, failureHandler, resolve, reject)
		end

		if self._status == Promise.Status.Started then
			-- If we haven't resolved yet, put ourselves into the queue
			table.insert(self._queuedResolve, successCallback)
			table.insert(self._queuedReject, failureCallback)

			onCancel(function()
				-- These are guaranteed to exist because the cancellation handler is guaranteed to only
				-- be called at most once
				if self._status == Promise.Status.Started then
					table.remove(self._queuedResolve, table.find(self._queuedResolve, successCallback))
					table.remove(self._queuedReject, table.find(self._queuedReject, failureCallback))
				end
			end)
		elseif self._status == Promise.Status.Resolved then
			-- This promise has already resolved! Trigger success immediately.
			successCallback(unpack(self._values, 1, self._valuesLength))
		elseif self._status == Promise.Status.Rejected then
			-- This promise died a terrible death! Trigger failure immediately.
			failureCallback(unpack(self._values, 1, self._valuesLength))
		end
	end, self)
end

--[=[
	Chains onto an existing Promise and returns a new Promise.

	:::warning
	Within the failure handler, you should never assume that the rejection value is a string. Some rejections within the Promise library are represented by [[Error]] objects. If you want to treat it as a string for debugging, you should call `tostring` on it first.
	:::

	You can return a Promise from the success or failure handler and it will be chained onto.

	Calling `andThen` on a cancelled Promise returns a cancelled Promise.

	:::tip
	If the Promise returned by `andThen` is cancelled, `successHandler` and `failureHandler` will not run.

	To run code no matter what, use [Promise:finally].
	:::

	@param successHandler (...: any) -> ...any
	@param failureHandler? (...: any) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:andThen(successHandler, failureHandler)
	assert(successHandler == nil or isCallable(successHandler), string.format(ERROR_NON_FUNCTION, "Promise:andThen"))
	assert(failureHandler == nil or isCallable(failureHandler), string.format(ERROR_NON_FUNCTION, "Promise:andThen"))

	return self:_andThen(debug.traceback(nil, 2), successHandler, failureHandler)
end

--[=[
	Shorthand for `Promise:andThen(nil, failureHandler)`.

	Returns a Promise that resolves if the `failureHandler` worked without encountering an additional error.

	:::warning
	Within the failure handler, you should never assume that the rejection value is a string. Some rejections within the Promise library are represented by [[Error]] objects. If you want to treat it as a string for debugging, you should call `tostring` on it first.
	:::

	Calling `catch` on a cancelled Promise returns a cancelled Promise.

	:::tip
	If the Promise returned by `catch` is cancelled,  `failureHandler` will not run.

	To run code no matter what, use [Promise:finally].
	:::

	@param failureHandler (...: any) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:catch(failureHandler)
	assert(failureHandler == nil or isCallable(failureHandler), string.format(ERROR_NON_FUNCTION, "Promise:catch"))
	return self:_andThen(debug.traceback(nil, 2), nil, failureHandler)
end

--[=[
	Similar to [Promise.andThen](#andThen), except the return value is the same as the value passed to the handler. In other words, you can insert a `:tap` into a Promise chain without affecting the value that downstream Promises receive.

	```lua
		getTheValue()
		:tap(print)
		:andThen(function(theValue)
			print("Got", theValue, "even though print returns nil!")
		end)
	```

	If you return a Promise from the tap handler callback, its value will be discarded but `tap` will still wait until it resolves before passing the original value through.

	@param tapHandler (...: any) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:tap(tapHandler)
	assert(isCallable(tapHandler), string.format(ERROR_NON_FUNCTION, "Promise:tap"))
	return self:_andThen(debug.traceback(nil, 2), function(...)
		local callbackReturn = tapHandler(...)

		if Promise.is(callbackReturn) then
			local length, values = pack(...)
			return callbackReturn:andThen(function()
				return unpack(values, 1, length)
			end)
		end

		return ...
	end)
end

--[=[
	Attaches an `andThen` handler to this Promise that calls the given callback with the predefined arguments. The resolved value is discarded.

	```lua
		promise:andThenCall(someFunction, "some", "arguments")
	```

	This is sugar for

	```lua
		promise:andThen(function()
		return someFunction("some", "arguments")
		end)
	```

	@param callback (...: any) -> any
	@param ...? any -- Additional arguments which will be passed to `callback`
	@return Promise
]=]
function Promise.prototype:andThenCall(callback, ...)
	assert(isCallable(callback), string.format(ERROR_NON_FUNCTION, "Promise:andThenCall"))
	local length, values = pack(...)
	return self:_andThen(debug.traceback(nil, 2), function()
		return callback(unpack(values, 1, length))
	end)
end

--[=[
	Attaches an `andThen` handler to this Promise that discards the resolved value and returns the given value from it.

	```lua
		promise:andThenReturn("some", "values")
	```

	This is sugar for

	```lua
		promise:andThen(function()
			return "some", "values"
		end)
	```

	:::caution
	Promises are eager, so if you pass a Promise to `andThenReturn`, it will begin executing before `andThenReturn` is reached in the chain. Likewise, if you pass a Promise created from [[Promise.reject]] into `andThenReturn`, it's possible that this will trigger the unhandled rejection warning. If you need to return a Promise, it's usually best practice to use [[Promise.andThen]].
	:::

	@param ... any -- Values to return from the function
	@return Promise
]=]
function Promise.prototype:andThenReturn(...)
	local length, values = pack(...)
	return self:_andThen(debug.traceback(nil, 2), function()
		return unpack(values, 1, length)
	end)
end

--[=[
	Cancels this promise, preventing the promise from resolving or rejecting. Does not do anything if the promise is already settled.

	Cancellations will propagate upwards and downwards through chained promises.

	Promises will only be cancelled if all of their consumers are also cancelled. This is to say that if you call `andThen` twice on the same promise, and you cancel only one of the child promises, it will not cancel the parent promise until the other child promise is also cancelled.

	```lua
		promise:cancel()
	```
]=]
function Promise.prototype:cancel()
	if self._status ~= Promise.Status.Started then
		return
	end

	self._status = Promise.Status.Cancelled

	if self._cancellationHook then
		self._cancellationHook()
	end

	coroutine.close(self._thread)

	if self._parent then
		self._parent:_consumerCancelled(self)
	end

	for child in pairs(self._consumers) do
		child:cancel()
	end

	self:_finalize()
end

--[[
	Used to decrease the number of consumers by 1, and if there are no more,
	cancel this promise.
]]
function Promise.prototype:_consumerCancelled(consumer)
	if self._status ~= Promise.Status.Started then
		return
	end

	self._consumers[consumer] = nil

	if next(self._consumers) == nil then
		self:cancel()
	end
end

--[[
	Used to set a handler for when the promise resolves, rejects, or is
	cancelled.
]]
function Promise.prototype:_finally(traceback, finallyHandler)
	self._unhandledRejection = false

	local promise = Promise._new(traceback, function(resolve, reject, onCancel)
		local handlerPromise

		onCancel(function()
			-- The finally Promise is not a proper consumer of self. We don't care about the resolved value.
			-- All we care about is running at the end. Therefore, if self has no other consumers, it's safe to
			-- cancel. We don't need to hold out cancelling just because there's a finally handler.
			self:_consumerCancelled(self)

			if handlerPromise then
				handlerPromise:cancel()
			end
		end)

		local finallyCallback = resolve
		if finallyHandler then
			finallyCallback = function(...)
				local callbackReturn = finallyHandler(...)

				if Promise.is(callbackReturn) then
					handlerPromise = callbackReturn

					callbackReturn
						:finally(function(status)
							if status ~= Promise.Status.Rejected then
								resolve(self)
							end
						end)
						:catch(function(...)
							reject(...)
						end)
				else
					resolve(self)
				end
			end
		end

		if self._status == Promise.Status.Started then
			-- The promise is not settled, so queue this.
			table.insert(self._queuedFinally, finallyCallback)
		else
			-- The promise already settled or was cancelled, run the callback now.
			finallyCallback(self._status)
		end
	end)

	return promise
end

--[=[
	Set a handler that will be called regardless of the promise's fate. The handler is called when the promise is
	resolved, rejected, *or* cancelled.

	Returns a new Promise that:
	- resolves with the same values that this Promise resolves with.
	- rejects with the same values that this Promise rejects with.
	- is cancelled if this Promise is cancelled.

	If the value you return from the handler is a Promise:
	- We wait for the Promise to resolve, but we ultimately discard the resolved value.
	- If the returned Promise rejects, the Promise returned from `finally` will reject with the rejected value from the
	*returned* promise.
	- If the `finally` Promise is cancelled, and you returned a Promise from the handler, we cancel that Promise too.

	Otherwise, the return value from the `finally` handler is entirely discarded.

	:::note Cancellation
	As of Promise v4, `Promise:finally` does not count as a consumer of the parent Promise for cancellation purposes.
	This means that if all of a Promise's consumers are cancelled and the only remaining callbacks are finally handlers,
	the Promise is cancelled and the finally callbacks run then and there.

	Cancellation still propagates through the `finally` Promise though: if you cancel the `finally` Promise, it can cancel
	its parent Promise if it had no other consumers. Likewise, if the parent Promise is cancelled, the `finally` Promise
	will also be cancelled.
	:::

	```lua
	local thing = createSomething()

	doSomethingWith(thing)
		:andThen(function()
			print("It worked!")
			-- do something..
		end)
		:catch(function()
			warn("Oh no it failed!")
		end)
		:finally(function()
			-- either way, destroy thing

			thing:Destroy()
		end)

	```

	@param finallyHandler (status: Status) -> ...any
	@return Promise<...any>
]=]
function Promise.prototype:finally(finallyHandler)
	assert(finallyHandler == nil or isCallable(finallyHandler), string.format(ERROR_NON_FUNCTION, "Promise:finally"))
	return self:_finally(debug.traceback(nil, 2), finallyHandler)
end

--[=[
	Same as `andThenCall`, except for `finally`.

	Attaches a `finally` handler to this Promise that calls the given callback with the predefined arguments.

	@param callback (...: any) -> any
	@param ...? any -- Additional arguments which will be passed to `callback`
	@return Promise
]=]
function Promise.prototype:finallyCall(callback, ...)
	assert(isCallable(callback), string.format(ERROR_NON_FUNCTION, "Promise:finallyCall"))
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return callback(unpack(values, 1, length))
	end)
end

--[=[
	Attaches a `finally` handler to this Promise that discards the resolved value and returns the given value from it.

	```lua
		promise:finallyReturn("some", "values")
	```

	This is sugar for

	```lua
		promise:finally(function()
			return "some", "values"
		end)
	```

	@param ... any -- Values to return from the function
	@return Promise
]=]
function Promise.prototype:finallyReturn(...)
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return unpack(values, 1, length)
	end)
end

--[=[
	Yields the current thread until the given Promise completes. Returns the Promise's status, followed by the values that the promise resolved or rejected with.

	@yields
	@return Status -- The Status representing the fate of the Promise
	@return ...any -- The values the Promise resolved or rejected with.
]=]
function Promise.prototype:awaitStatus()
	self._unhandledRejection = false

	if self._status == Promise.Status.Started then
		local thread = coroutine.running()

		self
			:finally(function()
				task.spawn(thread)
			end)
			-- The finally promise can propagate rejections, so we attach a catch handler to prevent the unhandled
			-- rejection warning from appearing
			:catch(
				function() end
			)

		coroutine.yield()
	end

	if self._status == Promise.Status.Resolved then
		return self._status, unpack(self._values, 1, self._valuesLength)
	elseif self._status == Promise.Status.Rejected then
		return self._status, unpack(self._values, 1, self._valuesLength)
	end

	return self._status
end

local function awaitHelper(status, ...)
	return status == Promise.Status.Resolved, ...
end

--[=[
	Yields the current thread until the given Promise completes. Returns true if the Promise resolved, followed by the values that the promise resolved or rejected with.

	:::caution
	If the Promise gets cancelled, this function will return `false`, which is indistinguishable from a rejection. If you need to differentiate, you should use [[Promise.awaitStatus]] instead.
	:::

	```lua
		local worked, value = getTheValue():await()

	if worked then
		print("got", value)
	else
		warn("it failed")
	end
	```

	@yields
	@return boolean -- `true` if the Promise successfully resolved
	@return ...any -- The values the Promise resolved or rejected with.
]=]
function Promise.prototype:await()
	return awaitHelper(self:awaitStatus())
end

local function expectHelper(status, ...)
	if status ~= Promise.Status.Resolved then
		error((...) == nil and "Expected Promise rejected with no value." or (...), 3)
	end

	return ...
end

--[=[
	Yields the current thread until the given Promise completes. Returns the values that the promise resolved with.

	```lua
	local worked = pcall(function()
		print("got", getTheValue():expect())
	end)

	if not worked then
		warn("it failed")
	end
	```

	This is essentially sugar for:

	```lua
	select(2, assert(promise:await()))
	```

	**Errors** if the Promise rejects or gets cancelled.

	@error any -- Errors with the rejection value if this Promise rejects or gets cancelled.
	@yields
	@return ...any -- The values the Promise resolved with.
]=]
function Promise.prototype:expect()
	return expectHelper(self:awaitStatus())
end

-- Backwards compatibility
Promise.prototype.awaitValue = Promise.prototype.expect

--[[
	Intended for use in tests.

	Similar to await(), but instead of yielding if the promise is unresolved,
	_unwrap will throw. This indicates an assumption that a promise has
	resolved.
]]
function Promise.prototype:_unwrap()
	if self._status == Promise.Status.Started then
		error("Promise has not resolved or rejected.", 2)
	end

	local success = self._status == Promise.Status.Resolved

	return success, unpack(self._values, 1, self._valuesLength)
end

function Promise.prototype:_resolve(...)
	if self._status ~= Promise.Status.Started then
		if Promise.is((...)) then
			(...):_consumerCancelled(self)
		end
		return
	end

	-- If the resolved value was a Promise, we chain onto it!
	if Promise.is((...)) then
		-- Without this warning, arguments sometimes mysteriously disappear
		if select("#", ...) > 1 then
			local message = string.format(
				"When returning a Promise from andThen, extra arguments are " .. "discarded! See:\n\n%s",
				self._source
			)
			warn(message)
		end

		local chainedPromise = ...

		local promise = chainedPromise:andThen(function(...)
			self:_resolve(...)
		end, function(...)
			local maybeRuntimeError = chainedPromise._values[1]

			-- Backwards compatibility < v2
			if chainedPromise._error then
				maybeRuntimeError = Error.new({
					error = chainedPromise._error,
					kind = Error.Kind.ExecutionError,
					context = "[No stack trace available as this Promise originated from an older version of the Promise library (< v2)]",
				})
			end

			if Error.isKind(maybeRuntimeError, Error.Kind.ExecutionError) then
				return self:_reject(maybeRuntimeError:extend({
					error = "This Promise was chained to a Promise that errored.",
					trace = "",
					context = string.format(
						"The Promise at:\n\n%s\n...Rejected because it was chained to the following Promise, which encountered an error:\n",
						self._source
					),
				}))
			end

			self:_reject(...)
		end)

		if promise._status == Promise.Status.Cancelled then
			self:cancel()
		elseif promise._status == Promise.Status.Started then
			-- Adopt ourselves into promise for cancellation propagation.
			self._parent = promise
			promise._consumers[self] = true
		end

		return
	end

	self._status = Promise.Status.Resolved
	self._valuesLength, self._values = pack(...)

	-- We assume that these callbacks will not throw errors.
	for _, callback in ipairs(self._queuedResolve) do
		coroutine.wrap(callback)(...)
	end

	self:_finalize()
end

function Promise.prototype:_reject(...)
	if self._status ~= Promise.Status.Started then
		return
	end

	self._status = Promise.Status.Rejected
	self._valuesLength, self._values = pack(...)

	-- If there are any rejection handlers, call those!
	if not isEmpty(self._queuedReject) then
		-- We assume that these callbacks will not throw errors.
		for _, callback in ipairs(self._queuedReject) do
			coroutine.wrap(callback)(...)
		end
	else
		-- At this point, no one was able to observe the error.
		-- An error handler might still be attached if the error occurred
		-- synchronously. We'll wait one tick, and if there are still no
		-- observers, then we should put a message in the console.

		local err = tostring((...))

		coroutine.wrap(function()
			Promise._timeEvent:Wait()

			-- Someone observed the error, hooray!
			if not self._unhandledRejection then
				return
			end

			-- Build a reasonable message
			local message = string.format("Unhandled Promise rejection:\n\n%s\n\n%s", err, self._source)

			for _, callback in ipairs(Promise._unhandledRejectionCallbacks) do
				task.spawn(callback, self, unpack(self._values, 1, self._valuesLength))
			end

			if Promise.TEST then
				-- Don't spam output when we're running tests.
				return
			end

			warn(message)
		end)()
	end

	self:_finalize()
end

--[[
	Calls any :finally handlers. We need this to be a separate method and
	queue because we must call all of the finally callbacks upon a success,
	failure, *and* cancellation.
]]
function Promise.prototype:_finalize()
	for _, callback in ipairs(self._queuedFinally) do
		-- Purposefully not passing values to callbacks here, as it could be the
		-- resolved values, or rejected errors. If the developer needs the values,
		-- they should use :andThen or :catch explicitly.
		coroutine.wrap(callback)(self._status)
	end

	self._queuedFinally = nil
	self._queuedReject = nil
	self._queuedResolve = nil

	-- Clear references to other Promises to allow gc
	if not Promise.TEST then
		self._parent = nil
		self._consumers = nil
	end

	task.defer(coroutine.close, self._thread)
end

--[=[
	Chains a Promise from this one that is resolved if this Promise is already resolved, and rejected if it is not resolved at the time of calling `:now()`. This can be used to ensure your `andThen` handler occurs on the same frame as the root Promise execution.

	```lua
	doSomething()
		:now()
		:andThen(function(value)
			print("Got", value, "synchronously.")
		end)
	```

	If this Promise is still running, Rejected, or Cancelled, the Promise returned from `:now()` will reject with the `rejectionValue` if passed, otherwise with a `Promise.Error(Promise.Error.Kind.NotResolvedInTime)`. This can be checked with [[Error.isKind]].

	@param rejectionValue? any -- The value to reject with if the Promise isn't resolved
	@return Promise
]=]
function Promise.prototype:now(rejectionValue)
	local traceback = debug.traceback(nil, 2)
	if self._status == Promise.Status.Resolved then
		return self:_andThen(traceback, function(...)
			return ...
		end)
	else
		return Promise.reject(rejectionValue == nil and Error.new({
			kind = Error.Kind.NotResolvedInTime,
			error = "This Promise was not resolved in time for :now()",
			context = ":now() was called at:\n\n" .. traceback,
		}) or rejectionValue)
	end
end

--[=[
	Repeatedly calls a Promise-returning function up to `times` number of times, until the returned Promise resolves.

	If the amount of retries is exceeded, the function will return the latest rejected Promise.

	```lua
	local function canFail(a, b, c)
		return Promise.new(function(resolve, reject)
			-- do something that can fail

			local failed, thing = doSomethingThatCanFail(a, b, c)

			if failed then
				reject("it failed")
			else
				resolve(thing)
			end
		end)
	end

	local MAX_RETRIES = 10
	local value = Promise.retry(canFail, MAX_RETRIES, "foo", "bar", "baz") -- args to send to canFail
	```

	@since 3.0.0
	@param callback (...: P) -> Promise<T>
	@param times number
	@param ...? P
	@return Promise<T>
]=]
function Promise.retry(callback, times, ...)
	assert(isCallable(callback), "Parameter #1 to Promise.retry must be a function")
	assert(type(times) == "number", "Parameter #2 to Promise.retry must be a number")

	local args, length = { ... }, select("#", ...)

	return Promise.resolve(callback(...)):catch(function(...)
		if times > 0 then
			return Promise.retry(callback, times - 1, unpack(args, 1, length))
		else
			return Promise.reject(...)
		end
	end)
end

--[=[
	Repeatedly calls a Promise-returning function up to `times` number of times, waiting `seconds` seconds between each
	retry, until the returned Promise resolves.

	If the amount of retries is exceeded, the function will return the latest rejected Promise.

	@since v3.2.0
	@param callback (...: P) -> Promise<T>
	@param times number
	@param seconds number
	@param ...? P
	@return Promise<T>
]=]
function Promise.retryWithDelay(callback, times, seconds, ...)
	assert(isCallable(callback), "Parameter #1 to Promise.retry must be a function")
	assert(type(times) == "number", "Parameter #2 (times) to Promise.retry must be a number")
	assert(type(seconds) == "number", "Parameter #3 (seconds) to Promise.retry must be a number")

	local args, length = { ... }, select("#", ...)

	return Promise.resolve(callback(...)):catch(function(...)
		if times > 0 then
			Promise.delay(seconds):await()

			return Promise.retryWithDelay(callback, times - 1, seconds, unpack(args, 1, length))
		else
			return Promise.reject(...)
		end
	end)
end

--[=[
	Converts an event into a Promise which resolves the next time the event fires.

	The optional `predicate` callback, if passed, will receive the event arguments and should return `true` or `false`, based on if this fired event should resolve the Promise or not. If `true`, the Promise resolves. If `false`, nothing happens and the predicate will be rerun the next time the event fires.

	The Promise will resolve with the event arguments.

	:::tip
	This function will work given any object with a `Connect` method. This includes all Roblox events.
	:::

	```lua
	-- Creates a Promise which only resolves when `somePart` is touched
	-- by a part named `"Something specific"`.
	return Promise.fromEvent(somePart.Touched, function(part)
		return part.Name == "Something specific"
	end)
	```

	@since 3.0.0
	@param event Event -- Any object with a `Connect` method. This includes all Roblox events.
	@param predicate? (...: P) -> boolean -- A function which determines if the Promise should resolve with the given value, or wait for the next event to check again.
	@return Promise<P>
]=]
function Promise.fromEvent(event, predicate)
	predicate = predicate or function()
		return true
	end

	return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
		local connection
		local shouldDisconnect = false

		local function disconnect()
			connection:Disconnect()
			connection = nil
		end

		-- We use shouldDisconnect because if the callback given to Connect is called before
		-- Connect returns, connection will still be nil. This happens with events that queue up
		-- events when there's nothing connected, such as RemoteEvents

		connection = event:Connect(function(...)
			local callbackValue = predicate(...)

			if callbackValue == true then
				resolve(...)

				if connection then
					disconnect()
				else
					shouldDisconnect = true
				end
			elseif type(callbackValue) ~= "boolean" then
				error("Promise.fromEvent predicate should always return a boolean")
			end
		end)

		if shouldDisconnect and connection then
			return disconnect()
		end

		onCancel(disconnect)
	end)
end

--[=[
	Registers a callback that runs when an unhandled rejection happens. An unhandled rejection happens when a Promise
	is rejected, and the rejection is not observed with `:catch`.

	The callback is called with the actual promise that rejected, followed by the rejection values.

	@since v3.2.0
	@param callback (promise: Promise, ...: any) -- A callback that runs when an unhandled rejection happens.
	@return () -> () -- Function that unregisters the `callback` when called
]=]
function Promise.onUnhandledRejection(callback)
	table.insert(Promise._unhandledRejectionCallbacks, callback)

	return function()
		local index = table.find(Promise._unhandledRejectionCallbacks, callback)

		if index then
			table.remove(Promise._unhandledRejectionCallbacks, index)
		end
	end
end

return Promise
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e86c</UniqueId>
								</Properties>
								<Item class="ModuleScript" referent="RBX13218b8111ed411f91ac721d532b31cb">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">init.spec</string>
										<string name="ScriptGuid">{f55f5335-83a0-4f49-8015-15fdb71b9a3d}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local Promise = require(script.Parent)
	Promise.TEST = true

	local timeEvent = Instance.new("BindableEvent")
	Promise._timeEvent = timeEvent.Event

	local advanceTime
	do
		local injectedPromiseTime = 0

		Promise._getTime = function()
			return injectedPromiseTime
		end

		function advanceTime(delta)
			delta = delta or (1 / 60)

			injectedPromiseTime = injectedPromiseTime + delta
			timeEvent:Fire(delta)
		end
	end

	local function pack(...)
		local len = select("#", ...)

		return len, { ... }
	end

	describe("Promise.Status", function()
		it("should error if indexing nil value", function()
			expect(function()
				local _ = Promise.Status.wrong
			end).to.throw()
		end)
	end)

	describe("Unhandled rejection signal", function()
		it("should call unhandled rejection callbacks", function()
			local badPromise = Promise.new(function(_resolve, reject)
				reject(1, 2)
			end)

			local callCount = 0

			local function callback(promise, rejectionA, rejectionB)
				callCount += 1

				expect(promise).to.equal(badPromise)
				expect(rejectionA).to.equal(1)
				expect(rejectionB).to.equal(2)
			end

			local unregister = Promise.onUnhandledRejection(callback)

			advanceTime()

			expect(callCount).to.equal(1)

			unregister()

			Promise.new(function(_resolve, reject)
				reject(3, 4)
			end)

			advanceTime()

			expect(callCount).to.equal(1)
		end)
	end)

	describe("Promise.new", function()
		it("should instantiate with a callback", function()
			local promise = Promise.new(function() end)

			expect(promise).to.be.ok()
		end)

		it("should invoke the given callback with resolve and reject", function()
			local callCount = 0
			local resolveArg
			local rejectArg

			local promise = Promise.new(function(resolve, reject)
				callCount = callCount + 1
				resolveArg = resolve
				rejectArg = reject
			end)

			expect(promise).to.be.ok()

			expect(callCount).to.equal(1)
			expect(resolveArg).to.be.a("function")
			expect(rejectArg).to.be.a("function")
			expect(promise:getStatus()).to.equal(Promise.Status.Started)
		end)

		it("should resolve promises on resolve()", function()
			local callCount = 0

			local promise = Promise.new(function(resolve)
				callCount = callCount + 1
				resolve()
			end)

			expect(promise).to.be.ok()
			expect(callCount).to.equal(1)
			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
		end)

		it("should reject promises on reject()", function()
			local callCount = 0

			local promise = Promise.new(function(resolve, reject)
				callCount = callCount + 1
				reject()
			end)

			expect(promise).to.be.ok()
			expect(callCount).to.equal(1)
			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
		end)

		it("should reject on error in callback", function()
			local callCount = 0

			local promise = Promise.new(function()
				callCount = callCount + 1
				error("hahah")
			end)

			expect(promise).to.be.ok()
			expect(callCount).to.equal(1)
			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(tostring(promise._values[1]):find("hahah")).to.be.ok()

			-- Loosely check for the pieces of the stack trace we expect
			expect(tostring(promise._values[1]):find("init.spec")).to.be.ok()
			expect(tostring(promise._values[1]):find("runExecutor")).to.be.ok()
		end)

		it("should work with C functions", function()
			expect(function()
				Promise.new(tick):andThen(tick)
			end).to.never.throw()
		end)

		it("should have a nice tostring", function()
			expect(tostring(Promise.resolve()):gmatch("Promise(Resolved)")).to.be.ok()
		end)

		it("should allow yielding", function()
			local bindable = Instance.new("BindableEvent")
			local promise = Promise.new(function(resolve)
				bindable.Event:Wait()
				resolve(5)
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			bindable:Fire()
			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(promise._values[1]).to.equal(5)
		end)

		it("should preserve stack traces of resolve-chained promises", function()
			local function nestedCall(text)
				error(text)
			end

			local promise = Promise.new(function(resolve)
				resolve(Promise.new(function()
					nestedCall("sample text")
				end))
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)

			local trace = tostring(promise._values[1])
			expect(trace:find("sample text")).to.be.ok()
			expect(trace:find("nestedCall")).to.be.ok()
			expect(trace:find("runExecutor")).to.be.ok()
			expect(trace:find("runPlanNode")).to.be.ok()
			expect(
				trace:find("...Rejected because it was chained to the following Promise, which encountered an error:")
			).to.be.ok()
		end)

		it("should report errors from Promises with _error (< v2)", function()
			local oldPromise = Promise.reject()
			oldPromise._error = "Sample error"

			local newPromise = Promise.resolve():andThenReturn(oldPromise)

			expect(newPromise:getStatus()).to.equal(Promise.Status.Rejected)

			local trace = tostring(newPromise._values[1])
			expect(trace:find("Sample error")).to.be.ok()
			expect(
				trace:find("...Rejected because it was chained to the following Promise, which encountered an error:")
			).to.be.ok()
			expect(trace:find("%[No stack trace available")).to.be.ok()
		end)

		it("should allow callable tables", function()
			local promise = Promise.new(setmetatable({}, {
				__call = function(_, resolve)
					resolve(1)
				end,
			}))

			local called = false
			promise:andThen(setmetatable({}, {
				__call = function(_, var)
					expect(var).to.equal(1)
					called = true
				end,
			}))

			expect(called).to.equal(true)
		end)

		itSKIP("should close the thread after resolve", function()
			local count = 0
			Promise.new(function(resolve)
				count += 1
				resolve()
				Promise.delay(1):await()
				count += 1
			end)

			task.wait(1)

			expect(count).to.equal(1)
		end)
	end)

	describe("Promise.defer", function()
		it("should execute after the time event", function()
			local callCount = 0
			local promise = Promise.defer(function(resolve, reject, onCancel, nothing)
				expect(type(resolve)).to.equal("function")
				expect(type(reject)).to.equal("function")
				expect(type(onCancel)).to.equal("function")
				expect(type(nothing)).to.equal("nil")

				callCount = callCount + 1

				resolve("foo")
			end)

			expect(callCount).to.equal(0)
			expect(promise:getStatus()).to.equal(Promise.Status.Started)

			advanceTime()
			expect(callCount).to.equal(1)
			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)

			advanceTime()
			expect(callCount).to.equal(1)
		end)
	end)

	describe("Promise.delay", function()
		it("should schedule promise resolution", function()
			local promise = Promise.delay(1)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)

			advanceTime()
			expect(promise:getStatus()).to.equal(Promise.Status.Started)

			advanceTime(1)
			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
		end)

		it("should allow for delays to be cancelled", function()
			local promise = Promise.delay(2)

			Promise.delay(1):andThen(function()
				promise:cancel()
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			advanceTime()
			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			advanceTime(1)
			expect(promise:getStatus()).to.equal(Promise.Status.Cancelled)
			advanceTime(1)
		end)
	end)

	describe("Promise.resolve", function()
		it("should immediately resolve with a value", function()
			local promise = Promise.resolve(5, 6)

			expect(promise).to.be.ok()
			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(promise._values[1]).to.equal(5)
			expect(promise._values[2]).to.equal(6)
		end)

		it("should chain onto passed promises", function()
			local promise = Promise.resolve(Promise.new(function(_, reject)
				reject(7)
			end))

			expect(promise).to.be.ok()
			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(promise._values[1]).to.equal(7)
		end)
	end)

	describe("Promise.reject", function()
		it("should immediately reject with a value", function()
			local promise = Promise.reject(6, 7)

			expect(promise).to.be.ok()
			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(promise._values[1]).to.equal(6)
			expect(promise._values[2]).to.equal(7)
		end)

		it("should pass a promise as-is as an error", function()
			local innerPromise = Promise.new(function(resolve)
				resolve(6)
			end)

			local promise = Promise.reject(innerPromise)

			expect(promise).to.be.ok()
			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(promise._values[1]).to.equal(innerPromise)
		end)
	end)

	describe("Promise:andThen", function()
		it("should allow yielding", function()
			local bindable = Instance.new("BindableEvent")
			local promise = Promise.resolve():andThen(function()
				bindable.Event:Wait()
				return 5
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			bindable:Fire()
			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(promise._values[1]).to.equal(5)
		end)

		it("should run andThens on a new thread", function()
			local bindable = Instance.new("BindableEvent")

			local resolve
			local parentPromise = Promise.new(function(_resolve)
				resolve = _resolve
			end)

			local deadlockedPromise = parentPromise:andThen(function()
				bindable.Event:Wait()
				return 5
			end)

			local successfulPromise = parentPromise:andThen(function()
				return "foo"
			end)

			expect(parentPromise:getStatus()).to.equal(Promise.Status.Started)
			resolve()
			expect(successfulPromise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(successfulPromise._values[1]).to.equal("foo")
			expect(deadlockedPromise:getStatus()).to.equal(Promise.Status.Started)
		end)

		it("should chain onto resolved promises", function()
			local args
			local argsLength
			local callCount = 0
			local badCallCount = 0

			local promise = Promise.resolve(5)

			local chained = promise:andThen(function(...)
				argsLength, args = pack(...)
				callCount = callCount + 1
			end, function()
				badCallCount = badCallCount + 1
			end)

			expect(badCallCount).to.equal(0)

			expect(callCount).to.equal(1)
			expect(argsLength).to.equal(1)
			expect(args[1]).to.equal(5)

			expect(promise).to.be.ok()
			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(promise._values[1]).to.equal(5)

			expect(chained).to.be.ok()
			expect(chained).never.to.equal(promise)
			expect(chained:getStatus()).to.equal(Promise.Status.Resolved)
			expect(#chained._values).to.equal(0)
		end)

		it("should chain onto rejected promises", function()
			local args
			local argsLength
			local callCount = 0
			local badCallCount = 0

			local promise = Promise.reject(5)

			local chained = promise:andThen(function(...)
				badCallCount = badCallCount + 1
			end, function(...)
				argsLength, args = pack(...)
				callCount = callCount + 1
			end)

			expect(badCallCount).to.equal(0)

			expect(callCount).to.equal(1)
			expect(argsLength).to.equal(1)
			expect(args[1]).to.equal(5)

			expect(promise).to.be.ok()
			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(promise._values[1]).to.equal(5)

			expect(chained).to.be.ok()
			expect(chained).never.to.equal(promise)
			expect(chained:getStatus()).to.equal(Promise.Status.Resolved)
			expect(#chained._values).to.equal(0)
		end)

		it("should reject on error in callback", function()
			local callCount = 0

			local promise = Promise.resolve(1):andThen(function()
				callCount = callCount + 1
				error("hahah")
			end)

			expect(promise).to.be.ok()
			expect(callCount).to.equal(1)
			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(tostring(promise._values[1]):find("hahah")).to.be.ok()

			-- Loosely check for the pieces of the stack trace we expect
			expect(tostring(promise._values[1]):find("init.spec")).to.be.ok()
			expect(tostring(promise._values[1]):find("runExecutor")).to.be.ok()
		end)

		it("should chain onto asynchronously resolved promises", function()
			local args
			local argsLength
			local callCount = 0
			local badCallCount = 0

			local startResolution
			local promise = Promise.new(function(resolve)
				startResolution = resolve
			end)

			local chained = promise:andThen(function(...)
				args = { ... }
				argsLength = select("#", ...)
				callCount = callCount + 1
			end, function()
				badCallCount = badCallCount + 1
			end)

			expect(callCount).to.equal(0)
			expect(badCallCount).to.equal(0)

			startResolution(6)

			expect(badCallCount).to.equal(0)

			expect(callCount).to.equal(1)
			expect(argsLength).to.equal(1)
			expect(args[1]).to.equal(6)

			expect(promise).to.be.ok()
			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(promise._values[1]).to.equal(6)

			expect(chained).to.be.ok()
			expect(chained).never.to.equal(promise)
			expect(chained:getStatus()).to.equal(Promise.Status.Resolved)
			expect(#chained._values).to.equal(0)
		end)

		it("should chain onto asynchronously rejected promises", function()
			local args
			local argsLength
			local callCount = 0
			local badCallCount = 0

			local startResolution
			local promise = Promise.new(function(_, reject)
				startResolution = reject
			end)

			local chained = promise:andThen(function()
				badCallCount = badCallCount + 1
			end, function(...)
				args = { ... }
				argsLength = select("#", ...)
				callCount = callCount + 1
			end)

			expect(callCount).to.equal(0)
			expect(badCallCount).to.equal(0)

			startResolution(6)

			expect(badCallCount).to.equal(0)

			expect(callCount).to.equal(1)
			expect(argsLength).to.equal(1)
			expect(args[1]).to.equal(6)

			expect(promise).to.be.ok()
			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(promise._values[1]).to.equal(6)

			expect(chained).to.be.ok()
			expect(chained).never.to.equal(promise)
			expect(chained:getStatus()).to.equal(Promise.Status.Resolved)
			expect(#chained._values).to.equal(0)
		end)

		it("should propagate errors through multiple levels", function()
			local x, y, z
			Promise.new(function(resolve, reject)
				reject(1, 2, 3)
			end):andThen(function() end):catch(function(a, b, c)
				x, y, z = a, b, c
			end)

			expect(x).to.equal(1)
			expect(y).to.equal(2)
			expect(z).to.equal(3)
		end)

		it("should not call queued callbacks from a cancelled sub-promise", function()
			local resolve
			local count = 0

			local root = Promise.new(function(r)
				resolve = r
			end)

			root:andThen(function()
				count += 1
			end)

			root
				:andThen(function()
					count += 1
				end)
				:cancel()

			resolve("foo")

			expect(count).to.equal(1)
		end)
	end)

	describe("Promise:cancel", function()
		it("should mark promises as cancelled and not resolve or reject them", function()
			local callCount = 0
			local finallyCallCount = 0
			local promise = Promise.new(function() end)
				:andThen(function()
					callCount = callCount + 1
				end)
				:finally(function()
					finallyCallCount = finallyCallCount + 1
				end)

			promise:cancel()
			promise:cancel() -- Twice to check call counts

			expect(callCount).to.equal(0)
			expect(finallyCallCount).to.equal(1)
			expect(promise:getStatus()).to.equal(Promise.Status.Cancelled)
		end)

		it("should call the cancellation hook once", function()
			local callCount = 0

			local promise = Promise.new(function(resolve, reject, onCancel)
				onCancel(function()
					callCount = callCount + 1
				end)
			end)

			promise:cancel()
			promise:cancel() -- Twice to check call count

			expect(callCount).to.equal(1)
		end)

		it("should propagate cancellations", function()
			local promise = Promise.new(function() end)

			local consumer1 = promise:andThen()
			local consumer2 = promise:andThen()

			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			expect(consumer1:getStatus()).to.equal(Promise.Status.Started)
			expect(consumer2:getStatus()).to.equal(Promise.Status.Started)

			consumer1:cancel()

			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			expect(consumer1:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(consumer2:getStatus()).to.equal(Promise.Status.Started)

			consumer2:cancel()

			expect(promise:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(consumer1:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(consumer2:getStatus()).to.equal(Promise.Status.Cancelled)
		end)

		it("should affect downstream promises", function()
			local promise = Promise.new(function() end)
			local consumer = promise:andThen()

			promise:cancel()

			expect(consumer:getStatus()).to.equal(Promise.Status.Cancelled)
		end)

		it("should track consumers", function()
			local pending = Promise.new(function() end)
			local p0 = Promise.resolve()
			local p1 = p0:andThen(function()
				return pending
			end)
			local p2 = Promise.new(function(resolve)
				resolve(p1)
			end)
			local p3 = p2:andThen(function() end)

			expect(p1._parent).to.never.equal(p0)
			expect(p2._parent).to.never.equal(p1)
			expect(p2._consumers[p3]).to.be.ok()
			expect(p3._parent).to.equal(p2)
		end)

		it("should cancel resolved pending promises", function()
			local p1 = Promise.new(function() end)

			local p2 = Promise.new(function(resolve)
				resolve(p1)
			end):finally(function() end)

			p2:cancel()

			expect(p1._status).to.equal(Promise.Status.Cancelled)
			expect(p2._status).to.equal(Promise.Status.Cancelled)
		end)

		it("should close the promise thread", function()
			local count = 0
			local promise = Promise.new(function()
				count += 1
				Promise.delay(1):await()
				count += 1
			end)

			promise:cancel()
			advanceTime(2)

			expect(count).to.equal(1)
		end)
	end)

	describe("Promise:finally", function()
		it("should be called upon resolve, reject, or cancel", function()
			local callCount = 0

			local function finally()
				callCount = callCount + 1
			end

			-- Resolved promise
			Promise.new(function(resolve, reject)
				resolve()
			end):finally(finally)

			-- Chained promise
			Promise.resolve():andThen(function() end):finally(finally):finally(finally)

			-- Rejected promise
			Promise.reject():finally(finally)

			local cancelledPromise = Promise.new(function() end):finally(finally)
			cancelledPromise:cancel()

			expect(callCount).to.equal(5)
		end)

		it("should not forward return values", function()
			local value

			Promise.resolve(2)
				:finally(function()
					return 1
				end)
				:andThen(function(v)
					value = v
				end)

			expect(value).to.equal(2)
		end)

		it("should not consume rejections", function()
			local catchRan = false
			local thenRan = false
			Promise.reject(5)
				:finally(function()
					return 42
				end)
				:andThen(function()
					thenRan = true
				end)
				:catch(function(value)
					catchRan = true
					expect(value).to.equal(5)
				end)

			expect(catchRan).to.equal(true)
			expect(thenRan).to.equal(false)
		end)

		it("should wait for returned promises", function()
			local resolve
			local promise = Promise.reject("foo"):finally(function()
				return Promise.new(function(r)
					resolve = r
				end)
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)

			resolve()

			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			local _, value = promise:_unwrap()
			expect(value).to.equal("foo")
		end)

		it("should reject with a returned rejected promise's value", function()
			local reject
			local promise = Promise.reject("foo"):finally(function()
				return Promise.new(function(_, r)
					reject = r
				end)
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)

			reject("bar")

			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			local _, value = promise:_unwrap()
			expect(value).to.equal("bar")
		end)

		it("should reject when handler errors", function()
			local errorValue = {}
			local promise = Promise.reject("bar"):finally(function()
				error(errorValue)
			end)

			local ok, value = promise:_unwrap()

			expect(ok).to.equal(false)
			expect(value).to.equal(errorValue)
		end)

		it("should not prevent cancellation", function()
			local promise = Promise.new(function() end)

			local finallyRan = false
			promise:finally(function()
				finallyRan = true
			end)

			local consumer = promise:andThen(function() end)

			consumer:cancel()

			expect(promise:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(finallyRan).to.equal(true)
		end)

		it("should propagate cancellation downwards", function()
			local finallyRan = false
			local andThenRan = false
			local root = Promise.new(function() end)

			local consumer = root:finally(function()
				finallyRan = true
			end)

			root:cancel()

			expect(root:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(consumer:getStatus()).to.equal(Promise.Status.Cancelled)

			expect(finallyRan).to.equal(true)
			expect(andThenRan).to.equal(false)
		end)

		it("should propagate cancellation upwards", function()
			local finallyRan = false
			local andThenRan = false
			local root = Promise.new(function() end)

			local consumer = root:finally(function()
				finallyRan = true
			end)

			consumer:cancel()

			expect(root:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(consumer:getStatus()).to.equal(Promise.Status.Cancelled)

			expect(finallyRan).to.equal(true)
			expect(andThenRan).to.equal(false)
		end)

		it("should cancel returned promise if cancelled", function()
			local internal = Promise.new(function() end)

			local promise = Promise.resolve():finally(function()
				return internal
			end)

			promise:cancel()

			expect(internal:getStatus()).to.equal(Promise.Status.Cancelled)
		end)
	end)

	describe("Promise.all", function()
		it("should error if given something other than a table", function()
			expect(function()
				Promise.all(1)
			end).to.throw()
		end)

		it("should resolve instantly with an empty table if given no promises", function()
			local promise = Promise.all({})
			local success, value = promise:_unwrap()

			expect(success).to.equal(true)
			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(value).to.be.a("table")
			expect(next(value)).to.equal(nil)
		end)

		it("should error if given non-promise values", function()
			expect(function()
				Promise.all({ {}, {}, {} })
			end).to.throw()
		end)

		it("should wait for all promises to be resolved and return their values", function()
			local resolveFunctions = {}

			local testValuesLength, testValues = pack(1, "A string", nil, false)

			local promises = {}

			for i = 1, testValuesLength do
				promises[i] = Promise.new(function(resolve)
					resolveFunctions[i] = { resolve, testValues[i] }
				end)
			end

			local combinedPromise = Promise.all(promises)

			for _, resolve in ipairs(resolveFunctions) do
				expect(combinedPromise:getStatus()).to.equal(Promise.Status.Started)
				resolve[1](resolve[2])
			end

			local resultLength, result = pack(combinedPromise:_unwrap())
			local success, resolved = unpack(result, 1, resultLength)

			expect(resultLength).to.equal(2)
			expect(success).to.equal(true)
			expect(resolved).to.be.a("table")
			expect(#resolved).to.equal(#promises)

			for i = 1, testValuesLength do
				expect(resolved[i]).to.equal(testValues[i])
			end
		end)

		it("should reject if any individual promise rejected", function()
			local rejectA
			local resolveB

			local a = Promise.new(function(_, reject)
				rejectA = reject
			end)

			local b = Promise.new(function(resolve)
				resolveB = resolve
			end)

			local combinedPromise = Promise.all({ a, b })

			expect(combinedPromise:getStatus()).to.equal(Promise.Status.Started)

			rejectA("baz", "qux")
			resolveB("foo", "bar")

			local resultLength, result = pack(combinedPromise:_unwrap())
			local success, first, second = unpack(result, 1, resultLength)

			expect(resultLength).to.equal(3)
			expect(success).to.equal(false)
			expect(first).to.equal("baz")
			expect(second).to.equal("qux")
			expect(b:getStatus()).to.equal(Promise.Status.Cancelled)
		end)

		it("should not resolve if resolved after rejecting", function()
			local rejectA
			local resolveB

			local a = Promise.new(function(_, reject)
				rejectA = reject
			end)

			local b = Promise.new(function(resolve)
				resolveB = resolve
			end)

			local combinedPromise = Promise.all({ a, b })

			expect(combinedPromise:getStatus()).to.equal(Promise.Status.Started)

			rejectA("baz", "qux")
			resolveB("foo", "bar")

			local resultLength, result = pack(combinedPromise:_unwrap())
			local success, first, second = unpack(result, 1, resultLength)

			expect(resultLength).to.equal(3)
			expect(success).to.equal(false)
			expect(first).to.equal("baz")
			expect(second).to.equal("qux")
		end)

		it("should only reject once", function()
			local rejectA
			local rejectB

			local a = Promise.new(function(_, reject)
				rejectA = reject
			end)

			local b = Promise.new(function(_, reject)
				rejectB = reject
			end)

			local combinedPromise = Promise.all({ a, b })

			expect(combinedPromise:getStatus()).to.equal(Promise.Status.Started)

			rejectA("foo", "bar")

			expect(combinedPromise:getStatus()).to.equal(Promise.Status.Rejected)

			rejectB("baz", "qux")

			local resultLength, result = pack(combinedPromise:_unwrap())
			local success, first, second = unpack(result, 1, resultLength)

			expect(resultLength).to.equal(3)
			expect(success).to.equal(false)
			expect(first).to.equal("foo")
			expect(second).to.equal("bar")
		end)

		it("should error if a non-array table is passed in", function()
			local ok, err = pcall(function()
				Promise.all(Promise.new(function() end))
			end)

			expect(ok).to.be.ok()
			expect(err:find("Non%-promise")).to.be.ok()
		end)

		it("should cancel pending promises if one rejects", function()
			local p = Promise.new(function() end)
			expect(Promise.all({
				Promise.resolve(),
				Promise.reject(),
				p,
			}):getStatus()).to.equal(Promise.Status.Rejected)
			expect(p:getStatus()).to.equal(Promise.Status.Cancelled)
		end)

		it("should cancel promises if it is cancelled", function()
			local p = Promise.new(function() end)
			p:andThen(function() end)

			local promises = {
				Promise.new(function() end),
				Promise.new(function() end),
				p,
			}

			Promise.all(promises):cancel()

			expect(promises[1]:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(promises[2]:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(promises[3]:getStatus()).to.equal(Promise.Status.Started)
		end)
	end)

	describe("Promise.fold", function()
		it("should return the initial value in a promise when the list is empty", function()
			local initialValue = {}
			local result = Promise.fold({}, function()
				error("should not be called")
			end, initialValue)

			expect(Promise.is(result)).to.equal(true)
			expect(result:getStatus()).to.equal(Promise.Status.Resolved)
			expect(result:expect()).to.equal(initialValue)
		end)

		it("should accept promises in the list", function()
			local resolve

			local sum = Promise.fold({ Promise.new(function(r)
				resolve = r
			end), 2, 3 }, function(sum, element)
				return sum + element
			end, 0)

			resolve(1)

			expect(Promise.is(sum)).to.equal(true)
			expect(sum:getStatus()).to.equal(Promise.Status.Resolved)
			expect(sum:expect()).to.equal(6)
		end)

		it("should always return a promise even if the list or reducer don't use them", function()
			local sum = Promise.fold({ 1, 2, 3 }, function(sum, element, index)
				if index == 2 then
					return Promise.delay(1):andThenReturn(sum + element)
				else
					return sum + element
				end
			end, 0)
			expect(Promise.is(sum)).to.equal(true)
			expect(sum:getStatus()).to.equal(Promise.Status.Started)
			advanceTime(2)
			expect(sum:getStatus()).to.equal(Promise.Status.Resolved)
			expect(sum:expect()).to.equal(6)
		end)

		it("should return the first rejected promise", function()
			local errorMessage = "foo"
			local sum = Promise.fold({ 1, 2, 3 }, function(sum, element, index)
				if index == 2 then
					return Promise.reject(errorMessage)
				else
					return sum + element
				end
			end, 0)
			expect(Promise.is(sum)).to.equal(true)
			local status, rejection = sum:awaitStatus()
			expect(status).to.equal(Promise.Status.Rejected)
			expect(rejection).to.equal(errorMessage)
		end)

		it("should return the first canceled promise", function()
			local secondPromise
			local sum = Promise.fold({ 1, 2, 3 }, function(sum, element, index)
				if index == 1 then
					return sum + element
				elseif index == 2 then
					secondPromise = Promise.delay(1):andThenReturn(sum + element)
					return secondPromise
				else
					error("this should not run if the promise is cancelled")
				end
			end, 0)
			expect(Promise.is(sum)).to.equal(true)
			expect(sum:getStatus()).to.equal(Promise.Status.Started)
			secondPromise:cancel()
			expect(sum:getStatus()).to.equal(Promise.Status.Cancelled)
		end)
	end)

	describe("Promise.race", function()
		it("should resolve with the first settled value", function()
			local promise = Promise.race({
				Promise.resolve(1),
				Promise.resolve(2),
			}):andThen(function(value)
				expect(value).to.equal(1)
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
		end)

		it("should cancel other promises", function()
			local promise = Promise.new(function() end)
			promise:andThen(function() end)
			local promises = {
				promise,
				Promise.new(function() end),
				Promise.new(function(resolve)
					resolve(2)
				end),
			}

			local promise = Promise.race(promises)

			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(promise._values[1]).to.equal(2)
			expect(promises[1]:getStatus()).to.equal(Promise.Status.Started)
			expect(promises[2]:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(promises[3]:getStatus()).to.equal(Promise.Status.Resolved)

			local p = Promise.new(function() end)
			expect(Promise.race({
				Promise.reject(),
				Promise.resolve(),
				p,
			}):getStatus()).to.equal(Promise.Status.Rejected)
			expect(p:getStatus()).to.equal(Promise.Status.Cancelled)
		end)

		it("should error if a non-array table is passed in", function()
			local ok, err = pcall(function()
				Promise.race(Promise.new(function() end))
			end)

			expect(ok).to.be.ok()
			expect(err:find("Non%-promise")).to.be.ok()
		end)

		it("should cancel promises if it is cancelled", function()
			local p = Promise.new(function() end)
			p:andThen(function() end)

			local promises = {
				Promise.new(function() end),
				Promise.new(function() end),
				p,
			}

			Promise.race(promises):cancel()

			expect(promises[1]:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(promises[2]:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(promises[3]:getStatus()).to.equal(Promise.Status.Started)
		end)
	end)

	describe("Promise.promisify", function()
		it("should wrap functions", function()
			local function test(n)
				return n + 1
			end

			local promisified = Promise.promisify(test)
			local promise = promisified(1)
			local success, result = promise:_unwrap()

			expect(success).to.equal(true)
			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(result).to.equal(2)
		end)

		it("should catch errors after a yield", function()
			local bindable = Instance.new("BindableEvent")
			local test = Promise.promisify(function()
				bindable.Event:Wait()
				error("errortext")
			end)

			local promise = test()

			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			bindable:Fire()
			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(tostring(promise._values[1]):find("errortext")).to.be.ok()
		end)
	end)

	describe("Promise.tap", function()
		it("should thread through values", function()
			local first, second

			Promise.resolve(1)
				:andThen(function(v)
					return v + 1
				end)
				:tap(function(v)
					first = v
					return v + 1
				end)
				:andThen(function(v)
					second = v
				end)

			expect(first).to.equal(2)
			expect(second).to.equal(2)
		end)

		it("should chain onto promises", function()
			local resolveInner, finalValue

			local promise = Promise.resolve(1)
				:tap(function()
					return Promise.new(function(resolve)
						resolveInner = resolve
					end)
				end)
				:andThen(function(v)
					finalValue = v
				end)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			expect(finalValue).to.never.be.ok()

			resolveInner(1)

			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(finalValue).to.equal(1)
		end)
	end)

	describe("Promise.try", function()
		it("should catch synchronous errors", function()
			local errorText
			Promise.try(function()
				error("errortext")
			end):catch(function(e)
				errorText = tostring(e)
			end)

			expect(errorText:find("errortext")).to.be.ok()
		end)

		it("should reject with error objects", function()
			local object = {}
			local success, value = Promise.try(function()
				error(object)
			end):_unwrap()

			expect(success).to.equal(false)
			expect(value).to.equal(object)
		end)

		it("should catch asynchronous errors", function()
			local bindable = Instance.new("BindableEvent")
			local promise = Promise.try(function()
				bindable.Event:Wait()
				error("errortext")
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			bindable:Fire()
			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(tostring(promise._values[1]):find("errortext")).to.be.ok()
		end)
	end)

	describe("Promise:andThenReturn", function()
		it("should return the given values", function()
			local value1, value2

			Promise.resolve():andThenReturn(1, 2):andThen(function(one, two)
				value1 = one
				value2 = two
			end)

			expect(value1).to.equal(1)
			expect(value2).to.equal(2)
		end)
	end)

	describe("Promise:andThenCall", function()
		it("should call the given function with arguments", function()
			local value1, value2
			Promise.resolve():andThenCall(function(a, b)
				value1 = a
				value2 = b
			end, 3, 4)

			expect(value1).to.equal(3)
			expect(value2).to.equal(4)
		end)
	end)

	describe("Promise.some", function()
		it("should resolve once the goal is reached", function()
			local p = Promise.some({
				Promise.resolve(1),
				Promise.reject(),
				Promise.resolve(2),
			}, 2)
			expect(p:getStatus()).to.equal(Promise.Status.Resolved)
			expect(p._values[1][1]).to.equal(1)
			expect(p._values[1][2]).to.equal(2)
		end)

		it("should error if the goal can't be reached", function()
			expect(Promise.some({
				Promise.resolve(),
				Promise.reject(),
			}, 2):getStatus()).to.equal(Promise.Status.Rejected)

			local reject
			local p = Promise.some({
				Promise.resolve(),
				Promise.new(function(_, r)
					reject = r
				end),
			}, 2)

			expect(p:getStatus()).to.equal(Promise.Status.Started)
			reject("foo")
			expect(p:getStatus()).to.equal(Promise.Status.Rejected)
			expect(p._values[1]).to.equal("foo")
		end)

		it("should cancel pending Promises once the goal is reached", function()
			local resolve
			local pending1 = Promise.new(function() end)
			local pending2 = Promise.new(function(r)
				resolve = r
			end)

			local some = Promise.some({
				pending1,
				pending2,
				Promise.resolve(),
			}, 2)

			expect(some:getStatus()).to.equal(Promise.Status.Started)
			expect(pending1:getStatus()).to.equal(Promise.Status.Started)
			expect(pending2:getStatus()).to.equal(Promise.Status.Started)

			resolve()

			expect(some:getStatus()).to.equal(Promise.Status.Resolved)
			expect(pending1:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(pending2:getStatus()).to.equal(Promise.Status.Resolved)
		end)

		it("should error if passed a non-number", function()
			expect(function()
				Promise.some({}, "non-number")
			end).to.throw()
		end)

		it("should return an empty array if amount is 0", function()
			local p = Promise.some({
				Promise.resolve(2),
			}, 0)

			expect(p:getStatus()).to.equal(Promise.Status.Resolved)
			expect(#p._values[1]).to.equal(0)
		end)

		it("should not return extra values", function()
			local p = Promise.some({
				Promise.resolve(1),
				Promise.resolve(2),
				Promise.resolve(3),
				Promise.resolve(4),
			}, 2)

			expect(p:getStatus()).to.equal(Promise.Status.Resolved)
			expect(#p._values[1]).to.equal(2)
			expect(p._values[1][1]).to.equal(1)
			expect(p._values[1][2]).to.equal(2)
		end)

		it("should cancel promises if it is cancelled", function()
			local p = Promise.new(function() end)
			p:andThen(function() end)

			local promises = {
				Promise.new(function() end),
				Promise.new(function() end),
				p,
			}

			Promise.some(promises, 3):cancel()

			expect(promises[1]:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(promises[2]:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(promises[3]:getStatus()).to.equal(Promise.Status.Started)
		end)

		describe("Promise.any", function()
			it("should return the value directly", function()
				local p = Promise.any({
					Promise.reject(),
					Promise.reject(),
					Promise.resolve(1),
				})

				expect(p:getStatus()).to.equal(Promise.Status.Resolved)
				expect(p._values[1]).to.equal(1)
			end)

			it("should error if all are rejected", function()
				expect(Promise.any({
					Promise.reject(),
					Promise.reject(),
					Promise.reject(),
				}):getStatus()).to.equal(Promise.Status.Rejected)
			end)
		end)
	end)

	describe("Promise.allSettled", function()
		it("should resolve with an array of PromiseStatuses", function()
			local reject
			local p = Promise.allSettled({
				Promise.resolve(),
				Promise.reject(),
				Promise.resolve(),
				Promise.new(function(_, r)
					reject = r
				end),
			})

			expect(p:getStatus()).to.equal(Promise.Status.Started)
			reject()
			expect(p:getStatus()).to.equal(Promise.Status.Resolved)
			expect(p._values[1][1]).to.equal(Promise.Status.Resolved)
			expect(p._values[1][2]).to.equal(Promise.Status.Rejected)
			expect(p._values[1][3]).to.equal(Promise.Status.Resolved)
			expect(p._values[1][4]).to.equal(Promise.Status.Rejected)
		end)

		it("should cancel promises if it is cancelled", function()
			local p = Promise.new(function() end)
			p:andThen(function() end)

			local promises = {
				Promise.new(function() end),
				Promise.new(function() end),
				p,
			}

			Promise.allSettled(promises):cancel()

			expect(promises[1]:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(promises[2]:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(promises[3]:getStatus()).to.equal(Promise.Status.Started)
		end)
	end)

	describe("Promise:await", function()
		it("should return the correct values", function()
			local promise = Promise.resolve(5, 6, nil, 7)

			local a, b, c, d, e = promise:await()

			expect(a).to.equal(true)
			expect(b).to.equal(5)
			expect(c).to.equal(6)
			expect(d).to.equal(nil)
			expect(e).to.equal(7)
		end)

		it("should work if yielding is needed", function()
			local ran = false
			task.spawn(function()
				local _, actualTime = Promise.delay(1):await()
				expect(type(actualTime)).to.equal("number")
				ran = true
			end)

			advanceTime(2)
			expect(ran).to.equal(true)
		end)
	end)

	describe("Promise:expect", function()
		it("should throw the correct values", function()
			local rejectionValue = {}
			local promise = Promise.reject(rejectionValue)

			local success, value = pcall(function()
				promise:expect()
			end)

			expect(success).to.equal(false)
			expect(value).to.equal(rejectionValue)
		end)
	end)

	describe("Promise:now", function()
		it("should resolve if the Promise is resolved", function()
			local success, value = Promise.resolve("foo"):now():_unwrap()

			expect(success).to.equal(true)
			expect(value).to.equal("foo")
		end)

		it("should reject if the Promise is not resolved", function()
			local success, value = Promise.new(function() end):now():_unwrap()

			expect(success).to.equal(false)
			expect(Promise.Error.isKind(value, "NotResolvedInTime")).to.equal(true)
		end)

		it("should reject with a custom rejection value", function()
			local success, value = Promise.new(function() end):now("foo"):_unwrap()

			expect(success).to.equal(false)
			expect(value).to.equal("foo")
		end)
	end)

	describe("Promise.each", function()
		it("should iterate", function()
			local ok, result = Promise.each({
				"foo",
				"bar",
				"baz",
				"qux",
			}, function(...)
				return { ... }
			end):_unwrap()

			expect(ok).to.equal(true)
			expect(result[1][1]).to.equal("foo")
			expect(result[1][2]).to.equal(1)
			expect(result[2][1]).to.equal("bar")
			expect(result[2][2]).to.equal(2)
			expect(result[3][1]).to.equal("baz")
			expect(result[3][2]).to.equal(3)
			expect(result[4][1]).to.equal("qux")
			expect(result[4][2]).to.equal(4)
		end)

		it("should iterate serially", function()
			local resolves = {}
			local callCounts = {}

			local promise = Promise.each({
				"foo",
				"bar",
				"baz",
			}, function(value, index)
				callCounts[index] = (callCounts[index] or 0) + 1

				return Promise.new(function(resolve)
					table.insert(resolves, function()
						resolve(value:upper())
					end)
				end)
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			expect(#resolves).to.equal(1)
			expect(callCounts[1]).to.equal(1)
			expect(callCounts[2]).to.never.be.ok()

			table.remove(resolves, 1)()

			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			expect(#resolves).to.equal(1)
			expect(callCounts[1]).to.equal(1)
			expect(callCounts[2]).to.equal(1)
			expect(callCounts[3]).to.never.be.ok()

			table.remove(resolves, 1)()

			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			expect(callCounts[1]).to.equal(1)
			expect(callCounts[2]).to.equal(1)
			expect(callCounts[3]).to.equal(1)

			table.remove(resolves, 1)()

			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(type(promise._values[1])).to.equal("table")
			expect(type(promise._values[2])).to.equal("nil")

			local result = promise._values[1]

			expect(result[1]).to.equal("FOO")
			expect(result[2]).to.equal("BAR")
			expect(result[3]).to.equal("BAZ")
		end)

		it("should reject with the value if the predicate promise rejects", function()
			local promise = Promise.each({ 1, 2, 3 }, function()
				return Promise.reject("foobar")
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(promise._values[1]).to.equal("foobar")
		end)

		it("should allow Promises to be in the list and wait when it gets to them", function()
			local innerResolve
			local innerPromise = Promise.new(function(resolve)
				innerResolve = resolve
			end)

			local promise = Promise.each({
				innerPromise,
			}, function(value)
				return value * 2
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)

			innerResolve(2)

			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(promise._values[1][1]).to.equal(4)
		end)

		it("should reject with the value if a Promise from the list rejects", function()
			local called = false
			local promise = Promise.each({ 1, 2, Promise.reject("foobar") }, function(value)
				called = true
				return "never"
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(promise._values[1]).to.equal("foobar")
			expect(called).to.equal(false)
		end)

		it("should reject immediately if there's a cancelled Promise in the list initially", function()
			local cancelled = Promise.new(function() end)
			cancelled:cancel()

			local called = false
			local promise = Promise.each({ 1, 2, cancelled }, function()
				called = true
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(called).to.equal(false)
			expect(promise._values[1].kind).to.equal(Promise.Error.Kind.AlreadyCancelled)
		end)

		it("should stop iteration if Promise.each is cancelled", function()
			local callCounts = {}

			local promise = Promise.each({
				"foo",
				"bar",
				"baz",
			}, function(value, index)
				callCounts[index] = (callCounts[index] or 0) + 1

				return Promise.new(function() end)
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)
			expect(callCounts[1]).to.equal(1)
			expect(callCounts[2]).to.never.be.ok()

			promise:cancel()

			expect(promise:getStatus()).to.equal(Promise.Status.Cancelled)
			expect(callCounts[1]).to.equal(1)
			expect(callCounts[2]).to.never.be.ok()
		end)

		it("should cancel the Promise returned from the predicate if Promise.each is cancelled", function()
			local innerPromise

			local promise = Promise.each({
				"foo",
				"bar",
				"baz",
			}, function(value, index)
				innerPromise = Promise.new(function() end)
				return innerPromise
			end)

			promise:cancel()

			expect(innerPromise:getStatus()).to.equal(Promise.Status.Cancelled)
		end)

		it("should cancel Promises in the list if Promise.each is cancelled", function()
			local innerPromise = Promise.new(function() end)

			local promise = Promise.each({ innerPromise }, function() end)

			promise:cancel()

			expect(innerPromise:getStatus()).to.equal(Promise.Status.Cancelled)
		end)
	end)

	describe("Promise.retry", function()
		it("should retry N times", function()
			local counter = 0

			local promise = Promise.retry(function(parameter)
				expect(parameter).to.equal("foo")

				counter = counter + 1

				if counter == 5 then
					return Promise.resolve("ok")
				end

				return Promise.reject("fail")
			end, 5, "foo")

			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(promise._values[1]).to.equal("ok")
		end)

		it("should reject if threshold is exceeded", function()
			local promise = Promise.retry(function()
				return Promise.reject("fail")
			end, 5)

			expect(promise:getStatus()).to.equal(Promise.Status.Rejected)
			expect(promise._values[1]).to.equal("fail")
		end)
	end)

	describe("Promise.retryWithDelay", function()
		it("should retry after a delay", function()
			local counter = 0

			local promise = Promise.retryWithDelay(function(parameter)
				expect(parameter).to.equal("foo")

				counter = counter + 1

				if counter == 3 then
					return Promise.resolve("ok")
				end

				return Promise.reject("fail")
			end, 3, 10, "foo")

			expect(counter).to.equal(1)

			advanceTime(11)

			expect(counter).to.equal(2)

			advanceTime(11)

			expect(counter).to.equal(3)

			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(promise._values[1]).to.equal("ok")
		end)
	end)

	describe("Promise.fromEvent", function()
		it("should convert a Promise into an event", function()
			local event = Instance.new("BindableEvent")

			local promise = Promise.fromEvent(event.Event)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)

			event:Fire("foo")

			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(promise._values[1]).to.equal("foo")
		end)

		it("should convert a Promise into an event with the predicate", function()
			local event = Instance.new("BindableEvent")

			local promise = Promise.fromEvent(event.Event, function(param)
				return param == "foo"
			end)

			expect(promise:getStatus()).to.equal(Promise.Status.Started)

			event:Fire("bar")

			expect(promise:getStatus()).to.equal(Promise.Status.Started)

			event:Fire("foo")

			expect(promise:getStatus()).to.equal(Promise.Status.Resolved)
			expect(promise._values[1]).to.equal("foo")
		end)
	end)

	describe("Promise.is", function()
		it("should work with current version", function()
			local promise = Promise.resolve(1)

			expect(Promise.is(promise)).to.equal(true)
		end)

		it("should work with any object with an andThen", function()
			local obj = {
				andThen = function()
					return 1
				end,
			}

			expect(Promise.is(obj)).to.equal(true)
		end)

		it("should work with older promises", function()
			local OldPromise = {}
			OldPromise.prototype = {}
			OldPromise.__index = OldPromise.prototype

			function OldPromise.prototype:andThen() end

			local oldPromise = setmetatable({}, OldPromise)

			expect(Promise.is(oldPromise)).to.equal(true)
		end)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e86d</UniqueId>
									</Properties>
								</Item>
							</Item>
						</Item>
						<Item class="Folder" referent="RBXdddcb31832b94cd7af5d29391f0376c4">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<string name="Name">osyrisrblx_t@3.0.0</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e86e</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBX642e7f38764141609a560de7b300b87c">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">t</string>
									<string name="ScriptGuid">{41066101-e283-4991-8347-3594df781a56}</string>
									<ProtectedString name="Source"><![CDATA[-- t: a runtime typechecker for Roblox

local t = {}

function t.type(typeName)
	return function(value)
		local valueType = type(value)
		if valueType == typeName then
			return true
		else
			return false, string.format("%s expected, got %s", typeName, valueType)
		end
	end
end

function t.typeof(typeName)
	return function(value)
		local valueType = typeof(value)
		if valueType == typeName then
			return true
		else
			return false, string.format("%s expected, got %s", typeName, valueType)
		end
	end
end

--[[**
	matches any type except nil

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.any(value)
	if value ~= nil then
		return true
	else
		return false, "any expected, got nil"
	end
end

--Lua primitives

--[[**
	ensures Lua primitive boolean type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.boolean = t.typeof("boolean")

--[[**
	ensures Lua primitive thread type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.thread = t.typeof("thread")

--[[**
	ensures Lua primitive callback type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.callback = t.typeof("function")
t["function"] = t.callback

--[[**
	ensures Lua primitive none type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.none = t.typeof("nil")
t["nil"] = t.none

--[[**
	ensures Lua primitive string type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.string = t.typeof("string")

--[[**
	ensures Lua primitive table type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.table = t.typeof("table")

--[[**
	ensures Lua primitive userdata type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.userdata = t.type("userdata")

--[[**
	ensures value is a number and non-NaN

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.number(value)
	local valueType = typeof(value)
	if valueType == "number" then
		if value == value then
			return true
		else
			return false, "unexpected NaN value"
		end
	else
		return false, string.format("number expected, got %s", valueType)
	end
end

--[[**
	ensures value is NaN

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.nan(value)
	local valueType = typeof(value)
	if valueType == "number" then
		if value ~= value then
			return true
		else
			return false, "unexpected non-NaN value"
		end
	else
		return false, string.format("number expected, got %s", valueType)
	end
end

-- roblox types

--[[**
	ensures Roblox Axes type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Axes = t.typeof("Axes")

--[[**
	ensures Roblox BrickColor type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.BrickColor = t.typeof("BrickColor")

--[[**
	ensures Roblox CatalogSearchParams type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.CatalogSearchParams = t.typeof("CatalogSearchParams")

--[[**
	ensures Roblox CFrame type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.CFrame = t.typeof("CFrame")

--[[**
	ensures Roblox Color3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Color3 = t.typeof("Color3")

--[[**
	ensures Roblox ColorSequence type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.ColorSequence = t.typeof("ColorSequence")

--[[**
	ensures Roblox ColorSequenceKeypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.ColorSequenceKeypoint = t.typeof("ColorSequenceKeypoint")

--[[**
	ensures Roblox DateTime type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.DateTime = t.typeof("DateTime")

--[[**
	ensures Roblox DockWidgetPluginGuiInfo type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.DockWidgetPluginGuiInfo = t.typeof("DockWidgetPluginGuiInfo")

--[[**
	ensures Roblox Enum type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Enum = t.typeof("Enum")

--[[**
	ensures Roblox EnumItem type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.EnumItem = t.typeof("EnumItem")

--[[**
	ensures Roblox Enums type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Enums = t.typeof("Enums")

--[[**
	ensures Roblox Faces type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Faces = t.typeof("Faces")

--[[**
	ensures Roblox Instance type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Instance = t.typeof("Instance")

--[[**
	ensures Roblox NumberRange type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberRange = t.typeof("NumberRange")

--[[**
	ensures Roblox NumberSequence type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberSequence = t.typeof("NumberSequence")

--[[**
	ensures Roblox NumberSequenceKeypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberSequenceKeypoint = t.typeof("NumberSequenceKeypoint")

--[[**
	ensures Roblox PathWaypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.PathWaypoint = t.typeof("PathWaypoint")

--[[**
	ensures Roblox PhysicalProperties type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.PhysicalProperties = t.typeof("PhysicalProperties")

--[[**
	ensures Roblox Random type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Random = t.typeof("Random")

--[[**
	ensures Roblox Ray type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Ray = t.typeof("Ray")

--[[**
	ensures Roblox RaycastParams type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RaycastParams = t.typeof("RaycastParams")

--[[**
	ensures Roblox RaycastResult type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RaycastResult = t.typeof("RaycastResult")

--[[**
	ensures Roblox RBXScriptConnection type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RBXScriptConnection = t.typeof("RBXScriptConnection")

--[[**
	ensures Roblox RBXScriptSignal type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RBXScriptSignal = t.typeof("RBXScriptSignal")

--[[**
	ensures Roblox Rect type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Rect = t.typeof("Rect")

--[[**
	ensures Roblox Region3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Region3 = t.typeof("Region3")

--[[**
	ensures Roblox Region3int16 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Region3int16 = t.typeof("Region3int16")

--[[**
	ensures Roblox TweenInfo type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.TweenInfo = t.typeof("TweenInfo")

--[[**
	ensures Roblox UDim type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.UDim = t.typeof("UDim")

--[[**
	ensures Roblox UDim2 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.UDim2 = t.typeof("UDim2")

--[[**
	ensures Roblox Vector2 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector2 = t.typeof("Vector2")

--[[**
	ensures Roblox Vector2int16 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector2int16 = t.typeof("Vector2int16")

--[[**
	ensures Roblox Vector3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector3 = t.typeof("Vector3")

--[[**
	ensures Roblox Vector3int16 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector3int16 = t.typeof("Vector3int16")

--[[**
	ensures value is a given literal value

	@param literal The literal to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.literal(...)
	local size = select("#", ...)
	if size == 1 then
		local literal = ...
		return function(value)
			if value ~= literal then
				return false, string.format("expected %s, got %s", tostring(literal), tostring(value))
			end

			return true
		end
	else
		local literals = {}
		for i = 1, size do
			local value = select(i, ...)
			literals[i] = t.literal(value)
		end

		return t.union(table.unpack(literals, 1, size))
	end
end

--[[**
	DEPRECATED
	Please use t.literal
**--]]
t.exactly = t.literal

--[[**
	Returns a t.union of each key in the table as a t.literal

	@param keyTable The table to get keys from

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.keyOf(keyTable)
	local keys = {}
	local length = 0
	for key in pairs(keyTable) do
		length = length + 1
		keys[length] = key
	end

	return t.literal(table.unpack(keys, 1, length))
end

--[[**
	Returns a t.union of each value in the table as a t.literal

	@param valueTable The table to get values from

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.valueOf(valueTable)
	local values = {}
	local length = 0
	for _, value in pairs(valueTable) do
		length = length + 1
		values[length] = value
	end

	return t.literal(table.unpack(values, 1, length))
end

--[[**
	ensures value is an integer

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.integer(value)
	local success, errMsg = t.number(value)
	if not success then
		return false, errMsg or ""
	end

	if value % 1 == 0 then
		return true
	else
		return false, string.format("integer expected, got %s", value)
	end
end

--[[**
	ensures value is a number where min <= value

	@param min The minimum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMin(min)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg or ""
		end

		if value >= min then
			return true
		else
			return false, string.format("number >= %s expected, got %s", min, value)
		end
	end
end

--[[**
	ensures value is a number where value <= max

	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMax(max)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg
		end

		if value <= max then
			return true
		else
			return false, string.format("number <= %s expected, got %s", max, value)
		end
	end
end

--[[**
	ensures value is a number where min < value

	@param min The minimum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMinExclusive(min)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg or ""
		end

		if min < value then
			return true
		else
			return false, string.format("number > %s expected, got %s", min, value)
		end
	end
end

--[[**
	ensures value is a number where value < max

	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMaxExclusive(max)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg or ""
		end

		if value < max then
			return true
		else
			return false, string.format("number < %s expected, got %s", max, value)
		end
	end
end

--[[**
	ensures value is a number where value > 0

	@returns A function that will return true iff the condition is passed
**--]]
t.numberPositive = t.numberMinExclusive(0)

--[[**
	ensures value is a number where value < 0

	@returns A function that will return true iff the condition is passed
**--]]
t.numberNegative = t.numberMaxExclusive(0)

--[[**
	ensures value is a number where min <= value <= max

	@param min The minimum to use
	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberConstrained(min, max)
	assert(t.number(min))
	assert(t.number(max))
	local minCheck = t.numberMin(min)
	local maxCheck = t.numberMax(max)

	return function(value)
		local minSuccess, minErrMsg = minCheck(value)
		if not minSuccess then
			return false, minErrMsg or ""
		end

		local maxSuccess, maxErrMsg = maxCheck(value)
		if not maxSuccess then
			return false, maxErrMsg or ""
		end

		return true
	end
end

--[[**
	ensures value is a number where min < value < max

	@param min The minimum to use
	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberConstrainedExclusive(min, max)
	assert(t.number(min))
	assert(t.number(max))
	local minCheck = t.numberMinExclusive(min)
	local maxCheck = t.numberMaxExclusive(max)

	return function(value)
		local minSuccess, minErrMsg = minCheck(value)
		if not minSuccess then
			return false, minErrMsg or ""
		end

		local maxSuccess, maxErrMsg = maxCheck(value)
		if not maxSuccess then
			return false, maxErrMsg or ""
		end

		return true
	end
end

--[[**
	ensures value matches string pattern

	@param string pattern to check against

	@returns A function that will return true iff the condition is passed
**--]]
function t.match(pattern)
	assert(t.string(pattern))
	return function(value)
		local stringSuccess, stringErrMsg = t.string(value)
		if not stringSuccess then
			return false, stringErrMsg
		end

		if string.match(value, pattern) == nil then
			return false, string.format("%q failed to match pattern %q", value, pattern)
		end

		return true
	end
end

--[[**
	ensures value is either nil or passes check

	@param check The check to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.optional(check)
	assert(t.callback(check))
	return function(value)
		if value == nil then
			return true
		end

		local success, errMsg = check(value)
		if success then
			return true
		else
			return false, string.format("(optional) %s", errMsg or "")
		end
	end
end

--[[**
	matches given tuple against tuple type definition

	@param ... The type definition for the tuples

	@returns A function that will return true iff the condition is passed
**--]]
function t.tuple(...)
	local checks = { ... }
	return function(...)
		local args = { ... }
		for i, check in ipairs(checks) do
			local success, errMsg = check(args[i])
			if success == false then
				return false, string.format("Bad tuple index #%s:\n\t%s", i, errMsg or "")
			end
		end

		return true
	end
end

--[[**
	ensures all keys in given table pass check

	@param check The function to use to check the keys

	@returns A function that will return true iff the condition is passed
**--]]
function t.keys(check)
	assert(t.callback(check))
	return function(value)
		local tableSuccess, tableErrMsg = t.table(value)
		if tableSuccess == false then
			return false, tableErrMsg or ""
		end

		for key in pairs(value) do
			local success, errMsg = check(key)
			if success == false then
				return false, string.format("bad key %s:\n\t%s", tostring(key), errMsg or "")
			end
		end

		return true
	end
end

--[[**
	ensures all values in given table pass check

	@param check The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.values(check)
	assert(t.callback(check))
	return function(value)
		local tableSuccess, tableErrMsg = t.table(value)
		if tableSuccess == false then
			return false, tableErrMsg or ""
		end

		for key, val in pairs(value) do
			local success, errMsg = check(val)
			if success == false then
				return false, string.format("bad value for key %s:\n\t%s", tostring(key), errMsg or "")
			end
		end

		return true
	end
end

--[[**
	ensures value is a table and all keys pass keyCheck and all values pass valueCheck

	@param keyCheck The function to use to check the keys
	@param valueCheck The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.map(keyCheck, valueCheck)
	assert(t.callback(keyCheck))
	assert(t.callback(valueCheck))
	local keyChecker = t.keys(keyCheck)
	local valueChecker = t.values(valueCheck)

	return function(value)
		local keySuccess, keyErr = keyChecker(value)
		if not keySuccess then
			return false, keyErr or ""
		end

		local valueSuccess, valueErr = valueChecker(value)
		if not valueSuccess then
			return false, valueErr or ""
		end

		return true
	end
end

--[[**
	ensures value is a table and all keys pass valueCheck and all values are true

	@param valueCheck The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.set(valueCheck)
	return t.map(valueCheck, t.literal(true))
end

do
	local arrayKeysCheck = t.keys(t.integer)
--[[**
		ensures value is an array and all values of the array match check

		@param check The check to compare all values with

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.array(check)
		assert(t.callback(check))
		local valuesCheck = t.values(check)

		return function(value)
			local keySuccess, keyErrMsg = arrayKeysCheck(value)
			if keySuccess == false then
				return false, string.format("[array] %s", keyErrMsg or "")
			end

			-- # is unreliable for sparse arrays
			-- Count upwards using ipairs to avoid false positives from the behavior of #
			local arraySize = 0

			for _ in ipairs(value) do
				arraySize = arraySize + 1
			end

			for key in pairs(value) do
				if key < 1 or key > arraySize then
					return false, string.format("[array] key %s must be sequential", tostring(key))
				end
			end

			local valueSuccess, valueErrMsg = valuesCheck(value)
			if not valueSuccess then
				return false, string.format("[array] %s", valueErrMsg or "")
			end

			return true
		end
	end

--[[**
		ensures value is an array of a strict makeup and size

		@param check The check to compare all values with

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.strictArray(...)
		local valueTypes = { ... }
		assert(t.array(t.callback)(valueTypes))

		return function(value)
			local keySuccess, keyErrMsg = arrayKeysCheck(value)
			if keySuccess == false then
				return false, string.format("[strictArray] %s", keyErrMsg or "")
			end

			-- If there's more than the set array size, disallow
			if #valueTypes < #value then
				return false, string.format("[strictArray] Array size exceeds limit of %d", #valueTypes)
			end

			for idx, typeFn in pairs(valueTypes) do
				local typeSuccess, typeErrMsg = typeFn(value[idx])
				if not typeSuccess then
					return false, string.format("[strictArray] Array index #%d - %s", idx, typeErrMsg)
				end
			end

			return true
		end
	end
end

do
	local callbackArray = t.array(t.callback)
--[[**
		creates a union type

		@param ... The checks to union

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.union(...)
		local checks = { ... }
		assert(callbackArray(checks))

		return function(value)
			for _, check in ipairs(checks) do
				if check(value) then
					return true
				end
			end

			return false, "bad type for union"
		end
	end

--[[**
		Alias for t.union
	**--]]
	t.some = t.union

--[[**
		creates an intersection type

		@param ... The checks to intersect

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.intersection(...)
		local checks = { ... }
		assert(callbackArray(checks))

		return function(value)
			for _, check in ipairs(checks) do
				local success, errMsg = check(value)
				if not success then
					return false, errMsg or ""
				end
			end

			return true
		end
	end

--[[**
		Alias for t.intersection
	**--]]
	t.every = t.intersection
end

do
	local checkInterface = t.map(t.any, t.callback)
--[[**
		ensures value matches given interface definition

		@param checkTable The interface definition

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.interface(checkTable)
		assert(checkInterface(checkTable))
		return function(value)
			local tableSuccess, tableErrMsg = t.table(value)
			if tableSuccess == false then
				return false, tableErrMsg or ""
			end

			for key, check in pairs(checkTable) do
				local success, errMsg = check(value[key])
				if success == false then
					return false, string.format("[interface] bad value for %s:\n\t%s", tostring(key), errMsg or "")
				end
			end

			return true
		end
	end

--[[**
		ensures value matches given interface definition strictly

		@param checkTable The interface definition

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.strictInterface(checkTable)
		assert(checkInterface(checkTable))
		return function(value)
			local tableSuccess, tableErrMsg = t.table(value)
			if tableSuccess == false then
				return false, tableErrMsg or ""
			end

			for key, check in pairs(checkTable) do
				local success, errMsg = check(value[key])
				if success == false then
					return false, string.format("[interface] bad value for %s:\n\t%s", tostring(key), errMsg or "")
				end
			end

			for key in pairs(value) do
				if not checkTable[key] then
					return false, string.format("[interface] unexpected field %q", tostring(key))
				end
			end

			return true
		end
	end
end

--[[**
	ensure value is an Instance and it's ClassName matches the given ClassName

	@param className The class name to check for

	@returns A function that will return true iff the condition is passed
**--]]
function t.instanceOf(className, childTable)
	assert(t.string(className))

	local childrenCheck
	if childTable ~= nil then
		childrenCheck = t.children(childTable)
	end

	return function(value)
		local instanceSuccess, instanceErrMsg = t.Instance(value)
		if not instanceSuccess then
			return false, instanceErrMsg or ""
		end

		if value.ClassName ~= className then
			return false, string.format("%s expected, got %s", className, value.ClassName)
		end

		if childrenCheck then
			local childrenSuccess, childrenErrMsg = childrenCheck(value)
			if not childrenSuccess then
				return false, childrenErrMsg
			end
		end

		return true
	end
end

t.instance = t.instanceOf

--[[**
	ensure value is an Instance and it's ClassName matches the given ClassName by an IsA comparison

	@param className The class name to check for

	@returns A function that will return true iff the condition is passed
**--]]
function t.instanceIsA(className, childTable)
	assert(t.string(className))

	local childrenCheck
	if childTable ~= nil then
		childrenCheck = t.children(childTable)
	end

	return function(value)
		local instanceSuccess, instanceErrMsg = t.Instance(value)
		if not instanceSuccess then
			return false, instanceErrMsg or ""
		end

		if not value:IsA(className) then
			return false, string.format("%s expected, got %s", className, value.ClassName)
		end

		if childrenCheck then
			local childrenSuccess, childrenErrMsg = childrenCheck(value)
			if not childrenSuccess then
				return false, childrenErrMsg
			end
		end

		return true
	end
end

--[[**
	ensures value is an enum of the correct type

	@param enum The enum to check

	@returns A function that will return true iff the condition is passed
**--]]
function t.enum(enum)
	assert(t.Enum(enum))
	return function(value)
		local enumItemSuccess, enumItemErrMsg = t.EnumItem(value)
		if not enumItemSuccess then
			return false, enumItemErrMsg
		end

		if value.EnumType == enum then
			return true
		else
			return false, string.format("enum of %s expected, got enum of %s", tostring(enum), tostring(value.EnumType))
		end
	end
end

do
	local checkWrap = t.tuple(t.callback, t.callback)

--[[**
		wraps a callback in an assert with checkArgs

		@param callback The function to wrap
		@param checkArgs The function to use to check arguments in the assert

		@returns A function that first asserts using checkArgs and then calls callback
	**--]]
	function t.wrap(callback, checkArgs)
		assert(checkWrap(callback, checkArgs))
		return function(...)
			assert(checkArgs(...))
			return callback(...)
		end
	end
end

--[[**
	asserts a given check

	@param check The function to wrap with an assert

	@returns A function that simply wraps the given check in an assert
**--]]
function t.strict(check)
	return function(...)
		assert(check(...))
	end
end

do
	local checkChildren = t.map(t.string, t.callback)

--[[**
		Takes a table where keys are child names and values are functions to check the children against.
		Pass an instance tree into the function.
		If at least one child passes each check, the overall check passes.

		Warning! If you pass in a tree with more than one child of the same name, this function will always return false

		@param checkTable The table to check against

		@returns A function that checks an instance tree
	**--]]
	function t.children(checkTable)
		assert(checkChildren(checkTable))

		return function(value)
			local instanceSuccess, instanceErrMsg = t.Instance(value)
			if not instanceSuccess then
				return false, instanceErrMsg or ""
			end

			local childrenByName = {}
			for _, child in ipairs(value:GetChildren()) do
				local name = child.Name
				if checkTable[name] then
					if childrenByName[name] then
						return false, string.format("Cannot process multiple children with the same name %q", name)
					end

					childrenByName[name] = child
				end
			end

			for name, check in pairs(checkTable) do
				local success, errMsg = check(childrenByName[name])
				if not success then
					return false, string.format("[%s.%s] %s", value:GetFullName(), name, errMsg or "")
				end
			end

			return true
		end
	end
end

return t
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e86f</UniqueId>
								</Properties>
							</Item>
						</Item>
						<Item class="Folder" referent="RBX8fee542ef9e143c8994520dc204905bc">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<string name="Name">reselim_flipper@2.0.0</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e870</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBXf6cf9673d0dc47bda24a3629dc5efe32">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">flipper</string>
									<string name="ScriptGuid">{774cc44e-ee3c-4829-9ef9-60e3de362521}</string>
									<ProtectedString name="Source"><![CDATA[local Flipper = {
	SingleMotor = require(script.SingleMotor),
	GroupMotor = require(script.GroupMotor),

	Instant = require(script.Instant),
	Linear = require(script.Linear),
	Spring = require(script.Spring),
	
	isMotor = require(script.isMotor),
}

return Flipper]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e871</UniqueId>
								</Properties>
								<Item class="ModuleScript" referent="RBX97af69d3fa2841c99f52c627b82f06a3">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">BaseMotor</string>
										<string name="ScriptGuid">{1b53c420-4bd5-40f5-b1a6-4f0f90ebe472}</string>
										<ProtectedString name="Source"><![CDATA[local RunService = game:GetService("RunService")

local Signal = require(script.Parent.Signal)

local noop = function() end

local BaseMotor = {}
BaseMotor.__index = BaseMotor

function BaseMotor.new()
	return setmetatable({
		_onStep = Signal.new(),
		_onStart = Signal.new(),
		_onComplete = Signal.new(),
	}, BaseMotor)
end

function BaseMotor:onStep(handler)
	return self._onStep:connect(handler)
end

function BaseMotor:onStart(handler)
	return self._onStart:connect(handler)
end

function BaseMotor:onComplete(handler)
	return self._onComplete:connect(handler)
end

function BaseMotor:start()
	if not self._connection then
		self._connection = RunService.RenderStepped:Connect(function(deltaTime)
			self:step(deltaTime)
		end)
	end
end

function BaseMotor:stop()
	if self._connection then
		self._connection:Disconnect()
		self._connection = nil
	end
end

BaseMotor.destroy = BaseMotor.stop

BaseMotor.step = noop
BaseMotor.getValue = noop
BaseMotor.setGoal = noop

function BaseMotor:__tostring()
	return "Motor"
end

return BaseMotor
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e872</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXe7afdd4088964623abf4bd8b04aa49bd">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">BaseMotor.spec</string>
										<string name="ScriptGuid">{08280101-3c18-449e-99d9-da247f54964f}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local RunService = game:GetService("RunService")

	local BaseMotor = require(script.Parent.BaseMotor)

	describe("connection management", function()
		local motor = BaseMotor.new()

		it("should hook up connections on :start()", function()
			motor:start()
			expect(typeof(motor._connection)).to.equal("RBXScriptConnection")
		end)

		it("should remove connections on :stop() or :destroy()", function()
			motor:stop()
			expect(motor._connection).to.equal(nil)
		end)
	end)

	it("should call :step() with deltaTime", function()
		local motor = BaseMotor.new()

		local argumentsProvided
		function motor:step(...)
			argumentsProvided = { ... }
			motor:stop()
		end

		motor:start()
		
		local expectedDeltaTime = RunService.RenderStepped:Wait()

		-- Give it another frame, because connections tend to be invoked later than :Wait() calls
		RunService.RenderStepped:Wait()

		expect(argumentsProvided).to.be.ok()
		expect(argumentsProvided[1]).to.equal(expectedDeltaTime)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e873</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXc3daf1a613964397bd9ab209d8e84785">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">GroupMotor</string>
										<string name="ScriptGuid">{11ad78b0-7cf4-40ec-bb83-01f651346c1e}</string>
										<ProtectedString name="Source"><![CDATA[local BaseMotor = require(script.Parent.BaseMotor)
local SingleMotor = require(script.Parent.SingleMotor)

local isMotor = require(script.Parent.isMotor)

local GroupMotor = setmetatable({}, BaseMotor)
GroupMotor.__index = GroupMotor

local function toMotor(value)
	if isMotor(value) then
		return value
	end

	local valueType = typeof(value)

	if valueType == "number" then
		return SingleMotor.new(value, false)
	elseif valueType == "table" then
		return GroupMotor.new(value, false)
	end

	error(("Unable to convert %q to motor; type %s is unsupported"):format(value, valueType), 2)
end

function GroupMotor.new(initialValues, useImplicitConnections)
	assert(initialValues, "Missing argument #1: initialValues")
	assert(typeof(initialValues) == "table", "initialValues must be a table!")
	assert(not initialValues.step, "initialValues contains disallowed property \"step\". Did you mean to put a table of values here?")

	local self = setmetatable(BaseMotor.new(), GroupMotor)

	if useImplicitConnections ~= nil then
		self._useImplicitConnections = useImplicitConnections
	else
		self._useImplicitConnections = true
	end

	self._complete = true
	self._motors = {}

	for key, value in pairs(initialValues) do
		self._motors[key] = toMotor(value)
	end

	return self
end

function GroupMotor:step(deltaTime)
	if self._complete then
		return true
	end

	local allMotorsComplete = true

	for _, motor in pairs(self._motors) do
		local complete = motor:step(deltaTime)
		if not complete then
			-- If any of the sub-motors are incomplete, the group motor will not be complete either
			allMotorsComplete = false
		end
	end

	self._onStep:fire(self:getValue())

	if allMotorsComplete then
		if self._useImplicitConnections then
			self:stop()
		end

		self._complete = true
		self._onComplete:fire()
	end

	return allMotorsComplete
end

function GroupMotor:setGoal(goals)
	assert(not goals.step, "goals contains disallowed property \"step\". Did you mean to put a table of goals here?")

	self._complete = false
	self._onStart:fire()

	for key, goal in pairs(goals) do
		local motor = assert(self._motors[key], ("Unknown motor for key %s"):format(key))
		motor:setGoal(goal)
	end

	if self._useImplicitConnections then
		self:start()
	end
end

function GroupMotor:getValue()
	local values = {}

	for key, motor in pairs(self._motors) do
		values[key] = motor:getValue()
	end

	return values
end

function GroupMotor:__tostring()
	return "Motor(Group)"
end

return GroupMotor
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e874</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX3956db2e30a5460db12b6449eeadfe75">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">GroupMotor.spec</string>
										<string name="ScriptGuid">{7be04655-c11c-4ada-bbb3-c3cb0ff688c2}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local GroupMotor = require(script.Parent.GroupMotor)

	local Instant = require(script.Parent.Instant)
	local Spring = require(script.Parent.Spring)

	it("should complete when all child motors are complete", function()
		local motor = GroupMotor.new({
			A = 1,
			B = 2,
		}, false)

		expect(motor._complete).to.equal(true)

		motor:setGoal({
			A = Instant.new(3),
			B = Spring.new(4, { frequency = 7.5, dampingRatio = 1 })
		})

		expect(motor._complete).to.equal(false)

		motor:step(1/60)

		expect(motor._complete).to.equal(false)

		for _ = 1, 0.5 * 60 do
			motor:step(1/60)
		end

		expect(motor._complete).to.equal(true)
	end)

	it("should start when the goal is set", function()
		local motor = GroupMotor.new({
			A = 0,
		}, false)

		local bool = false
		motor:onStart(function()
			bool = not bool
		end)

		motor:setGoal({
			A = Instant.new(1)
		})

		expect(bool).to.equal(true)

		motor:setGoal({
			A = Instant.new(1)
		})

		expect(bool).to.equal(false)
	end)

	it("should properly return all values", function()
		local motor = GroupMotor.new({
			A = 1,
			B = 2,
		}, false)

		local value = motor:getValue()

		expect(value.A).to.equal(1)
		expect(value.B).to.equal(2)
	end)

	it("should error when a goal is given to GroupMotor.new", function()
		local success = pcall(function()
			GroupMotor.new(Instant.new(0))
		end)

		expect(success).to.equal(false)
	end)

	it("should error when a single goal is provided to GroupMotor:step", function()
		local success = pcall(function()
			GroupMotor.new({ a = 1 }):setGoal(Instant.new(0))
		end)

		expect(success).to.equal(false)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e875</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX748fa153803449ad9f7a435438fc2841">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Instant</string>
										<string name="ScriptGuid">{25707e35-8394-42dc-ab58-cbf5e8deac17}</string>
										<ProtectedString name="Source"><![CDATA[local Instant = {}
Instant.__index = Instant

function Instant.new(targetValue)
	return setmetatable({
		_targetValue = targetValue,
	}, Instant)
end

function Instant:step()
	return {
		complete = true,
		value = self._targetValue,
	}
end

return Instant]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e876</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX25e97af2cfaa4b689e139b6a4ede79f3">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Instant.spec</string>
										<string name="ScriptGuid">{e64dbd45-a5fd-441c-9942-d0fc2ebc5ec1}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local Instant = require(script.Parent.Instant)

	it("should return a completed state with the provided value", function()
		local goal = Instant.new(1.23)
		local state = goal:step(0.1, { value = 0, complete = false })
		expect(state.complete).to.equal(true)
		expect(state.value).to.equal(1.23)
	end)
end]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e877</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX43f76a18e36a4e46a36bd1a817780e4c">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Linear</string>
										<string name="ScriptGuid">{519fc71f-1297-41a0-a6ce-71270cef299a}</string>
										<ProtectedString name="Source"><![CDATA[local Linear = {}
Linear.__index = Linear

function Linear.new(targetValue, options)
	assert(targetValue, "Missing argument #1: targetValue")
	
	options = options or {}

	return setmetatable({
		_targetValue = targetValue,
		_velocity = options.velocity or 1,
	}, Linear)
end

function Linear:step(state, dt)
	local position = state.value
	local velocity = self._velocity -- Linear motion ignores the state's velocity
	local goal = self._targetValue

	local dPos = dt * velocity

	local complete = dPos >= math.abs(goal - position)
	position = position + dPos * (goal > position and 1 or -1)
	if complete then
		position = self._targetValue
		velocity = 0
	end
	
	return {
		complete = complete,
		value = position,
		velocity = velocity,
	}
end

return Linear]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e878</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXa208d6c18eac4b5bb64f12e85be0c8d2">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Linear.spec</string>
										<string name="ScriptGuid">{1da14387-c68e-4a96-bcc4-d77c53a98d71}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local SingleMotor = require(script.Parent.SingleMotor)
	local Linear = require(script.Parent.Linear)

	describe("completed state", function()
		local motor = SingleMotor.new(0, false)

		local goal = Linear.new(1, { velocity = 1 })
		motor:setGoal(goal)
	
		for _ = 1, 60 do
			motor:step(1/60)
		end
		
		it("should complete", function()
			expect(motor._state.complete).to.equal(true)
		end)

		it("should be exactly the goal value when completed", function()
			expect(motor._state.value).to.equal(1)
		end)
	end)

	describe("uncompleted state", function()
		local motor = SingleMotor.new(0, false)

		local goal = Linear.new(1, { velocity = 1 })
		motor:setGoal(goal)
	
		for _ = 1, 59 do
			motor:step(1/60)
		end
		
		it("should be uncomplete", function()
			expect(motor._state.complete).to.equal(false)
		end)
	end)

	describe("negative velocity", function()
		local motor = SingleMotor.new(1, false)

		local goal = Linear.new(0, { velocity = 1 })
		motor:setGoal(goal)
		
		for _ = 1, 60 do
			motor:step(1/60)
		end
		
		it("should complete", function()
			expect(motor._state.complete).to.equal(true)
		end)

		it("should be exactly the goal value when completed", function()
			expect(motor._state.value).to.equal(0)
		end)
	end)
end]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e879</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX4b347c7c9c4141c39c1739a1de3b1113">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Signal</string>
										<string name="ScriptGuid">{94c8a2b6-ef4a-4760-b453-fa22b60d188f}</string>
										<ProtectedString name="Source"><![CDATA[local Connection = {}
Connection.__index = Connection

function Connection.new(signal, handler)
	return setmetatable({
		signal = signal,
		connected = true,
		_handler = handler,
	}, Connection)
end

function Connection:disconnect()
	if self.connected then
		self.connected = false

		for index, connection in pairs(self.signal._connections) do
			if connection == self then
				table.remove(self.signal._connections, index)
				return
			end
		end
	end
end

local Signal = {}
Signal.__index = Signal

function Signal.new()
	return setmetatable({
		_connections = {},
		_threads = {},
	}, Signal)
end

function Signal:fire(...)
	for _, connection in pairs(self._connections) do
		connection._handler(...)
	end

	for _, thread in pairs(self._threads) do
		coroutine.resume(thread, ...)
	end
	
	self._threads = {}
end

function Signal:connect(handler)
	local connection = Connection.new(self, handler)
	table.insert(self._connections, connection)
	return connection
end

function Signal:wait()
	table.insert(self._threads, coroutine.running())
	return coroutine.yield()
end

return Signal]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e87a</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX83bf3810f0b844bfb3603f87f2c42722">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Signal.spec</string>
										<string name="ScriptGuid">{36cda936-4e2f-4d0f-91b3-9e6e364bbe59}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local Signal = require(script.Parent.Signal)

	it("should invoke all connections, instantly", function()
		local signal = Signal.new()

		local a, b

		signal:connect(function(value)
			a = value
		end)

		signal:connect(function(value)
			b = value
		end)

		signal:fire("hello")

		expect(a).to.equal("hello")
		expect(b).to.equal("hello")
	end)

	it("should return values when :wait() is called", function()
		local signal = Signal.new()

		spawn(function()
			signal:fire(123, "hello")
		end)

		local a, b = signal:wait()
		
		expect(a).to.equal(123)
		expect(b).to.equal("hello")
	end)

	it("should properly handle disconnections", function()
		local signal = Signal.new()

		local didRun = false

		local connection = signal:connect(function()
			didRun = true
		end)
		connection:disconnect()

		signal:fire()
		expect(didRun).to.equal(false)
	end)
end]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e87b</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX94f91ac0d7dc445a9d4dbba157d6806b">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">SingleMotor</string>
										<string name="ScriptGuid">{6538932e-9240-49d8-8d7f-1a8b7dffcdb6}</string>
										<ProtectedString name="Source"><![CDATA[local BaseMotor = require(script.Parent.BaseMotor)

local SingleMotor = setmetatable({}, BaseMotor)
SingleMotor.__index = SingleMotor

function SingleMotor.new(initialValue, useImplicitConnections)
	assert(initialValue, "Missing argument #1: initialValue")
	assert(typeof(initialValue) == "number", "initialValue must be a number!")

	local self = setmetatable(BaseMotor.new(), SingleMotor)

	if useImplicitConnections ~= nil then
		self._useImplicitConnections = useImplicitConnections
	else
		self._useImplicitConnections = true
	end

	self._goal = nil
	self._state = {
		complete = true,
		value = initialValue,
	}

	return self
end

function SingleMotor:step(deltaTime)
	if self._state.complete then
		return true
	end

	local newState = self._goal:step(self._state, deltaTime)

	self._state = newState
	self._onStep:fire(newState.value)

	if newState.complete then
		if self._useImplicitConnections then
			self:stop()
		end

		self._onComplete:fire()
	end

	return newState.complete
end

function SingleMotor:getValue()
	return self._state.value
end

function SingleMotor:setGoal(goal)
	self._state.complete = false
	self._goal = goal

	self._onStart:fire()

	if self._useImplicitConnections then
		self:start()
	end
end

function SingleMotor:__tostring()
	return "Motor(Single)"
end

return SingleMotor
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e87c</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXba74d492ccc64083be24048439318a9b">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">SingleMotor.spec</string>
										<string name="ScriptGuid">{f6d1fadd-595b-4db3-94b5-6474e62e29f8}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local SingleMotor = require(script.Parent.SingleMotor)
	local Instant = require(script.Parent.Instant)

	it("should assign new state on step", function()
		local motor = SingleMotor.new(0, false)

		motor:setGoal(Instant.new(5))
		motor:step(1/60)

		expect(motor._state.complete).to.equal(true)
		expect(motor._state.value).to.equal(5)
	end)

	it("should invoke onComplete listeners when the goal is completed", function()
		local motor = SingleMotor.new(0, false)

		local didComplete = false
		motor:onComplete(function()
			didComplete = true
		end)

		motor:setGoal(Instant.new(5))
		motor:step(1/60)

		expect(didComplete).to.equal(true)
	end)

	it("should start when the goal is set", function()
		local motor = SingleMotor.new(0, false)

		local bool = false
		motor:onStart(function()
			bool = not bool
		end)

		motor:setGoal(Instant.new(5))

		expect(bool).to.equal(true)

		motor:setGoal(Instant.new(5))

		expect(bool).to.equal(false)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e87d</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX88c46ddffc9e419f8818281cbf2a646c">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Spring</string>
										<string name="ScriptGuid">{91bbafd9-fd51-400f-b1dd-dda222525609}</string>
										<ProtectedString name="Source"><![CDATA[local VELOCITY_THRESHOLD = 0.001
local POSITION_THRESHOLD = 0.001

local EPS = 0.0001

local Spring = {}
Spring.__index = Spring

function Spring.new(targetValue, options)
	assert(targetValue, "Missing argument #1: targetValue")
	options = options or {}

	return setmetatable({
		_targetValue = targetValue,
		_frequency = options.frequency or 4,
		_dampingRatio = options.dampingRatio or 1,
	}, Spring)
end

function Spring:step(state, dt)
	-- Copyright 2018 Parker Stebbins (parker@fractality.io)
	-- github.com/Fraktality/Spring
	-- Distributed under the MIT license

	local d = self._dampingRatio
	local f = self._frequency*2*math.pi
	local g = self._targetValue
	local p0 = state.value
	local v0 = state.velocity or 0

	local offset = p0 - g
	local decay = math.exp(-d*f*dt)

	local p1, v1

	if d == 1 then -- Critically damped
		p1 = (offset*(1 + f*dt) + v0*dt)*decay + g
		v1 = (v0*(1 - f*dt) - offset*(f*f*dt))*decay
	elseif d < 1 then -- Underdamped
		local c = math.sqrt(1 - d*d)

		local i = math.cos(f*c*dt)
		local j = math.sin(f*c*dt)

		-- Damping ratios approaching 1 can cause division by small numbers.
		-- To fix that, group terms around z=j/c and find an approximation for z.
		-- Start with the definition of z:
		--    z = sin(dt*f*c)/c
		-- Substitute a=dt*f:
		--    z = sin(a*c)/c
		-- Take the Maclaurin expansion of z with respect to c:
		--    z = a - (a^3*c^2)/6 + (a^5*c^4)/120 + O(c^6)
		--    z ≈ a - (a^3*c^2)/6 + (a^5*c^4)/120
		-- Rewrite in Horner form:
		--    z ≈ a + ((a*a)*(c*c)*(c*c)/20 - c*c)*(a*a*a)/6

		local z
		if c > EPS then
			z = j/c
		else
			local a = dt*f
			z = a + ((a*a)*(c*c)*(c*c)/20 - c*c)*(a*a*a)/6
		end

		-- Frequencies approaching 0 present a similar problem.
		-- We want an approximation for y as f approaches 0, where:
		--    y = sin(dt*f*c)/(f*c)
		-- Substitute b=dt*c:
		--    y = sin(b*c)/b
		-- Now reapply the process from z.

		local y
		if f*c > EPS then
			y = j/(f*c)
		else
			local b = f*c
			y = dt + ((dt*dt)*(b*b)*(b*b)/20 - b*b)*(dt*dt*dt)/6
		end

		p1 = (offset*(i + d*z) + v0*y)*decay + g
		v1 = (v0*(i - z*d) - offset*(z*f))*decay

	else -- Overdamped
		local c = math.sqrt(d*d - 1)

		local r1 = -f*(d - c)
		local r2 = -f*(d + c)

		local co2 = (v0 - offset*r1)/(2*f*c)
		local co1 = offset - co2

		local e1 = co1*math.exp(r1*dt)
		local e2 = co2*math.exp(r2*dt)

		p1 = e1 + e2 + g
		v1 = e1*r1 + e2*r2
	end

	local complete = math.abs(v1) < VELOCITY_THRESHOLD and math.abs(p1 - g) < POSITION_THRESHOLD
	
	return {
		complete = complete,
		value = complete and g or p1,
		velocity = v1,
	}
end

return Spring]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e87e</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX87213d95e0594fd8aae1ccffb652a682">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Spring.spec</string>
										<string name="ScriptGuid">{20e2b2c4-0c95-4675-907b-0b5d8df09621}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local SingleMotor = require(script.Parent.SingleMotor)
	local Spring = require(script.Parent.Spring)

	describe("completed state", function()
		local motor = SingleMotor.new(0, false)

		local goal = Spring.new(1, { frequency = 2, dampingRatio = 0.75 })
		motor:setGoal(goal)
	
		for _ = 1, 100 do
			motor:step(1/60)
		end
		
		it("should complete", function()
			expect(motor._state.complete).to.equal(true)
		end)

		it("should be exactly the goal value when completed", function()
			expect(motor._state.value).to.equal(1)
		end)
	end)

	it("should inherit velocity", function()
		local motor = SingleMotor.new(0, false)
		motor._state = { complete = false, value = 0, velocity = -5 }

		local goal = Spring.new(1, { frequency = 2, dampingRatio = 1 })

		motor:setGoal(goal)
		motor:step(1/60)

		expect(motor._state.velocity < 0).to.equal(true)
	end)
end]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e87f</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXd95a202adac54253bfdb25e28fedf37e">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">isMotor</string>
										<string name="ScriptGuid">{3d941d05-fa01-4b8f-a26a-662d4fc560d0}</string>
										<ProtectedString name="Source"><![CDATA[local function isMotor(value)
	local motorType = tostring(value):match("^Motor%((.+)%)$")

	if motorType then
		return true, motorType
	else
		return false
	end
end

return isMotor]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e880</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX562ea982b74347cc8495627960da18da">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">isMotor.spec</string>
										<string name="ScriptGuid">{2c0c4de5-f1c5-4b56-858f-d87888fff804}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local isMotor = require(script.Parent.isMotor)

	local SingleMotor = require(script.Parent.SingleMotor)
	local GroupMotor = require(script.Parent.GroupMotor)

	local singleMotor = SingleMotor.new(0)
	local groupMotor = GroupMotor.new({})

	it("should properly detect motors", function()
		expect(isMotor(singleMotor)).to.equal(true)
		expect(isMotor(groupMotor)).to.equal(true)
	end)

	it("shouldn't detect things that aren't motors", function()
		expect(isMotor({})).to.equal(false)
	end)

	it("should return the proper motor type", function()
		local _, singleMotorType = isMotor(singleMotor)
		local _, groupMotorType = isMotor(groupMotor)

		expect(singleMotorType).to.equal("Single")
		expect(groupMotorType).to.equal("Group")
	end)
end]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e881</UniqueId>
									</Properties>
								</Item>
							</Item>
						</Item>
						<Item class="Folder" referent="RBXe6b6d1ced61a4e7b87658d63ad778c58">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<string name="Name">roblox_roact@1.4.4</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e882</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBX46c09e72a107492bb53bfade65daa090">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">roact</string>
									<string name="ScriptGuid">{37282940-1ed3-4965-a752-12951afd2c32}</string>
									<ProtectedString name="Source"><![CDATA[--~strict
--[[
	Packages up the internals of Roact and exposes a public API for it.
]]

local GlobalConfig = require(script.GlobalConfig)
local createReconciler = require(script.createReconciler)
local createReconcilerCompat = require(script.createReconcilerCompat)
local RobloxRenderer = require(script.RobloxRenderer)
local strict = require(script.strict)
local Binding = require(script.Binding)

local robloxReconciler = createReconciler(RobloxRenderer)
local reconcilerCompat = createReconcilerCompat(robloxReconciler)

local Roact = strict({
	Component = require(script.Component),
	createElement = require(script.createElement),
	createFragment = require(script.createFragment),
	oneChild = require(script.oneChild),
	PureComponent = require(script.PureComponent),
	None = require(script.None),
	Portal = require(script.Portal),
	createRef = require(script.createRef),
	forwardRef = require(script.forwardRef),
	createBinding = Binding.create,
	joinBindings = Binding.join,
	createContext = require(script.createContext),

	Change = require(script.PropMarkers.Change),
	Children = require(script.PropMarkers.Children),
	Event = require(script.PropMarkers.Event),
	Ref = require(script.PropMarkers.Ref),

	mount = robloxReconciler.mountVirtualTree,
	unmount = robloxReconciler.unmountVirtualTree,
	update = robloxReconciler.updateVirtualTree,

	reify = reconcilerCompat.reify,
	teardown = reconcilerCompat.teardown,
	reconcile = reconcilerCompat.reconcile,

	setGlobalConfig = GlobalConfig.set,

	-- APIs that may change in the future without warning
	UNSTABLE = {},
})

return Roact
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e883</UniqueId>
								</Properties>
								<Item class="ModuleScript" referent="RBX846be7b75d554d2d852147bd8b4ab0f0">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Binding</string>
										<string name="ScriptGuid">{2edf74c4-cc51-4417-bf18-0bcc6042bb91}</string>
										<ProtectedString name="Source"><![CDATA[local createSignal = require(script.Parent.createSignal)
local Symbol = require(script.Parent.Symbol)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local BindingImpl = Symbol.named("BindingImpl")

local BindingInternalApi = {}

local bindingPrototype = {}

function bindingPrototype:getValue()
	return BindingInternalApi.getValue(self)
end

function bindingPrototype:map(predicate)
	return BindingInternalApi.map(self, predicate)
end

local BindingPublicMeta = {
	__index = bindingPrototype,
	__tostring = function(self)
		return string.format("RoactBinding(%s)", tostring(self:getValue()))
	end,
}

function BindingInternalApi.update(binding, newValue)
	return binding[BindingImpl].update(newValue)
end

function BindingInternalApi.subscribe(binding, callback)
	return binding[BindingImpl].subscribe(callback)
end

function BindingInternalApi.getValue(binding)
	return binding[BindingImpl].getValue()
end

function BindingInternalApi.create(initialValue)
	local impl = {
		value = initialValue,
		changeSignal = createSignal(),
	}

	function impl.subscribe(callback)
		return impl.changeSignal:subscribe(callback)
	end

	function impl.update(newValue)
		impl.value = newValue
		impl.changeSignal:fire(newValue)
	end

	function impl.getValue()
		return impl.value
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta), impl.update
end

function BindingInternalApi.map(upstreamBinding, predicate)
	if config.typeChecks then
		assert(Type.of(upstreamBinding) == Type.Binding, "Expected arg #1 to be a binding")
		assert(typeof(predicate) == "function", "Expected arg #1 to be a function")
	end

	local impl = {}

	function impl.subscribe(callback)
		return BindingInternalApi.subscribe(upstreamBinding, function(newValue)
			callback(predicate(newValue))
		end)
	end

	function impl.update(_newValue)
		error("Bindings created by Binding:map(fn) cannot be updated directly", 2)
	end

	function impl.getValue()
		return predicate(upstreamBinding:getValue())
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

function BindingInternalApi.join(upstreamBindings)
	if config.typeChecks then
		assert(typeof(upstreamBindings) == "table", "Expected arg #1 to be of type table")

		for key, value in pairs(upstreamBindings) do
			if Type.of(value) ~= Type.Binding then
				local message = ("Expected arg #1 to contain only bindings, but key %q had a non-binding value"):format(
					tostring(key)
				)
				error(message, 2)
			end
		end
	end

	local impl = {}

	local function getValue()
		local value = {}

		for key, upstream in pairs(upstreamBindings) do
			value[key] = upstream:getValue()
		end

		return value
	end

	function impl.subscribe(callback)
		local disconnects = {}

		for key, upstream in pairs(upstreamBindings) do
			disconnects[key] = BindingInternalApi.subscribe(upstream, function(_newValue)
				callback(getValue())
			end)
		end

		return function()
			if disconnects == nil then
				return
			end

			for _, disconnect in pairs(disconnects) do
				disconnect()
			end

			disconnects = nil :: any
		end
	end

	function impl.update(_newValue)
		error("Bindings created by joinBindings(...) cannot be updated directly", 2)
	end

	function impl.getValue()
		return getValue()
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

return BindingInternalApi
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e884</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXdd501c14c76d4b029a72b4f1b75b7e24">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Binding.spec</string>
										<string name="ScriptGuid">{81719609-2156-4670-8727-da15b8e8e4d7}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local createSpy = require(script.Parent.createSpy)
	local Type = require(script.Parent.Type)
	local GlobalConfig = require(script.Parent.GlobalConfig)

	local Binding = require(script.Parent.Binding)

	describe("Binding.create", function()
		it("should return a Binding object and an update function", function()
			local binding, update = Binding.create(1)

			expect(Type.of(binding)).to.equal(Type.Binding)
			expect(typeof(update)).to.equal("function")
		end)

		it("should support tostring on bindings", function()
			local binding, update = Binding.create(1)
			expect(tostring(binding)).to.equal("RoactBinding(1)")

			update("foo")
			expect(tostring(binding)).to.equal("RoactBinding(foo)")
		end)
	end)

	describe("Binding object", function()
		it("should provide a getter and setter", function()
			local binding, update = Binding.create(1)

			expect(binding:getValue()).to.equal(1)

			update(3)

			expect(binding:getValue()).to.equal(3)
		end)

		it("should let users subscribe and unsubscribe to its updates", function()
			local binding, update = Binding.create(1)

			local spy = createSpy()
			local disconnect = Binding.subscribe(binding, spy.value)

			expect(spy.callCount).to.equal(0)

			update(2)

			expect(spy.callCount).to.equal(1)
			spy:assertCalledWith(2)

			disconnect()
			update(3)

			expect(spy.callCount).to.equal(1)
		end)
	end)

	describe("Mapped bindings", function()
		it("should be composable", function()
			local word, updateWord = Binding.create("hi")

			local wordLength = word:map(string.len)
			local isEvenLength = wordLength:map(function(value)
				return value % 2 == 0
			end)

			expect(word:getValue()).to.equal("hi")
			expect(wordLength:getValue()).to.equal(2)
			expect(isEvenLength:getValue()).to.equal(true)

			updateWord("sup")

			expect(word:getValue()).to.equal("sup")
			expect(wordLength:getValue()).to.equal(3)
			expect(isEvenLength:getValue()).to.equal(false)
		end)

		it("should cascade updates when subscribed", function()
			-- base binding
			local word, updateWord = Binding.create("hi")

			local wordSpy = createSpy()
			local disconnectWord = Binding.subscribe(word, wordSpy.value)

			-- binding -> base binding
			local length = word:map(string.len)

			local lengthSpy = createSpy()
			local disconnectLength = Binding.subscribe(length, lengthSpy.value)

			-- binding -> binding -> base binding
			local isEvenLength = length:map(function(value)
				return value % 2 == 0
			end)

			local isEvenLengthSpy = createSpy()
			local disconnectIsEvenLength = Binding.subscribe(isEvenLength, isEvenLengthSpy.value)

			expect(wordSpy.callCount).to.equal(0)
			expect(lengthSpy.callCount).to.equal(0)
			expect(isEvenLengthSpy.callCount).to.equal(0)

			updateWord("nice")

			expect(wordSpy.callCount).to.equal(1)
			wordSpy:assertCalledWith("nice")

			expect(lengthSpy.callCount).to.equal(1)
			lengthSpy:assertCalledWith(4)

			expect(isEvenLengthSpy.callCount).to.equal(1)
			isEvenLengthSpy:assertCalledWith(true)

			disconnectWord()
			disconnectLength()
			disconnectIsEvenLength()

			updateWord("goodbye")

			expect(wordSpy.callCount).to.equal(1)
			expect(isEvenLengthSpy.callCount).to.equal(1)
			expect(lengthSpy.callCount).to.equal(1)
		end)

		it("should throw when updated directly", function()
			local source = Binding.create(1)
			local mapped = source:map(function(v)
				return v
			end)

			expect(function()
				Binding.update(mapped, 5)
			end).to.throw()
		end)
	end)

	describe("Binding.join", function()
		it("should have getValue", function()
			local binding1 = Binding.create(1)
			local binding2 = Binding.create(2)
			local binding3 = Binding.create(3)

			local joinedBinding = Binding.join({
				binding1,
				binding2,
				foo = binding3,
			})

			local bindingValue = joinedBinding:getValue()
			expect(bindingValue).to.be.a("table")
			expect(bindingValue[1]).to.equal(1)
			expect(bindingValue[2]).to.equal(2)
			expect(bindingValue.foo).to.equal(3)
		end)

		it("should update when any one of the subscribed bindings updates", function()
			local binding1, update1 = Binding.create(1)
			local binding2, update2 = Binding.create(2)
			local binding3, update3 = Binding.create(3)

			local joinedBinding = Binding.join({
				binding1,
				binding2,
				foo = binding3,
			})

			local spy = createSpy()
			Binding.subscribe(joinedBinding, spy.value)

			expect(spy.callCount).to.equal(0)

			update1(3)
			expect(spy.callCount).to.equal(1)

			local args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(2)
			expect(args.value["foo"]).to.equal(3)

			update2(4)
			expect(spy.callCount).to.equal(2)

			args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(4)
			expect(args.value["foo"]).to.equal(3)

			update3(8)
			expect(spy.callCount).to.equal(3)

			args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(4)
			expect(args.value["foo"]).to.equal(8)
		end)

		it("should disconnect from all upstream bindings", function()
			local binding1, update1 = Binding.create(1)
			local binding2, update2 = Binding.create(2)

			local joined = Binding.join({ binding1, binding2 })

			local spy = createSpy()
			local disconnect = Binding.subscribe(joined, spy.value)

			expect(spy.callCount).to.equal(0)

			update1(3)
			expect(spy.callCount).to.equal(1)

			update2(3)
			expect(spy.callCount).to.equal(2)

			disconnect()
			update1(4)
			expect(spy.callCount).to.equal(2)

			update2(2)
			expect(spy.callCount).to.equal(2)

			local value = joined:getValue()
			expect(value[1]).to.equal(4)
			expect(value[2]).to.equal(2)
		end)

		it("should be okay with calling disconnect multiple times", function()
			local joined = Binding.join({})

			local disconnect = Binding.subscribe(joined, function() end)

			disconnect()
			disconnect()
		end)

		it("should throw if updated directly", function()
			local joined = Binding.join({})

			expect(function()
				Binding.update(joined, 0)
			end)
		end)

		it("should throw when a non-table value is passed", function()
			GlobalConfig.scoped({
				typeChecks = true,
			}, function()
				expect(function()
					Binding.join("hi")
				end).to.throw()
			end)
		end)

		it("should throw when a non-binding value is passed via table", function()
			GlobalConfig.scoped({
				typeChecks = true,
			}, function()
				expect(function()
					local binding = Binding.create(123)

					Binding.join({
						binding,
						"abcde",
					})
				end).to.throw()
			end)
		end)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e885</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX6ec5c963aaf8468f8f1a27ae97092316">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Component</string>
										<string name="ScriptGuid">{ef85bc82-b414-4199-abfb-b567937ae561}</string>
										<ProtectedString name="Source"><![CDATA[local assign = require(script.Parent.assign)
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)
local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)
local invalidSetStateMessages = require(script.Parent.invalidSetStateMessages)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

--[[
	Calling setState during certain lifecycle allowed methods has the potential
	to create an infinitely updating component. Rather than time out, we exit
	with an error if an unreasonable number of self-triggering updates occur
]]
local MAX_PENDING_UPDATES = 100

local InternalData = Symbol.named("InternalData")

local componentMissingRenderMessage = [[
The component %q is missing the `render` method.
`render` must be defined when creating a Roact component!]]

local tooManyUpdatesMessage = [[
The component %q has reached the setState update recursion limit.
When using `setState` in `didUpdate`, make sure that it won't repeat infinitely!]]

local componentClassMetatable = {}

function componentClassMetatable:__tostring()
	return self.__componentName
end

local Component = {}
setmetatable(Component, componentClassMetatable)

Component[Type] = Type.StatefulComponentClass
Component.__index = Component
Component.__componentName = "Component"

--[[
	A method called by consumers of Roact to create a new component class.
	Components can not be extended beyond this point, with the exception of
	PureComponent.
]]
function Component:extend(name)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentClass, "Invalid `self` argument to `extend`.")
		assert(typeof(name) == "string", "Component class name must be a string")
	end

	local class = {}

	for key, value in pairs(self) do
		-- Roact opts to make consumers use composition over inheritance, which
		-- lines up with React.
		-- https://reactjs.org/docs/composition-vs-inheritance.html
		if key ~= "extend" then
			class[key] = value
		end
	end

	class[Type] = Type.StatefulComponentClass
	class.__index = class
	class.__componentName = name

	setmetatable(class, componentClassMetatable)

	return class
end

function Component:__getDerivedState(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getDerivedState`")
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	if componentClass.getDerivedStateFromProps ~= nil then
		local derivedState = componentClass.getDerivedStateFromProps(incomingProps, incomingState)

		if derivedState ~= nil then
			if config.typeChecks then
				assert(typeof(derivedState) == "table", "getDerivedStateFromProps must return a table!")
			end

			return derivedState
		end
	end

	return nil
end

function Component:setState(mapState)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentInstance, "Invalid `self` argument to `extend`.")
	end

	local internalData = self[InternalData]
	local lifecyclePhase = internalData.lifecyclePhase

	--[[
		When preparing to update, render, or unmount, it is not safe
		to call `setState` as it will interfere with in-flight updates. It's
		also disallowed during unmounting
	]]
	if
		lifecyclePhase == ComponentLifecyclePhase.ShouldUpdate
		or lifecyclePhase == ComponentLifecyclePhase.WillUpdate
		or lifecyclePhase == ComponentLifecyclePhase.Render
	then
		local messageTemplate = invalidSetStateMessages[internalData.lifecyclePhase]

		local message = messageTemplate:format(tostring(internalData.componentClass))
		error(message, 2)
	elseif lifecyclePhase == ComponentLifecyclePhase.WillUnmount then
		-- Should not print error message. See https://github.com/facebook/react/pull/22114
		return
	end

	local pendingState = internalData.pendingState

	local partialState
	if typeof(mapState) == "function" then
		partialState = mapState(pendingState or self.state, self.props)

		-- Abort the state update if the given state updater function returns nil
		if partialState == nil then
			return
		end
	elseif typeof(mapState) == "table" then
		partialState = mapState
	else
		error("Invalid argument to setState, expected function or table", 2)
	end

	local newState
	if pendingState ~= nil then
		newState = assign(pendingState, partialState)
	else
		newState = assign({}, self.state, partialState)
	end

	if lifecyclePhase == ComponentLifecyclePhase.Init then
		-- If `setState` is called in `init`, we can skip triggering an update!
		local derivedState = self:__getDerivedState(self.props, newState)
		self.state = assign(newState, derivedState)
	elseif
		lifecyclePhase == ComponentLifecyclePhase.DidMount
		or lifecyclePhase == ComponentLifecyclePhase.DidUpdate
		or lifecyclePhase == ComponentLifecyclePhase.ReconcileChildren
	then
		--[[
			During certain phases of the component lifecycle, it's acceptable to
			allow `setState` but defer the update until we're done with ones in flight.
			We do this by collapsing it into any pending updates we have.
		]]
		local derivedState = self:__getDerivedState(self.props, newState)
		internalData.pendingState = assign(newState, derivedState)
	elseif lifecyclePhase == ComponentLifecyclePhase.Idle then
		-- Outside of our lifecycle, the state update is safe to make immediately
		self:__update(nil, newState)
	else
		local messageTemplate = invalidSetStateMessages.default

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end
end

--[[
	Returns the stack trace of where the element was created that this component
	instance's properties are based on.

	Intended to be used primarily by diagnostic tools.
]]
function Component:getElementTraceback()
	return self[InternalData].virtualNode.currentElement.source
end

--[[
	Returns a snapshot of this component given the current props and state. Must
	be overridden by consumers of Roact and should be a pure function with
	regards to props and state.

	TODO (#199): Accept props and state as arguments.
]]
function Component:render()
	local internalData = self[InternalData]

	local message = componentMissingRenderMessage:format(tostring(internalData.componentClass))

	error(message, 0)
end

--[[
	Retrieves the context value corresponding to the given key. Can return nil
	if a requested context key is not present
]]
function Component:__getContext(key)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getContext`")
		internalAssert(key ~= nil, "Context key cannot be nil")
	end

	local virtualNode = self[InternalData].virtualNode
	local context = virtualNode.context

	return context[key]
end

--[[
	Adds a new context entry to this component's context table (which will be
	passed down to child components).
]]
function Component:__addContext(key, value)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__addContext`")
	end
	local virtualNode = self[InternalData].virtualNode

	-- Make sure we store a reference to the component's original, unmodified
	-- context the virtual node. In the reconciler, we'll restore the original
	-- context if we need to replace the node (this happens when a node gets
	-- re-rendered as a different component)
	if virtualNode.originalContext == nil then
		virtualNode.originalContext = virtualNode.context
	end

	-- Build a new context table on top of the existing one, then apply it to
	-- our virtualNode
	local existing = virtualNode.context
	virtualNode.context = assign({}, existing, { [key] = value })
end

--[[
	Performs property validation if the static method validateProps is declared.
	validateProps should follow assert's expected arguments:
	(false, message: string) | true. The function may return a message in the
	true case; it will be ignored. If this fails, the function will throw the
	error.
]]
function Component:__validateProps(props)
	if not config.propValidation then
		return
	end

	local validator = self[InternalData].componentClass.validateProps

	if validator == nil then
		return
	end

	if typeof(validator) ~= "function" then
		error(
			("validateProps must be a function, but it is a %s.\nCheck the definition of the component %q."):format(
				typeof(validator),
				self.__componentName
			)
		)
	end

	local success, failureReason = validator(props)

	if not success then
		failureReason = failureReason or "<Validator function did not supply a message>"
		error(
			("Property validation failed in %s: %s\n\n%s"):format(
				self.__componentName,
				tostring(failureReason),
				self:getElementTraceback() or "<enable element tracebacks>"
			),
			0
		)
	end
end

--[[
	An internal method used by the reconciler to construct a new component
	instance and attach it to the given virtualNode.
]]
function Component:__mount(reconciler, virtualNode)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentClass, "Invalid use of `__mount`")
		internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #2 to be of type VirtualNode")
	end

	local currentElement = virtualNode.currentElement
	local hostParent = virtualNode.hostParent

	-- Contains all the information that we want to keep from consumers of
	-- Roact, or even other parts of the codebase like the reconciler.
	local internalData = {
		reconciler = reconciler,
		virtualNode = virtualNode,
		componentClass = self,
		lifecyclePhase = ComponentLifecyclePhase.Init,
		pendingState = nil,
	}

	local instance = {
		[Type] = Type.StatefulComponentInstance,
		[InternalData] = internalData,
	}

	setmetatable(instance, self)

	virtualNode.instance = instance

	local props = currentElement.props

	if self.defaultProps ~= nil then
		props = assign({}, self.defaultProps, props)
	end

	instance:__validateProps(props)

	instance.props = props

	local newContext = assign({}, virtualNode.legacyContext)
	instance._context = newContext

	instance.state = assign({}, instance:__getDerivedState(instance.props, {}))

	if instance.init ~= nil then
		instance:init(instance.props)
		assign(instance.state, instance:__getDerivedState(instance.props, instance.state))
	end

	-- It's possible for init() to redefine _context!
	virtualNode.legacyContext = instance._context

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render
	local renderResult = instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)

	if instance.didMount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidMount
		instance:didMount()
	end

	if internalData.pendingState ~= nil then
		-- __update will handle pendingState, so we don't pass any new element or state
		instance:__update(nil, nil)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
end

--[[
	Internal method used by the reconciler to clean up any resources held by
	this component instance.
]]
function Component:__unmount()
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__unmount`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	if self.willUnmount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUnmount
		self:willUnmount()
	end

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end
end

--[[
	Internal method used by setState (to trigger updates based on state) and by
	the reconciler (to trigger updates based on props)

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__update(updatedElement, updatedState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__update`")
		internalAssert(
			Type.of(updatedElement) == Type.Element or updatedElement == nil,
			"Expected arg #1 to be of type Element or nil"
		)
		internalAssert(
			typeof(updatedState) == "table" or updatedState == nil,
			"Expected arg #2 to be of type table or nil"
		)
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	local newProps = self.props
	if updatedElement ~= nil then
		newProps = updatedElement.props

		if componentClass.defaultProps ~= nil then
			newProps = assign({}, componentClass.defaultProps, newProps)
		end

		self:__validateProps(newProps)
	end

	local updateCount = 0
	repeat
		local finalState
		local pendingState = nil

		-- Consume any pending state we might have
		if internalData.pendingState ~= nil then
			pendingState = internalData.pendingState
			internalData.pendingState = nil
		end

		-- Consume a standard update to state or props
		if updatedState ~= nil or newProps ~= self.props then
			if pendingState == nil then
				finalState = updatedState or self.state
			else
				finalState = assign(pendingState, updatedState)
			end

			local derivedState = self:__getDerivedState(newProps, finalState)

			if derivedState ~= nil then
				finalState = assign({}, finalState, derivedState)
			end

			updatedState = nil
		else
			finalState = pendingState
		end

		if not self:__resolveUpdate(newProps, finalState) then
			-- If the update was short-circuited, bubble the result up to the caller
			return false
		end

		updateCount = updateCount + 1

		if updateCount > MAX_PENDING_UPDATES then
			error(tooManyUpdatesMessage:format(tostring(internalData.componentClass)), 3)
		end
	until internalData.pendingState == nil

	return true
end

--[[
	Internal method used by __update to apply new props and state

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__resolveUpdate(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__resolveUpdate`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	local oldProps = self.props
	local oldState = self.state

	if incomingProps == nil then
		incomingProps = oldProps
	end
	if incomingState == nil then
		incomingState = oldState
	end

	if self.shouldUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.ShouldUpdate
		local continueWithUpdate = self:shouldUpdate(incomingProps, incomingState)

		if not continueWithUpdate then
			internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
			return false
		end
	end

	if self.willUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUpdate
		self:willUpdate(incomingProps, incomingState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render

	self.props = incomingProps
	self.state = incomingState

	local renderResult = virtualNode.instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, renderResult)

	if self.didUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidUpdate
		self:didUpdate(oldProps, oldState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
	return true
end

return Component
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e886</UniqueId>
									</Properties>
								</Item>
								<Item class="Folder" referent="RBXbe1fb7548d4f4854b6571e56dcad19a3">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<string name="Name">Component.spec</string>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e887</UniqueId>
									</Properties>
									<Item class="ModuleScript" referent="RBX7a2e694b19724a4f898ca5c87ab93f11">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">context.spec</string>
											<string name="ScriptGuid">{c27d14ab-ca3b-4b36-af34-03d2fc7ce9a6}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local oneChild = require(script.Parent.Parent.oneChild)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be provided as an internal api on Component", function()
		local Provider = Component:extend("Provider")

		function Provider:init()
			self:__addContext("foo", "bar")
		end

		function Provider:render() end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Provider"
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			foo = "bar",
		}

		assertDeepEqual(node.context, expectedContext)
	end)

	it("should be inherited from parent stateful nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = {
				hello = self:__getContext("hello"),
				value = self:__getContext("value"),
			}
		end

		function Consumer:render() end

		local Parent = Component:extend("Parent")

		function Parent:render()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)
		assertDeepEqual(node.context, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should be inherited from parent function nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = {
				hello = self:__getContext("hello"),
				value = self:__getContext("value"),
			}
		end

		function Consumer:render() end

		local function Parent()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)
		assertDeepEqual(node.context, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should not copy the context table if it doesn't need to", function()
		local Parent = Component:extend("Parent")

		function Parent:init()
			self:__addContext("parent", "I'm here!")
		end

		function Parent:render()
			-- Create some child element
			return createElement(function() end)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local parentNode = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			parent = "I'm here!",
		}

		assertDeepEqual(parentNode.context, expectedContext)

		local childNode = oneChild(parentNode.children)

		-- Parent and child should have the same context table
		expect(parentNode.context).to.equal(childNode.context)
	end)

	it("should not allow context to move up the tree", function()
		local ChildProvider = Component:extend("ChildProvider")

		function ChildProvider:init()
			self:__addContext("child", "I'm here too!")
		end

		function ChildProvider:render() end

		local ParentProvider = Component:extend("ParentProvider")

		function ParentProvider:init()
			self:__addContext("parent", "I'm here!")
		end

		function ParentProvider:render()
			return createElement(ChildProvider)
		end

		local element = createElement(ParentProvider)
		local hostParent = nil
		local hostKey = "Parent"

		local parentNode = noopReconciler.mountVirtualNode(element, hostParent, hostKey)
		local childNode = oneChild(parentNode.children)

		local expectedParentContext = {
			parent = "I'm here!",
			-- Context does not travel back up
		}

		local expectedChildContext = {
			parent = "I'm here!",
			child = "I'm here too!",
		}

		assertDeepEqual(parentNode.context, expectedParentContext)
		assertDeepEqual(childNode.context, expectedChildContext)
	end)

	it("should contain values put into the tree by parent nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = {
				dont = self:__getContext("dont"),
				frob = self:__getContext("frob"),
			}
		end

		function Consumer:render() end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self:__addContext("frob", "ulator")
		end

		function Provider:render()
			return createElement(Consumer)
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Consumer"
		local context = {
			dont = "try it",
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		local initialContext = {
			dont = "try it",
		}

		local expectedContext = {
			dont = "try it",
			frob = "ulator",
		}

		-- Because components mutate context, we're careful with equality
		expect(node.context).never.to.equal(context)
		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)

		assertDeepEqual(context, initialContext)
		assertDeepEqual(node.context, expectedContext)
		assertDeepEqual(capturedContext, expectedContext)
	end)

	it("should transfer context to children that are replaced", function()
		local ConsumerA = Component:extend("ConsumerA")

		local function captureAllContext(component)
			return {
				A = component:__getContext("A"),
				B = component:__getContext("B"),
				frob = component:__getContext("frob"),
			}
		end

		local capturedContextA
		function ConsumerA:init()
			self:__addContext("A", "hello")

			capturedContextA = captureAllContext(self)
		end

		function ConsumerA:render() end

		local ConsumerB = Component:extend("ConsumerB")

		local capturedContextB
		function ConsumerB:init()
			self:__addContext("B", "hello")

			capturedContextB = captureAllContext(self)
		end

		function ConsumerB:render() end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self:__addContext("frob", "ulator")
		end

		function Provider:render()
			local useConsumerB = self.props.useConsumerB

			if useConsumerB then
				return createElement(ConsumerB)
			else
				return createElement(ConsumerA)
			end
		end

		local hostParent = nil
		local hostKey = "Consumer"

		local element = createElement(Provider)
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContextA = {
			frob = "ulator",
			A = "hello",
		}

		assertDeepEqual(capturedContextA, expectedContextA)

		local expectedContextB = {
			frob = "ulator",
			B = "hello",
		}

		local replacedElement = createElement(Provider, {
			useConsumerB = true,
		})
		noopReconciler.updateVirtualNode(node, replacedElement)

		assertDeepEqual(capturedContextB, expectedContextB)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e888</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX00e11db773ec49308f9daee4dc1199a0">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">defaultProps.spec</string>
											<string name="ScriptGuid">{13ec57b8-409f-463b-8c99-9f51a3ca5930}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local None = require(script.Parent.Parent.None)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should fill in when mounting before init", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:init()
			capturedProps = self.props
		end

		function Foo:render() end

		local initialProps = {
			b = 4,
			c = 6,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		local expectedProps = {
			a = defaultProps.a,
			b = initialProps.b,
			c = initialProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)

	it("should fill in when updating via props", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:render()
			capturedProps = self.props
		end

		local initialProps = {
			b = 4,
			c = 6,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)

		local updatedProps = {
			c = 5,
		}
		local updatedElement = createElement(Foo, updatedProps)

		noopReconciler.updateVirtualNode(node, updatedElement)

		local expectedProps = {
			a = defaultProps.a,
			b = defaultProps.b,
			c = updatedProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)

	it("should respect None to override a default prop with nil", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:render()
			capturedProps = self.props
		end

		local initialProps = {
			b = None,
			c = 4,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		local expectedProps = {
			a = defaultProps.a,
			b = nil,
			c = initialProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e889</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX586c176a02164d99baeb9966045fa19f">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">didMount.spec</string>
											<string name="ScriptGuid">{50963013-93ba-4bdb-8656-518527332cef}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when mounted", function()
		local MyComponent = Component:extend("MyComponent")

		local didMountSpy = createSpy()

		MyComponent.didMount = didMountSpy.value

		function MyComponent:render()
			return nil
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(didMountSpy.callCount).to.equal(1)

		local values = didMountSpy:captureValues("self")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e88a</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBXd2285083322f4eb4a085bc42fd0d8981">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">didUpdate.spec</string>
											<string name="ScriptGuid">{d6dceb5f-bbfa-4f39-aceb-8b3b191cc0f2}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when updated via updateVirtualNode", function()
		local MyComponent = Component:extend("MyComponent")

		local didUpdateSpy = createSpy()
		MyComponent.didUpdate = didUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local virtualNode = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(didUpdateSpy.callCount).to.equal(0)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(virtualNode, newElement)

		expect(didUpdateSpy.callCount).to.equal(1)

		local values = didUpdateSpy:captureValues("self", "oldProps", "oldState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.oldProps, initialProps)
		assertDeepEqual(values.oldState, {})
	end)

	it("should be invoked when updated via setState", function()
		local MyComponent = Component:extend("MyComponent")

		local didUpdateSpy = createSpy()
		MyComponent.didUpdate = didUpdateSpy.value

		local initialState = {
			a = 4,
		}

		local setState
		function MyComponent:init()
			setState = function(...)
				return self:setState(...)
			end

			self:setState(initialState)
		end

		function MyComponent:render() end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(didUpdateSpy.callCount).to.equal(0)

		setState({
			a = 5,
		})

		expect(didUpdateSpy.callCount).to.equal(1)

		local values = didUpdateSpy:captureValues("self", "oldProps", "oldState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.oldProps, {})
		assertDeepEqual(values.oldState, initialState)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e88b</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX605116d2b58d41508b335c22f963b1cb">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">extend.spec</string>
											<string name="ScriptGuid">{a172b9a2-786a-4cfd-a0fe-5255a67ee3aa}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	it("should be extendable", function()
		local MyComponent = Component:extend("The Senate")

		expect(MyComponent).to.be.ok()
		expect(Type.of(MyComponent)).to.equal(Type.StatefulComponentClass)
	end)

	it("should prevent extending a user component", function()
		local MyComponent = Component:extend("Sheev")

		expect(function()
			MyComponent:extend("Frank")
		end).to.throw()
	end)

	it("should use a given name", function()
		local MyComponent = Component:extend("FooBar")

		local name = tostring(MyComponent)

		expect(name).to.be.a("string")
		expect(name:find("FooBar")).to.be.ok()
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e88c</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX15052687d8b740c48db858a1779328cb">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">getDerivedStateFromProps.spec</string>
											<string name="ScriptGuid">{5fe6627e-e902-4ef4-975d-35107e8724a3}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createSpy = require(script.Parent.Parent.createSpy)
	local createElement = require(script.Parent.Parent.createElement)
	local createFragment = require(script.Parent.Parent.createFragment)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked on initial mount", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(1)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, { someProp = 1 })
		assertDeepEqual(values.state, {})
	end)

	it("should be invoked when updated via props", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(
			createElement(WithDerivedState, {
				someProp = 1,
			}),
			hostParent,
			hostKey
		)

		noopReconciler.updateVirtualNode(
			node,
			createElement(WithDerivedState, {
				someProp = 2,
			})
		)

		expect(getDerivedSpy.callCount).to.equal(2)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, { someProp = 2 })
		assertDeepEqual(values.state, {})
	end)

	it("should be invoked when updated via state", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self:setState({
				someState = 1,
			})
		end

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState)
		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		noopReconciler.updateVirtualNode(node, element, {
			someState = 2,
		})

		-- getDerivedStateFromProps will be called:
		-- * Once on empty props
		-- * Once during the self:setState in init
		-- * Once more, defensively, on the resulting state AFTER init
		-- * On updating with new state via updateVirtualNode
		expect(getDerivedSpy.callCount).to.equal(4)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {})
		assertDeepEqual(values.state, { someState = 2 })
	end)

	it("should be invoked when updating via state in init (which skips reconciliation)", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self:setState({
				stateFromInit = 1,
			})
		end

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		-- getDerivedStateFromProps will be called:
		-- * Once on empty props
		-- * Once during the self:setState in init
		-- * Once more, defensively, on the resulting state AFTER init
		expect(getDerivedSpy.callCount).to.equal(3)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someProp = 1,
		})
		assertDeepEqual(values.state, {
			stateFromInit = 1,
		})
	end)

	it("should receive defaultProps", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.defaultProps = {
			someDefaultProp = "foo",
		}

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(1)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someDefaultProp = "foo",
			someProp = 1,
		})

		-- Update via props, confirm that defaultProp is still present
		element = createElement(WithDerivedState, {
			someProp = 2,
		})

		noopReconciler.updateVirtualNode(node, element)

		expect(getDerivedSpy.callCount).to.equal(2)

		values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someDefaultProp = "foo",
			someProp = 2,
		})
	end)

	it("should derive state for all setState updates, even when deferred", function()
		local Child = Component:extend("Child")
		local stateUpdaterSpy = createSpy(function()
			return {}
		end)
		local stateDerivedSpy = createSpy()

		function Child:render()
			return nil
		end

		function Child:didMount()
			self.props.callback()
		end

		local Parent = Component:extend("Parent")

		Parent.getDerivedStateFromProps = stateDerivedSpy.value

		function Parent:render()
			local callback = function()
				self:setState(stateUpdaterSpy.value)
			end

			return createFragment({
				ChildA = createElement(Child, {
					callback = callback,
				}),
				ChildB = createElement(Child, {
					callback = callback,
				}),
			})
		end

		local element = createElement(Parent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(stateUpdaterSpy.callCount).to.equal(2)

		-- getDerivedStateFromProps is always called on initial state
		expect(stateDerivedSpy.callCount).to.equal(3)
	end)

	it("should have derived state after assigning to state in init", function()
		local getStateCallback
		local getDerivedSpy = createSpy(function()
			return {
				derived = true,
			}
		end)
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self.state = {
				init = true,
			}

			getStateCallback = function()
				return self.state
			end
		end

		function WithDerivedState:render()
			return nil
		end

		local hostParent = nil
		local hostKey = "WithDerivedState"
		local element = createElement(WithDerivedState)

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(2)

		assertDeepEqual(getStateCallback(), {
			init = true,
			derived = true,
		})
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e88d</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX455130fab46a4baabf773d3def06d2ce">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">getElementTraceback.spec</string>
											<string name="ScriptGuid">{6c576c86-5793-4e77-a1e8-c4c2c541d4e6}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local GlobalConfig = require(script.Parent.Parent.GlobalConfig)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should return stack traces in initial renders", function()
		local TestComponent = Component:extend("TestComponent")

		local stackTrace
		function TestComponent:init()
			stackTrace = self:getElementTraceback()
		end

		function TestComponent:render()
			return nil
		end

		local config = {
			elementTracing = true,
		}

		GlobalConfig.scoped(config, function()
			local element = createElement(TestComponent)
			local hostParent = nil
			local key = "Some key"

			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(stackTrace).to.be.a("string")
	end)

	itSKIP("it should return an updated stack trace after an update", function() end)

	it("should return nil when elementTracing is off", function()
		local stackTrace = nil

		local config = {
			elementTracing = false,
		}

		local TestComponent = Component:extend("TestComponent")

		function TestComponent:init()
			stackTrace = self:getElementTraceback()
		end

		function TestComponent:render()
			return nil
		end

		GlobalConfig.scoped(config, function()
			local element = createElement(TestComponent)
			local hostParent = nil
			local key = "Some key"

			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(stackTrace).to.equal(nil)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e88e</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBXeaf282768f2448c4a6620e70b96150f7">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">init.spec</string>
											<string name="ScriptGuid">{10d17c3e-088e-4ffe-b385-9499544ef97e}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked with props when mounted", function()
		local MyComponent = Component:extend("MyComponent")

		local initSpy = createSpy()

		MyComponent.init = initSpy.value

		function MyComponent:render()
			return nil
		end

		local props = {
			a = 5,
		}
		local element = createElement(MyComponent, props)
		local hostParent = nil
		local key = "Some Component Key"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(initSpy.callCount).to.equal(1)

		local values = initSpy:captureValues("self", "props")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		expect(typeof(values.props)).to.equal("table")
		assertDeepEqual(values.props, props)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e88f</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBXeba1b00842814b75a88e734e1cb6ea4a">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">legacyContext.spec</string>
											<string name="ScriptGuid">{3eb1ecc6-508b-4a2d-a9e0-a25d0e1dadf6}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be provided as a mutable self._context in Component:init", function()
		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.foo = "bar"
		end

		function Provider:render() end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Provider"
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			foo = "bar",
		}

		assertDeepEqual(node.legacyContext, expectedContext)
	end)

	it("should be inherited from parent stateful nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render() end

		local Parent = Component:extend("Parent")

		function Parent:render()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.legacyContext)
		assertDeepEqual(node.legacyContext, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should be inherited from parent function nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render() end

		local function Parent()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.legacyContext)
		assertDeepEqual(node.legacyContext, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should contain values put into the tree by parent nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render() end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.frob = "ulator"
		end

		function Provider:render()
			return createElement(Consumer)
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Consumer"
		local context = {
			dont = "try it",
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

		local initialContext = {
			dont = "try it",
		}

		local expectedContext = {
			dont = "try it",
			frob = "ulator",
		}

		-- Because components mutate context, we're careful with equality
		expect(node.legacyContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.legacyContext)

		assertDeepEqual(context, initialContext)
		assertDeepEqual(node.legacyContext, expectedContext)
		assertDeepEqual(capturedContext, expectedContext)
	end)

	it("should transfer context to children that are replaced", function()
		local ConsumerA = Component:extend("ConsumerA")

		local capturedContextA
		function ConsumerA:init()
			self._context.A = "hello"

			capturedContextA = self._context
		end

		function ConsumerA:render() end

		local ConsumerB = Component:extend("ConsumerB")

		local capturedContextB
		function ConsumerB:init()
			self._context.B = "hello"

			capturedContextB = self._context
		end

		function ConsumerB:render() end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.frob = "ulator"
		end

		function Provider:render()
			local useConsumerB = self.props.useConsumerB

			if useConsumerB then
				return createElement(ConsumerB)
			else
				return createElement(ConsumerA)
			end
		end

		local hostParent = nil
		local hostKey = "Consumer"

		local element = createElement(Provider)
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContextA = {
			frob = "ulator",
			A = "hello",
		}

		assertDeepEqual(capturedContextA, expectedContextA)

		local expectedContextB = {
			frob = "ulator",
			B = "hello",
		}

		local replacedElement = createElement(Provider, {
			useConsumerB = true,
		})
		noopReconciler.updateVirtualNode(node, replacedElement)

		assertDeepEqual(capturedContextB, expectedContextB)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e890</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBXa112488e2bb24fa9923fdd8009fe5310">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">render.spec</string>
											<string name="ScriptGuid">{b7d7179a-71e9-416c-833c-bfe0113374a9}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should throw on mount if not overridden", function()
		local MyComponent = Component:extend("MyComponent")

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local success, result = pcall(function()
			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(success).to.equal(false)
		expect(result:match("MyComponent")).to.be.ok()
		expect(result:match("render")).to.be.ok()
	end)

	it("should be invoked when a component is mounted", function()
		local Foo = Component:extend("Foo")

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local element = createElement(Foo)
		local hostParent = nil
		local key = "Foo Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local renderArguments = renderSpy:captureValues("self")

		expect(Type.of(renderArguments.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(capturedProps, {})
		assertDeepEqual(capturedState, {})
	end)

	it("should be invoked when a component is updated via props", function()
		local Foo = Component:extend("Foo")

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local initialProps = {
			a = 2,
		}
		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Foo Test"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local firstRenderArguments = renderSpy:captureValues("self")
		local firstProps = capturedProps
		local firstState = capturedState

		expect(Type.of(firstRenderArguments.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(firstProps, initialProps)
		assertDeepEqual(firstState, {})

		local updatedProps = {
			a = 3,
		}
		local newElement = createElement(Foo, updatedProps)

		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(2)

		local secondRenderArguments = renderSpy:captureValues("self")
		local secondProps = capturedProps
		local secondState = capturedState

		expect(Type.of(secondRenderArguments.self)).to.equal(Type.StatefulComponentInstance)
		expect(secondProps).never.to.equal(firstProps)
		assertDeepEqual(secondProps, updatedProps)
		expect(secondState).to.equal(firstState)
	end)

	it("should be invoked when a component is updated via state", function()
		local Foo = Component:extend("Foo")

		local setState
		function Foo:init()
			setState = function(...)
				return self:setState(...)
			end
		end

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local element = createElement(Foo)
		local hostParent = nil
		local key = "Foo Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local firstRenderArguments = renderSpy:captureValues("self")
		local firstProps = capturedProps
		local firstState = capturedState

		expect(Type.of(firstRenderArguments.self)).to.equal(Type.StatefulComponentInstance)

		setState({})

		expect(renderSpy.callCount).to.equal(2)

		local renderArguments = renderSpy:captureValues("self")

		expect(Type.of(renderArguments.self)).to.equal(Type.StatefulComponentInstance)
		expect(capturedProps).to.equal(firstProps)
		expect(capturedState).never.to.equal(firstState)
	end)

	itSKIP("Test defaultProps on initial render", function() end)
	itSKIP("Test defaultProps on prop update", function() end)
	itSKIP("Test defaultProps on state update", function() end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e891</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX0e38568e28224af4a9762685b75d122b">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">setState.spec</string>
											<string name="ScriptGuid">{3435f447-6212-414f-ae8c-1102dc58d13a}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local None = require(script.Parent.Parent.None)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	describe("setState", function()
		it("should not trigger an extra update when called in init", function()
			local renderCount = 0
			local updateCount = 0
			local capturedState

			local InitComponent = Component:extend("InitComponent")

			function InitComponent:init()
				self:setState({
					a = 1,
				})
			end

			function InitComponent:willUpdate()
				updateCount = updateCount + 1
			end

			function InitComponent:render()
				renderCount = renderCount + 1
				capturedState = self.state
				return nil
			end

			local initElement = createElement(InitComponent)

			noopReconciler.mountVirtualTree(initElement)

			expect(renderCount).to.equal(1)
			expect(updateCount).to.equal(0)
			expect(capturedState.a).to.equal(1)
		end)

		it("should throw when called in render", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				self:setState({
					a = 1,
				})
			end

			local renderElement = createElement(TestComponent)

			local success, result = pcall(noopReconciler.mountVirtualTree, renderElement)

			expect(success).to.equal(false)
			expect(result:match("render")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in shouldUpdate", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:shouldUpdate()
				self:setState({
					a = 1,
				})
			end

			local initialElement = createElement(TestComponent)
			local updatedElement = createElement(TestComponent)

			local tree = noopReconciler.mountVirtualTree(initialElement)

			local success, result = pcall(noopReconciler.updateVirtualTree, tree, updatedElement)

			expect(success).to.equal(false)
			expect(result:match("shouldUpdate")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in willUpdate", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:willUpdate()
				self:setState({
					a = 1,
				})
			end

			local initialElement = createElement(TestComponent)
			local updatedElement = createElement(TestComponent)
			local tree = noopReconciler.mountVirtualTree(initialElement)

			local success, result = pcall(noopReconciler.updateVirtualTree, tree, updatedElement)

			expect(success).to.equal(false)
			expect(result:match("willUpdate")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should not throw when called in willUnmount", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:willUnmount()
				self:setState({
					a = 1,
				})
			end

			local element = createElement(TestComponent)
			local tree = noopReconciler.mountVirtualTree(element)

			local success, _ = pcall(noopReconciler.unmountVirtualTree, tree)

			expect(success).to.equal(true)
		end)

		it("should remove values from state when the value is None", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback, getStateCallback

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				getStateCallback = function()
					return self.state
				end

				self:setState({
					value = 0,
				})
			end

			function TestComponent:render()
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")

			expect(getStateCallback().value).to.equal(0)

			setStateCallback({
				value = None,
			})

			expect(getStateCallback().value).to.equal(nil)

			noopReconciler.unmountVirtualNode(instance)
		end)

		it("should invoke functions to compute a partial state", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback, getStateCallback, getPropsCallback

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				getStateCallback = function()
					return self.state
				end

				getPropsCallback = function()
					return self.props
				end

				self:setState({
					value = 0,
				})
			end

			function TestComponent:render()
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")

			expect(getStateCallback().value).to.equal(0)

			setStateCallback(function(state, props)
				expect(state).to.equal(getStateCallback())
				expect(props).to.equal(getPropsCallback())

				return {
					value = state.value + 1,
				}
			end)

			expect(getStateCallback().value).to.equal(1)

			noopReconciler.unmountVirtualNode(instance)
		end)

		it("should cancel rendering if the function returns nil", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback
			local renderCount = 0

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				self:setState({
					value = 0,
				})
			end

			function TestComponent:render()
				renderCount = renderCount + 1
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")
			expect(renderCount).to.equal(1)

			setStateCallback(function(_state, _props)
				return nil
			end)

			expect(renderCount).to.equal(1)

			noopReconciler.unmountVirtualNode(instance)
		end)
	end)

	describe("setState suspension", function()
		it("should defer setState triggered while reconciling", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function()
						self:setState({
							foo = "bar",
						})
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal("bar")
		end)

		it("should defer setState triggered while reconciling during an update", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didUpdate()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function()
						-- This guards against a stack overflow that would be OUR fault
						if not self.state.foo then
							self:setState({
								foo = "bar",
							})
						end
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(nil)

			result = noopReconciler.updateVirtualNode(result, createElement(Parent))

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal("bar")

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should combine pending state changes properly", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback("foo", 1)
				self.props.callback("bar", 3)
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function(key, value)
						self:setState({
							[key] = value,
						})
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(1)
			expect(getParentStateCallback().bar).to.equal(3)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should abort properly when functional setState returns nil while deferred", function()
			local Child = Component:extend("Child")

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			local renderSpy = createSpy(function(self)
				return createElement(Child, {
					callback = function()
						self:setState(function()
							-- abort the setState
							return nil
						end)
					end,
				})
			end)

			Parent.render = renderSpy.value

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(renderSpy.callCount).to.equal(1)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should still apply pending state if a subsequent state update was aborted", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback(function()
					return {
						foo = 1,
					}
				end)
				self.props.callback(function()
					return nil
				end)
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function(stateUpdater)
						self:setState(stateUpdater)
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(1)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should not re-process new state when pending state is present after update", function()
			local setComponentState
			local getComponentState

			local MyComponent = Component:extend("MyComponent")

			function MyComponent:init()
				self:setState({
					hasUpdatedOnce = false,
					counter = 0,
				})

				setComponentState = function(mapState)
					self:setState(mapState)
				end

				getComponentState = function()
					return self.state
				end
			end

			function MyComponent:render()
				return nil
			end

			function MyComponent:didUpdate()
				if self.state.hasUpdatedOnce == false then
					self:setState({
						hasUpdatedOnce = true,
					})
				end
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(getComponentState().hasUpdatedOnce).to.equal(false)
			expect(getComponentState().counter).to.equal(0)

			setComponentState(function(state)
				return {
					counter = state.counter + 1,
				}
			end)

			expect(getComponentState().hasUpdatedOnce).to.equal(true)
			expect(getComponentState().counter).to.equal(1)
		end)

		it("should throw when an infinite update is triggered", function()
			local InfiniteUpdater = Component:extend("InfiniteUpdater")

			function InfiniteUpdater:render()
				return nil
			end

			function InfiniteUpdater:didMount()
				self:setState({})
			end

			function InfiniteUpdater:didUpdate()
				self:setState({})
			end

			local element = createElement(InfiniteUpdater)
			local hostParent = nil
			local key = "Test"

			local success, result = pcall(noopReconciler.mountVirtualNode, element, hostParent, key)

			expect(success).to.equal(false)
			expect(result:find("InfiniteUpdater")).to.be.ok()
			expect(result:find("reached the setState update recursion limit")).to.be.ok()
		end)

		itSKIP("should process single updates with both new and pending state", function()
			--[[
				This situation shouldn't be possible currently, but the implementation
				should support it for future update de-duplication
			]]
		end)

		it("should call trigger update after didMount when setting state in didMount", function()
			--[[
				Before setState suspension, it was possible to call setState in didMount but it would
				not actually finish resolving didMount until after the entire update.

				This is theoretically problematic, as it means that lifecycle methods like didUpdate
				could be called before didMount is finished. setState suspension resolves this by
				suspending state updates made in didMount and didUpdate as well as reconciliation
			]]
			local MyComponent = Component:extend("MyComponent")

			function MyComponent:init()
				self:setState({
					status = "initial mount",
				})

				self.isMounted = false
			end

			function MyComponent:render()
				return nil
			end

			function MyComponent:didMount()
				self:setState({
					status = "mounted",
				})

				self.isMounted = true
			end

			function MyComponent:didUpdate(_oldProps, oldState)
				expect(oldState.status).to.equal("initial mount")
				expect(self.state.status).to.equal("mounted")

				expect(self.isMounted).to.equal(true)
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
		end)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e892</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX0c205f237045444d96e3f72477419dee">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">shouldUpdate.spec</string>
											<string name="ScriptGuid">{ddf5d732-4fab-4f55-849b-bfecb3019725}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when props update", function()
		local MyComponent = Component:extend("MyComponent")

		local capturedProps
		local capturedState
		local shouldUpdateSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state

			return true
		end)

		MyComponent.shouldUpdate = shouldUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(shouldUpdateSpy.callCount).to.equal(0)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(shouldUpdateSpy.callCount).to.equal(1)

		local values = shouldUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)

		assertDeepEqual(values.newProps, newProps)

		assertDeepEqual(capturedProps, initialProps)

		expect(values.newState).to.equal(capturedState)
		assertDeepEqual(capturedState, {})
	end)

	it("should be invoked when state is updated", function()
		local MyComponent = Component:extend("MyComponent")

		local initialState = {
			a = 1,
		}

		local setState
		local initState
		function MyComponent:init()
			setState = function(...)
				return self:setState(...)
			end

			self:setState(initialState)

			initState = self.state
		end

		local capturedProps
		local capturedState
		local shouldUpdateSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state

			return true
		end)

		MyComponent.shouldUpdate = shouldUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(shouldUpdateSpy.callCount).to.equal(0)

		local newState = {
			a = 2,
			b = 3,
		}

		setState(newState)

		expect(shouldUpdateSpy.callCount).to.equal(1)

		local values = shouldUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)

		expect(values.newProps).to.equal(capturedProps)
		assertDeepEqual(capturedProps, {})

		assertDeepEqual(capturedState, initialState)
		expect(capturedState).to.equal(initState)
		assertDeepEqual(values.newState, newState)
	end)

	it("should not abort an update when returning true", function()
		local MyComponent = Component:extend("MyComponent")

		function MyComponent:shouldUpdate()
			return true
		end

		local renderSpy = createSpy()

		MyComponent.render = renderSpy.value

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local newElement = createElement(MyComponent)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(2)
	end)

	it("should abort an update when retuning false", function()
		local MyComponent = Component:extend("MyComponent")

		function MyComponent:shouldUpdate()
			return false
		end

		local renderSpy = createSpy()

		MyComponent.render = renderSpy.value

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local newElement = createElement(MyComponent)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(1)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e893</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBXfe4d901382224072b1b7bbc1dd4dcc9e">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">validateProps.spec</string>
											<string name="ScriptGuid">{c59cf54c-9f92-435e-b504-d79c0cd813a5}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local GlobalConfig = require(script.Parent.Parent.GlobalConfig)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when mounted", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
		end)
	end)

	it("should be invoked when props change", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
			})

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(2)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 2,
			})
		end)
	end)

	it("should not be invoked when state changes", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local setStateCallback = nil
			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
			})

			setStateCallback({
				b = 1,
			})

			expect(validatePropsSpy.callCount).to.equal(1)
		end)
	end)

	it("should throw if validateProps is not a function", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = 1

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			expect(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end).to.throw()
		end)
	end)

	it("should throw if validateProps returns false", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = function()
				return false
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			expect(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end).to.throw()
		end)
	end)

	it("should include the component name in the error message", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = function()
				return false
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			local success, error = pcall(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end)

			expect(success).to.equal(false)
			local startIndex = error:find("MyComponent")
			expect(startIndex).to.be.ok()
		end)
	end)

	it("should be invoked after defaultProps are applied", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			MyComponent.defaultProps = {
				b = 2,
			}

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
				b = 2,
			})

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(2)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 2,
				b = 2,
			})
		end)
	end)

	it("should not be invoked if the flag is off", function()
		local config = {
			propValidation = false,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(0)

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(0)
		end)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e894</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBXfec13786ece4495fa5cbb43a97765495">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">willUnmount.spec</string>
											<string name="ScriptGuid">{2ae87dc1-03b1-4e57-8dbc-10be9887a27a}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when unmounted", function()
		local MyComponent = Component:extend("MyComponent")

		local willUnmountSpy = createSpy()

		MyComponent.willUnmount = willUnmountSpy.value

		function MyComponent:render()
			return nil
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)
		noopReconciler.unmountVirtualNode(node)

		expect(willUnmountSpy.callCount).to.equal(1)

		local values = willUnmountSpy:captureValues("self")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e895</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX0904f11505bd47979c2cbed789f5e82a">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">willUpdate.spec</string>
											<string name="ScriptGuid">{eff5ca87-1a18-4255-b91d-0712ebc03057}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when updated via updateVirtualNode", function()
		local MyComponent = Component:extend("MyComponent")

		local willUpdateSpy = createSpy()

		MyComponent.willUpdate = willUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(willUpdateSpy.callCount).to.equal(1)

		local values = willUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.newProps, newProps)
		assertDeepEqual(values.newState, {})
	end)

	it("it should be invoked when updated via setState", function()
		local MyComponent = Component:extend("MyComponent")
		local setComponentState

		local willUpdateSpy = createSpy()

		MyComponent.willUpdate = willUpdateSpy.value

		function MyComponent:init()
			setComponentState = function(state)
				self:setState(state)
			end

			self:setState({
				foo = 1,
			})
		end

		function MyComponent:render()
			return nil
		end

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(willUpdateSpy.callCount).to.equal(0)

		setComponentState({
			foo = 2,
		})

		expect(willUpdateSpy.callCount).to.equal(1)

		local values = willUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.newProps, {})
		assertDeepEqual(values.newState, {
			foo = 2,
		})
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e896</UniqueId>
										</Properties>
									</Item>
								</Item>
								<Item class="ModuleScript" referent="RBX1f18a8e25e28420a86213af7a2ee8831">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">ComponentLifecyclePhase</string>
										<string name="ScriptGuid">{c16c8c14-cdcf-48de-b256-66568d995201}</string>
										<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local ComponentLifecyclePhase = strict({
	-- Component methods
	Init = Symbol.named("init"),
	Render = Symbol.named("render"),
	ShouldUpdate = Symbol.named("shouldUpdate"),
	WillUpdate = Symbol.named("willUpdate"),
	DidMount = Symbol.named("didMount"),
	DidUpdate = Symbol.named("didUpdate"),
	WillUnmount = Symbol.named("willUnmount"),

	-- Phases describing reconciliation status
	ReconcileChildren = Symbol.named("reconcileChildren"),
	Idle = Symbol.named("idle"),
}, "ComponentLifecyclePhase")

return ComponentLifecyclePhase
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e897</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX2f05f8ffe50d48679e3c2568cbdb3660">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Config</string>
										<string name="ScriptGuid">{a5f34610-77b7-4d06-9f1d-c5278e1404f9}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	Exposes an interface to set global configuration values for Roact.

	Configuration can only occur once, and should only be done by an application
	using Roact, not a library.

	Any keys that aren't recognized will cause errors. Configuration is only
	intended for configuring Roact itself, not extensions or libraries.

	Configuration is expected to be set immediately after loading Roact. Setting
	configuration values after an application starts may produce unpredictable
	behavior.
]]

-- Every valid configuration value should be non-nil in this table.
local defaultConfig = {
	-- Enables asserts for internal Roact APIs. Useful for debugging Roact itself.
	["internalTypeChecks"] = false,
	-- Enables stricter type asserts for Roact's public API.
	["typeChecks"] = false,
	-- Enables storage of `debug.traceback()` values on elements for debugging.
	["elementTracing"] = false,
	-- Enables validation of component props in stateful components.
	["propValidation"] = false,
}

-- Build a list of valid configuration values up for debug messages.
local defaultConfigKeys = {}
for key in pairs(defaultConfig) do
	table.insert(defaultConfigKeys, key)
end

local Config = {}

function Config.new()
	local self = {}

	self._currentConfig = setmetatable({}, {
		__index = function(_, key)
			local message = ("Invalid global configuration key %q. Valid configuration keys are: %s"):format(
				tostring(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end,
	})

	-- We manually bind these methods here so that the Config's methods can be
	-- used without passing in self, since they eventually get exposed on the
	-- root Roact object.
	self.set = function(...)
		return Config.set(self, ...)
	end

	self.get = function(...)
		return Config.get(self, ...)
	end

	self.scoped = function(...)
		return Config.scoped(self, ...)
	end

	self.set(defaultConfig)

	return self
end

function Config:set(configValues)
	-- Validate values without changing any configuration.
	-- We only want to apply this configuration if it's valid!
	for key, value in pairs(configValues) do
		if defaultConfig[key] == nil then
			local message = ("Invalid global configuration key %q (type %s). Valid configuration keys are: %s"):format(
				tostring(key),
				typeof(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end

		-- Right now, all configuration values must be boolean.
		if typeof(value) ~= "boolean" then
			local message = (
				"Invalid value %q (type %s) for global configuration key %q. Valid values are: true, false"
			):format(tostring(value), typeof(value), tostring(key))

			error(message, 3)
		end

		self._currentConfig[key] = value
	end
end

function Config:get()
	return self._currentConfig
end

function Config:scoped(configValues, callback)
	local previousValues = {}
	for key, value in pairs(self._currentConfig) do
		previousValues[key] = value
	end

	self.set(configValues)

	local success, result = pcall(callback)

	self.set(previousValues)

	assert(success, result)
end

return Config
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e898</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXdd6ac5964e1e4d629cc79e02b0385ee5">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Config.spec</string>
										<string name="ScriptGuid">{201b9eb8-9923-435a-a5e1-ce0be4da2988}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local Config = require(script.Parent.Config)

	it("should accept valid configuration", function()
		local config = Config.new()
		local values = config.get()

		expect(values.elementTracing).to.equal(false)

		config.set({
			elementTracing = true,
		})

		expect(values.elementTracing).to.equal(true)
	end)

	it("should reject invalid configuration keys", function()
		local config = Config.new()

		local badKey = "garblegoop"

		local ok, err = pcall(function()
			config.set({
				[badKey] = true,
			})
		end)

		expect(ok).to.equal(false)

		-- The error should mention our bad key somewhere.
		expect(err:find(badKey)).to.be.ok()
	end)

	it("should reject invalid configuration values", function()
		local config = Config.new()

		local goodKey = "elementTracing"
		local badValue = "Hello there!"

		local ok, err = pcall(function()
			config.set({
				[goodKey] = badValue,
			})
		end)

		expect(ok).to.equal(false)

		-- The error should mention both our key and value
		expect(err:find(goodKey)).to.be.ok()
		expect(err:find(badValue)).to.be.ok()
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e899</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXdcd0fa13233c4225848563eddd038c95">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">ElementKind</string>
										<string name="ScriptGuid">{41b71124-fc7b-4b36-8ebc-cebe60f7a35d}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	Contains markers for annotating the type of an element.

	Use `ElementKind` as a key, and values from it as the value.

		local element = {
			[ElementKind] = ElementKind.Host,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)
local Portal = require(script.Parent.Portal)

local ElementKind = newproxy(true)

local ElementKindInternal = {
	Portal = Symbol.named("Portal"),
	Host = Symbol.named("Host"),
	Function = Symbol.named("Function"),
	Stateful = Symbol.named("Stateful"),
	Fragment = Symbol.named("Fragment"),
}

function ElementKindInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[ElementKind]
end

local componentTypesToKinds = {
	["string"] = ElementKindInternal.Host,
	["function"] = ElementKindInternal.Function,
	["table"] = ElementKindInternal.Stateful,
}

function ElementKindInternal.fromComponent(component)
	if component == Portal then
		return ElementKind.Portal
	else
		return componentTypesToKinds[typeof(component)]
	end
end

getmetatable(ElementKind).__index = ElementKindInternal

strict(ElementKindInternal, "ElementKind")

return ElementKind
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e89a</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX31a7a493b77b4fa78556cbf190cb84cf">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">ElementKind.spec</string>
										<string name="ScriptGuid">{95e0c08e-2820-4ac8-979a-36b47f78b29a}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local Portal = require(script.Parent.Portal)
	local Component = require(script.Parent.Component)

	local ElementKind = require(script.Parent.ElementKind)

	describe("of", function()
		it("should return nil for non-table values", function()
			expect(ElementKind.of(nil)).to.equal(nil)
			expect(ElementKind.of(5)).to.equal(nil)
			expect(ElementKind.of(newproxy(true))).to.equal(nil)
		end)

		it("should return nil for table values without an ElementKind key", function()
			expect(ElementKind.of({})).to.equal(nil)
		end)

		it("should return the ElementKind from a table", function()
			local value = {
				[ElementKind] = ElementKind.Stateful,
			}

			expect(ElementKind.of(value)).to.equal(ElementKind.Stateful)
		end)
	end)

	describe("fromComponent", function()
		it("should handle host components", function()
			expect(ElementKind.fromComponent("foo")).to.equal(ElementKind.Host)
		end)

		it("should handle function components", function()
			local function foo() end

			expect(ElementKind.fromComponent(foo)).to.equal(ElementKind.Function)
		end)

		it("should handle stateful components", function()
			local Foo = Component:extend("Foo")

			expect(ElementKind.fromComponent(Foo)).to.equal(ElementKind.Stateful)
		end)

		it("should handle portals", function()
			expect(ElementKind.fromComponent(Portal)).to.equal(ElementKind.Portal)
		end)

		it("should return nil for invalid inputs", function()
			expect(ElementKind.fromComponent(5)).to.equal(nil)
			expect(ElementKind.fromComponent(newproxy(true))).to.equal(nil)
		end)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e89b</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX55e85a34980042feaa2a3bf84dcc52ee">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">ElementUtils</string>
										<string name="ScriptGuid">{65944d5d-da39-401d-b849-5705711eafaa}</string>
										<ProtectedString name="Source"><![CDATA[--!strict
local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)

local function noop()
	return nil
end

local ElementUtils = {}

--[[
	A signal value indicating that a child should use its parent's key, because
	it has no key of its own.

	This occurs when you return only one element from a function component or
	stateful render function.
]]
ElementUtils.UseParentKey = Symbol.named("UseParentKey")

type Iterator<K, V> = ({ [K]: V }, K?) -> (K?, V?)
type Element = { [any]: any }
--[[
	Returns an iterator over the children of an element.
	`elementOrElements` may be one of:
	* a boolean
	* nil
	* a single element
	* a fragment
	* a table of elements

	If `elementOrElements` is a boolean or nil, this will return an iterator with
	zero elements.

	If `elementOrElements` is a single element, this will return an iterator with
	one element: a tuple where the first value is ElementUtils.UseParentKey, and
	the second is the value of `elementOrElements`.

	If `elementOrElements` is a fragment or a table, this will return an iterator
	over all the elements of the array.

	If `elementOrElements` is none of the above, this function will throw.
]]
function ElementUtils.iterateElements<K>(elementOrElements): (Iterator<K, Element>, any, nil)
	local richType = Type.of(elementOrElements)

	-- Single child
	if richType == Type.Element then
		local called = false

		return function(_, _)
			if called then
				return nil
			else
				called = true
				return ElementUtils.UseParentKey, elementOrElements
			end
		end
	end

	local regularType = typeof(elementOrElements)

	if elementOrElements == nil or regularType == "boolean" then
		return (noop :: any) :: Iterator<K, Element>
	end

	if regularType == "table" then
		return pairs(elementOrElements)
	end

	error("Invalid elements")
end

--[[
	Gets the child corresponding to a given key, respecting Roact's rules for
	children. Specifically:
	* If `elements` is nil or a boolean, this will return `nil`, regardless of
		the key given.
	* If `elements` is a single element, this will return `nil`, unless the key
		is ElementUtils.UseParentKey.
	* If `elements` is a table of elements, this will return `elements[key]`.
]]
function ElementUtils.getElementByKey(elements, hostKey)
	if elements == nil or typeof(elements) == "boolean" then
		return nil
	end

	if Type.of(elements) == Type.Element then
		if hostKey == ElementUtils.UseParentKey then
			return elements
		end

		return nil
	end

	if typeof(elements) == "table" then
		return elements[hostKey]
	end

	error("Invalid elements")
end

return ElementUtils
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e89c</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX73d292f448954dff8bbf9d57efd5a7c7">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">ElementUtils.spec</string>
										<string name="ScriptGuid">{6527d091-9c0c-465c-935d-5a3597f1935d}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local ElementUtils = require(script.Parent.ElementUtils)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local Type = require(script.Parent.Type)

	describe("iterateElements", function()
		it("should iterate once for a single child", function()
			local child = createElement("TextLabel")
			local iterator = ElementUtils.iterateElements(child)
			local iteratedKey, iteratedChild = iterator()
			-- For single elements, the key should be UseParentKey
			expect(iteratedKey).to.equal(ElementUtils.UseParentKey)
			expect(iteratedChild).to.equal(child)

			iteratedKey = iterator()
			expect(iteratedKey).to.equal(nil)
		end)

		it("should iterate over tables", function()
			local children = {
				a = createElement("TextLabel"),
				b = createElement("TextLabel"),
			}

			local seenChildren = {}
			local count = 0

			for key, child in ElementUtils.iterateElements(children) do
				expect(typeof(key)).to.equal("string")
				expect(Type.of(child)).to.equal(Type.Element)
				seenChildren[child] = key
				count = count + 1
			end

			expect(count).to.equal(2)
			expect(seenChildren[children.a]).to.equal("a")
			expect(seenChildren[children.b]).to.equal("b")
		end)

		it("should return a zero-element iterator for booleans", function()
			local booleanIterator = ElementUtils.iterateElements(false)
			expect(booleanIterator()).to.equal(nil)
		end)

		it("should return a zero-element iterator for nil", function()
			local nilIterator = ElementUtils.iterateElements(nil)
			expect(nilIterator()).to.equal(nil)
		end)

		it("should throw if given an illegal value", function()
			expect(function()
				ElementUtils.iterateElements(1)
			end).to.throw()
		end)
	end)

	describe("getElementByKey", function()
		it("should return nil for booleans", function()
			expect(ElementUtils.getElementByKey(true, "test")).to.equal(nil)
		end)

		it("should return nil for nil", function()
			expect(ElementUtils.getElementByKey(nil, "test")).to.equal(nil)
		end)

		describe("single elements", function()
			local element = createElement("TextLabel")

			it("should return the element if the key is UseParentKey", function()
				expect(ElementUtils.getElementByKey(element, ElementUtils.UseParentKey)).to.equal(element)
			end)

			it("should return nil if the key is not UseParentKey", function()
				expect(ElementUtils.getElementByKey(element, "test")).to.equal(nil)
			end)
		end)

		it("should return the corresponding element from a table", function()
			local children = {
				a = createElement("TextLabel"),
				b = createElement("TextLabel"),
			}

			expect(ElementUtils.getElementByKey(children, "a")).to.equal(children.a)
			expect(ElementUtils.getElementByKey(children, "b")).to.equal(children.b)
		end)

		it("should return nil if the key does not exist", function()
			local children = createFragment({})

			expect(ElementUtils.getElementByKey(children, "a")).to.equal(nil)
		end)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e89d</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXa523bb989a804efbaf31c6662d209ac5">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">GlobalConfig</string>
										<string name="ScriptGuid">{c6744e77-ef5e-4baa-9218-2106b45b9786}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	Exposes a single instance of a configuration as Roact's GlobalConfig.
]]

local Config = require(script.Parent.Config)

return Config.new()
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e89e</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX179ea5d91a334f8b983ea0033187152d">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">GlobalConfig.spec</string>
										<string name="ScriptGuid">{635bab50-c43a-49f7-8d33-30bb7aea0bea}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local GlobalConfig = require(script.Parent.GlobalConfig)

	it("should have the correct methods", function()
		expect(GlobalConfig).to.be.ok()
		expect(GlobalConfig.set).to.be.ok()
		expect(GlobalConfig.get).to.be.ok()
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e89f</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX70af1c9123c747b4ba47cd341c6a02c2">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Logging</string>
										<string name="ScriptGuid">{7569856b-f919-4d5d-bc9a-7bbceeeb841a}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	Centralized place to handle logging. Lets us:
	- Unit test log output via `Logging.capture`
	- Disable verbose log messages when not debugging Roact

	This should be broken out into a separate library with the addition of
	scoping and logging configuration.
]]

-- Determines whether log messages will go to stdout/stderr
local outputEnabled = true

-- A set of LogInfo objects that should have messages inserted into them.
-- This is a set so that nested calls to Logging.capture will behave.
local collectors = {}

-- A set of all stack traces that have called warnOnce.
local onceUsedLocations = {}

--[[
	Indent a potentially multi-line string with the given number of tabs, in
	addition to any indentation the string already has.
]]
local function indent(source, indentLevel)
	local indentString = ("\t"):rep(indentLevel)

	return indentString .. source:gsub("\n", "\n" .. indentString)
end

--[[
	Indents a list of strings and then concatenates them together with newlines
	into a single string.
]]
local function indentLines(lines, indentLevel)
	local outputBuffer = {}

	for _, line in ipairs(lines) do
		table.insert(outputBuffer, indent(line, indentLevel))
	end

	return table.concat(outputBuffer, "\n")
end

local logInfoMetatable = {}

--[[
	Automatic coercion to strings for LogInfo objects to enable debugging them
	more easily.
]]
function logInfoMetatable:__tostring()
	local outputBuffer = { "LogInfo {" }

	local errorCount = #self.errors
	local warningCount = #self.warnings
	local infosCount = #self.infos

	if errorCount + warningCount + infosCount == 0 then
		table.insert(outputBuffer, "\t(no messages)")
	end

	if errorCount > 0 then
		table.insert(outputBuffer, ("\tErrors (%d) {"):format(errorCount))
		table.insert(outputBuffer, indentLines(self.errors, 2))
		table.insert(outputBuffer, "\t}")
	end

	if warningCount > 0 then
		table.insert(outputBuffer, ("\tWarnings (%d) {"):format(warningCount))
		table.insert(outputBuffer, indentLines(self.warnings, 2))
		table.insert(outputBuffer, "\t}")
	end

	if infosCount > 0 then
		table.insert(outputBuffer, ("\tInfos (%d) {"):format(infosCount))
		table.insert(outputBuffer, indentLines(self.infos, 2))
		table.insert(outputBuffer, "\t}")
	end

	table.insert(outputBuffer, "}")

	return table.concat(outputBuffer, "\n")
end

local function createLogInfo()
	local logInfo = {
		errors = {},
		warnings = {},
		infos = {},
	}

	setmetatable(logInfo, logInfoMetatable)

	return logInfo
end

local Logging = {}

--[[
	Invokes `callback`, capturing all output that happens during its execution.

	Output will not go to stdout or stderr and will instead be put into a
	LogInfo object that is returned. If `callback` throws, the error will be
	bubbled up to the caller of `Logging.capture`.
]]
function Logging.capture(callback)
	local collector = createLogInfo()

	local wasOutputEnabled = outputEnabled
	outputEnabled = false
	collectors[collector] = true

	local success, result = pcall(callback)

	collectors[collector] = nil
	outputEnabled = wasOutputEnabled

	assert(success, result)

	return collector
end

--[[
	Issues a warning with an automatically attached stack trace.
]]
function Logging.warn(messageTemplate, ...)
	local message = messageTemplate:format(...)

	for collector in pairs(collectors) do
		table.insert(collector.warnings, message)
	end

	-- debug.traceback inserts a leading newline, so we trim it here
	local trace = debug.traceback("", 2):sub(2)
	local fullMessage = ("%s\n%s"):format(message, indent(trace, 1))

	if outputEnabled then
		warn(fullMessage)
	end
end

--[[
	Issues a warning like `Logging.warn`, but only outputs once per call site.

	This is useful for marking deprecated functions that might be called a lot;
	using `warnOnce` instead of `warn` will reduce output noise while still
	correctly marking all call sites.
]]
function Logging.warnOnce(messageTemplate, ...)
	local trace = debug.traceback()

	if onceUsedLocations[trace] then
		return
	end

	onceUsedLocations[trace] = true
	Logging.warn(messageTemplate, ...)
end

return Logging
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8a0</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXe442a86dc3624d709269d623e8d05077">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">None</string>
										<string name="ScriptGuid">{964e062e-b42a-4b46-8ddb-37a61539c0bf}</string>
										<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)

-- Marker used to specify that the value is nothing, because nil cannot be
-- stored in tables.
local None = Symbol.named("None")

return None
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8a1</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXde40334d41c44bdb8540e4783050f048">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">NoopRenderer</string>
										<string name="ScriptGuid">{7be31a41-bc11-4847-b6aa-ed5c86c118a5}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	Reference renderer intended for use in tests as well as for documenting the
	minimum required interface for a Roact renderer.
]]

local NoopRenderer = {}

function NoopRenderer.isHostObject(target)
	-- Attempting to use NoopRenderer to target a Roblox instance is almost
	-- certainly a mistake.
	return target == nil
end

function NoopRenderer.mountHostNode(_reconciler, _node) end

function NoopRenderer.unmountHostNode(_reconciler, _node) end

function NoopRenderer.updateHostNode(_reconciler, node, _newElement)
	return node
end

return NoopRenderer
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8a2</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXc82d94d5cdea45e2818d3c961617f7c4">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Portal</string>
										<string name="ScriptGuid">{6976de86-298c-43fa-8c38-7f90565f2ec4}</string>
										<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)

local Portal = Symbol.named("Portal")

return Portal
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8a3</UniqueId>
									</Properties>
								</Item>
								<Item class="Folder" referent="RBXd567f4587ce84bfd9eb55fc7e1e16510">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<string name="Name">PropMarkers</string>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8a4</UniqueId>
									</Properties>
									<Item class="ModuleScript" referent="RBX00727006fc744b2f815efc4ea98fa612">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Change</string>
											<string name="ScriptGuid">{d828b4ec-9e65-4e62-bbe6-b1f684c45c56}</string>
											<ProtectedString name="Source"><![CDATA[--[[
	Change is used to generate special prop keys that can be used to connect to
	GetPropertyChangedSignal.

	Generally, Change is indexed by a Roblox property name:

		Roact.createElement("TextBox", {
			[Roact.Change.Text] = function(rbx)
				print("The TextBox", rbx, "changed text to", rbx.Text)
			end,
		})
]]

local Type = require(script.Parent.Parent.Type)

local Change = {}

local changeMetatable = {
	__tostring = function(self)
		return ("RoactHostChangeEvent(%s)"):format(self.name)
	end,
}

setmetatable(Change, {
	__index = function(_self, propertyName)
		local changeListener = {
			[Type] = Type.HostChangeEvent,
			name = propertyName,
		}

		setmetatable(changeListener, changeMetatable)
		Change[propertyName] = changeListener

		return changeListener
	end,
})

return Change
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8a5</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBXa190ae5417fb4333a48b589850e6ce59">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Change.spec</string>
											<string name="ScriptGuid">{3c8d075f-b489-42c9-9f4f-a29a69fc00e3}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Parent.Type)

	local Change = require(script.Parent.Change)

	it("should yield change listener objects when indexed", function()
		expect(Type.of(Change.Text)).to.equal(Type.HostChangeEvent)
		expect(Type.of(Change.Selected)).to.equal(Type.HostChangeEvent)
	end)

	it("should yield the same object when indexed again", function()
		local a = Change.Text
		local b = Change.Text
		local c = Change.Selected

		expect(a).to.equal(b)
		expect(a).never.to.equal(c)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8a6</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX19343c516fc24ac6b8a82d4b9937927f">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Children</string>
											<string name="ScriptGuid">{ba4a89a3-040d-4ecc-a178-d18312ba6aed}</string>
											<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Parent.Symbol)

local Children = Symbol.named("Children")

return Children
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8a7</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX6b48e665848d4be19d958d5dda8d394a">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Event</string>
											<string name="ScriptGuid">{57d8fb0d-005f-4d23-acc8-9eaefbbeb73f}</string>
											<ProtectedString name="Source"><![CDATA[--[[
	Index into `Event` to get a prop key for attaching to an event on a Roblox
	Instance.

	Example:

		Roact.createElement("TextButton", {
			Text = "Hello, world!",

			[Roact.Event.MouseButton1Click] = function(rbx)
				print("Clicked", rbx)
			end
		})
]]

local Type = require(script.Parent.Parent.Type)

local Event = {}

local eventMetatable = {
	__tostring = function(self)
		return ("RoactHostEvent(%s)"):format(self.name)
	end,
}

setmetatable(Event, {
	__index = function(_self, eventName)
		local event = {
			[Type] = Type.HostEvent,
			name = eventName,
		}

		setmetatable(event, eventMetatable)

		Event[eventName] = event

		return event
	end,
})

return Event
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8a8</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX98b05e0fe6a7426e871dd21ed378d011">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Event.spec</string>
											<string name="ScriptGuid">{1c9a796a-f4d3-41ea-a13f-cb7b0f5f345a}</string>
											<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Parent.Type)

	local Event = require(script.Parent.Event)

	it("should yield event objects when indexed", function()
		expect(Type.of(Event.MouseButton1Click)).to.equal(Type.HostEvent)
		expect(Type.of(Event.Touched)).to.equal(Type.HostEvent)
	end)

	it("should yield the same object when indexed again", function()
		local a = Event.MouseButton1Click
		local b = Event.MouseButton1Click
		local c = Event.Touched

		expect(a).to.equal(b)
		expect(a).never.to.equal(c)
	end)
end
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8a9</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBXeac58927014e41e19585d3f51fc2159b">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Ref</string>
											<string name="ScriptGuid">{9223ce22-c29f-4d81-80b9-7e9fa0f2c567}</string>
											<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Parent.Symbol)

local Ref = Symbol.named("Ref")

return Ref
]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8aa</UniqueId>
										</Properties>
									</Item>
								</Item>
								<Item class="ModuleScript" referent="RBX16474a3cf4b14da993c8f0cc7368d247">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">PureComponent</string>
										<string name="ScriptGuid">{e9574203-d9be-4aa2-9886-a11811676020}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	A version of Component with a `shouldUpdate` method that forces the
	resulting component to be pure.
]]

local Component = require(script.Parent.Component)

local PureComponent = Component:extend("PureComponent")

-- When extend()ing a component, you don't get an extend method.
-- This is to promote composition over inheritance.
-- PureComponent is an exception to this rule.
PureComponent.extend = Component.extend

function PureComponent:shouldUpdate(newProps, newState)
	-- In a vast majority of cases, if state updated, something has updated.
	-- We don't bother checking in this case.
	if newState ~= self.state then
		return true
	end

	if newProps == self.props then
		return false
	end

	for key, value in pairs(newProps) do
		if self.props[key] ~= value then
			return true
		end
	end

	for key, value in pairs(self.props) do
		if newProps[key] ~= value then
			return true
		end
	end

	return false
end

return PureComponent
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ab</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXde405afca59649cab5a9f88227f97b62">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">PureComponent.spec</string>
										<string name="ScriptGuid">{19eb8d4d-57df-48ce-8ee8-27e07f296f1b}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.createElement)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local createReconciler = require(script.Parent.createReconciler)

	local PureComponent = require(script.Parent.PureComponent)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be extendable", function()
		local MyComponent = PureComponent:extend("MyComponent")

		expect(MyComponent).to.be.ok()
	end)

	it("should skip updates for shallow-equal props", function()
		local updateCount = 0
		local setValue

		local PureChild = PureComponent:extend("PureChild")

		function PureChild:willUpdate()
			updateCount = updateCount + 1
		end

		function PureChild:render()
			return nil
		end

		local PureContainer = PureComponent:extend("PureContainer")

		function PureContainer:init()
			self.state = {
				value = 0,
			}
		end

		function PureContainer:didMount()
			setValue = function(value)
				self:setState({
					value = value,
				})
			end
		end

		function PureContainer:render()
			return createElement(PureChild, {
				value = self.state.value,
			})
		end

		local element = createElement(PureContainer)
		local tree = noopReconciler.mountVirtualTree(element, nil, "PureComponent Tree")

		expect(updateCount).to.equal(0)

		setValue(1)

		expect(updateCount).to.equal(1)

		setValue(1)

		expect(updateCount).to.equal(1)

		setValue(2)

		expect(updateCount).to.equal(2)

		setValue(1)

		expect(updateCount).to.equal(3)

		noopReconciler.unmountVirtualTree(tree)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ac</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX14c4117800b34e8d9516e58e9f8b1768">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">RobloxRenderer</string>
										<string name="ScriptGuid">{911e618f-7805-4ec0-9025-c01ec4d60483}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	Renderer that deals in terms of Roblox Instances. This is the most
	well-supported renderer after NoopRenderer and is currently the only
	renderer that does anything.
]]

local Binding = require(script.Parent.Binding)
local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local SingleEventManager = require(script.Parent.SingleEventManager)
local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)
local Ref = require(script.Parent.PropMarkers.Ref)
local Type = require(script.Parent.Type)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local applyPropsError = [[
Error applying props:
	%s
In element:
%s
]]

local updatePropsError = [[
Error updating props:
	%s
In element:
%s
]]

local function identity(...)
	return ...
end

local function applyRef(ref, newHostObject)
	if ref == nil then
		return
	end

	if typeof(ref) == "function" then
		ref(newHostObject)
	elseif Type.of(ref) == Type.Binding then
		Binding.update(ref, newHostObject)
	else
		-- TODO (#197): Better error message
		error(("Invalid ref: Expected type Binding but got %s"):format(typeof(ref)))
	end
end

local function setRobloxInstanceProperty(hostObject, key, newValue)
	if newValue == nil then
		local hostClass = hostObject.ClassName
		local _, defaultValue = getDefaultInstanceProperty(hostClass, key)
		newValue = defaultValue
	end

	-- Assign the new value to the object
	hostObject[key] = newValue

	return
end

local function removeBinding(virtualNode, key)
	local disconnect = virtualNode.bindings[key]
	disconnect()
	virtualNode.bindings[key] = nil
end

local function attachBinding(virtualNode, key, newBinding)
	local function updateBoundProperty(newValue)
		local success, errorMessage = xpcall(function()
			setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
		end, identity)

		if not success then
			local source = virtualNode.currentElement.source

			if source == nil then
				source = "<enable element tracebacks>"
			end

			local fullMessage = updatePropsError:format(errorMessage, source)
			error(fullMessage, 0)
		end
	end

	if virtualNode.bindings == nil then
		virtualNode.bindings = {}
	end

	virtualNode.bindings[key] = Binding.subscribe(newBinding, updateBoundProperty)

	updateBoundProperty(newBinding:getValue())
end

local function detachAllBindings(virtualNode)
	if virtualNode.bindings ~= nil then
		for _, disconnect in pairs(virtualNode.bindings) do
			disconnect()
		end
		virtualNode.bindings = nil
	end
end

local function applyProp(virtualNode, key, newValue, oldValue)
	if newValue == oldValue then
		return
	end

	if key == Ref or key == Children then
		-- Refs and children are handled in a separate pass
		return
	end

	local internalKeyType = Type.of(key)

	if internalKeyType == Type.HostEvent or internalKeyType == Type.HostChangeEvent then
		if virtualNode.eventManager == nil then
			virtualNode.eventManager = SingleEventManager.new(virtualNode.hostObject)
		end

		local eventName = key.name

		if internalKeyType == Type.HostChangeEvent then
			virtualNode.eventManager:connectPropertyChange(eventName, newValue)
		else
			virtualNode.eventManager:connectEvent(eventName, newValue)
		end

		return
	end

	local newIsBinding = Type.of(newValue) == Type.Binding
	local oldIsBinding = Type.of(oldValue) == Type.Binding

	if oldIsBinding then
		removeBinding(virtualNode, key)
	end

	if newIsBinding then
		attachBinding(virtualNode, key, newValue)
	else
		setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
	end
end

local function applyProps(virtualNode, props)
	for propKey, value in pairs(props) do
		applyProp(virtualNode, propKey, value, nil)
	end
end

local function updateProps(virtualNode, oldProps, newProps)
	-- Apply props that were added or updated
	for propKey, newValue in pairs(newProps) do
		local oldValue = oldProps[propKey]

		applyProp(virtualNode, propKey, newValue, oldValue)
	end

	-- Clean up props that were removed
	for propKey, oldValue in pairs(oldProps) do
		local newValue = newProps[propKey]

		if newValue == nil then
			applyProp(virtualNode, propKey, nil, oldValue)
		end
	end
end

local RobloxRenderer = {}

function RobloxRenderer.isHostObject(target)
	return typeof(target) == "Instance"
end

function RobloxRenderer.mountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement
	local hostParent = virtualNode.hostParent
	local hostKey = virtualNode.hostKey

	if config.internalTypeChecks then
		internalAssert(ElementKind.of(element) == ElementKind.Host, "Element at given node is not a host Element")
	end
	if config.typeChecks then
		assert(element.props.Name == nil, "Name can not be specified as a prop to a host component in Roact.")
		assert(element.props.Parent == nil, "Parent can not be specified as a prop to a host component in Roact.")
	end

	local instance = Instance.new(element.component)
	virtualNode.hostObject = instance

	local success, errorMessage = xpcall(function()
		applyProps(virtualNode, element.props)
	end, identity)

	if not success then
		local source = element.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = applyPropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	instance.Name = tostring(hostKey)

	local children = element.props[Children]

	if children ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	instance.Parent = hostParent
	virtualNode.hostObject = instance

	applyRef(element.props[Ref], instance)

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end
end

function RobloxRenderer.unmountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement

	applyRef(element.props[Ref], nil)

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end

	detachAllBindings(virtualNode)

	virtualNode.hostObject:Destroy()
end

function RobloxRenderer.updateHostNode(reconciler, virtualNode, newElement)
	local oldProps = virtualNode.currentElement.props
	local newProps = newElement.props

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:suspend()
	end

	-- If refs changed, detach the old ref and attach the new one
	if oldProps[Ref] ~= newProps[Ref] then
		applyRef(oldProps[Ref], nil)
		applyRef(newProps[Ref], virtualNode.hostObject)
	end

	local success, errorMessage = xpcall(function()
		updateProps(virtualNode, oldProps, newProps)
	end, identity)

	if not success then
		local source = newElement.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = updatePropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	local children = newElement.props[Children]
	if children ~= nil or oldProps[Children] ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end

	return virtualNode
end

return RobloxRenderer
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ad</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXcc3f831f22c547a495512711fa9b37ea">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">RobloxRenderer.spec</string>
										<string name="ScriptGuid">{135be675-9313-494b-8a50-c5d9daceb4ea}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local assertDeepEqual = require(script.Parent.assertDeepEqual)
	local Binding = require(script.Parent.Binding)
	local Children = require(script.Parent.PropMarkers.Children)
	local Component = require(script.Parent.Component)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createReconciler = require(script.Parent.createReconciler)
	local createRef = require(script.Parent.createRef)
	local createSpy = require(script.Parent.createSpy)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Portal = require(script.Parent.Portal)
	local Ref = require(script.Parent.PropMarkers.Ref)
	local Event = require(script.Parent.PropMarkers.Event)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)

	local reconciler = createReconciler(RobloxRenderer)

	describe("mountHostNode", function()
		it("should create instances with correct props", function()
			local parent = Instance.new("Folder")
			local value = "Hello!"
			local key = "Some Key"

			local element = createElement("StringValue", {
				Value = value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]

			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(value)
			expect(root.Name).to.equal(key)
		end)

		it("should create children with correct names and props", function()
			local parent = Instance.new("Folder")
			local rootValue = "Hey there!"
			local childValue = 173
			local key = "Some Key"

			local element = createElement("StringValue", {
				Value = rootValue,
			}, {
				ChildA = createElement("IntValue", {
					Value = childValue,
				}),

				ChildB = createElement("Folder"),
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]

			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(rootValue)
			expect(root.Name).to.equal(key)

			expect(#root:GetChildren()).to.equal(2)

			local childA = root.ChildA
			local childB = root.ChildB

			expect(childA).to.be.ok()
			expect(childB).to.be.ok()

			expect(childA.ClassName).to.equal("IntValue")
			expect(childA.Value).to.equal(childValue)

			expect(childB.ClassName).to.equal("Folder")
		end)

		it("should attach Bindings to Roblox properties", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local binding, update = Binding.create(10)
			local element = createElement("IntValue", {
				Value = binding,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(instance.ClassName).to.equal("IntValue")
			expect(instance.Value).to.equal(10)

			update(20)

			expect(instance.Value).to.equal(20)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should connect Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local ref = createRef()
			local element = createElement("Frame", {
				[Ref] = ref,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(ref.current).to.be.ok()
			expect(ref.current).to.equal(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should call function refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()
			local element = createElement("Frame", {
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRef.callCount).to.equal(1)
			spyRef:assertCalledWith(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should throw if setting invalid instance properties", function()
			local configValues = {
				elementTracing = true,
			}

			GlobalConfig.scoped(configValues, function()
				local parent = Instance.new("Folder")
				local key = "Some Key"

				local element = createElement("Frame", {
					Frob = 6,
				})

				local node = reconciler.createVirtualNode(element, parent, key)

				local success, message = pcall(RobloxRenderer.mountHostNode, reconciler, node)
				assert(not success, "Expected call to fail")

				expect(message:find("Frob")).to.be.ok()
				expect(message:find("Frame")).to.be.ok()
				expect(message:find("RobloxRenderer%.spec")).to.be.ok()
			end)
		end)
	end)

	describe("updateHostNode", function()
		it("should update node props and children", function()
			-- TODO: Break up test

			local parent = Instance.new("Folder")
			local key = "updateHostNodeTest"
			local firstValue = "foo"
			local newValue = "bar"

			local defaultStringValue = Instance.new("StringValue").Value

			local element = createElement("StringValue", {
				Value = firstValue,
			}, {
				ChildA = createElement("IntValue", {
					Value = 1,
				}),
				ChildB = createElement("BoolValue", {
					Value = true,
				}),
				ChildC = createElement("StringValue", {
					Value = "test",
				}),
				ChildD = createElement("StringValue", {
					Value = "test",
				}),
			})

			local node = reconciler.createVirtualNode(element, parent, key)
			RobloxRenderer.mountHostNode(reconciler, node)

			-- Not testing mountHostNode's work here, only testing that the
			-- node is properly updated.

			local newElement = createElement("StringValue", {
				Value = newValue,
			}, {
				-- ChildA changes element type.
				ChildA = createElement("StringValue", {
					Value = "test",
				}),
				-- ChildB changes child properties.
				ChildB = createElement("BoolValue", {
					Value = false,
				}),
				-- ChildC should reset its Value property back to the default.
				ChildC = createElement("StringValue", {}),
				-- ChildD is deleted.
				-- ChildE is added.
				ChildE = createElement("Folder", {}),
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			local root = parent[key]
			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(newValue)
			expect(#root:GetChildren()).to.equal(4)

			local childA = root.ChildA
			expect(childA.ClassName).to.equal("StringValue")
			expect(childA.Value).to.equal("test")

			local childB = root.ChildB
			expect(childB.ClassName).to.equal("BoolValue")
			expect(childB.Value).to.equal(false)

			local childC = root.ChildC
			expect(childC.ClassName).to.equal("StringValue")
			expect(childC.Value).to.equal(defaultStringValue)

			local childE = root.ChildE
			expect(childE.ClassName).to.equal("Folder")
		end)

		it("should update Bindings", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local bindingA, updateA = Binding.create(10)
			local element = createElement("IntValue", {
				Value = bindingA,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			local instance = parent:GetChildren()[1]

			expect(instance.Value).to.equal(10)

			local bindingB, updateB = Binding.create(99)
			local newElement = createElement("IntValue", {
				Value = bindingB,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(instance.Value).to.equal(99)

			updateA(123)

			expect(instance.Value).to.equal(99)

			updateB(123)

			expect(instance.Value).to.equal(123)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should update Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local refA = createRef()
			local refB = createRef()

			local element = createElement("Frame", {
				[Ref] = refA,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(refA.current).to.equal(instance)
			expect(refB.current).never.to.be.ok()

			local newElement = createElement("Frame", {
				[Ref] = refB,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(refA.current).never.to.be.ok()
			expect(refB.current).to.equal(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should call old function refs with nil and new function refs with a valid rbx", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRefA = createSpy()
			local spyRefB = createSpy()

			local element = createElement("Frame", {
				[Ref] = spyRefA.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRefA.callCount).to.equal(1)
			spyRefA:assertCalledWith(instance)
			expect(spyRefB.callCount).to.equal(0)

			local newElement = createElement("Frame", {
				[Ref] = spyRefB.value,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(spyRefA.callCount).to.equal(2)
			spyRefA:assertCalledWith(nil)
			expect(spyRefB.callCount).to.equal(1)
			spyRefB:assertCalledWith(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should not call function refs again if they didn't change", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()

			local element = createElement("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRef.callCount).to.equal(1)
			spyRef:assertCalledWith(instance)

			local newElement = createElement("Frame", {
				Size = UDim2.new(0.5, 0, 0.5, 0),
				[Ref] = spyRef.value,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			-- Not called again
			expect(spyRef.callCount).to.equal(1)
		end)

		it("should throw if setting invalid instance properties", function()
			local configValues = {
				elementTracing = true,
			}

			GlobalConfig.scoped(configValues, function()
				local parent = Instance.new("Folder")
				local key = "Some Key"

				local firstElement = createElement("Frame")
				local secondElement = createElement("Frame", {
					Frob = 6,
				})

				local node = reconciler.createVirtualNode(firstElement, parent, key)
				RobloxRenderer.mountHostNode(reconciler, node)

				local success, message = pcall(RobloxRenderer.updateHostNode, reconciler, node, secondElement)
				assert(not success, "Expected call to fail")

				expect(message:find("Frob")).to.be.ok()
				expect(message:find("Frame")).to.be.ok()
				expect(message:find("RobloxRenderer%.spec")).to.be.ok()
			end)
		end)

		it("should delete instances when reconciling to nil children", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local element = createElement("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
			}, {
				child = createElement("Frame"),
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]
			expect(#instance:GetChildren()).to.equal(1)

			local newElement = createElement("Frame", {
				Size = UDim2.new(0.5, 0, 0.5, 0),
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)
			expect(#instance:GetChildren()).to.equal(0)
		end)
	end)

	describe("unmountHostNode", function()
		it("should delete instances from the inside-out", function()
			local parent = Instance.new("Folder")
			local key = "Root"
			local element = createElement("Folder", nil, {
				Child = createElement("Folder", nil, {
					Grandchild = createElement("Folder"),
				}),
			})

			local node = reconciler.mountVirtualNode(element, parent, key)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]
			expect(#root:GetChildren()).to.equal(1)

			local child = root:GetChildren()[1]
			expect(#child:GetChildren()).to.equal(1)

			local grandchild = child:GetChildren()[1]

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(grandchild.Parent).to.equal(nil)
			expect(child.Parent).to.equal(nil)
			expect(root.Parent).to.equal(nil)
		end)

		it("should unsubscribe from any Bindings", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local binding, update = Binding.create(10)
			local element = createElement("IntValue", {
				Value = binding,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			local instance = parent:GetChildren()[1]

			expect(instance.Value).to.equal(10)

			RobloxRenderer.unmountHostNode(reconciler, node)
			update(56)

			expect(instance.Value).to.equal(10)
		end)

		it("should clear Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local ref = createRef()
			local element = createElement("Frame", {
				[Ref] = ref,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(ref.current).to.be.ok()

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(ref.current).never.to.be.ok()
		end)

		it("should call function refs with nil", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()
			local element = createElement("Frame", {
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(spyRef.callCount).to.equal(1)

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(spyRef.callCount).to.equal(2)
			spyRef:assertCalledWith(nil)
		end)
	end)

	describe("Portals", function()
		it("should create and destroy instances as children of `target`", function()
			local target = Instance.new("Folder")

			local function FunctionComponent(props)
				return createElement("IntValue", {
					Value = props.value,
				})
			end

			local element = createElement(Portal, {
				target = target,
			}, {
				folderOne = createElement("Folder"),
				folderTwo = createElement("Folder"),
				intValueOne = createElement(FunctionComponent, {
					value = 42,
				}),
			})
			local hostParent = nil
			local hostKey = "Some Key"
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey)

			expect(#target:GetChildren()).to.equal(3)

			expect(target:FindFirstChild("folderOne")).to.be.ok()
			expect(target:FindFirstChild("folderTwo")).to.be.ok()
			expect(target:FindFirstChild("intValueOne")).to.be.ok()
			expect(target:FindFirstChild("intValueOne").Value).to.equal(42)

			reconciler.unmountVirtualNode(node)

			expect(#target:GetChildren()).to.equal(0)
		end)

		it("should pass prop updates through to children", function()
			local target = Instance.new("Folder")

			local firstElement = createElement(Portal, {
				target = target,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 1,
				}),
			})

			local secondElement = createElement(Portal, {
				target = target,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 2,
				}),
			})

			local hostParent = nil
			local hostKey = "A Host Key"
			local node = reconciler.mountVirtualNode(firstElement, hostParent, hostKey)

			expect(#target:GetChildren()).to.equal(1)

			local firstValue = target.ChildValue
			expect(firstValue.Value).to.equal(1)

			node = reconciler.updateVirtualNode(node, secondElement)

			expect(#target:GetChildren()).to.equal(1)

			local secondValue = target.ChildValue
			expect(firstValue).to.equal(secondValue)
			expect(secondValue.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#target:GetChildren()).to.equal(0)
		end)

		it("should throw if `target` is nil", function()
			-- TODO: Relax this restriction?
			local element = createElement(Portal)
			local hostParent = nil
			local hostKey = "Keys for Everyone"

			expect(function()
				reconciler.mountVirtualNode(element, hostParent, hostKey)
			end).to.throw()
		end)

		it("should throw if `target` is not a Roblox instance", function()
			local element = createElement(Portal, {
				target = {},
			})
			local hostParent = nil
			local hostKey = "Unleash the keys!"

			expect(function()
				reconciler.mountVirtualNode(element, hostParent, hostKey)
			end).to.throw()
		end)

		it("should recreate instances if `target` changes in an update", function()
			local firstTarget = Instance.new("Folder")
			local secondTarget = Instance.new("Folder")

			local firstElement = createElement(Portal, {
				target = firstTarget,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 1,
				}),
			})

			local secondElement = createElement(Portal, {
				target = secondTarget,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 2,
				}),
			})

			local hostParent = nil
			local hostKey = "Some Key"
			local node = reconciler.mountVirtualNode(firstElement, hostParent, hostKey)

			expect(#firstTarget:GetChildren()).to.equal(1)
			expect(#secondTarget:GetChildren()).to.equal(0)

			local firstChild = firstTarget.ChildValue
			expect(firstChild.Value).to.equal(1)

			node = reconciler.updateVirtualNode(node, secondElement)

			expect(#firstTarget:GetChildren()).to.equal(0)
			expect(#secondTarget:GetChildren()).to.equal(1)

			local secondChild = secondTarget.ChildValue
			expect(secondChild.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#firstTarget:GetChildren()).to.equal(0)
			expect(#secondTarget:GetChildren()).to.equal(0)
		end)
	end)

	describe("Fragments", function()
		it("should parent the fragment's elements into the fragment's parent", function()
			local hostParent = Instance.new("Folder")

			local fragment = createFragment({
				key = createElement("IntValue", {
					Value = 1,
				}),
				key2 = createElement("IntValue", {
					Value = 2,
				}),
			})

			local node = reconciler.mountVirtualNode(fragment, hostParent, "test")

			expect(hostParent:FindFirstChild("key")).to.be.ok()
			expect(hostParent.key.ClassName).to.equal("IntValue")
			expect(hostParent.key.Value).to.equal(1)

			expect(hostParent:FindFirstChild("key2")).to.be.ok()
			expect(hostParent.key2.ClassName).to.equal("IntValue")
			expect(hostParent.key2.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should allow sibling fragment to have common keys", function()
			local hostParent = Instance.new("Folder")
			local hostKey = "Test"

			local function parent(_props)
				return createElement("IntValue", {}, {
					fragmentA = createFragment({
						key = createElement("StringValue", {
							Value = "A",
						}),
						key2 = createElement("StringValue", {
							Value = "B",
						}),
					}),
					fragmentB = createFragment({
						key = createElement("StringValue", {
							Value = "C",
						}),
						key2 = createElement("StringValue", {
							Value = "D",
						}),
					}),
				})
			end

			local node = reconciler.mountVirtualNode(createElement(parent), hostParent, hostKey)
			local parentChildren = hostParent[hostKey]:GetChildren()

			expect(#parentChildren).to.equal(4)

			local childValues = {}

			for _, child in pairs(parentChildren) do
				expect(child.ClassName).to.equal("StringValue")
				childValues[child.Value] = 1 + (childValues[child.Value] or 0)
			end

			-- check if the StringValues have not collided
			expect(childValues.A).to.equal(1)
			expect(childValues.B).to.equal(1)
			expect(childValues.C).to.equal(1)
			expect(childValues.D).to.equal(1)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should render nested fragments", function()
			local hostParent = Instance.new("Folder")

			local fragment = createFragment({
				key = createFragment({
					TheValue = createElement("IntValue", {
						Value = 1,
					}),
					TheOtherValue = createElement("IntValue", {
						Value = 2,
					}),
				}),
			})

			local node = reconciler.mountVirtualNode(fragment, hostParent, "Test")

			expect(hostParent:FindFirstChild("TheValue")).to.be.ok()
			expect(hostParent.TheValue.ClassName).to.equal("IntValue")
			expect(hostParent.TheValue.Value).to.equal(1)

			expect(hostParent:FindFirstChild("TheOtherValue")).to.be.ok()
			expect(hostParent.TheOtherValue.ClassName).to.equal("IntValue")
			expect(hostParent.TheOtherValue.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should not add any instances if the fragment is empty", function()
			local hostParent = Instance.new("Folder")

			local node = reconciler.mountVirtualNode(createFragment({}), hostParent, "test")

			expect(#hostParent:GetChildren()).to.equal(0)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)
	end)

	describe("Context", function()
		it("should pass context values through Roblox host nodes", function()
			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = {
					hello = self:__getContext("hello"),
				}
			end

			function Consumer:render() end

			local element = createElement("Folder", nil, {
				Consumer = createElement(Consumer),
			})
			local hostParent = nil
			local hostKey = "Context Test"
			local context = {
				hello = "world",
			}
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey, context)

			expect(capturedContext).never.to.equal(context)
			assertDeepEqual(capturedContext, context)

			reconciler.unmountVirtualNode(node)
		end)

		it("should pass context values through portal nodes", function()
			local target = Instance.new("Folder")

			local Provider = Component:extend("Provider")

			function Provider:init()
				self:__addContext("foo", "bar")
			end

			function Provider:render()
				return createElement("Folder", nil, self.props[Children])
			end

			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = {
					foo = self:__getContext("foo"),
				}
			end

			function Consumer:render()
				return nil
			end

			local element = createElement(Provider, nil, {
				Portal = createElement(Portal, {
					target = target,
				}, {
					Consumer = createElement(Consumer),
				}),
			})
			local hostParent = nil
			local hostKey = "Some Key"
			reconciler.mountVirtualNode(element, hostParent, hostKey)

			assertDeepEqual(capturedContext, {
				foo = "bar",
			})
		end)
	end)

	describe("Legacy context", function()
		it("should pass context values through Roblox host nodes", function()
			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = self._context
			end

			function Consumer:render() end

			local element = createElement("Folder", nil, {
				Consumer = createElement(Consumer),
			})
			local hostParent = nil
			local hostKey = "Context Test"
			local context = {
				hello = "world",
			}
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

			expect(capturedContext).never.to.equal(context)
			assertDeepEqual(capturedContext, context)

			reconciler.unmountVirtualNode(node)
		end)

		it("should pass context values through portal nodes", function()
			local target = Instance.new("Folder")

			local Provider = Component:extend("Provider")

			function Provider:init()
				self._context.foo = "bar"
			end

			function Provider:render()
				return createElement("Folder", nil, self.props[Children])
			end

			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = self._context
			end

			function Consumer:render()
				return nil
			end

			local element = createElement(Provider, nil, {
				Portal = createElement(Portal, {
					target = target,
				}, {
					Consumer = createElement(Consumer),
				}),
			})
			local hostParent = nil
			local hostKey = "Some Key"
			reconciler.mountVirtualNode(element, hostParent, hostKey)

			assertDeepEqual(capturedContext, {
				foo = "bar",
			})
		end)
	end)

	describe("Integration Tests", function()
		local temporaryParent = nil
		beforeEach(function()
			temporaryParent = Instance.new("Folder")
			temporaryParent.Parent = ReplicatedStorage
		end)

		afterEach(function()
			temporaryParent:Destroy()
			temporaryParent = nil
		end)

		it("should not allow re-entrancy in updateChildren", function()
			local ChildComponent = Component:extend("ChildComponent")

			function ChildComponent:init()
				self:setState({
					firstTime = true,
				})
			end

			local childCoroutine

			function ChildComponent:render()
				if self.state.firstTime then
					return createElement("Frame")
				end

				return createElement("TextLabel")
			end

			function ChildComponent:didMount()
				childCoroutine = coroutine.create(function()
					self:setState({
						firstTime = false,
					})
				end)
			end

			local ParentComponent = Component:extend("ParentComponent")

			function ParentComponent:init()
				self:setState({
					count = 1,
				})

				self.childAdded = function()
					self:setState({
						count = self.state.count + 1,
					})
				end
			end

			function ParentComponent:render()
				return createElement("Frame", {
					[Event.ChildAdded] = self.childAdded,
				}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
					}),
				})
			end

			local parent = Instance.new("ScreenGui")
			parent.Parent = temporaryParent

			local tree = createElement(ParentComponent)

			local hostKey = "Some Key"
			local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

			coroutine.resume(childCoroutine)

			expect(#parent:GetChildren()).to.equal(1)

			local frame = parent:GetChildren()[1]

			expect(#frame:GetChildren()).to.equal(1)

			reconciler.unmountVirtualNode(instance)
		end)

		it("should not allow re-entrancy in updateChildren even with callbacks", function()
			local LowestComponent = Component:extend("LowestComponent")

			function LowestComponent:render()
				return createElement("Frame")
			end

			function LowestComponent:didMount()
				self.props.onDidMountCallback()
			end

			local ChildComponent = Component:extend("ChildComponent")

			function ChildComponent:init()
				self:setState({
					firstTime = true,
				})
			end

			local childCoroutine

			function ChildComponent:render()
				if self.state.firstTime then
					return createElement("Frame")
				end

				return createElement(LowestComponent, {
					onDidMountCallback = self.props.onDidMountCallback,
				})
			end

			function ChildComponent:didMount()
				childCoroutine = coroutine.create(function()
					self:setState({
						firstTime = false,
					})
				end)
			end

			local ParentComponent = Component:extend("ParentComponent")

			local didMountCallbackCalled = 0

			function ParentComponent:init()
				self:setState({
					count = 1,
				})

				self.onDidMountCallback = function()
					didMountCallbackCalled = didMountCallbackCalled + 1
					if self.state.count < 5 then
						self:setState({
							count = self.state.count + 1,
						})
					end
				end
			end

			function ParentComponent:render()
				return createElement("Frame", {}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
						onDidMountCallback = self.onDidMountCallback,
					}),
				})
			end

			local parent = Instance.new("ScreenGui")
			parent.Parent = temporaryParent

			local tree = createElement(ParentComponent)

			local hostKey = "Some Key"
			local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

			coroutine.resume(childCoroutine)

			expect(#parent:GetChildren()).to.equal(1)

			local frame = parent:GetChildren()[1]

			expect(#frame:GetChildren()).to.equal(1)

			-- In an ideal world, the didMount callback would probably be called only once. Since it is called by two different
			-- LowestComponent instantiations 2 is also acceptable though.
			expect(didMountCallbackCalled <= 2).to.equal(true)

			reconciler.unmountVirtualNode(instance)
		end)

		it("should never call unmount twice in the case of update children re-rentrancy", function()
			local unmountCounts = {}

			local function addUnmount(id)
				unmountCounts[id] = unmountCounts[id] + 1
			end

			local function addInit(id)
				unmountCounts[id] = 0
			end

			local LowestComponent = Component:extend("LowestComponent")
			function LowestComponent:init()
				addInit(tostring(self))
			end

			function LowestComponent:render()
				return createElement("Frame")
			end

			function LowestComponent:didMount()
				self.props.onDidMountCallback()
			end

			function LowestComponent:willUnmount()
				addUnmount(tostring(self))
			end

			local FirstComponent = Component:extend("FirstComponent")
			function FirstComponent:init()
				addInit(tostring(self))
			end

			function FirstComponent:render()
				return createElement("TextLabel")
			end

			function FirstComponent:willUnmount()
				addUnmount(tostring(self))
			end

			local ChildComponent = Component:extend("ChildComponent")

			function ChildComponent:init()
				addInit(tostring(self))

				self:setState({
					firstTime = true,
				})
			end

			local childCoroutine

			function ChildComponent:render()
				if self.state.firstTime then
					return createElement(FirstComponent)
				end

				return createElement(LowestComponent, {
					onDidMountCallback = self.props.onDidMountCallback,
				})
			end

			function ChildComponent:didMount()
				childCoroutine = coroutine.create(function()
					self:setState({
						firstTime = false,
					})
				end)
			end

			function ChildComponent:willUnmount()
				addUnmount(tostring(self))
			end

			local ParentComponent = Component:extend("ParentComponent")

			local didMountCallbackCalled = 0

			function ParentComponent:init()
				self:setState({
					count = 1,
				})

				self.onDidMountCallback = function()
					didMountCallbackCalled = didMountCallbackCalled + 1
					if self.state.count < 5 then
						self:setState({
							count = self.state.count + 1,
						})
					end
				end
			end

			function ParentComponent:render()
				return createElement("Frame", {}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
						onDidMountCallback = self.onDidMountCallback,
					}),
				})
			end

			local parent = Instance.new("ScreenGui")
			parent.Parent = temporaryParent

			local tree = createElement(ParentComponent)

			local hostKey = "Some Key"
			local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

			coroutine.resume(childCoroutine)

			expect(#parent:GetChildren()).to.equal(1)

			local frame = parent:GetChildren()[1]

			expect(#frame:GetChildren()).to.equal(1)

			-- In an ideal world, the didMount callback would probably be called only once. Since it is called by two different
			-- LowestComponent instantiations 2 is also acceptable though.
			expect(didMountCallbackCalled <= 2).to.equal(true)

			reconciler.unmountVirtualNode(instance)

			for _, value in pairs(unmountCounts) do
				expect(value).to.equal(1)
			end
		end)

		it("should never unmount a node unnecesarily in the case of re-rentry", function()
			local LowestComponent = Component:extend("LowestComponent")
			function LowestComponent:render()
				return createElement("Frame")
			end

			function LowestComponent:didUpdate(prevProps, _prevState)
				if prevProps.firstTime and not self.props.firstTime then
					self.props.onChangedCallback()
				end
			end

			local ChildComponent = Component:extend("ChildComponent")

			function ChildComponent:init()
				self:setState({
					firstTime = true,
				})
			end

			local childCoroutine

			function ChildComponent:render()
				return createElement(LowestComponent, {
					firstTime = self.state.firstTime,
					onChangedCallback = self.props.onChangedCallback,
				})
			end

			function ChildComponent:didMount()
				childCoroutine = coroutine.create(function()
					self:setState({
						firstTime = false,
					})
				end)
			end

			local ParentComponent = Component:extend("ParentComponent")

			local onChangedCallbackCalled = 0

			function ParentComponent:init()
				self:setState({
					count = 1,
				})

				self.onChangedCallback = function()
					onChangedCallbackCalled = onChangedCallbackCalled + 1
					if self.state.count < 5 then
						self:setState({
							count = self.state.count + 1,
						})
					end
				end
			end

			function ParentComponent:render()
				return createElement("Frame", {}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
						onChangedCallback = self.onChangedCallback,
					}),
				})
			end

			local parent = Instance.new("ScreenGui")
			parent.Parent = temporaryParent

			local tree = createElement(ParentComponent)

			local hostKey = "Some Key"
			local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

			coroutine.resume(childCoroutine)

			expect(#parent:GetChildren()).to.equal(1)

			local frame = parent:GetChildren()[1]

			expect(#frame:GetChildren()).to.equal(1)

			expect(onChangedCallbackCalled).to.equal(1)

			reconciler.unmountVirtualNode(instance)
		end)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ae</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXc5770e8ec3654374bc85bf3d78ff8dcc">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">SingleEventManager</string>
										<string name="ScriptGuid">{f519522c-18c3-441f-8f4e-29174a713c68}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	A manager for a single host virtual node's connected events.
]]

local Logging = require(script.Parent.Logging)

local CHANGE_PREFIX = "Change."

local EventStatus = {
	-- No events are processed at all; they're silently discarded
	Disabled = "Disabled",

	-- Events are stored in a queue; listeners are invoked when the manager is resumed
	Suspended = "Suspended",

	-- Event listeners are invoked as the events fire
	Enabled = "Enabled",
}

local SingleEventManager = {}
SingleEventManager.__index = SingleEventManager

function SingleEventManager.new(instance)
	local self = setmetatable({
		-- The queue of suspended events
		_suspendedEventQueue = {},

		-- All the event connections being managed
		-- Events are indexed by a string key
		_connections = {},

		-- All the listeners being managed
		-- These are stored distinctly from the connections
		-- Connections can have their listeners replaced at runtime
		_listeners = {},

		-- The suspension status of the manager
		-- Managers start disabled and are "resumed" after the initial render
		_status = EventStatus.Disabled,

		-- If true, the manager is processing queued events right now.
		_isResuming = false,

		-- The Roblox instance the manager is managing
		_instance = instance,
	}, SingleEventManager)

	return self
end

function SingleEventManager:connectEvent(key, listener)
	self:_connect(key, self._instance[key], listener)
end

function SingleEventManager:connectPropertyChange(key, listener)
	local success, event = pcall(function()
		return self._instance:GetPropertyChangedSignal(key)
	end)

	if not success then
		error(("Cannot get changed signal on property %q: %s"):format(tostring(key), event), 0)
	end

	self:_connect(CHANGE_PREFIX .. key, event, listener)
end

function SingleEventManager:_connect(eventKey, event, listener)
	-- If the listener doesn't exist we can just disconnect the existing connection
	if listener == nil then
		if self._connections[eventKey] ~= nil then
			self._connections[eventKey]:Disconnect()
			self._connections[eventKey] = nil
		end

		self._listeners[eventKey] = nil
	else
		if self._connections[eventKey] == nil then
			self._connections[eventKey] = event:Connect(function(...)
				if self._status == EventStatus.Enabled then
					self._listeners[eventKey](self._instance, ...)
				elseif self._status == EventStatus.Suspended then
					-- Store this event invocation to be fired when resume is
					-- called.

					local argumentCount = select("#", ...)
					table.insert(self._suspendedEventQueue, { eventKey, argumentCount, ... })
				end
			end)
		end

		self._listeners[eventKey] = listener
	end
end

function SingleEventManager:suspend()
	self._status = EventStatus.Suspended
end

function SingleEventManager:resume()
	-- If we're already resuming events for this instance, trying to resume
	-- again would cause a disaster.
	if self._isResuming then
		return
	end

	self._isResuming = true

	local index = 1

	-- More events might be added to the queue when evaluating events, so we
	-- need to be careful in order to preserve correct evaluation order.
	while index <= #self._suspendedEventQueue do
		local eventInvocation = self._suspendedEventQueue[index]
		local listener = self._listeners[eventInvocation[1]]
		local argumentCount = eventInvocation[2]

		-- The event might have been disconnected since suspension started; in
		-- this case, we drop the event.
		if listener ~= nil then
			-- Wrap the listener in a coroutine to catch errors and handle
			-- yielding correctly.
			local listenerCo = coroutine.create(listener)
			local success, result = coroutine.resume(
				listenerCo,
				self._instance,
				unpack(eventInvocation, 3, 2 + argumentCount)
			)

			-- If the listener threw an error, we log it as a warning, since
			-- there's no way to write error text in Roblox Lua without killing
			-- our thread!
			if not success then
				Logging.warn("%s", result)
			end
		end

		index = index + 1
	end

	self._isResuming = false
	self._status = EventStatus.Enabled
	self._suspendedEventQueue = {}
end

return SingleEventManager
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8af</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXad8f9d911ed3471bbeb33eeb92b4fe75">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">SingleEventManager.spec</string>
										<string name="ScriptGuid">{e983a776-9f38-4260-8c7a-0a1e868fc9c3}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)
	local createSpy = require(script.Parent.createSpy)
	local Logging = require(script.Parent.Logging)

	local SingleEventManager = require(script.Parent.SingleEventManager)

	describe("new", function()
		it("should create a SingleEventManager", function()
			local manager = SingleEventManager.new()

			expect(manager).to.be.ok()
		end)
	end)

	describe("connectEvent", function()
		it("should connect to events", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:resume()

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "foo")

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance, "bar")

			manager:connectEvent("Event", nil)

			instance:Fire("baz")
			expect(eventSpy.callCount).to.equal(2)
		end)

		it("should drop events until resumed initially", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(0)

			manager:resume()

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "bar")
		end)

		it("should invoke suspended events when resumed", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:resume()

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "foo")

			manager:suspend()

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(1)

			manager:resume()
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance, "bar")
		end)

		it("should invoke events triggered during resumption in the correct order", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			local recordedValues = {}
			local eventSpy = createSpy(function(_, value)
				table.insert(recordedValues, value)

				if value == 2 then
					instance:Fire(3)
				elseif value == 3 then
					instance:Fire(4)
				end
			end)

			manager:connectEvent("Event", eventSpy.value)
			manager:suspend()

			instance:Fire(1)
			instance:Fire(2)

			manager:resume()
			expect(eventSpy.callCount).to.equal(4)
			assertDeepEqual(recordedValues, { 1, 2, 3, 4 })
		end)

		it("should not invoke events fired during suspension but disconnected before resumption", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:suspend()

			instance:Fire(1)

			manager:connectEvent("Event", nil)

			manager:resume()
			expect(eventSpy.callCount).to.equal(0)
		end)

		it("should not yield events through the SingleEventManager when resuming", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			manager:connectEvent("Event", function()
				coroutine.yield()
			end)

			manager:resume()

			local co = coroutine.create(function()
				instance:Fire(5)
			end)

			assert(coroutine.resume(co))
			expect(coroutine.status(co)).to.equal("dead")

			manager:suspend()
			instance:Fire(5)

			co = coroutine.create(function()
				manager:resume()
			end)

			assert(coroutine.resume(co))
			expect(coroutine.status(co)).to.equal("dead")
		end)

		it("should not throw errors through SingleEventManager when resuming", function()
			local errorText = "Error from SingleEventManager test"

			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			manager:connectEvent("Event", function()
				error(errorText)
			end)

			manager:resume()

			-- If we call instance:Fire() here, the error message will leak to
			-- the console since the thread's resumption will be handled by
			-- Roblox's scheduler.

			manager:suspend()
			instance:Fire(5)

			local logInfo = Logging.capture(function()
				manager:resume()
			end)

			expect(#logInfo.errors).to.equal(0)
			expect(#logInfo.warnings).to.equal(1)
			expect(#logInfo.infos).to.equal(0)

			expect(logInfo.warnings[1]:find(errorText)).to.be.ok()
		end)

		it("should not overflow with events if manager:resume() is invoked when resuming a suspended event", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			-- This connection emulates what happens if reconciliation is
			-- triggered again in response to reconciliation. Without
			-- appropriate guards, the inner resume() call will process the
			-- Fire(1) event again, causing a nasty stack overflow.
			local eventSpy = createSpy(function(_, value)
				if value == 1 then
					manager:suspend()
					instance:Fire(2)
					manager:resume()
				end
			end)

			manager:connectEvent("Event", eventSpy.value)

			manager:suspend()
			instance:Fire(1)
			manager:resume()

			expect(eventSpy.callCount).to.equal(2)
		end)
	end)

	describe("connectPropertyChange", function()
		-- Since property changes utilize the same mechanisms as other events,
		-- the tests here are slimmed down to reduce redundancy.

		it("should connect to property changes", function()
			local instance = Instance.new("Folder")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectPropertyChange("Name", eventSpy.value)
			manager:resume()

			instance.Name = "foo"
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance)

			instance.Name = "bar"
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance)

			manager:connectPropertyChange("Name")

			instance.Name = "baz"
			expect(eventSpy.callCount).to.equal(2)
		end)

		it("should throw an error if the property is invalid", function()
			local instance = Instance.new("Folder")
			local manager = SingleEventManager.new(instance)

			expect(function()
				manager:connectPropertyChange("foo", function() end)
			end).to.throw()
		end)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8b0</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXf0ef468b190c4977bd46a787bda069e5">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Symbol</string>
										<string name="ScriptGuid">{07ef49e7-2c15-4afd-94fc-ce7b408e62a9}</string>
										<ProtectedString name="Source"><![CDATA[--!strict
--[[
	A 'Symbol' is an opaque marker type.

	Symbols have the type 'userdata', but when printed to the console, the name
	of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

return Symbol
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8b1</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX8da6c2489e524fd2b450cf16dacc81e5">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Symbol.spec</string>
										<string name="ScriptGuid">{35fc5ea5-2fbb-42ea-b82c-674d8cdd2cc0}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local Symbol = require(script.Parent.Symbol)

	describe("named", function()
		it("should give an opaque object", function()
			local symbol = Symbol.named("foo")

			expect(symbol).to.be.a("userdata")
		end)

		it("should coerce to the given name", function()
			local symbol = Symbol.named("foo")

			local index = tostring(symbol):find("foo")
			expect(index).to.be.ok()
		end)

		it("should be unique when constructed", function()
			local symbolA = Symbol.named("abc")
			local symbolB = Symbol.named("abc")

			expect(symbolA).never.to.equal(symbolB)
		end)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8b2</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX16a8fd8369314e399c9dc6d26e4dc6ae">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Type</string>
										<string name="ScriptGuid">{ae070e96-37a7-4ab5-b4f9-7459bd407128}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	Contains markers for annotating objects with types.

	To set the type of an object, use `Type` as a key and the actual marker as
	the value:

		local foo = {
			[Type] = Type.Foo,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local Type = newproxy(true)

local TypeInternal = {}

local function addType(name)
	TypeInternal[name] = Symbol.named("Roact" .. name)
end

addType("Binding")
addType("Element")
addType("HostChangeEvent")
addType("HostEvent")
addType("StatefulComponentClass")
addType("StatefulComponentInstance")
addType("VirtualNode")
addType("VirtualTree")

function TypeInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[Type]
end

getmetatable(Type).__index = TypeInternal

getmetatable(Type).__tostring = function()
	return "RoactType"
end

strict(TypeInternal, "Type")

return Type
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8b3</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXaf7899cac19c4f39a57a3d78673e9a9c">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Type.spec</string>
										<string name="ScriptGuid">{78fbd272-d7f8-46dc-953f-86e7cb570d87}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Type)

	describe("of", function()
		it("should return nil if the value is not a table", function()
			expect(Type.of(1)).to.equal(nil)
			expect(Type.of(true)).to.equal(nil)
			expect(Type.of("test")).to.equal(nil)
			expect(Type.of(print)).to.equal(nil)
		end)

		it("should return nil if the table has no type", function()
			expect(Type.of({})).to.equal(nil)
		end)

		it("should return the assigned type", function()
			local test = {
				[Type] = Type.Element,
			}

			expect(Type.of(test)).to.equal(Type.Element)
		end)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8b4</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXe438c64ae6d244a08b63a4202454c16c">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">assertDeepEqual</string>
										<string name="ScriptGuid">{b3f79462-24e0-45b3-97b7-26e6babea505}</string>
										<ProtectedString name="Source"><![CDATA[--!strict
--[[
	A utility used to assert that two objects are value-equal recursively. It
	outputs fairly nicely formatted messages to help diagnose why two objects
	would be different.

	This should only be used in tests.
]]

local function deepEqual(a: any, b: any): (boolean, string?)
	if typeof(a) ~= typeof(b) then
		local message = ("{1} is of type %s, but {2} is of type %s"):format(typeof(a), typeof(b))
		return false, message
	end

	if typeof(a) == "table" then
		local visitedKeys = {}

		for key, value in pairs(a) do
			visitedKeys[key] = true

			local success, innerMessage = deepEqual(value, b[key])
			if not success and innerMessage then
				local message = innerMessage
					:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
					:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

				return false, message
			end
		end

		for key, value in pairs(b) do
			if not visitedKeys[key] then
				local success, innerMessage = deepEqual(value, a[key])

				if not success and innerMessage then
					local message = innerMessage
						:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
						:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

					return false, message
				end
			end
		end

		return true, nil
	end

	if a == b then
		return true, nil
	end

	local message = "{1} ~= {2}"
	return false, message
end

local function assertDeepEqual(a, b)
	local success, innerMessageTemplate = deepEqual(a, b)

	if not success and innerMessageTemplate then
		local innerMessage = innerMessageTemplate:gsub("{1}", "first"):gsub("{2}", "second")

		local message = ("Values were not deep-equal.\n%s"):format(innerMessage)

		error(message, 2)
	end
end

return assertDeepEqual
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8b5</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXd1c8723dce2048f398da8c210b9faeea">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">assertDeepEqual.spec</string>
										<string name="ScriptGuid">{f5f59d4a-c973-423b-837b-63a70ba44abc}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)

	it("should fail with a message when args are not equal", function()
		local success, message = pcall(assertDeepEqual, 1, 2)

		expect(success).to.equal(false)
		expect(message:find("first ~= second")).to.be.ok()

		success, message = pcall(assertDeepEqual, {
			foo = 1,
		}, {
			foo = 2,
		})

		expect(success).to.equal(false)
		expect(message:find("first%[foo%] ~= second%[foo%]")).to.be.ok()
	end)

	it("should compare non-table values using standard '==' equality", function()
		assertDeepEqual(1, 1)
		assertDeepEqual("hello", "hello")
		assertDeepEqual(nil, nil)

		local someFunction = function() end
		local theSameFunction = someFunction

		assertDeepEqual(someFunction, theSameFunction)

		local A = {
			foo = someFunction,
		}
		local B = {
			foo = theSameFunction,
		}

		assertDeepEqual(A, B)
	end)

	it("should fail when types differ", function()
		local success, message = pcall(assertDeepEqual, 1, "1")

		expect(success).to.equal(false)
		expect(message:find("first is of type number, but second is of type string")).to.be.ok()
	end)

	it("should compare (and report about) nested tables", function()
		local A = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 2,
			},
		}
		local B = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 2,
			},
		}

		assertDeepEqual(A, B)

		local C = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 3,
			},
		}

		local success, message = pcall(assertDeepEqual, A, C)

		expect(success).to.equal(false)
		expect(message:find("first%[nested%]%[bar%] ~= second%[nested%]%[bar%]")).to.be.ok()
	end)

	it("should be commutative", function()
		local equalArgsA = {
			foo = "bar",
			hello = "world",
		}
		local equalArgsB = {
			foo = "bar",
			hello = "world",
		}

		assertDeepEqual(equalArgsA, equalArgsB)
		assertDeepEqual(equalArgsB, equalArgsA)

		local nonEqualArgs = {
			foo = "bar",
		}

		expect(function()
			assertDeepEqual(equalArgsA, nonEqualArgs)
		end).to.throw()
		expect(function()
			assertDeepEqual(nonEqualArgs, equalArgsA)
		end).to.throw()
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8b6</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXf0c8ac9eefe14950bfd9856e92b3df1e">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">assign</string>
										<string name="ScriptGuid">{022c83da-2efc-4db3-8d0b-651108d81947}</string>
										<ProtectedString name="Source"><![CDATA[local None = require(script.Parent.None)

--[[
	Merges values from zero or more tables onto a target table. If a value is
	set to None, it will instead be removed from the table.

	This function is identical in functionality to JavaScript's Object.assign.
]]
local function assign(target, ...)
	for index = 1, select("#", ...) do
		local source = select(index, ...)

		if source ~= nil then
			for key, value in pairs(source) do
				if value == None then
					target[key] = nil
				else
					target[key] = value
				end
			end
		end
	end

	return target
end

return assign
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8b7</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXab1e3ca26e9c48fc80f7e08c4e300dde">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">assign.spec</string>
										<string name="ScriptGuid">{9b0fd7bf-05b5-4088-acda-f915f3b619b4}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local None = require(script.Parent.None)

	local assign = require(script.Parent.assign)

	it("should accept zero additional tables", function()
		local input = {}
		local result = assign(input)

		expect(input).to.equal(result)
	end)

	it("should merge multiple tables onto the given target table", function()
		local target: { a: number, b: number, c: number? } = {
			a = 5,
			b = 6,
		}

		local source1 = {
			b = 7,
			c = 8,
		}

		local source2 = {
			b = 8,
		}

		assign(target, source1, source2)

		expect(target.a).to.equal(5)
		expect(target.b).to.equal(source2.b)
		expect(target.c).to.equal(source1.c)
	end)

	it("should remove keys if specified as None", function()
		local target = {
			foo = 2,
			bar = 3,
		}

		local source = {
			foo = None,
		}

		assign(target, source)

		expect(target.foo).to.equal(nil)
		expect(target.bar).to.equal(3)
	end)

	it("should re-add keys if specified after None", function()
		local target = {
			foo = 2,
		}

		local source1 = {
			foo = None,
		}

		local source2 = {
			foo = 3,
		}

		assign(target, source1, source2)

		expect(target.foo).to.equal(source2.foo)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8b8</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX9a4a1c37e87047fb85500feba9929fcf">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createContext</string>
										<string name="ScriptGuid">{7b683c94-c294-4915-a182-08c787e59ed8}</string>
										<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)
local createFragment = require(script.Parent.createFragment)
local createSignal = require(script.Parent.createSignal)
local Children = require(script.Parent.PropMarkers.Children)
local Component = require(script.Parent.Component)

--[[
	Construct the value that is assigned to Roact's context storage.
]]
local function createContextEntry(currentValue)
	return {
		value = currentValue,
		onUpdate = createSignal(),
	}
end

local function createProvider(context)
	local Provider = Component:extend("Provider")

	function Provider:init(props)
		self.contextEntry = createContextEntry(props.value)
		self:__addContext(context.key, self.contextEntry)
	end

	function Provider:willUpdate(nextProps)
		-- If the provided value changed, immediately update the context entry.
		--
		-- During this update, any components that are reachable will receive
		-- this updated value at the same time as any props and state updates
		-- that are being applied.
		if nextProps.value ~= self.props.value then
			self.contextEntry.value = nextProps.value
		end
	end

	function Provider:didUpdate(prevProps)
		-- If the provided value changed, after we've updated every reachable
		-- component, fire a signal to update the rest.
		--
		-- This signal will notify all context consumers. It's expected that
		-- they will compare the last context value they updated with and only
		-- trigger an update on themselves if this value is different.
		--
		-- This codepath will generally only update consumer components that has
		-- a component implementing shouldUpdate between them and the provider.
		if prevProps.value ~= self.props.value then
			self.contextEntry.onUpdate:fire(self.props.value)
		end
	end

	function Provider:render()
		return createFragment(self.props[Children])
	end

	return Provider
end

local function createConsumer(context)
	local Consumer = Component:extend("Consumer")

	function Consumer.validateProps(props)
		if type(props.render) ~= "function" then
			return false, "Consumer expects a `render` function"
		else
			return true
		end
	end

	function Consumer:init(_props)
		-- This value may be nil, which indicates that our consumer is not a
		-- descendant of a provider for this context item.
		self.contextEntry = self:__getContext(context.key)
	end

	function Consumer:render()
		-- Render using the latest available for this context item.
		--
		-- We don't store this value in state in order to have more fine-grained
		-- control over our update behavior.
		local value
		if self.contextEntry ~= nil then
			value = self.contextEntry.value
		else
			value = context.defaultValue
		end

		return self.props.render(value)
	end

	function Consumer:didUpdate()
		-- Store the value that we most recently updated with.
		--
		-- This value is compared in the contextEntry onUpdate hook below.
		if self.contextEntry ~= nil then
			self.lastValue = self.contextEntry.value
		end
	end

	function Consumer:didMount()
		if self.contextEntry ~= nil then
			-- When onUpdate is fired, a new value has been made available in
			-- this context entry, but we may have already updated in the same
			-- update cycle.
			--
			-- To avoid sending a redundant update, we compare the new value
			-- with the last value that we updated with (set in didUpdate) and
			-- only update if they differ. This may happen when an update from a
			-- provider was blocked by an intermediate component that returned
			-- false from shouldUpdate.
			self.disconnect = self.contextEntry.onUpdate:subscribe(function(newValue)
				if newValue ~= self.lastValue then
					-- Trigger a dummy state update.
					self:setState({})
				end
			end)
		end
	end

	function Consumer:willUnmount()
		if self.disconnect ~= nil then
			self.disconnect()
			self.disconnect = nil
		end
	end

	return Consumer
end

local Context = {}
Context.__index = Context

function Context.new(defaultValue)
	return setmetatable({
		defaultValue = defaultValue,
		key = Symbol.named("ContextKey"),
	}, Context)
end

function Context:__tostring()
	return "RoactContext"
end

local function createContext(defaultValue)
	local context = Context.new(defaultValue)

	return {
		Provider = createProvider(context),
		Consumer = createConsumer(context),
	}
end

return createContext
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8b9</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXb5cba01fa8be413dbfc3291133d1efa5">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createContext.spec</string>
										<string name="ScriptGuid">{ce9bf54a-174b-4660-b221-38e01767ad73}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local Component = require(script.Parent.Component)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local Children = require(script.Parent.PropMarkers.Children)
	local createContext = require(script.Parent.createContext)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createReconciler = require(script.Parent.createReconciler)
	local createSpy = require(script.Parent.createSpy)

	local noopReconciler = createReconciler(NoopRenderer)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)
	local robloxReconciler = createReconciler(RobloxRenderer)

	it("should return a table", function()
		local context = createContext("Test")
		expect(context).to.be.ok()
		expect(type(context)).to.equal("table")
	end)

	it("should contain a Provider and a Consumer", function()
		local context = createContext("Test")
		expect(context.Provider).to.be.ok()
		expect(context.Consumer).to.be.ok()
	end)

	describe("Provider", function()
		it("should render its children", function()
			local context = createContext("Test")

			local Listener = createSpy(function()
				return nil
			end)

			local element = createElement(context.Provider, {
				value = "Test",
			}, {
				Listener = createElement(Listener.value),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			noopReconciler.unmountVirtualTree(tree)

			expect(Listener.callCount).to.equal(1)
		end)
	end)

	describe("Consumer", function()
		it("should expect a render function", function()
			local context = createContext("Test")
			local element = createElement(context.Consumer)

			expect(function()
				noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			end).to.throw()
		end)

		it("should return the default value if there is no Provider", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local element = createElement(context.Consumer, {
				render = valueSpy.value,
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			noopReconciler.unmountVirtualTree(tree)

			valueSpy:assertCalledWith("Test")
		end)

		it("should pass the value to the render function", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local element = createElement(context.Provider, {
				value = "NewTest",
			}, {
				Listener = createElement(Listener),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			noopReconciler.unmountVirtualTree(tree)

			valueSpy:assertCalledWith("NewTest")
		end)

		it("should update when the value updates", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local element = createElement(context.Provider, {
				value = "NewTest",
			}, {
				Listener = createElement(Listener),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")

			expect(valueSpy.callCount).to.equal(1)
			valueSpy:assertCalledWith("NewTest")

			noopReconciler.updateVirtualTree(
				tree,
				createElement(context.Provider, {
					value = "ThirdTest",
				}, {
					Listener = createElement(Listener),
				})
			)

			expect(valueSpy.callCount).to.equal(2)
			valueSpy:assertCalledWith("ThirdTest")

			noopReconciler.unmountVirtualTree(tree)
		end)

		--[[
			This test is the same as the one above, but with a component that
			always blocks updates in the middle. We expect behavior to be the
			same.
		]]
		it("should update when the value updates through an update blocking component", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local UpdateBlocker = Component:extend("UpdateBlocker")

			function UpdateBlocker:render()
				return createFragment(self.props[Children])
			end

			function UpdateBlocker:shouldUpdate()
				return false
			end

			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local element = createElement(context.Provider, {
				value = "NewTest",
			}, {
				Blocker = createElement(UpdateBlocker, nil, {
					Listener = createElement(Listener),
				}),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")

			expect(valueSpy.callCount).to.equal(1)
			valueSpy:assertCalledWith("NewTest")

			noopReconciler.updateVirtualTree(
				tree,
				createElement(context.Provider, {
					value = "ThirdTest",
				}, {
					Blocker = createElement(UpdateBlocker, nil, {
						Listener = createElement(Listener),
					}),
				})
			)

			expect(valueSpy.callCount).to.equal(2)
			valueSpy:assertCalledWith("ThirdTest")

			noopReconciler.unmountVirtualTree(tree)
		end)

		it("should behave correctly when the default value is nil", function()
			local context = createContext(nil)

			local valueSpy = createSpy()
			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local tree = noopReconciler.mountVirtualTree(createElement(Listener), nil, "Provide Tree")
			expect(valueSpy.callCount).to.equal(1)
			valueSpy:assertCalledWith(nil)

			tree = noopReconciler.updateVirtualTree(tree, createElement(Listener))
			noopReconciler.unmountVirtualTree(tree)

			expect(valueSpy.callCount).to.equal(2)
			valueSpy:assertCalledWith(nil)
		end)
	end)

	describe("Update order", function()
		--[[
			This test ensures that there is no scenario where we can observe
			'update tearing' when props and context are updated at the same
			time.

			Update tearing is scenario where a single update is partially
			applied in multiple steps instead of atomically. This is observable
			by components and can lead to strange bugs or errors.

			This instance of update tearing happens when updating a prop and a
			context value in the same update. Image we represent our tree's
			state as the current prop and context versions. Our initial state
			is:

			(prop_1, context_1)

			The next state we would like to update to is:

			(prop_2, context_2)

			Under the bug reported in issue 259, Roact reaches three different
			states in sequence:

			1: (prop_1, context_1) - the initial state
			2: (prop_2, context_1) - woops!
			3: (prop_2, context_2) - correct end state

			In state 2, a user component was added that tried to access the
			current context value, which was not set at the time. This raised an
			error, because this state is not valid!

			The first proposed solution was to move the context update to happen
			before the props update. It is easy to show that this will still
			result in update tearing:

			1: (prop_1, context_1)
			2: (prop_1, context_2)
			3: (prop_2, context_2)

			Although the initial concern about newly added components observing
			old context values is fixed, there is still a state
			desynchronization between props and state.

			We would instead like the following update sequence:

			1: (prop_1, context_1)
			2: (prop_2, context_2)

			This test tries to ensure that is the case.

			The initial bug report is here:
			https://github.com/Roblox/roact/issues/259
		]]
		it("should update context at the same time as props", function()
			-- These values are used to make sure we reach both the first and
			-- second state combinations we want to visit.
			local observedA = false
			local observedB = false
			local updateCount = 0

			local context = createContext("default")

			local function Listener(props)
				return createElement(context.Consumer, {
					render = function(value)
						updateCount = updateCount + 1

						if value == "context_1" then
							expect(props.someProp).to.equal("prop_1")
							observedA = true
						elseif value == "context_2" then
							expect(props.someProp).to.equal("prop_2")
							observedB = true
						else
							error("Unexpected context value")
						end
					end,
				})
			end

			local element1 = createElement(context.Provider, {
				value = "context_1",
			}, {
				Child = createElement(Listener, {
					someProp = "prop_1",
				}),
			})

			local element2 = createElement(context.Provider, {
				value = "context_2",
			}, {
				Child = createElement(Listener, {
					someProp = "prop_2",
				}),
			})

			local tree = noopReconciler.mountVirtualTree(element1, nil, "UpdateObservationIsFun")
			noopReconciler.updateVirtualTree(tree, element2)

			expect(updateCount).to.equal(2)
			expect(observedA).to.equal(true)
			expect(observedB).to.equal(true)
		end)
	end)

	-- issue https://github.com/Roblox/roact/issues/319
	it("does not throw if willUnmount is called twice on a context consumer", function()
		local context = createContext({})

		local LowestComponent = Component:extend("LowestComponent")
		function LowestComponent:init() end

		function LowestComponent:render()
			return createElement("Frame")
		end

		function LowestComponent:didMount()
			self.props.onDidMountCallback()
		end

		local FirstComponent = Component:extend("FirstComponent")
		function FirstComponent:init() end

		function FirstComponent:render()
			return createElement(context.Consumer, {
				render = function()
					return createElement("TextLabel")
				end,
			})
		end

		local ChildComponent = Component:extend("ChildComponent")

		function ChildComponent:init()
			self:setState({ firstTime = true })
		end

		local childCallback

		function ChildComponent:render()
			if self.state.firstTime then
				return createElement(FirstComponent)
			end

			return createElement(LowestComponent, {
				onDidMountCallback = self.props.onDidMountCallback,
			})
		end

		function ChildComponent:didMount()
			childCallback = function()
				self:setState({ firstTime = false })
			end
		end

		local ParentComponent = Component:extend("ParentComponent")

		local didMountCallbackCalled = 0

		function ParentComponent:init()
			self:setState({ count = 1 })

			self.onDidMountCallback = function()
				didMountCallbackCalled = didMountCallbackCalled + 1
				if self.state.count < 5 then
					self:setState({ count = self.state.count + 1 })
				end
			end
		end

		function ParentComponent:render()
			return createElement("Frame", {}, {
				Provider = createElement(context.Provider, {
					value = {},
				}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
						onDidMountCallback = self.onDidMountCallback,
					}),
				}),
			})
		end

		local parent = Instance.new("ScreenGui")
		parent.Parent = ReplicatedStorage

		local hostKey = "Some Key"
		robloxReconciler.mountVirtualNode(createElement(ParentComponent), parent, hostKey)

		expect(function()
			-- calling setState on ChildComponent will trigger `willUnmount` multiple times
			childCallback()
		end).never.to.throw()
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ba</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXca35166f1d6f4f208b463c77f32524dc">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createElement</string>
										<string name="ScriptGuid">{da98c458-acb3-44cd-8f4b-c1a1f1952ed1}</string>
										<ProtectedString name="Source"><![CDATA[local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local Logging = require(script.Parent.Logging)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local multipleChildrenMessage = [[
The prop `Roact.Children` was defined but was overridden by the third parameter to createElement!
This can happen when a component passes props through to a child element but also uses the `children` argument:

	Roact.createElement("Frame", passedProps, {
		child = ...
	})

Instead, consider using a utility function to merge tables of children together:

	local children = mergeTables(passedProps[Roact.Children], {
		child = ...
	})

	local fullProps = mergeTables(passedProps, {
		[Roact.Children] = children
	})

	Roact.createElement("Frame", fullProps)]]

--[[
	Creates a new element representing the given component.

	Elements are lightweight representations of what a component instance should
	look like.

	Children is a shorthand for specifying `Roact.Children` as a key inside
	props. If specified, the passed `props` table is mutated!
]]
local function createElement(component, props, children)
	if config.typeChecks then
		assert(component ~= nil, "`component` is required")
		assert(typeof(props) == "table" or props == nil, "`props` must be a table or nil")
		assert(typeof(children) == "table" or children == nil, "`children` must be a table or nil")
	end

	if props == nil then
		props = {}
	end

	if children ~= nil then
		if props[Children] ~= nil then
			Logging.warnOnce(multipleChildrenMessage)
		end

		props[Children] = children
	end

	local elementKind = ElementKind.fromComponent(component)

	local element = {
		[Type] = Type.Element,
		[ElementKind] = elementKind,
		component = component,
		props = props,
	}

	if config.elementTracing then
		-- We trim out the leading newline since there's no way to specify the
		-- trace level without also specifying a message.
		element.source = debug.traceback("", 2):sub(2)
	end

	return element
end

return createElement
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8bb</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX81cf366fa2dc4debb488a608c1272e5b">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createElement.spec</string>
										<string name="ScriptGuid">{035883bf-bf4c-447c-af26-53f25e8bcf6b}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local Component = require(script.Parent.Component)
	local ElementKind = require(script.Parent.ElementKind)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Logging = require(script.Parent.Logging)
	local Type = require(script.Parent.Type)
	local Portal = require(script.Parent.Portal)
	local Children = require(script.Parent.PropMarkers.Children)

	local createElement = require(script.Parent.createElement)

	it("should create new primitive elements", function()
		local element = createElement("Frame")

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Host)
	end)

	it("should create new functional elements", function()
		local element = createElement(function() end)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Function)
	end)

	it("should create new stateful components", function()
		local Foo = Component:extend("Foo")

		local element = createElement(Foo)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Stateful)
	end)

	it("should create new portal elements", function()
		local element = createElement(Portal)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Portal)
	end)

	it("should accept props", function()
		local element = createElement("StringValue", {
			Value = "Foo",
		})

		expect(element).to.be.ok()
		expect(element.props.Value).to.equal("Foo")
	end)

	it("should accept props and children", function()
		local child = createElement("IntValue")

		local element = createElement("StringValue", {
			Value = "Foo",
		}, {
			Child = child,
		})

		expect(element).to.be.ok()
		expect(element.props.Value).to.equal("Foo")
		expect(element.props[Children]).to.be.ok()
		expect(element.props[Children].Child).to.equal(child)
	end)

	it("should accept children with without props", function()
		local child = createElement("IntValue")

		local element = createElement("StringValue", nil, {
			Child = child,
		})

		expect(element).to.be.ok()
		expect(element.props[Children]).to.be.ok()
		expect(element.props[Children].Child).to.equal(child)
	end)

	it("should warn once if children is specified in two different ways", function()
		local logInfo = Logging.capture(function()
			-- Using a loop here to ensure that multiple occurrences of the same
			-- warning only cause output once.
			for _ = 1, 2 do
				createElement("Frame", {
					[Children] = {},
				}, {})
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("createElement")).to.be.ok()
		expect(logInfo.warnings[1]:find("Children")).to.be.ok()
	end)

	it("should have a `source` member if elementTracing is set", function()
		local config = {
			elementTracing = true,
		}

		GlobalConfig.scoped(config, function()
			local element = createElement("StringValue")

			expect(element.source).to.be.a("string")
		end)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8bc</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX7bfe3a2a2aca4fd18dce3a89f1c690e9">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createFragment</string>
										<string name="ScriptGuid">{b5220190-f47c-4aa5-9874-b29221272baf}</string>
										<ProtectedString name="Source"><![CDATA[local ElementKind = require(script.Parent.ElementKind)
local Type = require(script.Parent.Type)

local function createFragment(elements)
	return {
		[Type] = Type.Element,
		[ElementKind] = ElementKind.Fragment,
		elements = elements,
	}
end

return createFragment
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8bd</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX0ef705e5491a4720b3d7d3a565411e46">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createFragment.spec</string>
										<string name="ScriptGuid">{7640c692-960e-44a4-b4a4-4b90a21bdc71}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local ElementKind = require(script.Parent.ElementKind)
	local Type = require(script.Parent.Type)

	local createFragment = require(script.Parent.createFragment)

	it("should create new primitive elements", function()
		local fragment = createFragment({})

		expect(fragment).to.be.ok()
		expect(Type.of(fragment)).to.equal(Type.Element)
		expect(ElementKind.of(fragment)).to.equal(ElementKind.Fragment)
	end)

	it("should accept children", function()
		local subFragment = createFragment({})
		local fragment = createFragment({ key = subFragment })

		expect(fragment.elements.key).to.equal(subFragment)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8be</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXf85279248bb84706b99d717faf5f9634">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createReconciler</string>
										<string name="ScriptGuid">{856f2e1e-b1f2-40fe-a55e-aa91eba0ee38}</string>
										<ProtectedString name="Source"><![CDATA[--!nonstrict
local Type = require(script.Parent.Type)
local ElementKind = require(script.Parent.ElementKind)
local ElementUtils = require(script.Parent.ElementUtils)
local Children = require(script.Parent.PropMarkers.Children)
local Symbol = require(script.Parent.Symbol)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local InternalData = Symbol.named("InternalData")

--[[
	The reconciler is the mechanism in Roact that constructs the virtual tree
	that later gets turned into concrete objects by the renderer.

	Roact's reconciler is constructed with the renderer as an argument, which
	enables switching to different renderers for different platforms or
	scenarios.

	When testing the reconciler itself, it's common to use `NoopRenderer` with
	spies replacing some methods. The default (and only) reconciler interface
	exposed by Roact right now uses `RobloxRenderer`.
]]
local function createReconciler(renderer)
	local reconciler
	local mountVirtualNode
	local updateVirtualNode
	local unmountVirtualNode

	--[[
		Unmount the given virtualNode, replacing it with a new node described by
		the given element.

		Preserves host properties, depth, and legacyContext from parent.
	]]
	local function replaceVirtualNode(virtualNode, newElement)
		local hostParent = virtualNode.hostParent
		local hostKey = virtualNode.hostKey
		local depth = virtualNode.depth
		local parent = virtualNode.parent

		-- If the node that is being replaced has modified context, we need to
		-- use the original *unmodified* context for the new node
		-- The `originalContext` field will be nil if the context was unchanged
		local context = virtualNode.originalContext or virtualNode.context
		local parentLegacyContext = virtualNode.parentLegacyContext

		-- If updating this node has caused a component higher up the tree to re-render
		-- and updateChildren to be re-entered then this node could already have been
		-- unmounted in the previous updateChildren pass.
		if not virtualNode.wasUnmounted then
			unmountVirtualNode(virtualNode)
		end
		local newNode = mountVirtualNode(newElement, hostParent, hostKey, context, parentLegacyContext)

		-- mountVirtualNode can return nil if the element is a boolean
		if newNode ~= nil then
			newNode.depth = depth
			newNode.parent = parent
		end

		return newNode
	end

	--[[
		Utility to update the children of a virtual node based on zero or more
		updated children given as elements.
	]]
	local function updateChildren(virtualNode, hostParent, newChildElements)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		virtualNode.updateChildrenCount = virtualNode.updateChildrenCount + 1

		local currentUpdateChildrenCount = virtualNode.updateChildrenCount

		local removeKeys = {}

		-- Changed or removed children
		for childKey, childNode in pairs(virtualNode.children) do
			local newElement = ElementUtils.getElementByKey(newChildElements, childKey)
			local newNode = updateVirtualNode(childNode, newElement)

			-- If updating this node has caused a component higher up the tree to re-render
			-- and updateChildren to be re-entered for this virtualNode then
			-- this result is invalid and needs to be disgarded.
			if virtualNode.updateChildrenCount ~= currentUpdateChildrenCount then
				if newNode and newNode ~= virtualNode.children[childKey] then
					unmountVirtualNode(newNode)
				end
				return
			end

			if newNode ~= nil then
				virtualNode.children[childKey] = newNode
			else
				removeKeys[childKey] = true
			end
		end

		for childKey in pairs(removeKeys) do
			virtualNode.children[childKey] = nil
		end

		-- Added children
		for childKey, newElement in ElementUtils.iterateElements(newChildElements) do
			local concreteKey = childKey
			if childKey == ElementUtils.UseParentKey then
				concreteKey = virtualNode.hostKey
			end

			if virtualNode.children[childKey] == nil then
				local childNode = mountVirtualNode(
					newElement,
					hostParent,
					concreteKey,
					virtualNode.context,
					virtualNode.legacyContext
				)

				-- If updating this node has caused a component higher up the tree to re-render
				-- and updateChildren to be re-entered for this virtualNode then
				-- this result is invalid and needs to be discarded.
				if virtualNode.updateChildrenCount ~= currentUpdateChildrenCount then
					if childNode then
						unmountVirtualNode(childNode)
					end
					return
				end

				-- mountVirtualNode can return nil if the element is a boolean
				if childNode ~= nil then
					childNode.depth = virtualNode.depth + 1
					childNode.parent = virtualNode
					virtualNode.children[childKey] = childNode
				end
			end
		end
	end

	local function updateVirtualNodeWithChildren(virtualNode, hostParent, newChildElements)
		updateChildren(virtualNode, hostParent, newChildElements)
	end

	local function updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)
		if Type.of(renderResult) == Type.Element or renderResult == nil or typeof(renderResult) == "boolean" then
			updateChildren(virtualNode, hostParent, renderResult)
		else
			error(
				("%s\n%s"):format(
					"Component returned invalid children:",
					virtualNode.currentElement.source or "<enable element tracebacks>"
				),
				0
			)
		end
	end

	--[[
		Unmounts the given virtual node and releases any held resources.
	]]
	function unmountVirtualNode(virtualNode)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		virtualNode.wasUnmounted = true

		local kind = ElementKind.of(virtualNode.currentElement)

		-- selene: allow(if_same_then_else)
		if kind == ElementKind.Host then
			renderer.unmountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Stateful then
			virtualNode.instance:__unmount()
		elseif kind == ElementKind.Portal then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Fragment then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end
	end

	local function updateFunctionVirtualNode(virtualNode, newElement)
		local children = newElement.component(newElement.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)

		return virtualNode
	end

	local function updatePortalVirtualNode(virtualNode, newElement)
		local oldElement = virtualNode.currentElement
		local oldTargetHostParent = oldElement.props.target

		local targetHostParent = newElement.props.target

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		if targetHostParent ~= oldTargetHostParent then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local children = newElement.props[Children]

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)

		return virtualNode
	end

	local function updateFragmentVirtualNode(virtualNode, newElement)
		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, newElement.elements)

		return virtualNode
	end

	--[[
		Update the given virtual node using a new element describing what it
		should transform into.

		`updateVirtualNode` will return a new virtual node that should replace
		the passed in virtual node. This is because a virtual node can be
		updated with an element referencing a different component!

		In that case, `updateVirtualNode` will unmount the input virtual node,
		mount a new virtual node, and return it in this case, while also issuing
		a warning to the user.
	]]
	function updateVirtualNode(virtualNode, newElement, newState: { [any]: any }?): { [any]: any }?
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end
		if config.typeChecks then
			assert(
				Type.of(newElement) == Type.Element or typeof(newElement) == "boolean" or newElement == nil,
				"Expected arg #2 to be of type Element, boolean, or nil"
			)
		end

		-- If nothing changed, we can skip this update
		if virtualNode.currentElement == newElement and newState == nil then
			return virtualNode
		end

		if typeof(newElement) == "boolean" or newElement == nil then
			unmountVirtualNode(virtualNode)
			return nil
		end

		if virtualNode.currentElement.component ~= newElement.component then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local kind = ElementKind.of(newElement)

		local shouldContinueUpdate = true

		if kind == ElementKind.Host then
			virtualNode = renderer.updateHostNode(reconciler, virtualNode, newElement)
		elseif kind == ElementKind.Function then
			virtualNode = updateFunctionVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Stateful then
			shouldContinueUpdate = virtualNode.instance:__update(newElement, newState)
		elseif kind == ElementKind.Portal then
			virtualNode = updatePortalVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Fragment then
			virtualNode = updateFragmentVirtualNode(virtualNode, newElement)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end

		-- Stateful components can abort updates via shouldUpdate. If that
		-- happens, we should stop doing stuff at this point.
		if not shouldContinueUpdate then
			return virtualNode
		end

		virtualNode.currentElement = newElement

		return virtualNode
	end

	--[[
		Constructs a new virtual node but not does mount it.
	]]
	local function createVirtualNode(element, hostParent, hostKey, context, legacyContext)
		if config.internalTypeChecks then
			internalAssert(
				renderer.isHostObject(hostParent) or hostParent == nil,
				"Expected arg #2 to be a host object"
			)
			internalAssert(typeof(context) == "table" or context == nil, "Expected arg #4 to be of type table or nil")
			internalAssert(
				typeof(legacyContext) == "table" or legacyContext == nil,
				"Expected arg #5 to be of type table or nil"
			)
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		return {
			[Type] = Type.VirtualNode,
			currentElement = element,
			depth = 1,
			parent = nil,
			children = {},
			hostParent = hostParent,
			hostKey = hostKey,
			updateChildrenCount = 0,
			wasUnmounted = false,

			-- Legacy Context API
			-- A table of context values inherited from the parent node
			legacyContext = legacyContext,

			-- A saved copy of the parent context, used when replacing a node
			parentLegacyContext = legacyContext,

			-- Context API
			-- A table of context values inherited from the parent node
			context = context or {},

			-- A saved copy of the unmodified context; this will be updated when
			-- a component adds new context and used when a node is replaced
			originalContext = nil,
		}
	end

	local function mountFunctionVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local children = element.component(element.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)
	end

	local function mountPortalVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local targetHostParent = element.props.target
		local children = element.props[Children]

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)
	end

	local function mountFragmentVirtualNode(virtualNode)
		local element = virtualNode.currentElement
		local children = element.elements

		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, children)
	end

	--[[
		Constructs a new virtual node and mounts it, but does not place it into
		the tree.
	]]
	function mountVirtualNode(element, hostParent, hostKey, context, legacyContext)
		if config.internalTypeChecks then
			internalAssert(
				renderer.isHostObject(hostParent) or hostParent == nil,
				"Expected arg #2 to be a host object"
			)
			internalAssert(
				typeof(legacyContext) == "table" or legacyContext == nil,
				"Expected arg #5 to be of type table or nil"
			)
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		-- Boolean values render as nil to enable terse conditional rendering.
		if typeof(element) == "boolean" then
			return nil
		end

		local kind = ElementKind.of(element)

		local virtualNode = createVirtualNode(element, hostParent, hostKey, context, legacyContext)

		if kind == ElementKind.Host then
			renderer.mountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			mountFunctionVirtualNode(virtualNode)
		elseif kind == ElementKind.Stateful then
			element.component:__mount(reconciler, virtualNode)
		elseif kind == ElementKind.Portal then
			mountPortalVirtualNode(virtualNode)
		elseif kind == ElementKind.Fragment then
			mountFragmentVirtualNode(virtualNode)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end

		return virtualNode
	end

	--[[
		Constructs a new Roact virtual tree, constructs a root node for
		it, and mounts it.
	]]
	local function mountVirtualTree(element, hostParent, hostKey)
		if config.typeChecks then
			assert(Type.of(element) == Type.Element, "Expected arg #1 to be of type Element")
			assert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
		end

		if hostKey == nil then
			hostKey = "RoactTree"
		end

		local tree = {
			[Type] = Type.VirtualTree,
			[InternalData] = {
				-- The root node of the tree, which starts into the hierarchy of
				-- Roact component instances.
				rootNode = nil,
				mounted = true,
			},
		}

		tree[InternalData].rootNode = mountVirtualNode(element, hostParent, hostKey)

		return tree
	end

	--[[
		Unmounts the virtual tree, freeing all of its resources.

		No further operations should be done on the tree after it's been
		unmounted, as indicated by its the `mounted` field.
	]]
	local function unmountVirtualTree(tree)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(internalData.mounted, "Cannot unmounted a Roact tree that has already been unmounted")
		end

		internalData.mounted = false

		if internalData.rootNode ~= nil then
			unmountVirtualNode(internalData.rootNode)
		end
	end

	--[[
		Utility method for updating the root node of a virtual tree given a new
		element.
	]]
	local function updateVirtualTree(tree, newElement)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(Type.of(newElement) == Type.Element, "Expected arg #2 to be a Roact Element")
		end

		internalData.rootNode = updateVirtualNode(internalData.rootNode, newElement)

		return tree
	end

	reconciler = {
		mountVirtualTree = mountVirtualTree,
		unmountVirtualTree = unmountVirtualTree,
		updateVirtualTree = updateVirtualTree,

		createVirtualNode = createVirtualNode,
		mountVirtualNode = mountVirtualNode,
		unmountVirtualNode = unmountVirtualNode,
		updateVirtualNode = updateVirtualNode,
		updateVirtualNodeWithChildren = updateVirtualNodeWithChildren,
		updateVirtualNodeWithRenderResult = updateVirtualNodeWithRenderResult,
	}

	return reconciler
end

return createReconciler
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8bf</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXab6665a0344f4ad6ac5568058349a3e9">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createReconciler.spec</string>
										<string name="ScriptGuid">{00146fa8-102d-4200-b0db-f2c962293be0}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local assign = require(script.Parent.assign)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createSpy = require(script.Parent.createSpy)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local Type = require(script.Parent.Type)
	local ElementKind = require(script.Parent.ElementKind)

	local createReconciler = require(script.Parent.createReconciler)

	local noopReconciler = createReconciler(NoopRenderer)

	describe("tree operations", function()
		it("should mount and unmount", function()
			local tree = noopReconciler.mountVirtualTree(createElement("StringValue"))

			expect(tree).to.be.ok()

			noopReconciler.unmountVirtualTree(tree)
		end)

		it("should mount, update, and unmount", function()
			local tree = noopReconciler.mountVirtualTree(createElement("StringValue"))

			expect(tree).to.be.ok()

			noopReconciler.updateVirtualTree(tree, createElement("StringValue"))

			noopReconciler.unmountVirtualTree(tree)
		end)
	end)

	describe("booleans", function()
		it("should mount booleans as nil", function()
			local node = noopReconciler.mountVirtualNode(false, nil, "test")
			expect(node).to.equal(nil)
		end)

		it("should unmount nodes if they are updated to a boolean value", function()
			local node = noopReconciler.mountVirtualNode(createElement("StringValue"), nil, "test")

			expect(node).to.be.ok()

			node = noopReconciler.updateVirtualNode(node, true)

			expect(node).to.equal(nil)
		end)
	end)

	describe("invalid elements", function()
		it("should throw errors when attempting to mount invalid elements", function()
			-- These function components return values with incorrect types
			local returnsString = function()
				return "Hello"
			end
			local returnsNumber = function()
				return 1
			end
			local returnsFunction = function()
				return function() end
			end
			local returnsTable = function()
				return {}
			end

			local hostParent = nil
			local key = "Some Key"

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsString), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsNumber), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsFunction), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsTable), hostParent, key)
			end).to.throw()
		end)
	end)

	describe("Host components", function()
		it("should invoke the renderer to mount host nodes", function()
			local mountHostNode = createSpy(NoopRenderer.mountHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = mountHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Some Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(mountHostNode.callCount).to.equal(1)

			local values = mountHostNode:captureValues("reconciler", "node")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
		end)

		it("should invoke the renderer to update host nodes", function()
			local updateHostNode = createSpy(NoopRenderer.updateHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = NoopRenderer.mountHostNode,
				updateHostNode = updateHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			local newElement = createElement("StringValue")
			local newNode = reconciler.updateVirtualNode(node, newElement)

			expect(newNode).to.equal(node)

			expect(updateHostNode.callCount).to.equal(1)

			local values = updateHostNode:captureValues("reconciler", "node", "newElement")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
			expect(values.newElement).to.equal(newElement)
		end)

		it("should invoke the renderer to unmount host nodes", function()
			local unmountHostNode = createSpy(NoopRenderer.unmountHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = NoopRenderer.mountHostNode,
				unmountHostNode = unmountHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			reconciler.unmountVirtualNode(node)

			expect(unmountHostNode.callCount).to.equal(1)

			local values = unmountHostNode:captureValues("reconciler", "node")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
		end)
	end)

	describe("Function components", function()
		it("should mount and unmount function components", function()
			local componentSpy = createSpy(function(_props)
				return nil
			end)

			local element = createElement(componentSpy.value, {
				someValue = 5,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(componentSpy.callCount).to.equal(1)

			local calledWith = componentSpy:captureValues("props")

			expect(calledWith.props).to.be.a("table")
			expect(calledWith.props.someValue).to.equal(5)

			noopReconciler.unmountVirtualNode(node)

			expect(componentSpy.callCount).to.equal(1)
		end)

		it("should mount single children of function components", function()
			local childComponentSpy = createSpy(function(_props)
				return nil
			end)

			local parentComponentSpy = createSpy(function(props)
				return createElement(childComponentSpy.value, {
					value = props.value + 1,
				})
			end)

			local element = createElement(parentComponentSpy.value, {
				value = 13,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childComponentSpy.callCount).to.equal(1)

			local parentCalledWith = parentComponentSpy:captureValues("props")
			local childCalledWith = childComponentSpy:captureValues("props")

			expect(parentCalledWith.props).to.be.a("table")
			expect(parentCalledWith.props.value).to.equal(13)

			expect(childCalledWith.props).to.be.a("table")
			expect(childCalledWith.props.value).to.equal(14)

			noopReconciler.unmountVirtualNode(node)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childComponentSpy.callCount).to.equal(1)
		end)

		it("should mount fragments returned by function components", function()
			local childAComponentSpy = createSpy(function(_props)
				return nil
			end)

			local childBComponentSpy = createSpy(function(_props)
				return nil
			end)

			local parentComponentSpy = createSpy(function(props)
				return createFragment({
					A = createElement(childAComponentSpy.value, {
						value = props.value + 1,
					}),
					B = createElement(childBComponentSpy.value, {
						value = props.value + 5,
					}),
				})
			end)

			local element = createElement(parentComponentSpy.value, {
				value = 17,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childAComponentSpy.callCount).to.equal(1)
			expect(childBComponentSpy.callCount).to.equal(1)

			local parentCalledWith = parentComponentSpy:captureValues("props")
			local childACalledWith = childAComponentSpy:captureValues("props")
			local childBCalledWith = childBComponentSpy:captureValues("props")

			expect(parentCalledWith.props).to.be.a("table")
			expect(parentCalledWith.props.value).to.equal(17)

			expect(childACalledWith.props).to.be.a("table")
			expect(childACalledWith.props.value).to.equal(18)

			expect(childBCalledWith.props).to.be.a("table")
			expect(childBCalledWith.props.value).to.equal(22)

			noopReconciler.unmountVirtualNode(node)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childAComponentSpy.callCount).to.equal(1)
			expect(childBComponentSpy.callCount).to.equal(1)
		end)
	end)

	describe("Fragments", function()
		it("should mount fragments", function()
			local fragment = createFragment({})
			local node = noopReconciler.mountVirtualNode(fragment, nil, "test")

			expect(node).to.be.ok()
			expect(ElementKind.of(node.currentElement)).to.equal(ElementKind.Fragment)
		end)

		it("should mount an empty fragment", function()
			local emptyFragment = createFragment({})
			local node = noopReconciler.mountVirtualNode(emptyFragment, nil, "test")

			expect(node).to.be.ok()

			local nextNode = next(node.children)
			expect(nextNode).to.never.be.ok()
		end)

		it("should mount all fragment's children", function()
			local childComponentSpy = createSpy(function(_props)
				return nil
			end)
			local elements = {}
			local totalElements = 5

			for i = 1, totalElements do
				elements["key" .. tostring(i)] = createElement(childComponentSpy.value, {})
			end

			local fragments = createFragment(elements)
			local node = noopReconciler.mountVirtualNode(fragments, nil, "test")

			expect(node).to.be.ok()
			expect(childComponentSpy.callCount).to.equal(totalElements)
		end)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8c0</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX71fc61b71e2940f6b8b9e060e5a95222">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createReconcilerCompat</string>
										<string name="ScriptGuid">{bf8809c8-0959-4e05-ab97-02c500590da0}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	Contains deprecated methods from Reconciler. Broken out so that removing
	this shim is easy -- just delete this file and remove it from init.
]]

local Logging = require(script.Parent.Logging)

local reifyMessage = [[
Roact.reify has been renamed to Roact.mount and will be removed in a future release.
Check the call to Roact.reify at:
]]

local teardownMessage = [[
Roact.teardown has been renamed to Roact.unmount and will be removed in a future release.
Check the call to Roact.teardown at:
]]

local reconcileMessage = [[
Roact.reconcile has been renamed to Roact.update and will be removed in a future release.
Check the call to Roact.reconcile at:
]]

local function createReconcilerCompat(reconciler)
	local compat = {}

	function compat.reify(...)
		Logging.warnOnce(reifyMessage)

		return reconciler.mountVirtualTree(...)
	end

	function compat.teardown(...)
		Logging.warnOnce(teardownMessage)

		return reconciler.unmountVirtualTree(...)
	end

	function compat.reconcile(...)
		Logging.warnOnce(reconcileMessage)

		return reconciler.updateVirtualTree(...)
	end

	return compat
end

return createReconcilerCompat
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8c1</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXdfad845dec2147d98ec4aa5285471d33">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createReconcilerCompat.spec</string>
										<string name="ScriptGuid">{0ab4fbf3-c9d3-4079-9361-f13ee5f724d9}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.createElement)
	local createReconciler = require(script.Parent.createReconciler)
	local Logging = require(script.Parent.Logging)
	local NoopRenderer = require(script.Parent.NoopRenderer)

	local createReconcilerCompat = require(script.Parent.createReconcilerCompat)

	local noopReconciler = createReconciler(NoopRenderer)
	local compatReconciler = createReconcilerCompat(noopReconciler)

	it("reify should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = compatReconciler.reify(createElement("StringValue"))
				noopReconciler.unmountVirtualTree(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reify")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = compatReconciler.reify(createElement("StringValue"))
			noopReconciler.unmountVirtualTree(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reify")).to.be.ok()
	end)

	it("teardown should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
				compatReconciler.teardown(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("teardown")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
			compatReconciler.teardown(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("teardown")).to.be.ok()
	end)

	it("update should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
				compatReconciler.reconcile(handle, createElement("StringValue"))
				noopReconciler.unmountVirtualTree(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reconcile")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
			compatReconciler.reconcile(handle, createElement("StringValue"))
			noopReconciler.unmountVirtualTree(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reconcile")).to.be.ok()
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8c2</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX53437cc814884b5cbfc129443312e58e">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createRef</string>
										<string name="ScriptGuid">{563abaca-e6a7-4e6a-8e47-d756c74ae036}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	A ref is nothing more than a binding with a special field 'current'
	that maps to the getValue method of the binding
]]
local Binding = require(script.Parent.Binding)

local function createRef()
	local binding, _ = Binding.create(nil)

	local ref = {}

	--[[
		A ref is just redirected to a binding via its metatable
	]]
	setmetatable(ref, {
		__index = function(_self, key)
			if key == "current" then
				return binding:getValue()
			else
				return binding[key]
			end
		end,
		__newindex = function(_self, key, value)
			if key == "current" then
				error("Cannot assign to the 'current' property of refs", 2)
			end

			binding[key] = value
		end,
		__tostring = function(_self)
			return ("RoactRef(%s)"):format(tostring(binding:getValue()))
		end,
	})

	return ref
end

return createRef
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8c3</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX54d65b77fe0e47f2b2542a720d7c2ad8">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createRef.spec</string>
										<string name="ScriptGuid">{66cc9525-dd0d-4527-aba2-a236313978dc}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local Binding = require(script.Parent.Binding)
	local Type = require(script.Parent.Type)

	local createRef = require(script.Parent.createRef)

	it("should create refs, which are specialized bindings", function()
		local ref = createRef()

		expect(Type.of(ref)).to.equal(Type.Binding)
		expect(ref.current).to.equal(nil)
	end)

	it("should have a 'current' field that is the same as the internal binding's value", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)

		Binding.update(ref, 10)
		expect(ref.current).to.equal(10)
	end)

	it("should support tostring on refs", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)
		expect(tostring(ref)).to.equal("RoactRef(nil)")

		Binding.update(ref, 10)
		expect(tostring(ref)).to.equal("RoactRef(10)")
	end)

	it("should not allow assignments to the 'current' field", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)

		Binding.update(ref, 99)
		expect(ref.current).to.equal(99)

		expect(function()
			ref.current = 77
		end).to.throw()

		expect(ref.current).to.equal(99)
	end)

	it("should return the same thing from getValue as its current field", function()
		local ref = createRef()
		Binding.update(ref, 10)

		expect(ref:getValue()).to.equal(10)
		expect(ref:getValue()).to.equal(ref.current)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8c4</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX77a14146ee1849d6a2472d0f0233c9d3">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createSignal</string>
										<string name="ScriptGuid">{6f01c05b-c6ab-4c80-bb32-256565e42794}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	This is a simple signal implementation that has a dead-simple API.

		local signal = createSignal()

		local disconnect = signal:subscribe(function(foo)
			print("Cool foo:", foo)
		end)

		signal:fire("something")

		disconnect()
]]

local function createSignal()
	local connections = {}
	local suspendedConnections = {}
	local firing = false

	local function subscribe(_self, callback)
		assert(typeof(callback) == "function", "Can only subscribe to signals with a function.")

		local connection = {
			callback = callback,
			disconnected = false,
		}

		-- If the callback is already registered, don't add to the suspendedConnection. Otherwise, this will disable
		-- the existing one.
		if firing and not connections[callback] then
			suspendedConnections[callback] = connection
		end

		connections[callback] = connection

		local function disconnect()
			assert(not connection.disconnected, "Listeners can only be disconnected once.")

			connection.disconnected = true
			connections[callback] = nil
			suspendedConnections[callback] = nil
		end

		return disconnect
	end

	local function fire(_self, ...)
		firing = true
		for callback, connection in pairs(connections) do
			if not connection.disconnected and not suspendedConnections[callback] then
				callback(...)
			end
		end

		firing = false

		for callback, _ in pairs(suspendedConnections) do
			suspendedConnections[callback] = nil
		end
	end

	return {
		subscribe = subscribe,
		fire = fire,
	}
end

return createSignal
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8c5</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX650dcd2a429b4a2a833ccb3694816f1c">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createSignal.spec</string>
										<string name="ScriptGuid">{3f0d426d-c5e6-4ba4-a339-362e124b08e8}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local createSignal = require(script.Parent.createSignal)

	local createSpy = require(script.Parent.createSpy)

	it("should fire subscribers and disconnect them", function()
		local signal = createSignal()

		local spy = createSpy()
		local disconnect = signal:subscribe(spy.value)

		expect(spy.callCount).to.equal(0)

		local a = 1
		local b = {}
		local c = "hello"
		signal:fire(a, b, c)

		expect(spy.callCount).to.equal(1)
		spy:assertCalledWith(a, b, c)

		disconnect()

		signal:fire()

		expect(spy.callCount).to.equal(1)
	end)

	it("should handle multiple subscribers", function()
		local signal = createSignal()

		local spyA = createSpy()
		local spyB = createSpy()

		local disconnectA = signal:subscribe(spyA.value)
		local disconnectB = signal:subscribe(spyB.value)

		expect(spyA.callCount).to.equal(0)
		expect(spyB.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(a, b)

		expect(spyB.callCount).to.equal(1)
		spyB:assertCalledWith(a, b)

		disconnectA()

		signal:fire(b, a)

		expect(spyA.callCount).to.equal(1)

		expect(spyB.callCount).to.equal(2)
		spyB:assertCalledWith(b, a)

		disconnectB()
	end)

	it("should stop firing a connection if disconnected mid-fire", function()
		local signal = createSignal()

		-- In this test, we'll connect two listeners that each try to disconnect
		-- the other. Because the order of listeners firing isn't defined, we
		-- have to be careful to handle either case.

		local disconnectA
		local disconnectB

		local spyA = createSpy(function()
			disconnectB()
		end)

		local spyB = createSpy(function()
			disconnectA()
		end)

		disconnectA = signal:subscribe(spyA.value)
		disconnectB = signal:subscribe(spyB.value)

		signal:fire()

		-- Exactly once listener should have been called.
		expect(spyA.callCount + spyB.callCount).to.equal(1)
	end)

	it("should allow adding listener in the middle of firing", function()
		local signal = createSignal()

		local disconnectA
		local spyA = createSpy()
		local listener = function(_a, _b)
			disconnectA = signal:subscribe(spyA.value)
		end

		local disconnectListener = signal:subscribe(listener)

		expect(spyA.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(0)

		-- The new listener should be picked up in next fire.
		signal:fire(b, a)
		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(b, a)

		disconnectA()
		disconnectListener()

		signal:fire(a)

		expect(spyA.callCount).to.equal(1)
	end)

	it("should have one connection instance when add the same listener multiple times", function()
		local signal = createSignal()

		local spyA = createSpy()
		local disconnect1 = signal:subscribe(spyA.value)

		expect(spyA.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(a, b)

		local disconnect2 = signal:subscribe(spyA.value)

		signal:fire(b, a)
		expect(spyA.callCount).to.equal(2)
		spyA:assertCalledWith(b, a)

		disconnect2()

		signal:fire(a)

		expect(spyA.callCount).to.equal(2)

		-- should have no effect.
		disconnect1()
		signal:fire(a)
		expect(spyA.callCount).to.equal(2)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8c6</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXa6cc6f235db24d58a7d5029475e95a8b">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createSpy</string>
										<string name="ScriptGuid">{bbe4db89-7add-45d8-aaac-6f42483edb92}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	A utility used to create a function spy that can be used to robustly test
	that functions are invoked the correct number of times and with the correct
	number of arguments.

	This should only be used in tests.
]]

local assertDeepEqual = require(script.Parent.assertDeepEqual)

local function createSpy(inner)
	local self = {}
	self.callCount = 0
	self.values = {}
	self.valuesLength = 0
	self.value = function(...)
		self.callCount = self.callCount + 1
		self.values = { ... }
		self.valuesLength = select("#", ...)

		if inner ~= nil then
			return inner(...)
		end
		return nil
	end

	self.assertCalledWith = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(self.valuesLength, len), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assert(self.values[i] == expected, "value differs")
		end
	end

	self.assertCalledWithDeepEqual = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(self.valuesLength, len), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assertDeepEqual(self.values[i], expected)
		end
	end

	self.captureValues = function(_, ...)
		local len = select("#", ...)
		local result = {}

		assert(self.valuesLength == len, "length of expected values differs from stored values")

		for i = 1, len do
			local key = select(i, ...)
			result[key] = self.values[i]
		end

		return result
	end

	setmetatable(self, {
		__index = function(_, key)
			error(("%q is not a valid member of spy"):format(key))
		end,
	})

	return self
end

return createSpy
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8c7</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX100cf22335f8421abb7886258e9b05fc">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">createSpy.spec</string>
										<string name="ScriptGuid">{643e5b42-b1a1-4aa4-adf6-21128d8984d6}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local createSpy = require(script.Parent.createSpy)

	describe("createSpy", function()
		it("should create spies", function()
			local spy = createSpy(function() end)

			expect(spy).to.be.ok()
		end)

		it("should throw if spies are indexed by an invalid key", function()
			local spy = createSpy(function() end)

			expect(function()
				return spy.test
			end).to.throw()
		end)
	end)

	describe("value", function()
		it("should increment callCount when called", function()
			local spy = createSpy(function() end)
			spy.value()

			expect(spy.callCount).to.equal(1)
		end)

		it("should store all values passed", function()
			local spy = createSpy(function() end)
			spy.value(1, true, "3")

			expect(spy.valuesLength).to.equal(3)
			expect(spy.values[1]).to.equal(1)
			expect(spy.values[2]).to.equal(true)
			expect(spy.values[3]).to.equal("3")
		end)

		it("should return the value of the inner function", function()
			local spy = createSpy(function()
				return true
			end)

			expect(spy.value()).to.equal(true)
		end)
	end)

	describe("assertCalledWith", function()
		it("should throw if the number of values differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:assertCalledWith(1)
			end).to.throw()
		end)

		it("should throw if any value differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:assertCalledWith(1, 3)
			end).to.throw()

			expect(function()
				spy:assertCalledWith(2, 3)
			end).to.throw()
		end)
	end)

	describe("captureValues", function()
		it("should throw if the number of values differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:captureValues("a")
			end).to.throw()
		end)

		it("should capture all values in a table", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			local captured = spy:captureValues("a", "b")
			expect(captured.a).to.equal(1)
			expect(captured.b).to.equal(2)
		end)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8c8</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX8ec75352bdde42368c16542651962a74">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">forwardRef</string>
										<string name="ScriptGuid">{8f96a9e0-24f0-42d2-b771-f61e17919e7a}</string>
										<ProtectedString name="Source"><![CDATA[local assign = require(script.Parent.assign)
local None = require(script.Parent.None)
local Ref = require(script.Parent.PropMarkers.Ref)

local config = require(script.Parent.GlobalConfig).get()

local excludeRef = {
	[Ref] = None,
}

--[[
	Allows forwarding of refs to underlying host components. Accepts a render
	callback which accepts props and a ref, and returns an element.
]]
local function forwardRef(render)
	if config.typeChecks then
		assert(typeof(render) == "function", "Expected arg #1 to be a function")
	end

	return function(props)
		local ref = props[Ref]
		local propsWithoutRef = assign({}, props, excludeRef)

		return render(propsWithoutRef, ref)
	end
end

return forwardRef
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8c9</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX7b66fb8b9ca34763b5bf326f2db8e590">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">forwardRef.spec</string>
										<string name="ScriptGuid">{78879ebc-8791-4947-852a-85e85a93434d}</string>
										<ProtectedString name="Source"><![CDATA[-- Tests loosely adapted from those found at:
-- * https://github.com/facebook/react/blob/v17.0.1/packages/react/src/__tests__/forwardRef-test.js
-- * https://github.com/facebook/react/blob/v17.0.1/packages/react/src/__tests__/forwardRef-test.internal.js
return function()
	local assign = require(script.Parent.assign)
	local createElement = require(script.Parent.createElement)
	local createRef = require(script.Parent.createRef)
	local forwardRef = require(script.Parent.forwardRef)
	local createReconciler = require(script.Parent.createReconciler)
	local Component = require(script.Parent.Component)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Ref = require(script.Parent.PropMarkers.Ref)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)

	local reconciler = createReconciler(RobloxRenderer)

	it("should update refs when switching between children", function()
		local function FunctionComponent(props)
			local forwardedRef = props.forwardedRef
			local setRefOnDiv = props.setRefOnDiv
			-- deviation: clearer to express this way, since we don't have real
			-- ternaries
			local firstRef, secondRef
			if setRefOnDiv then
				firstRef = forwardedRef
			else
				secondRef = forwardedRef
			end
			return createElement("Frame", nil, {
				First = createElement("Frame", {
					[Ref] = firstRef,
				}, {
					Child = createElement("TextLabel", {
						Text = "First",
					}),
				}),
				Second = createElement("ScrollingFrame", {
					[Ref] = secondRef,
				}, {
					Child = createElement("TextLabel", {
						Text = "Second",
					}),
				}),
			})
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(FunctionComponent, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()

		local element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			setRefOnDiv = true,
		})
		local tree = reconciler.mountVirtualTree(element, nil, "switch refs")
		expect(ref.current.ClassName).to.equal("Frame")
		reconciler.unmountVirtualTree(tree)

		element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			setRefOnDiv = false,
		})
		tree = reconciler.mountVirtualTree(element, nil, "switch refs")
		expect(ref.current.ClassName).to.equal("ScrollingFrame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should support rendering nil", function()
		local RefForwardingComponent = forwardRef(function(_props, _ref)
			return nil
		end)

		local ref = createRef()

		local element = createElement(RefForwardingComponent, { [Ref] = ref })
		local tree = reconciler.mountVirtualTree(element, nil, "nil ref")
		expect(ref.current).to.equal(nil)
		reconciler.unmountVirtualTree(tree)
	end)

	it("should support rendering nil for multiple children", function()
		local RefForwardingComponent = forwardRef(function(_props, _ref)
			return nil
		end)

		local ref = createRef()

		local element = createElement("Frame", nil, {
			NoRef1 = createElement("Frame"),
			WithRef = createElement(RefForwardingComponent, { [Ref] = ref }),
			NoRef2 = createElement("Frame"),
		})
		local tree = reconciler.mountVirtualTree(element, nil, "multiple children nil ref")
		expect(ref.current).to.equal(nil)
		reconciler.unmountVirtualTree(tree)
	end)

	-- We could support this by having forwardRef return a stateful component,
	-- but it's likely not necessary
	itSKIP("should support defaultProps", function()
		local function FunctionComponent(props)
			local forwardedRef = props.forwardedRef
			local optional = props.optional
			local required = props.required
			return createElement("Frame", {
				[Ref] = forwardedRef,
			}, {
				OptionalChild = optional,
				RequiredChild = required,
			})
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(
				FunctionComponent,
				assign({}, props, {
					forwardedRef = ref,
				})
			)
		end)
		RefForwardingComponent.defaultProps = {
			optional = createElement("TextLabel"),
		}

		local ref = createRef()

		local element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			optional = createElement("Frame"),
			required = createElement("ScrollingFrame"),
		})

		local tree = reconciler.mountVirtualTree(element, nil, "with optional")

		expect(ref.current:FindFirstChild("OptionalChild").ClassName).to.equal("Frame")
		expect(ref.current:FindFirstChild("RequiredChild").ClassName).to.equal("ScrollingFrame")

		reconciler.unmountVirtualTree(tree)
		element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			required = createElement("ScrollingFrame"),
		})
		tree = reconciler.mountVirtualTree(element, nil, "with default")

		expect(ref.current:FindFirstChild("OptionalChild").ClassName).to.equal("TextLabel")
		expect(ref.current:FindFirstChild("RequiredChild").ClassName).to.equal("ScrollingFrame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should error if not provided a callback when type checking is enabled", function()
		GlobalConfig.scoped({
			typeChecks = true,
		}, function()
			expect(function()
				forwardRef(nil)
			end).to.throw()
		end)

		GlobalConfig.scoped({
			typeChecks = true,
		}, function()
			expect(function()
				forwardRef("foo")
			end).to.throw()
		end)
	end)

	it("should work without a ref to be forwarded", function()
		local function Child()
			return nil
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local element = createElement(RefForwardingComponent, { value = 123 })
		local tree = reconciler.mountVirtualTree(element, nil, "nil ref")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should forward a ref for a single child", function()
		local value
		local function Child(props)
			value = props.value
			return createElement("Frame", {
				[Ref] = props[Ref],
			})
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()

		local element = createElement(RefForwardingComponent, { [Ref] = ref, value = 123 })
		local tree = reconciler.mountVirtualTree(element, nil, "single child ref")
		expect(value).to.equal(123)
		expect(ref.current.ClassName).to.equal("Frame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should forward a ref for multiple children", function()
		local function Child(props)
			return createElement("Frame", {
				[Ref] = props[Ref],
			})
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()

		local element = createElement("Frame", nil, {
			NoRef1 = createElement("Frame"),
			WithRef = createElement(RefForwardingComponent, { [Ref] = ref }),
			NoRef2 = createElement("Frame"),
		})
		local tree = reconciler.mountVirtualTree(element, nil, "multi child ref")
		expect(ref.current.ClassName).to.equal("Frame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should maintain child instance and ref through updates", function()
		local value
		local function Child(props)
			value = props.value
			return createElement("Frame", {
				[Ref] = props[Ref],
			})
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local setRefCount = 0
		local refValue

		local setRef = function(r)
			setRefCount = setRefCount + 1
			refValue = r
		end

		local element = createElement(RefForwardingComponent, { [Ref] = setRef, value = 123 })
		local tree = reconciler.mountVirtualTree(element, nil, "maintains instance")

		expect(value).to.equal(123)
		expect(refValue.ClassName).to.equal("Frame")
		expect(setRefCount).to.equal(1)

		element = createElement(RefForwardingComponent, { [Ref] = setRef, value = 456 })
		tree = reconciler.updateVirtualTree(tree, element)

		expect(value).to.equal(456)
		expect(setRefCount).to.equal(1)
		reconciler.unmountVirtualTree(tree)
	end)

	it("should not re-run the render callback on a deep setState", function()
		local inst
		local renders = {}

		local Inner = Component:extend("Inner")
		function Inner:render()
			table.insert(renders, "Inner")
			inst = self
			return createElement("Frame", { [Ref] = self.props.forwardedRef })
		end

		local function Middle(props)
			table.insert(renders, "Middle")
			return createElement(Inner, props)
		end

		local Forward = forwardRef(function(props, ref)
			table.insert(renders, "Forward")
			return createElement(Middle, assign({}, props, { forwardedRef = ref }))
		end)

		local function App()
			table.insert(renders, "App")
			return createElement(Forward)
		end

		local tree = reconciler.mountVirtualTree(createElement(App), nil, "deep setState")
		expect(#renders).to.equal(4)
		expect(renders[1]).to.equal("App")
		expect(renders[2]).to.equal("Forward")
		expect(renders[3]).to.equal("Middle")
		expect(renders[4]).to.equal("Inner")

		renders = {}
		inst:setState({})
		expect(#renders).to.equal(1)
		expect(renders[1]).to.equal("Inner")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should not include the ref in the forwarded props", function()
		local capturedProps
		local function CaptureProps(props)
			capturedProps = props
			return createElement("Frame", { [Ref] = props.forwardedRef })
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(CaptureProps, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()
		local element = createElement(RefForwardingComponent, {
			[Ref] = ref,
		})

		local tree = reconciler.mountVirtualTree(element, nil, "no ref in props")
		expect(capturedProps).to.be.ok()
		expect(capturedProps.forwardedRef).to.equal(ref)
		expect(capturedProps[Ref]).to.equal(nil)
		reconciler.unmountVirtualTree(tree)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ca</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXb15cbf932c194833b3a1651e5631cf2d">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">getDefaultInstanceProperty</string>
										<string name="ScriptGuid">{828dfcde-778c-4331-b3d2-025f0da0e778}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	Attempts to get the default value of a given property on a Roblox instance.

	This is used by the reconciler in cases where a prop was previously set on a
	primitive component, but is no longer present in a component's new props.

	Eventually, Roblox might provide a nicer API to query the default property
	of an object without constructing an instance of it.
]]

local Symbol = require(script.Parent.Symbol)

local Nil = Symbol.named("Nil")
local _cachedPropertyValues = {}

local function getDefaultInstanceProperty(className, propertyName)
	local classCache = _cachedPropertyValues[className]

	if classCache then
		local propValue = classCache[propertyName]

		-- We have to use a marker here, because Lua doesn't distinguish
		-- between 'nil' and 'not in a table'
		if propValue == Nil then
			return true, nil
		end

		if propValue ~= nil then
			return true, propValue
		end
	else
		classCache = {}
		_cachedPropertyValues[className] = classCache
	end

	local created = Instance.new(className)
	local ok, defaultValue = pcall(function()
		return created[propertyName]
	end)

	created:Destroy()

	if ok then
		if defaultValue == nil then
			classCache[propertyName] = Nil
		else
			classCache[propertyName] = defaultValue
		end
	end

	return ok, defaultValue
end

return getDefaultInstanceProperty
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8cb</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX28f178818d48417a8937172dfd400b61">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">getDefaultInstanceProperty.spec</string>
										<string name="ScriptGuid">{b372b615-d5b7-4d4e-ad83-4d714b0ddcbc}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)

	it("should get default name string values", function()
		local _, defaultName = getDefaultInstanceProperty("StringValue", "Name")

		expect(defaultName).to.equal("Value")
	end)

	it("should get default empty string values", function()
		local _, defaultValue = getDefaultInstanceProperty("StringValue", "Value")

		expect(defaultValue).to.equal("")
	end)

	it("should get default number values", function()
		local _, defaultValue = getDefaultInstanceProperty("IntValue", "Value")

		expect(defaultValue).to.equal(0)
	end)

	it("should get nil default values", function()
		local _, defaultValue = getDefaultInstanceProperty("ObjectValue", "Value")

		expect(defaultValue).to.equal(nil)
	end)

	it("should get bool default values", function()
		local _, defaultValue = getDefaultInstanceProperty("BoolValue", "Value")

		expect(defaultValue).to.equal(false)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8cc</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXa74c14fb5db74628a43a9f375c726c1d">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">init.spec</string>
										<string name="ScriptGuid">{9137aa4e-eec4-4c3c-895d-3860a19576e8}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local Roact = require(script.Parent)

	it("should load with all public APIs", function()
		local publicApi = {
			createElement = "function",
			createFragment = "function",
			createRef = "function",
			forwardRef = "function",
			createBinding = "function",
			joinBindings = "function",
			mount = "function",
			unmount = "function",
			update = "function",
			oneChild = "function",
			setGlobalConfig = "function",
			createContext = "function",

			-- These functions are deprecated and throw warnings!
			reify = "function",
			teardown = "function",
			reconcile = "function",

			Component = true,
			PureComponent = true,
			Portal = true,
			Children = true,
			Event = true,
			Change = true,
			Ref = true,
			None = true,
			UNSTABLE = true,
		}

		expect(Roact).to.be.ok()

		for key, valueType in pairs(publicApi) do
			local success
			if typeof(valueType) == "string" then
				success = typeof(Roact[key]) == valueType
			else
				success = Roact[key] ~= nil
			end

			if not success then
				local existence = typeof(valueType) == "boolean" and "present" or "of type " .. tostring(valueType)
				local message = ("Expected public API member %q to be %s, but instead it was of type %s"):format(
					tostring(key),
					existence,
					typeof(Roact[key])
				)

				error(message)
			end
		end

		for key in pairs(Roact) do
			if publicApi[key] == nil then
				local message = ("Found unknown public API key %q!"):format(tostring(key))

				error(message)
			end
		end
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8cd</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX198b513d73144f4bac41873304bc2a0a">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">internalAssert</string>
										<string name="ScriptGuid">{5a9f8f27-bec3-4646-968a-235003211c38}</string>
										<ProtectedString name="Source"><![CDATA[local function internalAssert(condition, message)
	if not condition then
		error(message .. " (This is probably a bug in Roact!)", 3)
	end
end

return internalAssert
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ce</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXa832eb92944e4577a91c870a9d2d8dc0">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">invalidSetStateMessages</string>
										<string name="ScriptGuid">{616a11f3-1275-4aa0-87c3-3d14c44ed491}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	These messages are used by Component to help users diagnose when they're
	calling setState in inappropriate places.

	The indentation may seem odd, but it's necessary to avoid introducing extra
	whitespace into the error messages themselves.
]]
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)

local invalidSetStateMessages = {}

invalidSetStateMessages[ComponentLifecyclePhase.WillUpdate] = [[
setState cannot be used in the willUpdate lifecycle method.
Consider using the didUpdate method instead, or using getDerivedStateFromProps.

Check the definition of willUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.ShouldUpdate] = [[
setState cannot be used in the shouldUpdate lifecycle method.
shouldUpdate must be a pure function that only depends on props and state.

Check the definition of shouldUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.Render] = [[
setState cannot be used in the render method.
render must be a pure function that only depends on props and state.

Check the definition of render in the component %q.]]

invalidSetStateMessages["default"] = [[
setState can not be used in the current situation, because Roact doesn't know
which part of the lifecycle this component is in.

This is a bug in Roact.
It was triggered by the component %q.
]]

return invalidSetStateMessages
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8cf</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX78803e2ae7dc4f82aec7c751525005ed">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">oneChild</string>
										<string name="ScriptGuid">{53676428-fecf-4f69-9505-da582c44faef}</string>
										<ProtectedString name="Source"><![CDATA[--[[
	Retrieves at most one child from the children passed to a component.

	If passed nil or an empty table, will return nil.

	Throws an error if passed more than one child.
]]
local function oneChild(children)
	if not children then
		return nil
	end

	local key, child = next(children)

	if not child then
		return nil
	end

	local after = next(children, key)

	if after then
		error("Expected at most child, had more than one child.", 2)
	end

	return child
end

return oneChild
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8d0</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX1f8ba5af392d41a19bc1aac6f972d00f">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">oneChild.spec</string>
										<string name="ScriptGuid">{ee3fa761-847e-42fb-be0a-9f4a85336c9f}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.createElement)

	local oneChild = require(script.Parent.oneChild)

	it("should get zero children from a table", function()
		local children = {}

		expect(oneChild(children)).to.equal(nil)
	end)

	it("should get exactly one child", function()
		local child = createElement("Frame")
		local children = {
			foo = child,
		}

		expect(oneChild(children)).to.equal(child)
	end)

	it("should error with more than one child", function()
		local children = {
			a = createElement("Frame"),
			b = createElement("Frame"),
		}

		expect(function()
			oneChild(children)
		end).to.throw()
	end)

	it("should handle being passed nil", function()
		expect(oneChild(nil)).to.equal(nil)
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8d1</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXb39ab6d90392456196126cba44d0f0f6">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">strict</string>
										<string name="ScriptGuid">{052dd94c-24a7-41c2-a562-e910a69df4b4}</string>
										<ProtectedString name="Source"><![CDATA[--!strict
local function strict(t: { [any]: any }, name: string?)
	-- FIXME Luau: Need to define a new variable since reassigning `name = ...`
	-- doesn't narrow the type
	local newName = name or tostring(t)

	return setmetatable(t, {
		__index = function(_self, key)
			local message = ("%q (%s) is not a valid member of %s"):format(tostring(key), typeof(key), newName)

			error(message, 2)
		end,

		__newindex = function(_self, key, _value)
			local message = ("%q (%s) is not a valid member of %s"):format(tostring(key), typeof(key), newName)

			error(message, 2)
		end,
	})
end

return strict
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8d2</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX938234835005458daa2d8f9025941fe2">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">strict.spec</string>
										<string name="ScriptGuid">{8c1f0943-0941-4632-9e88-587b3907da39}</string>
										<ProtectedString name="Source"><![CDATA[return function()
	local strict = require(script.Parent.strict)

	it("should error when getting a nonexistent key", function()
		local t = strict({
			a = 1,
			b = 2,
		})

		expect(function()
			return t.c
		end).to.throw()
	end)

	it("should error when setting a nonexistent key", function()
		local t = strict({
			a = 1,
			b = 2,
		})

		expect(function()
			t.c = 3
		end).to.throw()
	end)
end
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8d3</UniqueId>
									</Properties>
								</Item>
							</Item>
						</Item>
					</Item>
					<Item class="ModuleScript" referent="RBX3fcaa06f9e814f3f8860ccefacfcb153">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">t</string>
							<string name="ScriptGuid">{7a429a33-2a32-4027-86f0-b7f013601192}</string>
							<ProtectedString name="Source"><![CDATA[return require(script.Parent._Index["osyrisrblx_t@3.0.0"]["t"])
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8d4</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX06471e6e9019419f86ba19c1da583d4f">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Log</string>
							<string name="ScriptGuid">{7b2c077c-0180-45ff-9cd9-112935c5cb16}</string>
							<ProtectedString name="Source"><![CDATA[local Fmt = require(script.Parent.Fmt)

local Level = {
	Error = 0,
	Warning = 1,
	Info = 2,
	Debug = 3,
	Trace = 4,
}

local function getLogLevel()
	return Level.Info
end

local function addTags(tag, message)
	return tag .. message:gsub("\n", "\n" .. tag)
end

local TRACE_TAG = (" "):rep(15) .. "[Rojo-Trace] "
local INFO_TAG = (" "):rep(15) .. "[Rojo-Info] "
local DEBUG_TAG = (" "):rep(15) .. "[Rojo-Debug] "
local WARN_TAG = "[Rojo-Warn] "

local Log = {}

Log.Level = Level

function Log.setLogLevelThunk(thunk)
	getLogLevel = thunk
end

function Log.trace(template, ...)
	if getLogLevel() >= Level.Trace then
		print(addTags(TRACE_TAG, Fmt.fmt(template, ...)))
	end
end

function Log.info(template, ...)
	if getLogLevel() >= Level.Info then
		print(addTags(INFO_TAG, Fmt.fmt(template, ...)))
	end
end

function Log.debug(template, ...)
	if getLogLevel() >= Level.Debug then
		print(addTags(DEBUG_TAG, Fmt.fmt(template, ...)))
	end
end

function Log.warn(template, ...)
	if getLogLevel() >= Level.Warning then
		warn(addTags(WARN_TAG, Fmt.fmt(template, ...)))
	end
end

function Log.error(template, ...)
	error(Fmt.fmt(template, ...))
end

return Log]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f90</UniqueId>
						</Properties>
						<Item class="ModuleScript" referent="RBXf76511988f0f4681909ee35180177bfe">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">init.spec</string>
								<string name="ScriptGuid">{bff25a30-df9a-4114-98b3-0b7cbf8f5bf6}</string>
								<ProtectedString name="Source"><![CDATA[return function()
	it("should load", function()
		require(script.Parent)
	end)
end]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f91</UniqueId>
							</Properties>
						</Item>
					</Item>
					<Item class="ModuleScript" referent="RBX228edb8516cc4bae9feab6a8987b597a">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Http</string>
							<string name="ScriptGuid">{eeb9bde6-c411-470d-94fd-215113f6a5bc}</string>
							<ProtectedString name="Source"><![CDATA[local HttpService = game:GetService("HttpService")

local Promise = require(script.Parent.Promise)
local Log = require(script.Parent.Log)

local HttpError = require(script.Error)
local HttpResponse = require(script.Response)

local lastRequestId = 0

local Http = {}

Http.Error = HttpError
Http.Response = HttpResponse

local function performRequest(requestParams)
	local requestId = lastRequestId + 1
	lastRequestId = requestId

	Log.trace("HTTP {}({}) {}", requestParams.Method, requestId, requestParams.Url)

	if requestParams.Body ~= nil then
		Log.trace("{}", requestParams.Body)
	end

	return Promise.new(function(resolve, reject)
		coroutine.wrap(function()
			local success, response = pcall(function()
				return HttpService:RequestAsync(requestParams)
			end)

			if success then
				Log.trace("Request {} success, status code {}", requestId, response.StatusCode)
				resolve(HttpResponse.fromRobloxResponse(response))
			else
				Log.trace("Request {} failure: {:?}", requestId, response)
				reject(HttpError.fromRobloxErrorString(response))
			end
		end)()
	end)
end

function Http.get(url)
	return performRequest({
		Url = url,
		Method = "GET",
	})
end

function Http.post(url, body)
	return performRequest({
		Url = url,
		Method = "POST",
		Body = body,
	})
end

function Http.jsonEncode(object)
	return HttpService:JSONEncode(object)
end

function Http.jsonDecode(source)
	return HttpService:JSONDecode(source)
end

return Http]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f94</UniqueId>
						</Properties>
						<Item class="ModuleScript" referent="RBX45742d0ada6a4b03aab3b804475b0eb8">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Error</string>
								<string name="ScriptGuid">{5e9a04ea-4990-4806-a0e8-d8204de81574}</string>
								<ProtectedString name="Source"><![CDATA[local Error = {}
Error.__index = Error

Error.Kind = {
	HttpNotEnabled = {
		message = "Rojo requires HTTP access, which is not enabled.\n" ..
			"Check your game settings, located in the 'Home' tab of Studio.",
	},
	ConnectFailed = {
		message = "Couldn't connect to the Rojo server.\n" ..
			"Make sure the server is running — use 'rojo serve' to run it!",
	},
	Timeout = {
		message = "HTTP request timed out.",
	},
	Unknown = {
		message = "Unknown HTTP error: {{message}}",
	},
}

setmetatable(Error.Kind, {
	__index = function(_, key)
		error(("%q is not a valid member of Http.Error.Kind"):format(tostring(key)), 2)
	end,
})

function Error.new(type, extraMessage)
	extraMessage = extraMessage or ""
	local message = type.message:gsub("{{message}}", extraMessage)

	local err = {
		type = type,
		message = message,
	}

	setmetatable(err, Error)

	return err
end

function Error:__tostring()
	return self.message
end

--[[
	This method shouldn't have to exist. Ugh.
]]
function Error.fromRobloxErrorString(message)
	local lower = message:lower()

	if lower:find("^http requests are not enabled") then
		return Error.new(Error.Kind.HttpNotEnabled)
	end

	if lower:find("^httperror: timedout") then
		return Error.new(Error.Kind.Timeout)
	end

	if lower:find("^httperror: connectfail") then
		return Error.new(Error.Kind.ConnectFailed)
	end

	return Error.new(Error.Kind.Unknown, message)
end

return Error
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f95</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX447dbd5f9d7e4f5b833314e53c809716">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Response</string>
								<string name="ScriptGuid">{0a32e4b1-42c5-4e43-9097-85e26c51a917}</string>
								<ProtectedString name="Source"><![CDATA[local HttpService = game:GetService("HttpService")

local stringTemplate = [[
Http.Response {
	code: %d
	body: %s
}]]

local Response = {}
Response.__index = Response

function Response:__tostring()
	return stringTemplate:format(self.code, self.body)
end

function Response.fromRobloxResponse(response)
	local self = {
		body = response.Body,
		code = response.StatusCode,
		headers = response.Headers,
	}

	return setmetatable(self, Response)
end

function Response:isSuccess()
	return self.code >= 200 and self.code < 300
end

function Response:json()
	return HttpService:JSONDecode(self.body)
end

return Response]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f96</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX03e479cc5994456a931016013b7ed6c8">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">init.spec</string>
								<string name="ScriptGuid">{548f708d-2930-4739-96ae-aafe2fbf28bb}</string>
								<ProtectedString name="Source"><![CDATA[return function()
	it("should load", function()
		require(script.Parent)
	end)
end]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f97</UniqueId>
							</Properties>
						</Item>
					</Item>
					<Item class="ModuleScript" referent="RBX060c4198100542ff8e1970547b08edea">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Fmt</string>
							<string name="ScriptGuid">{95f6d9b9-48c8-4d70-ba7e-f08ad18833d6}</string>
							<ProtectedString name="Source"><![CDATA[--[[
	This library describes a formatting mechanism akin to Rust's std::fmt.

	It has a couple building blocks:

	* A new syntax for formatting strings, taken verbatim from Rust. It'd also
	  be possible to use printf-style formatting specifiers to integrate with
	  the existing string.format utility.

	* An equivalent to Rust's `Display` trait. We're mapping the semantics of
	  tostring and the __tostring metamethod onto this trait. A lot of types
	  should already have __tostring implementations, too!

	* An equivalent to Rust's `Debug` trait. This library Lua-ifies that idea by
	  inventing a new metamethod, `__fmtDebug`. We pass along the "extended
	  form" attribute which is the equivalent of the "alternate mode" in Rust's
	  Debug trait since it's the author's opinion that treating it as a
	  verbosity flag is semantically accurate.
]]

--[[
	The default implementation of __fmtDebug for tables when the extended option
	is not set.
]]
local function defaultTableDebug(buffer, input)
	buffer:writeRaw("{")

	for key, value in pairs(input) do
		buffer:write("[{:?}] = {:?}", key, value)

		if next(input, key) ~= nil then
			buffer:writeRaw(", ")
		end
	end

	buffer:writeRaw("}")
end

--[[
	The default implementation of __fmtDebug for tables with the extended option
	set.
]]
local function defaultTableDebugExtended(buffer, input)
	-- Special case for empty tables.
	if next(input) == nil then
		buffer:writeRaw("{}")
		return
	end

	buffer:writeLineRaw("{")
	buffer:indent()

	for key, value in pairs(input) do
		buffer:writeLine("[{:?}] = {:#?},", key, value)
	end

	buffer:unindent()
	buffer:writeRaw("}")
end

--[[
	The default debug representation for all types.
]]
local function debugImpl(buffer, value, extendedForm)
	local valueType = typeof(value)

	if valueType == "string" then
		local formatted = string.format("%q", value)
		buffer:writeRaw(formatted)
	elseif valueType == "table" then
		local valueMeta = getmetatable(value)

		if valueMeta ~= nil and  valueMeta.__fmtDebug ~= nil then
			-- This type implement's the metamethod we made up to line up with
			-- Rust's 'Debug' trait.

			valueMeta.__fmtDebug(value, buffer, extendedForm)
		else
			if extendedForm then
				defaultTableDebugExtended(buffer, value)
			else
				defaultTableDebug(buffer, value)
			end
		end
	elseif valueType == "Instance" then
		buffer:writeRaw(value:GetFullName())
	else
		buffer:writeRaw(tostring(value))
	end
end

--[[
	Defines and implements the library's template syntax.
]]
local function writeFmt(buffer, template, ...)
	local currentArg = 0
	local i = 1
	local len = #template

	while i <= len do
		local openBrace = template:find("{", i)

		if openBrace == nil then
			-- There are no remaining open braces in this string, so we can
			-- write the rest of the string to the buffer.

			buffer:writeRaw(template:sub(i))
			break
		else
			-- We found an open brace! This could be:
			-- - A literal '{', written as '{{'
			-- - The beginning of an interpolation, like '{}'
			-- - An error, if there's no matching '}'

			local charAfterBrace = template:sub(openBrace + 1, openBrace + 1)
			if charAfterBrace == "{" then
				-- This is a literal brace, so we'll write everything up to this
				-- point (including the first brace), and then skip over the
				-- second brace.

				buffer:writeRaw(template:sub(i, openBrace))
				i = openBrace + 2
			else
				-- This SHOULD be an interpolation. We'll find our matching
				-- brace and treat the contents as the formatting specifier.

				-- If there were any unwritten characters before this
				-- interpolation, write them to the buffer.
				if openBrace - i > 0 then
					buffer:writeRaw(template:sub(i, openBrace - 1))
				end

				local closeBrace = template:find("}", openBrace + 1)
				assert(closeBrace ~= nil, "Unclosed formatting specifier. Use '{{' to write an open brace.")

				local formatSpecifier = template:sub(openBrace + 1, closeBrace - 1)
				currentArg = currentArg + 1
				local arg = select(currentArg, ...)

				if formatSpecifier == "" then
					-- This should use the equivalent of Rust's 'Display', ie
					-- tostring and the __tostring metamethod.

					buffer:writeRaw(tostring(arg))
				elseif formatSpecifier == ":?" then
					-- This should use the equivalent of Rust's 'Debug',
					-- invented for this library as __fmtDebug.

					debugImpl(buffer, arg, false)
				elseif formatSpecifier == ":#?" then
					-- This should use the equivlant of Rust's 'Debug' with the
					-- 'alternate' (ie expanded) flag set.

					debugImpl(buffer, arg, true)
				else
					error("unsupported format specifier " .. formatSpecifier, 2)
				end

				i = closeBrace + 1
			end
		end
	end
end

local function debugOutputBuffer()
	local buffer = {}
	local startOfLine = true
	local indentLevel = 0
	local indentation = ""

	function buffer:writeLine(template, ...)
		writeFmt(self, template, ...)
		self:nextLine()
	end

	function buffer:writeLineRaw(value)
		self:writeRaw(value)
		self:nextLine()
	end

	function buffer:write(template, ...)
		return writeFmt(self, template, ...)
	end

	function buffer:writeRaw(value)
		if #value > 0 then
			if startOfLine and #indentation > 0 then
				startOfLine = false
				table.insert(self, indentation)
			end

			table.insert(self, value)
			startOfLine = false
		end
	end

	function buffer:nextLine()
		table.insert(self, "\n")
		startOfLine = true
	end

	function buffer:indent()
		indentLevel = indentLevel + 1
		indentation = string.rep("    ", indentLevel)
	end

	function buffer:unindent()
		indentLevel = math.max(0, indentLevel - 1)
		indentation = string.rep("    ", indentLevel)
	end

	function buffer:finish()
		return table.concat(self, "")
	end

	return buffer
end

local function fmt(template, ...)
	local buffer = debugOutputBuffer()
	writeFmt(buffer, template, ...)
	return buffer:finish()
end

--[[
	Wrap the given object in a type that implements the given function as its
	Debug implementation, and forwards __tostring to the type's underlying
	tostring implementation.
]]
local function debugify(object, fmtFunc)
	return setmetatable({}, {
		__fmtDebug = function(_, ...)
			return fmtFunc(object, ...)
		end,
		__tostring = function()
			return tostring(object)
		end,
	})
end

return {
	debugOutputBuffer = debugOutputBuffer,
	fmt = fmt,
	debugify = debugify,
}]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f9c</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX12a200bcf10e4c7fa3f0f0e895e5039d">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">RbxDom</string>
							<string name="ScriptGuid">{6d680dfd-b47e-4e49-b80f-900c7fa16247}</string>
							<ProtectedString name="Source"><![CDATA[local HttpService = game:GetService("HttpService")
local json_string = [[{
  "Version": [
    0,
    530,
    0,
    5300290
  ],
  "Classes": {
    "ABTestService": {
      "Name": "ABTestService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Accessory": {
      "Name": "Accessory",
      "Tags": [],
      "Superclass": "Accoutrement",
      "Properties": {
        "AccessoryType": {
          "Name": "AccessoryType",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "AccessoryType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AccessoryType": {
          "Enum": 0
        },
        "AttachmentPoint": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Accoutrement": {
      "Name": "Accoutrement",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AttachmentForward": {
          "Name": "AttachmentForward",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AttachmentPoint": {
          "Name": "AttachmentPoint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AttachmentPos": {
          "Name": "AttachmentPos",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AttachmentRight": {
          "Name": "AttachmentRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AttachmentUp": {
          "Name": "AttachmentUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "AttachmentPoint": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Actor": {
      "Name": "Actor",
      "Tags": [],
      "Superclass": "Model",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "LevelOfDetail": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AdService": {
      "Name": "AdService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AdvancedDragger": {
      "Name": "AdvancedDragger",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AlignOrientation": {
      "Name": "AlignOrientation",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "AlignType": {
          "Name": "AlignType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AlignType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxAngularVelocity": {
          "Name": "MaxAngularVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxTorque": {
          "Name": "MaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Mode": {
          "Name": "Mode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "OrientationAlignmentMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrimaryAxis": {
          "Name": "PrimaryAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrimaryAxisOnly": {
          "Name": "PrimaryAxisOnly",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReactionTorqueEnabled": {
          "Name": "ReactionTorqueEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Responsiveness": {
          "Name": "Responsiveness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RigidityEnabled": {
          "Name": "RigidityEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SecondaryAxis": {
          "Name": "SecondaryAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AlignType": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color": {
          "Int32": 23
        },
        "Enabled": {
          "Bool": true
        },
        "MaxAngularVelocity": {
          "Float32": null
        },
        "MaxTorque": {
          "Float32": 10000.0
        },
        "Mode": {
          "Enum": 1
        },
        "PrimaryAxis": {
          "Vector3": [
            1.0,
            0.0,
            0.0
          ]
        },
        "PrimaryAxisOnly": {
          "Bool": false
        },
        "ReactionTorqueEnabled": {
          "Bool": false
        },
        "Responsiveness": {
          "Float32": 10.0
        },
        "RigidityEnabled": {
          "Bool": false
        },
        "SecondaryAxis": {
          "Vector3": [
            0.0,
            1.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "AlignPosition": {
      "Name": "AlignPosition",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "ApplyAtCenterOfMass": {
          "Name": "ApplyAtCenterOfMass",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxForce": {
          "Name": "MaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxVelocity": {
          "Name": "MaxVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Mode": {
          "Name": "Mode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "PositionAlignmentMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReactionForceEnabled": {
          "Name": "ReactionForceEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Responsiveness": {
          "Name": "Responsiveness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RigidityEnabled": {
          "Name": "RigidityEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ApplyAtCenterOfMass": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 194
        },
        "Enabled": {
          "Bool": true
        },
        "MaxForce": {
          "Float32": 10000.0
        },
        "MaxVelocity": {
          "Float32": null
        },
        "Mode": {
          "Enum": 1
        },
        "Position": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "ReactionForceEnabled": {
          "Bool": false
        },
        "Responsiveness": {
          "Float32": 10.0
        },
        "RigidityEnabled": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "AnalysticsSettings": {
      "Name": "AnalysticsSettings",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GenericSettings",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AnalyticsService": {
      "Name": "AnalyticsService",
      "Tags": [
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ApiKey": {
          "Name": "ApiKey",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ApiKey": {
          "String": ""
        },
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AngularVelocity": {
      "Name": "AngularVelocity",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "AngularVelocity": {
          "Name": "AngularVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxTorque": {
          "Name": "MaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReactionTorqueEnabled": {
          "Name": "ReactionTorqueEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RelativeTo": {
          "Name": "RelativeTo",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorRelativeTo"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AngularVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 23
        },
        "Enabled": {
          "Bool": true
        },
        "MaxTorque": {
          "Float32": 0.0
        },
        "ReactionTorqueEnabled": {
          "Bool": false
        },
        "RelativeTo": {
          "Enum": 2
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "Animation": {
      "Name": "Animation",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AnimationId": {
          "Name": "AnimationId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AnimationId": {
          "Content": ""
        },
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AnimationClip": {
      "Name": "AnimationClip",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Loop": {
          "Name": "Loop",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Priority": {
          "Name": "Priority",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AnimationPriority"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "AnimationClipProvider": {
      "Name": "AnimationClipProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AnimationController": {
      "Name": "AnimationController",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AnimationFromVideoCreatorService": {
      "Name": "AnimationFromVideoCreatorService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AnimationFromVideoCreatorStudioService": {
      "Name": "AnimationFromVideoCreatorStudioService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AnimationRigData": {
      "Name": "AnimationRigData",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AnimationStreamTrack": {
      "Name": "AnimationStreamTrack",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "IsPlaying": {
          "Name": "IsPlaying",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Priority": {
          "Name": "Priority",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AnimationPriority"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WeightCurrent": {
          "Name": "WeightCurrent",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WeightTarget": {
          "Name": "WeightTarget",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "AnimationTrack": {
      "Name": "AnimationTrack",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Animation": {
          "Name": "Animation",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsPlaying": {
          "Name": "IsPlaying",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Length": {
          "Name": "Length",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Looped": {
          "Name": "Looped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Priority": {
          "Name": "Priority",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AnimationPriority"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Speed": {
          "Name": "Speed",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TimePosition": {
          "Name": "TimePosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WeightCurrent": {
          "Name": "WeightCurrent",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WeightTarget": {
          "Name": "WeightTarget",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Animator": {
      "Name": "Animator",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AppStorageService": {
      "Name": "AppStorageService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "LocalStorageService",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AppUpdateService": {
      "Name": "AppUpdateService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ArcHandles": {
      "Name": "ArcHandles",
      "Tags": [],
      "Superclass": "HandlesBase",
      "Properties": {
        "Axes": {
          "Name": "Axes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Axes"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Axes": {
          "Axes": [
            "X",
            "Y",
            "Z"
          ]
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "AssetCounterService": {
      "Name": "AssetCounterService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AssetDeliveryProxy": {
      "Name": "AssetDeliveryProxy",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AssetImportService": {
      "Name": "AssetImportService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AssetManagerService": {
      "Name": "AssetManagerService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AssetService": {
      "Name": "AssetService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Atmosphere": {
      "Name": "Atmosphere",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Decay": {
          "Name": "Decay",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Density": {
          "Name": "Density",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Glare": {
          "Name": "Glare",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Haze": {
          "Name": "Haze",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Offset": {
          "Name": "Offset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Color3": [
            0.7843,
            0.6667,
            0.4235
          ]
        },
        "Decay": {
          "Color3": [
            0.3608,
            0.2353,
            0.0549
          ]
        },
        "Density": {
          "Float32": 0.395
        },
        "Glare": {
          "Float32": 0.0
        },
        "Haze": {
          "Float32": 0.0
        },
        "Offset": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Attachment": {
      "Name": "Attachment",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Axis": {
          "Name": "Axis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Orientation": {
          "Name": "Orientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Rotation": {
          "Name": "Rotation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SecondaryAxis": {
          "Name": "SecondaryAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Visible": {
          "Name": "Visible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WorldAxis": {
          "Name": "WorldAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WorldCFrame": {
          "Name": "WorldCFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WorldOrientation": {
          "Name": "WorldOrientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WorldPosition": {
          "Name": "WorldPosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WorldRotation": {
          "Name": "WorldRotation",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WorldSecondaryAxis": {
          "Name": "WorldSecondaryAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "AvatarEditorService": {
      "Name": "AvatarEditorService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AvatarImportService": {
      "Name": "AvatarImportService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Backpack": {
      "Name": "Backpack",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BackpackItem": {
      "Name": "BackpackItem",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "TextureId": {
          "Name": "TextureId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "BadgeService": {
      "Name": "BadgeService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "BallSocketConstraint": {
      "Name": "BallSocketConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxFrictionTorque": {
          "Name": "MaxFrictionTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Restitution": {
          "Name": "Restitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TwistLimitsEnabled": {
          "Name": "TwistLimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TwistLowerAngle": {
          "Name": "TwistLowerAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TwistUpperAngle": {
          "Name": "TwistUpperAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UpperAngle": {
          "Name": "UpperAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 1009
        },
        "Enabled": {
          "Bool": true
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "Radius": {
          "Float32": 0.15
        },
        "Restitution": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TwistLimitsEnabled": {
          "Bool": false
        },
        "TwistLowerAngle": {
          "Float32": -45.0
        },
        "TwistUpperAngle": {
          "Float32": 45.0
        },
        "UpperAngle": {
          "Float32": 45.0
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "BasePart": {
      "Name": "BasePart",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "PVInstance",
      "Properties": {
        "Anchored": {
          "Name": "Anchored",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AssemblyAngularVelocity": {
          "Name": "AssemblyAngularVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AssemblyCenterOfMass": {
          "Name": "AssemblyCenterOfMass",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AssemblyLinearVelocity": {
          "Name": "AssemblyLinearVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AssemblyMass": {
          "Name": "AssemblyMass",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AssemblyRootPart": {
          "Name": "AssemblyRootPart",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "BackParamA": {
          "Name": "BackParamA",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BackParamB": {
          "Name": "BackParamB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BackSurface": {
          "Name": "BackSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BackSurfaceInput": {
          "Name": "BackSurfaceInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InputType"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BottomParamA": {
          "Name": "BottomParamA",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BottomParamB": {
          "Name": "BottomParamB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BottomSurface": {
          "Name": "BottomSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BottomSurfaceInput": {
          "Name": "BottomSurfaceInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InputType"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BrickColor": {
          "Name": "BrickColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Color"
            }
          }
        },
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanCollide": {
          "Name": "CanCollide",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanQuery": {
          "Name": "CanQuery",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanTouch": {
          "Name": "CanTouch",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CastShadow": {
          "Name": "CastShadow",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CenterOfMass": {
          "Name": "CenterOfMass",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CollisionGroupId": {
          "Name": "CollisionGroupId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CollisionGroups": {
          "Name": "CollisionGroups",
          "Scriptability": "Custom",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "Color3uint8"
              }
            }
          }
        },
        "Color3uint8": {
          "Name": "Color3uint8",
          "Scriptability": "None",
          "DataType": {
            "Value": "Color3uint8"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Color"
            }
          }
        },
        "CustomPhysicalProperties": {
          "Name": "CustomPhysicalProperties",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "PhysicalProperties"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Elasticity": {
          "Name": "Elasticity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Friction": {
          "Name": "Friction",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FrontParamA": {
          "Name": "FrontParamA",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FrontParamB": {
          "Name": "FrontParamB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FrontSurface": {
          "Name": "FrontSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FrontSurfaceInput": {
          "Name": "FrontSurfaceInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InputType"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftParamA": {
          "Name": "LeftParamA",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftParamB": {
          "Name": "LeftParamB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftSurface": {
          "Name": "LeftSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftSurfaceInput": {
          "Name": "LeftSurfaceInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InputType"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LocalTransparencyModifier": {
          "Name": "LocalTransparencyModifier",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Locked": {
          "Name": "Locked",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Mass": {
          "Name": "Mass",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Massless": {
          "Name": "Massless",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Material": {
          "Name": "Material",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "Material"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaterialVariant": {
          "Name": "MaterialVariant",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Orientation": {
          "Name": "Orientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PivotOffset": {
          "Name": "PivotOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ReceiveAge": {
          "Name": "ReceiveAge",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Reflectance": {
          "Name": "Reflectance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ResizeIncrement": {
          "Name": "ResizeIncrement",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ResizeableFaces": {
          "Name": "ResizeableFaces",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Faces"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightParamA": {
          "Name": "RightParamA",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightParamB": {
          "Name": "RightParamB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightSurface": {
          "Name": "RightSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightSurfaceInput": {
          "Name": "RightSurfaceInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InputType"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RootPriority": {
          "Name": "RootPriority",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RotVelocity": {
          "Name": "RotVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rotation": {
          "Name": "Rotation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "size"
              }
            }
          }
        },
        "SpecificGravity": {
          "Name": "SpecificGravity",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TopParamA": {
          "Name": "TopParamA",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TopParamB": {
          "Name": "TopParamB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TopSurface": {
          "Name": "TopSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TopSurfaceInput": {
          "Name": "TopSurfaceInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InputType"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Velocity": {
          "Name": "Velocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "brickColor": {
          "Name": "brickColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Color"
            }
          }
        },
        "size": {
          "Name": "size",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Size"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "BasePlayerGui": {
      "Name": "BasePlayerGui",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "BaseScript": {
      "Name": "BaseScript",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "LuaSourceContainer",
      "Properties": {
        "Disabled": {
          "Name": "Disabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LinkedSource": {
          "Name": "LinkedSource",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "BaseWrap": {
      "Name": "BaseWrap",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CageMeshId": {
          "Name": "CageMeshId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CageOrigin": {
          "Name": "CageOrigin",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CageOriginWorld": {
          "Name": "CageOriginWorld",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HSRAssetId": {
          "Name": "HSRAssetId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImportOrigin": {
          "Name": "ImportOrigin",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImportOriginWorld": {
          "Name": "ImportOriginWorld",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Beam": {
      "Name": "Beam",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Attachment0": {
          "Name": "Attachment0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Attachment1": {
          "Name": "Attachment1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "ColorSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurveSize0": {
          "Name": "CurveSize0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurveSize1": {
          "Name": "CurveSize1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FaceCamera": {
          "Name": "FaceCamera",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightEmission": {
          "Name": "LightEmission",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightInfluence": {
          "Name": "LightInfluence",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Segments": {
          "Name": "Segments",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Texture": {
          "Name": "Texture",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureLength": {
          "Name": "TextureLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureMode": {
          "Name": "TextureMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextureMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureSpeed": {
          "Name": "TextureSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Width0": {
          "Name": "Width0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Width1": {
          "Name": "Width1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ZOffset": {
          "Name": "ZOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "Color": {
          "ColorSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              },
              {
                "time": 1.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              }
            ]
          }
        },
        "CurveSize0": {
          "Float32": 0.0
        },
        "CurveSize1": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "FaceCamera": {
          "Bool": false
        },
        "LightEmission": {
          "Float32": 0.0
        },
        "LightInfluence": {
          "Float32": 0.0
        },
        "Segments": {
          "Int32": 10
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Texture": {
          "Content": ""
        },
        "TextureLength": {
          "Float32": 1.0
        },
        "TextureMode": {
          "Enum": 0
        },
        "TextureSpeed": {
          "Float32": 1.0
        },
        "Transparency": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 0.5,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 0.5,
                "envelope": 0.0
              }
            ]
          }
        },
        "Width0": {
          "Float32": 1.0
        },
        "Width1": {
          "Float32": 1.0
        },
        "ZOffset": {
          "Float32": 0.0
        }
      }
    },
    "BevelMesh": {
      "Name": "BevelMesh",
      "Tags": [
        "Deprecated",
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "DataModelMesh",
      "Properties": {},
      "DefaultProperties": {}
    },
    "BillboardGui": {
      "Name": "BillboardGui",
      "Tags": [],
      "Superclass": "LayerCollector",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Adornee": {
          "Name": "Adornee",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AlwaysOnTop": {
          "Name": "AlwaysOnTop",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClipsDescendants": {
          "Name": "ClipsDescendants",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentDistance": {
          "Name": "CurrentDistance",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DistanceLowerLimit": {
          "Name": "DistanceLowerLimit",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DistanceStep": {
          "Name": "DistanceStep",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DistanceUpperLimit": {
          "Name": "DistanceUpperLimit",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ExtentsOffset": {
          "Name": "ExtentsOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ExtentsOffsetWorldSpace": {
          "Name": "ExtentsOffsetWorldSpace",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightInfluence": {
          "Name": "LightInfluence",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxDistance": {
          "Name": "MaxDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlayerToHideFrom": {
          "Name": "PlayerToHideFrom",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SizeOffset": {
          "Name": "SizeOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsOffset": {
          "Name": "StudsOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsOffsetWorldSpace": {
          "Name": "StudsOffsetWorldSpace",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "Brightness": {
          "Float32": 1.0
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "DistanceLowerLimit": {
          "Float32": 0.0
        },
        "DistanceStep": {
          "Float32": 0.0
        },
        "DistanceUpperLimit": {
          "Float32": -1.0
        },
        "Enabled": {
          "Bool": true
        },
        "ExtentsOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "ExtentsOffsetWorldSpace": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "LightInfluence": {
          "Float32": 0.0
        },
        "MaxDistance": {
          "Float32": null
        },
        "ResetOnSpawn": {
          "Bool": true
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeOffset": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StudsOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "StudsOffsetWorldSpace": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Tags": {
          "BinaryString": ""
        },
        "ZIndexBehavior": {
          "Enum": 0
        }
      }
    },
    "BinaryStringValue": {
      "Name": "BinaryStringValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BindableEvent": {
      "Name": "BindableEvent",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BindableFunction": {
      "Name": "BindableFunction",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BlockMesh": {
      "Name": "BlockMesh",
      "Tags": [],
      "Superclass": "BevelMesh",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Offset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Scale": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "VertexColor": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        }
      }
    },
    "BloomEffect": {
      "Name": "BloomEffect",
      "Tags": [],
      "Superclass": "PostEffect",
      "Properties": {
        "Intensity": {
          "Name": "Intensity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Threshold": {
          "Name": "Threshold",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "Intensity": {
          "Float32": 0.4
        },
        "Size": {
          "Float32": 24.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Threshold": {
          "Float32": 0.95
        }
      }
    },
    "BlurEffect": {
      "Name": "BlurEffect",
      "Tags": [],
      "Superclass": "PostEffect",
      "Properties": {
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "Size": {
          "Float32": 24.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BodyAngularVelocity": {
      "Name": "BodyAngularVelocity",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "AngularVelocity": {
          "Name": "AngularVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxTorque": {
          "Name": "MaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "P": {
          "Name": "P",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "angularvelocity": {
          "Name": "angularvelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "AngularVelocity"
            }
          }
        },
        "maxTorque": {
          "Name": "maxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "MaxTorque"
            }
          }
        }
      },
      "DefaultProperties": {
        "AngularVelocity": {
          "Vector3": [
            0.0,
            2.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "MaxTorque": {
          "Vector3": [
            4000.0,
            4000.0,
            4000.0
          ]
        },
        "P": {
          "Float32": 1250.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BodyColors": {
      "Name": "BodyColors",
      "Tags": [],
      "Superclass": "CharacterAppearance",
      "Properties": {
        "HeadColor": {
          "Name": "HeadColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HeadColor3": {
          "Name": "HeadColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftArmColor": {
          "Name": "LeftArmColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftArmColor3": {
          "Name": "LeftArmColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftLegColor": {
          "Name": "LeftLegColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftLegColor3": {
          "Name": "LeftLegColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightArmColor": {
          "Name": "RightArmColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightArmColor3": {
          "Name": "RightArmColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightLegColor": {
          "Name": "RightLegColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightLegColor3": {
          "Name": "RightLegColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TorsoColor": {
          "Name": "TorsoColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TorsoColor3": {
          "Name": "TorsoColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "HeadColor3": {
          "Color3": [
            0.9921569,
            0.9176471,
            0.5529412
          ]
        },
        "LeftArmColor3": {
          "Color3": [
            0.9921569,
            0.9176471,
            0.5529412
          ]
        },
        "LeftLegColor3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "RightArmColor3": {
          "Color3": [
            0.9921569,
            0.9176471,
            0.5529412
          ]
        },
        "RightLegColor3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TorsoColor3": {
          "Color3": [
            0.15686275,
            0.49803925,
            0.2784314
          ]
        }
      }
    },
    "BodyForce": {
      "Name": "BodyForce",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "Force": {
          "Name": "Force",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "force": {
          "Name": "force",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Force"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Force": {
          "Vector3": [
            0.0,
            1.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BodyGyro": {
      "Name": "BodyGyro",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "D": {
          "Name": "D",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxTorque": {
          "Name": "MaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "P": {
          "Name": "P",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "cframe": {
          "Name": "cframe",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "CFrame"
            }
          }
        },
        "maxTorque": {
          "Name": "maxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "MaxTorque"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "D": {
          "Float32": 500.0
        },
        "MaxTorque": {
          "Vector3": [
            400000.0,
            0.0,
            400000.0
          ]
        },
        "P": {
          "Float32": 3000.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BodyMover": {
      "Name": "BodyMover",
      "Tags": [
        "Deprecated",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "BodyPosition": {
      "Name": "BodyPosition",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "D": {
          "Name": "D",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxForce": {
          "Name": "MaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "P": {
          "Name": "P",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "maxForce": {
          "Name": "maxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "MaxForce"
            }
          }
        },
        "position": {
          "Name": "position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Position"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "D": {
          "Float32": 1250.0
        },
        "MaxForce": {
          "Vector3": [
            4000.0,
            4000.0,
            4000.0
          ]
        },
        "P": {
          "Float32": 10000.0
        },
        "Position": {
          "Vector3": [
            0.0,
            50.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BodyThrust": {
      "Name": "BodyThrust",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "Force": {
          "Name": "Force",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Location": {
          "Name": "Location",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "force": {
          "Name": "force",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Force"
            }
          }
        },
        "location": {
          "Name": "location",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Location"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Force": {
          "Vector3": [
            0.0,
            1.0,
            0.0
          ]
        },
        "Location": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BodyVelocity": {
      "Name": "BodyVelocity",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "MaxForce": {
          "Name": "MaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "P": {
          "Name": "P",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Velocity": {
          "Name": "Velocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "maxForce": {
          "Name": "maxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "MaxForce"
            }
          }
        },
        "velocity": {
          "Name": "velocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Velocity"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MaxForce": {
          "Vector3": [
            4000.0,
            4000.0,
            4000.0
          ]
        },
        "P": {
          "Float32": 1250.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Velocity": {
          "Vector3": [
            0.0,
            2.0,
            0.0
          ]
        }
      }
    },
    "Bone": {
      "Name": "Bone",
      "Tags": [],
      "Superclass": "Attachment",
      "Properties": {
        "IsCFrameDriven": {
          "Name": "IsCFrameDriven",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Transform": {
          "Name": "Transform",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TransformedCFrame": {
          "Name": "TransformedCFrame",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TransformedWorldCFrame": {
          "Name": "TransformedWorldCFrame",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "BoolValue": {
      "Name": "BoolValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Bool": false
        }
      }
    },
    "BoxHandleAdornment": {
      "Name": "BoxHandleAdornment",
      "Tags": [],
      "Superclass": "HandleAdornment",
      "Properties": {
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AdornCullingMode": {
          "Enum": 0
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Size": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "SizeRelativeOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": -1
        }
      }
    },
    "Breakpoint": {
      "Name": "Breakpoint",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Condition": {
          "Name": "Condition",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ContinueExecution": {
          "Name": "ContinueExecution",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Id": {
          "Name": "Id",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Line": {
          "Name": "Line",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LogMessage": {
          "Name": "LogMessage",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MetaBreakpointId": {
          "Name": "MetaBreakpointId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Script": {
          "Name": "Script",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Verified": {
          "Name": "Verified",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "BreakpointManager": {
      "Name": "BreakpointManager",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "BrickColorValue": {
      "Name": "BrickColorValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Int32": 194
        }
      }
    },
    "BrowserService": {
      "Name": "BrowserService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "BulkImportService": {
      "Name": "BulkImportService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CFrameValue": {
      "Name": "CFrameValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        }
      }
    },
    "CSGDictionaryService": {
      "Name": "CSGDictionaryService",
      "Tags": [
        "Service"
      ],
      "Superclass": "FlyweightService",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CacheableContentProvider": {
      "Name": "CacheableContentProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CalloutService": {
      "Name": "CalloutService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Camera": {
      "Name": "Camera",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraSubject": {
          "Name": "CameraSubject",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraType": {
          "Name": "CameraType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "CameraType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CoordinateFrame": {
          "Name": "CoordinateFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "CFrame"
            }
          }
        },
        "DiagonalFieldOfView": {
          "Name": "DiagonalFieldOfView",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FieldOfView": {
          "Name": "FieldOfView",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FieldOfViewMode": {
          "Name": "FieldOfViewMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FieldOfViewMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Focus": {
          "Name": "Focus",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HeadLocked": {
          "Name": "HeadLocked",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HeadScale": {
          "Name": "HeadScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxAxisFieldOfView": {
          "Name": "MaxAxisFieldOfView",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "NearPlaneZ": {
          "Name": "NearPlaneZ",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ViewportSize": {
          "Name": "ViewportSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "focus": {
          "Name": "focus",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Focus"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              20.0,
              20.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                -0.0
              ],
              [
                -0.0,
                0.7071068,
                0.7071068
              ],
              [
                0.0,
                -0.7071068,
                0.7071068
              ]
            ]
          }
        },
        "CameraType": {
          "Enum": 0
        },
        "FieldOfView": {
          "Float32": 70.0
        },
        "FieldOfViewMode": {
          "Enum": 0
        },
        "Focus": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              -5.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "HeadLocked": {
          "Bool": true
        },
        "HeadScale": {
          "Float32": 1.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CanvasGroup": {
      "Name": "CanvasGroup",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "GuiObject",
      "Properties": {
        "GroupColor3": {
          "Name": "GroupColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GroupTransparency": {
          "Name": "GroupTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "GroupColor3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "GroupTransparency": {
          "Float32": 0.0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "CatalogPages": {
      "Name": "CatalogPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ChangeHistoryService": {
      "Name": "ChangeHistoryService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ChannelSelectorSoundEffect": {
      "Name": "ChannelSelectorSoundEffect",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "CustomDspSoundEffect",
      "Properties": {
        "Channel": {
          "Name": "Channel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Channel": {
          "Int32": 1
        },
        "Enabled": {
          "Bool": true
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CharacterAppearance": {
      "Name": "CharacterAppearance",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CharacterMesh": {
      "Name": "CharacterMesh",
      "Tags": [],
      "Superclass": "CharacterAppearance",
      "Properties": {
        "BaseTextureId": {
          "Name": "BaseTextureId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BodyPart": {
          "Name": "BodyPart",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "BodyPart"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshId": {
          "Name": "MeshId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OverlayTextureId": {
          "Name": "OverlayTextureId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BaseTextureId": {
          "Int64": 0
        },
        "BodyPart": {
          "Enum": 0
        },
        "MeshId": {
          "Int64": 0
        },
        "OverlayTextureId": {
          "Int64": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Chat": {
      "Name": "Chat",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "BubbleChatEnabled": {
          "Name": "BubbleChatEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LoadDefaultChat": {
          "Name": "LoadDefaultChat",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BubbleChatEnabled": {
          "Bool": false
        },
        "LoadDefaultChat": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ChatInputBarConfiguration": {
      "Name": "ChatInputBarConfiguration",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "TextChatConfigurations",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetTextChannel": {
          "Name": "TargetTextChannel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ChatWindowConfiguration": {
      "Name": "ChatWindowConfiguration",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "TextChatConfigurations",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ChorusSoundEffect": {
      "Name": "ChorusSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Depth": {
          "Name": "Depth",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Mix": {
          "Name": "Mix",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rate": {
          "Name": "Rate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Depth": {
          "Float32": 0.15
        },
        "Enabled": {
          "Bool": true
        },
        "Mix": {
          "Float32": 0.5
        },
        "Priority": {
          "Int32": 0
        },
        "Rate": {
          "Float32": 0.5
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ClickDetector": {
      "Name": "ClickDetector",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "CursorIcon": {
          "Name": "CursorIcon",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxActivationDistance": {
          "Name": "MaxActivationDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CursorIcon": {
          "Content": ""
        },
        "MaxActivationDistance": {
          "Float32": 32.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ClientReplicator": {
      "Name": "ClientReplicator",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "NetworkReplicator",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Clothing": {
      "Name": "Clothing",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "CharacterAppearance",
      "Properties": {
        "Color3": {
          "Name": "Color3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Clouds": {
      "Name": "Clouds",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Cover": {
          "Name": "Cover",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Density": {
          "Name": "Density",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Cover": {
          "Float32": 0.5
        },
        "Density": {
          "Float32": 0.7
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ClusterPacketCache": {
      "Name": "ClusterPacketCache",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CollectionService": {
      "Name": "CollectionService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Color3Value": {
      "Name": "Color3Value",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "ColorCorrectionEffect": {
      "Name": "ColorCorrectionEffect",
      "Tags": [],
      "Superclass": "PostEffect",
      "Properties": {
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Contrast": {
          "Name": "Contrast",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Saturation": {
          "Name": "Saturation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TintColor": {
          "Name": "TintColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 0.0
        },
        "Contrast": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "Saturation": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TintColor": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        }
      }
    },
    "CommandInstance": {
      "Name": "CommandInstance",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllowGUIAccessPoints": {
          "Name": "AllowGUIAccessPoints",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Checked": {
          "Name": "Checked",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DefaultShortcut": {
          "Name": "DefaultShortcut",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DisplayName": {
          "Name": "DisplayName",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Icon": {
          "Name": "Icon",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Name": {
          "Name": "Name",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Permission": {
          "Name": "Permission",
          "Scriptability": "None",
          "DataType": {
            "Enum": "CommandPermission"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "StatusTip": {
          "Name": "StatusTip",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "CommandService": {
      "Name": "CommandService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CompressorSoundEffect": {
      "Name": "CompressorSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Attack": {
          "Name": "Attack",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GainMakeup": {
          "Name": "GainMakeup",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Ratio": {
          "Name": "Ratio",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Release": {
          "Name": "Release",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SideChain": {
          "Name": "SideChain",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Threshold": {
          "Name": "Threshold",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attack": {
          "Float32": 0.1
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "GainMakeup": {
          "Float32": 0.0
        },
        "Priority": {
          "Int32": 0
        },
        "Ratio": {
          "Float32": 40.0
        },
        "Release": {
          "Float32": 0.1
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Threshold": {
          "Float32": -40.0
        }
      }
    },
    "ConeHandleAdornment": {
      "Name": "ConeHandleAdornment",
      "Tags": [],
      "Superclass": "HandleAdornment",
      "Properties": {
        "Height": {
          "Name": "Height",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AdornCullingMode": {
          "Enum": 0
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Height": {
          "Float32": 2.0
        },
        "Radius": {
          "Float32": 0.5
        },
        "SizeRelativeOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": -1
        }
      }
    },
    "Configuration": {
      "Name": "Configuration",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ConfigureServerService": {
      "Name": "ConfigureServerService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Constraint": {
      "Name": "Constraint",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Attachment0": {
          "Name": "Attachment0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Attachment1": {
          "Name": "Attachment1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Visible": {
          "Name": "Visible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ContentProvider": {
      "Name": "ContentProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "BaseUrl": {
          "Name": "BaseUrl",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RequestQueueSize": {
          "Name": "RequestQueueSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ContextActionService": {
      "Name": "ContextActionService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Controller": {
      "Name": "Controller",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ControllerService": {
      "Name": "ControllerService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CookiesService": {
      "Name": "CookiesService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CoreGui": {
      "Name": "CoreGui",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "BasePlayerGui",
      "Properties": {
        "SelectionImageObject": {
          "Name": "SelectionImageObject",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Version": {
          "Name": "Version",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "CorePackages": {
      "Name": "CorePackages",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CoreScript": {
      "Name": "CoreScript",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "BaseScript",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CoreScriptSyncService": {
      "Name": "CoreScriptSyncService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CornerWedgePart": {
      "Name": "CornerWedgePart",
      "Tags": [],
      "Superclass": "BasePart",
      "Properties": {},
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 0
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            2.0,
            2.0,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 0
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "CrossDMScriptChangeListener": {
      "Name": "CrossDMScriptChangeListener",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CurveAnimation": {
      "Name": "CurveAnimation",
      "Tags": [],
      "Superclass": "AnimationClip",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Loop": {
          "Bool": true
        },
        "Priority": {
          "Enum": 2
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CustomDspSoundEffect": {
      "Name": "CustomDspSoundEffect",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "SoundEffect",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CustomEvent": {
      "Name": "CustomEvent",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CustomEventReceiver": {
      "Name": "CustomEventReceiver",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Source": {
          "Name": "Source",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CylinderHandleAdornment": {
      "Name": "CylinderHandleAdornment",
      "Tags": [],
      "Superclass": "HandleAdornment",
      "Properties": {
        "Angle": {
          "Name": "Angle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Height": {
          "Name": "Height",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InnerRadius": {
          "Name": "InnerRadius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AdornCullingMode": {
          "Enum": 0
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Angle": {
          "Float32": 360.0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Height": {
          "Float32": 1.0
        },
        "InnerRadius": {
          "Float32": 0.0
        },
        "Radius": {
          "Float32": 1.0
        },
        "SizeRelativeOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": -1
        }
      }
    },
    "CylinderMesh": {
      "Name": "CylinderMesh",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BevelMesh",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Offset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Scale": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "VertexColor": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        }
      }
    },
    "CylindricalConstraint": {
      "Name": "CylindricalConstraint",
      "Tags": [],
      "Superclass": "SlidingBallConstraint",
      "Properties": {
        "AngularActuatorType": {
          "Name": "AngularActuatorType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularLimitsEnabled": {
          "Name": "AngularLimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularResponsiveness": {
          "Name": "AngularResponsiveness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularRestitution": {
          "Name": "AngularRestitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularSpeed": {
          "Name": "AngularSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularVelocity": {
          "Name": "AngularVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentAngle": {
          "Name": "CurrentAngle",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "InclinationAngle": {
          "Name": "InclinationAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LowerAngle": {
          "Name": "LowerAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MotorMaxAngularAcceleration": {
          "Name": "MotorMaxAngularAcceleration",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MotorMaxTorque": {
          "Name": "MotorMaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RotationAxisVisible": {
          "Name": "RotationAxisVisible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ServoMaxTorque": {
          "Name": "ServoMaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetAngle": {
          "Name": "TargetAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UpperAngle": {
          "Name": "UpperAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WorldRotationAxis": {
          "Name": "WorldRotationAxis",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "ActuatorType": {
          "Enum": 0
        },
        "AngularActuatorType": {
          "Enum": 0
        },
        "AngularLimitsEnabled": {
          "Bool": false
        },
        "AngularResponsiveness": {
          "Float32": 45.0
        },
        "AngularRestitution": {
          "Float32": 0.0
        },
        "AngularSpeed": {
          "Float32": 0.0
        },
        "AngularVelocity": {
          "Float32": 0.0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 1009
        },
        "Enabled": {
          "Bool": true
        },
        "InclinationAngle": {
          "Float32": 0.0
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "LinearResponsiveness": {
          "Float32": 45.0
        },
        "LowerAngle": {
          "Float32": -45.0
        },
        "LowerLimit": {
          "Float32": 0.0
        },
        "MotorMaxAcceleration": {
          "Float32": null
        },
        "MotorMaxAngularAcceleration": {
          "Float32": null
        },
        "MotorMaxForce": {
          "Float32": 0.0
        },
        "MotorMaxTorque": {
          "Float32": 0.0
        },
        "Restitution": {
          "Float32": 0.0
        },
        "RotationAxisVisible": {
          "Bool": false
        },
        "ServoMaxForce": {
          "Float32": 0.0
        },
        "ServoMaxTorque": {
          "Float32": 0.0
        },
        "Size": {
          "Float32": 0.15
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Speed": {
          "Float32": 0.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "TargetAngle": {
          "Float32": 0.0
        },
        "TargetPosition": {
          "Float32": 0.0
        },
        "UpperAngle": {
          "Float32": 45.0
        },
        "UpperLimit": {
          "Float32": 5.0
        },
        "Velocity": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "DataModel": {
      "Name": "DataModel",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "ServiceProvider",
      "Properties": {
        "CreatorId": {
          "Name": "CreatorId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CreatorType": {
          "Name": "CreatorType",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "CreatorType"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GameId": {
          "Name": "GameId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GearGenreSetting": {
          "Name": "GearGenreSetting",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "GearGenreSetting"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Genre": {
          "Name": "Genre",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "Genre"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsSFFlagsLoaded": {
          "Name": "IsSFFlagsLoaded",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "JobId": {
          "Name": "JobId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlaceId": {
          "Name": "PlaceId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlaceVersion": {
          "Name": "PlaceVersion",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PrivateServerId": {
          "Name": "PrivateServerId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PrivateServerOwnerId": {
          "Name": "PrivateServerOwnerId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VIPServerId": {
          "Name": "VIPServerId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VIPServerOwnerId": {
          "Name": "VIPServerOwnerId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Workspace": {
          "Name": "Workspace",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "lighting": {
          "Name": "lighting",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "workspace": {
          "Name": "workspace",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataModelMesh": {
      "Name": "DataModelMesh",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Offset": {
          "Name": "Offset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Scale": {
          "Name": "Scale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VertexColor": {
          "Name": "VertexColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataModelPatchService": {
      "Name": "DataModelPatchService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataModelSession": {
      "Name": "DataModelSession",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CurrentDataModelType": {
          "Name": "CurrentDataModelType",
          "Scriptability": "None",
          "DataType": {
            "Enum": "StudioDataModelType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SessionId": {
          "Name": "SessionId",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataStore": {
      "Name": "DataStore",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "GlobalDataStore",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataStoreIncrementOptions": {
      "Name": "DataStoreIncrementOptions",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataStoreInfo": {
      "Name": "DataStoreInfo",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CreatedTime": {
          "Name": "CreatedTime",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataStoreName": {
          "Name": "DataStoreName",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UpdatedTime": {
          "Name": "UpdatedTime",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataStoreKey": {
      "Name": "DataStoreKey",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "KeyName": {
          "Name": "KeyName",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataStoreKeyInfo": {
      "Name": "DataStoreKeyInfo",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CreatedTime": {
          "Name": "CreatedTime",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UpdatedTime": {
          "Name": "UpdatedTime",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Version": {
          "Name": "Version",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataStoreKeyPages": {
      "Name": "DataStoreKeyPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataStoreListingPages": {
      "Name": "DataStoreListingPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataStoreObjectVersionInfo": {
      "Name": "DataStoreObjectVersionInfo",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CreatedTime": {
          "Name": "CreatedTime",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsDeleted": {
          "Name": "IsDeleted",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Version": {
          "Name": "Version",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataStoreOptions": {
      "Name": "DataStoreOptions",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllScopes": {
          "Name": "AllScopes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataStorePages": {
      "Name": "DataStorePages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataStoreService": {
      "Name": "DataStoreService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AutomaticRetry": {
          "Name": "AutomaticRetry",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LegacyNamingScheme": {
          "Name": "LegacyNamingScheme",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutomaticRetry": {
          "Bool": true
        },
        "LegacyNamingScheme": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "DataStoreSetOptions": {
      "Name": "DataStoreSetOptions",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataStoreVersionPages": {
      "Name": "DataStoreVersionPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Debris": {
      "Name": "Debris",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "MaxItems": {
          "Name": "MaxItems",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MaxItems": {
          "Int32": 1000
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "DebugSettings": {
      "Name": "DebugSettings",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Settings"
      ],
      "Superclass": "Instance",
      "Properties": {
        "DataModel": {
          "Name": "DataModel",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "InstanceCount": {
          "Name": "InstanceCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsScriptStackTracingEnabled": {
          "Name": "IsScriptStackTracingEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "JobCount": {
          "Name": "JobCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlayerCount": {
          "Name": "PlayerCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ReportSoundWarnings": {
          "Name": "ReportSoundWarnings",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RobloxVersion": {
          "Name": "RobloxVersion",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TickCountPreciseOverride": {
          "Name": "TickCountPreciseOverride",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TickCountSampleMethod"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggablePluginWatcher": {
      "Name": "DebuggablePluginWatcher",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DebuggerBreakpoint": {
      "Name": "DebuggerBreakpoint",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Condition": {
          "Name": "Condition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ContinueExecution": {
          "Name": "ContinueExecution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsEnabled": {
          "Name": "IsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Line": {
          "Name": "Line",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LogExpression": {
          "Name": "LogExpression",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "isContextDependentBreakpoint": {
          "Name": "isContextDependentBreakpoint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggerConnection": {
      "Name": "DebuggerConnection",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ErrorMessage": {
          "Name": "ErrorMessage",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HasError": {
          "Name": "HasError",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Id": {
          "Name": "Id",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsPaused": {
          "Name": "IsPaused",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggerConnectionManager": {
      "Name": "DebuggerConnectionManager",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Timeout": {
          "Name": "Timeout",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggerLuaResponse": {
      "Name": "DebuggerLuaResponse",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "IsError": {
          "Name": "IsError",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsSuccess": {
          "Name": "IsSuccess",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Message": {
          "Name": "Message",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RequestId": {
          "Name": "RequestId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Status": {
          "Name": "Status",
          "Scriptability": "None",
          "DataType": {
            "Enum": "DebuggerStatus"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggerManager": {
      "Name": "DebuggerManager",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "DebuggingEnabled": {
          "Name": "DebuggingEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggerUIService": {
      "Name": "DebuggerUIService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DebuggerVariable": {
      "Name": "DebuggerVariable",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Name": {
          "Name": "Name",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Populated": {
          "Name": "Populated",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Type": {
          "Name": "Type",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Value": {
          "Name": "Value",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VariableId": {
          "Name": "VariableId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VariablesCount": {
          "Name": "VariablesCount",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggerWatch": {
      "Name": "DebuggerWatch",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Expression": {
          "Name": "Expression",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Decal": {
      "Name": "Decal",
      "Tags": [],
      "Superclass": "FaceInstance",
      "Properties": {
        "Color3": {
          "Name": "Color3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LocalTransparencyModifier": {
          "Name": "LocalTransparencyModifier",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Shiny": {
          "Name": "Shiny",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Specular": {
          "Name": "Specular",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Texture": {
          "Name": "Texture",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ZIndex": {
          "Name": "ZIndex",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Face": {
          "Enum": 5
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Texture": {
          "Content": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "DepthOfFieldEffect": {
      "Name": "DepthOfFieldEffect",
      "Tags": [],
      "Superclass": "PostEffect",
      "Properties": {
        "FarIntensity": {
          "Name": "FarIntensity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FocusDistance": {
          "Name": "FocusDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InFocusRadius": {
          "Name": "InFocusRadius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NearIntensity": {
          "Name": "NearIntensity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "FarIntensity": {
          "Float32": 0.75
        },
        "FocusDistance": {
          "Float32": 0.05
        },
        "InFocusRadius": {
          "Float32": 10.0
        },
        "NearIntensity": {
          "Float32": 0.75
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Dialog": {
      "Name": "Dialog",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "BehaviorType": {
          "Name": "BehaviorType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DialogBehaviorType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ConversationDistance": {
          "Name": "ConversationDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GoodbyeChoiceActive": {
          "Name": "GoodbyeChoiceActive",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GoodbyeDialog": {
          "Name": "GoodbyeDialog",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InUse": {
          "Name": "InUse",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "InitialPrompt": {
          "Name": "InitialPrompt",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Purpose": {
          "Name": "Purpose",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DialogPurpose"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Tone": {
          "Name": "Tone",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DialogTone"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TriggerDistance": {
          "Name": "TriggerDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TriggerOffset": {
          "Name": "TriggerOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BehaviorType": {
          "Enum": 0
        },
        "ConversationDistance": {
          "Float32": 25.0
        },
        "GoodbyeChoiceActive": {
          "Bool": true
        },
        "GoodbyeDialog": {
          "String": ""
        },
        "InitialPrompt": {
          "String": ""
        },
        "Purpose": {
          "Enum": 1
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Tone": {
          "Enum": 0
        },
        "TriggerDistance": {
          "Float32": 0.0
        },
        "TriggerOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "DialogChoice": {
      "Name": "DialogChoice",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "GoodbyeChoiceActive": {
          "Name": "GoodbyeChoiceActive",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GoodbyeDialog": {
          "Name": "GoodbyeDialog",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ResponseDialog": {
          "Name": "ResponseDialog",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UserDialog": {
          "Name": "UserDialog",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "GoodbyeChoiceActive": {
          "Bool": true
        },
        "GoodbyeDialog": {
          "String": ""
        },
        "ResponseDialog": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UserDialog": {
          "String": ""
        }
      }
    },
    "DistortionSoundEffect": {
      "Name": "DistortionSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Level": {
          "Name": "Level",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "Level": {
          "Float32": 0.75
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "DockWidgetPluginGui": {
      "Name": "DockWidgetPluginGui",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "PluginGui",
      "Properties": {
        "HostWidgetWasRestored": {
          "Name": "HostWidgetWasRestored",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DoubleConstrainedValue": {
      "Name": "DoubleConstrainedValue",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "ValueBase",
      "Properties": {
        "ConstrainedValue": {
          "Name": "ConstrainedValue",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxValue": {
          "Name": "MaxValue",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MinValue": {
          "Name": "MinValue",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MaxValue": {
          "Float64": 1.0
        },
        "MinValue": {
          "Float64": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "DraftsService": {
      "Name": "DraftsService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Dragger": {
      "Name": "Dragger",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DraggerService": {
      "Name": "DraggerService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AlignDraggedObjects": {
          "Name": "AlignDraggedObjects",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AngleSnapEnabled": {
          "Name": "AngleSnapEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AngleSnapIncrement": {
          "Name": "AngleSnapIncrement",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AnimateHover": {
          "Name": "AnimateHover",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CollisionsEnabled": {
          "Name": "CollisionsEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DraggerCoordinateSpace": {
          "Name": "DraggerCoordinateSpace",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "DraggerCoordinateSpace"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DraggerMovementMode": {
          "Name": "DraggerMovementMode",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "DraggerMovementMode"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GeometrySnapColor": {
          "Name": "GeometrySnapColor",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HoverAnimateFrequency": {
          "Name": "HoverAnimateFrequency",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HoverThickness": {
          "Name": "HoverThickness",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "JointsEnabled": {
          "Name": "JointsEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LinearSnapEnabled": {
          "Name": "LinearSnapEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LinearSnapIncrement": {
          "Name": "LinearSnapIncrement",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PivotSnapToGeometry": {
          "Name": "PivotSnapToGeometry",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShowHover": {
          "Name": "ShowHover",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShowPivotIndicator": {
          "Name": "ShowPivotIndicator",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DynamicRotate": {
      "Name": "DynamicRotate",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "JointInstance",
      "Properties": {
        "BaseAngle": {
          "Name": "BaseAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "EchoSoundEffect": {
      "Name": "EchoSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Delay": {
          "Name": "Delay",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DryLevel": {
          "Name": "DryLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Feedback": {
          "Name": "Feedback",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WetLevel": {
          "Name": "WetLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Delay": {
          "Float32": 1.0
        },
        "DryLevel": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "Feedback": {
          "Float32": 0.5
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "WetLevel": {
          "Float32": 0.0
        }
      }
    },
    "EmotesPages": {
      "Name": "EmotesPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "InventoryPages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "EqualizerSoundEffect": {
      "Name": "EqualizerSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "HighGain": {
          "Name": "HighGain",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LowGain": {
          "Name": "LowGain",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MidGain": {
          "Name": "MidGain",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "HighGain": {
          "Float32": 0.0
        },
        "LowGain": {
          "Float32": -20.0
        },
        "MidGain": {
          "Float32": -10.0
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "EulerRotationCurve": {
      "Name": "EulerRotationCurve",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "RotationOrder": {
          "Name": "RotationOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RotationOrder"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "RotationOrder": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "EventIngestService": {
      "Name": "EventIngestService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Explosion": {
      "Name": "Explosion",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "BlastPressure": {
          "Name": "BlastPressure",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BlastRadius": {
          "Name": "BlastRadius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DestroyJointRadiusPercent": {
          "Name": "DestroyJointRadiusPercent",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ExplosionType": {
          "Name": "ExplosionType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ExplosionType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TimeScale": {
          "Name": "TimeScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Visible": {
          "Name": "Visible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BlastPressure": {
          "Float32": 500000.0
        },
        "BlastRadius": {
          "Float32": 4.0
        },
        "DestroyJointRadiusPercent": {
          "Float32": 1.0
        },
        "ExplosionType": {
          "Enum": 1
        },
        "Position": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TimeScale": {
          "Float32": 1.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "FaceAnimatorService": {
      "Name": "FaceAnimatorService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AudioAnimationEnabled": {
          "Name": "AudioAnimationEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FlipHeadOrientation": {
          "Name": "FlipHeadOrientation",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VideoAnimationEnabled": {
          "Name": "VideoAnimationEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "FaceControls": {
      "Name": "FaceControls",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ChinRaiser": {
          "Name": "ChinRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ChinRaiserUpperLip": {
          "Name": "ChinRaiserUpperLip",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Corrugator": {
          "Name": "Corrugator",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EyesLookDown": {
          "Name": "EyesLookDown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EyesLookLeft": {
          "Name": "EyesLookLeft",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EyesLookRight": {
          "Name": "EyesLookRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EyesLookUp": {
          "Name": "EyesLookUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FlatPucker": {
          "Name": "FlatPucker",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Funneler": {
          "Name": "Funneler",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "JawDrop": {
          "Name": "JawDrop",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "JawLeft": {
          "Name": "JawLeft",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "JawRight": {
          "Name": "JawRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftBrowLowerer": {
          "Name": "LeftBrowLowerer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftCheekPuff": {
          "Name": "LeftCheekPuff",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftCheekRaiser": {
          "Name": "LeftCheekRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftDimpler": {
          "Name": "LeftDimpler",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftEyeClosed": {
          "Name": "LeftEyeClosed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftEyeUpperLidRaiser": {
          "Name": "LeftEyeUpperLidRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftInnerBrowRaiser": {
          "Name": "LeftInnerBrowRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftLipCornerDown": {
          "Name": "LeftLipCornerDown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftLipCornerPuller": {
          "Name": "LeftLipCornerPuller",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftLipStretcher": {
          "Name": "LeftLipStretcher",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftLowerLipDepressor": {
          "Name": "LeftLowerLipDepressor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftNoseWrinkler": {
          "Name": "LeftNoseWrinkler",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftOuterBrowRaiser": {
          "Name": "LeftOuterBrowRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftUpperLipRaiser": {
          "Name": "LeftUpperLipRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LipPresser": {
          "Name": "LipPresser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LipsTogether": {
          "Name": "LipsTogether",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LowerLipSuck": {
          "Name": "LowerLipSuck",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MouthLeft": {
          "Name": "MouthLeft",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MouthRight": {
          "Name": "MouthRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Pucker": {
          "Name": "Pucker",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightBrowLowerer": {
          "Name": "RightBrowLowerer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightCheekPuff": {
          "Name": "RightCheekPuff",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightCheekRaiser": {
          "Name": "RightCheekRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightDimpler": {
          "Name": "RightDimpler",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightEyeClosed": {
          "Name": "RightEyeClosed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightEyeUpperLidRaiser": {
          "Name": "RightEyeUpperLidRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightInnerBrowRaiser": {
          "Name": "RightInnerBrowRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightLipCornerDown": {
          "Name": "RightLipCornerDown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightLipCornerPuller": {
          "Name": "RightLipCornerPuller",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightLipStretcher": {
          "Name": "RightLipStretcher",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightLowerLipDepressor": {
          "Name": "RightLowerLipDepressor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightNoseWrinkler": {
          "Name": "RightNoseWrinkler",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightOuterBrowRaiser": {
          "Name": "RightOuterBrowRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightUpperLipRaiser": {
          "Name": "RightUpperLipRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TongueDown": {
          "Name": "TongueDown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TongueOut": {
          "Name": "TongueOut",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TongueUp": {
          "Name": "TongueUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UpperLipSuck": {
          "Name": "UpperLipSuck",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "FaceInstance": {
      "Name": "FaceInstance",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Face": {
          "Name": "Face",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "FacialAnimationStreamingService": {
      "Name": "FacialAnimationStreamingService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Feature": {
      "Name": "Feature",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "FaceId": {
          "Name": "FaceId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InOut": {
          "Name": "InOut",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InOut"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftRight": {
          "Name": "LeftRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "LeftRight"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TopBottom": {
          "Name": "TopBottom",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TopBottom"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "File": {
      "Name": "File",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Size": {
          "Name": "Size",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "FileMesh": {
      "Name": "FileMesh",
      "Tags": [],
      "Superclass": "DataModelMesh",
      "Properties": {
        "MeshId": {
          "Name": "MeshId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureId": {
          "Name": "TextureId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MeshId": {
          "Content": ""
        },
        "Offset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Scale": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TextureId": {
          "Content": ""
        },
        "VertexColor": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        }
      }
    },
    "Fire": {
      "Name": "Fire",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Heat": {
          "Name": "Heat",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "heat_xml"
              }
            }
          }
        },
        "SecondaryColor": {
          "Name": "SecondaryColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "size_xml"
              }
            }
          }
        },
        "TimeScale": {
          "Name": "TimeScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "heat_xml": {
          "Name": "heat_xml",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Heat"
            }
          }
        },
        "size": {
          "Name": "size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Size"
            }
          }
        },
        "size_xml": {
          "Name": "size_xml",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Size"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Color3": [
            0.92549026,
            0.54509807,
            0.27450982
          ]
        },
        "Enabled": {
          "Bool": true
        },
        "Heat": {
          "Float32": 9.0
        },
        "SecondaryColor": {
          "Color3": [
            0.54509807,
            0.3137255,
            0.21568629
          ]
        },
        "Size": {
          "Float32": 5.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TimeScale": {
          "Float32": 1.0
        }
      }
    },
    "Flag": {
      "Name": "Flag",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Tool",
      "Properties": {
        "TeamColor": {
          "Name": "TeamColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CanBeDropped": {
          "Bool": true
        },
        "Enabled": {
          "Bool": true
        },
        "Grip": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "ManualActivationOnly": {
          "Bool": false
        },
        "RequiresHandle": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TeamColor": {
          "Int32": 194
        },
        "TextureId": {
          "Content": ""
        },
        "ToolTip": {
          "String": ""
        }
      }
    },
    "FlagStand": {
      "Name": "FlagStand",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Part",
      "Properties": {
        "TeamColor": {
          "Name": "TeamColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FormFactor": {
          "Enum": 1
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Shape": {
          "Enum": 1
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TeamColor": {
          "Int32": 194
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "FlagStandService": {
      "Name": "FlagStandService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "FlangeSoundEffect": {
      "Name": "FlangeSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Depth": {
          "Name": "Depth",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Mix": {
          "Name": "Mix",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rate": {
          "Name": "Rate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Depth": {
          "Float32": 0.45
        },
        "Enabled": {
          "Bool": true
        },
        "Mix": {
          "Float32": 0.85
        },
        "Priority": {
          "Int32": 0
        },
        "Rate": {
          "Float32": 5.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "FloatCurve": {
      "Name": "FloatCurve",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Length": {
          "Name": "Length",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "FloorWire": {
      "Name": "FloorWire",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "GuiBase3d",
      "Properties": {
        "CycleOffset": {
          "Name": "CycleOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "From": {
          "Name": "From",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsBetweenTextures": {
          "Name": "StudsBetweenTextures",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Texture": {
          "Name": "Texture",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureSize": {
          "Name": "TextureSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "To": {
          "Name": "To",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Velocity": {
          "Name": "Velocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WireRadius": {
          "Name": "WireRadius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "CycleOffset": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StudsBetweenTextures": {
          "Float32": 4.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Texture": {
          "Content": ""
        },
        "TextureSize": {
          "Vector2": [
            1.0,
            1.0
          ]
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Float32": 2.0
        },
        "Visible": {
          "Bool": true
        },
        "WireRadius": {
          "Float32": 0.0625
        }
      }
    },
    "FlyweightService": {
      "Name": "FlyweightService",
      "Tags": [
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Folder": {
      "Name": "Folder",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ForceField": {
      "Name": "ForceField",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Visible": {
          "Name": "Visible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "FormFactorPart": {
      "Name": "FormFactorPart",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "BasePart",
      "Properties": {
        "FormFactor": {
          "Name": "FormFactor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FormFactor"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "formFactorRaw"
              }
            }
          }
        },
        "formFactor": {
          "Name": "formFactor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FormFactor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "FormFactor"
            }
          }
        },
        "formFactorRaw": {
          "Name": "formFactorRaw",
          "Scriptability": "None",
          "DataType": {
            "Enum": "FormFactor"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "FormFactor"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Frame": {
      "Name": "Frame",
      "Tags": [],
      "Superclass": "GuiObject",
      "Properties": {
        "Style": {
          "Name": "Style",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FrameStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Style": {
          "Enum": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "FriendPages": {
      "Name": "FriendPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "FriendService": {
      "Name": "FriendService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "FunctionalTest": {
      "Name": "FunctionalTest",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Description": {
          "Name": "Description",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Description": {
          "String": "?"
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "GamePassService": {
      "Name": "GamePassService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "GameSettings": {
      "Name": "GameSettings",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Settings"
      ],
      "Superclass": "Instance",
      "Properties": {
        "VideoCaptureEnabled": {
          "Name": "VideoCaptureEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VideoRecording": {
          "Name": "VideoRecording",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GamepadService": {
      "Name": "GamepadService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "GamepadCursorEnabled": {
          "Name": "GamepadCursorEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GenericSettings": {
      "Name": "GenericSettings",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "ServiceProvider",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Geometry": {
      "Name": "Geometry",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "GetTextBoundsParams": {
      "Name": "GetTextBoundsParams",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Width": {
          "Name": "Width",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GlobalDataStore": {
      "Name": "GlobalDataStore",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "GlobalSettings": {
      "Name": "GlobalSettings",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "GenericSettings",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Glue": {
      "Name": "Glue",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "JointInstance",
      "Properties": {
        "F0": {
          "Name": "F0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "F1": {
          "Name": "F1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "F2": {
          "Name": "F2",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "F3": {
          "Name": "F3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "F0": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "F1": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "F2": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "F3": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "GoogleAnalyticsConfiguration": {
      "Name": "GoogleAnalyticsConfiguration",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "GroupService": {
      "Name": "GroupService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "GuiBase": {
      "Name": "GuiBase",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "GuiBase2d": {
      "Name": "GuiBase2d",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "GuiBase",
      "Properties": {
        "AbsolutePosition": {
          "Name": "AbsolutePosition",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AbsoluteRotation": {
          "Name": "AbsoluteRotation",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AbsoluteSize": {
          "Name": "AbsoluteSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AutoLocalize": {
          "Name": "AutoLocalize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClippedRect": {
          "Name": "ClippedRect",
          "Scriptability": "None",
          "DataType": {
            "Value": "Rect"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsNotOccluded": {
          "Name": "IsNotOccluded",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Localize": {
          "Name": "Localize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RawRect2D": {
          "Name": "RawRect2D",
          "Scriptability": "None",
          "DataType": {
            "Value": "Rect"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RootLocalizationTable": {
          "Name": "RootLocalizationTable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionBehaviorDown": {
          "Name": "SelectionBehaviorDown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SelectionBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionBehaviorLeft": {
          "Name": "SelectionBehaviorLeft",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SelectionBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionBehaviorRight": {
          "Name": "SelectionBehaviorRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SelectionBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionBehaviorUp": {
          "Name": "SelectionBehaviorUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SelectionBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionGroup": {
          "Name": "SelectionGroup",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TotalGroupScale": {
          "Name": "TotalGroupScale",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GuiBase3d": {
      "Name": "GuiBase3d",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GuiBase",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Color3": {
          "Name": "Color3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Visible": {
          "Name": "Visible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GuiButton": {
      "Name": "GuiButton",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "GuiObject",
      "Properties": {
        "AutoButtonColor": {
          "Name": "AutoButtonColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Modal": {
          "Name": "Modal",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Selected": {
          "Name": "Selected",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Style": {
          "Name": "Style",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ButtonStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GuiLabel": {
      "Name": "GuiLabel",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GuiObject",
      "Properties": {},
      "DefaultProperties": {}
    },
    "GuiMain": {
      "Name": "GuiMain",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "ScreenGui",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "DisplayOrder": {
          "Int32": 0
        },
        "Enabled": {
          "Bool": true
        },
        "IgnoreGuiInset": {
          "Bool": false
        },
        "ResetOnSpawn": {
          "Bool": true
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "ZIndexBehavior": {
          "Enum": 0
        }
      }
    },
    "GuiObject": {
      "Name": "GuiObject",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "GuiBase2d",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AnchorPoint": {
          "Name": "AnchorPoint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AutomaticSize": {
          "Name": "AutomaticSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AutomaticSize"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BackgroundColor": {
          "Name": "BackgroundColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "BackgroundColor3": {
          "Name": "BackgroundColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BackgroundTransparency": {
          "Name": "BackgroundTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BorderColor": {
          "Name": "BorderColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "BorderColor3": {
          "Name": "BorderColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BorderMode": {
          "Name": "BorderMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "BorderMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BorderSizePixel": {
          "Name": "BorderSizePixel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClipsDescendants": {
          "Name": "ClipsDescendants",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Draggable": {
          "Name": "Draggable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LayoutOrder": {
          "Name": "LayoutOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NextSelectionDown": {
          "Name": "NextSelectionDown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NextSelectionLeft": {
          "Name": "NextSelectionLeft",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NextSelectionRight": {
          "Name": "NextSelectionRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NextSelectionUp": {
          "Name": "NextSelectionUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rotation": {
          "Name": "Rotation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Selectable": {
          "Name": "Selectable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionImageObject": {
          "Name": "SelectionImageObject",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionOrder": {
          "Name": "SelectionOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SizeConstraint": {
          "Name": "SizeConstraint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SizeConstraint"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Visible": {
          "Name": "Visible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ZIndex": {
          "Name": "ZIndex",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GuiService": {
      "Name": "GuiService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AutoSelectGuiEnabled": {
          "Name": "AutoSelectGuiEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CoreEffectFolder": {
          "Name": "CoreEffectFolder",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CoreGuiFolder": {
          "Name": "CoreGuiFolder",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CoreGuiNavigationEnabled": {
          "Name": "CoreGuiNavigationEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GuiNavigationEnabled": {
          "Name": "GuiNavigationEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsModalDialog": {
          "Name": "IsModalDialog",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsWindows": {
          "Name": "IsWindows",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MenuIsOpen": {
          "Name": "MenuIsOpen",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SelectedCoreObject": {
          "Name": "SelectedCoreObject",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SelectedObject": {
          "Name": "SelectedObject",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TouchControlsEnabled": {
          "Name": "TouchControlsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GuidRegistryService": {
      "Name": "GuidRegistryService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HSRDataContentProvider": {
      "Name": "HSRDataContentProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "CacheableContentProvider",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HandleAdornment": {
      "Name": "HandleAdornment",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "PVAdornment",
      "Properties": {
        "AdornCullingMode": {
          "Name": "AdornCullingMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AdornCullingMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AlwaysOnTop": {
          "Name": "AlwaysOnTop",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SizeRelativeOffset": {
          "Name": "SizeRelativeOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ZIndex": {
          "Name": "ZIndex",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Handles": {
      "Name": "Handles",
      "Tags": [],
      "Superclass": "HandlesBase",
      "Properties": {
        "Faces": {
          "Name": "Faces",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Faces"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Style": {
          "Name": "Style",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HandlesStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Faces": {
          "Faces": [
            "Right",
            "Top",
            "Back",
            "Left",
            "Bottom",
            "Front"
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Style": {
          "Enum": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "HandlesBase": {
      "Name": "HandlesBase",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "PartAdornment",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HapticService": {
      "Name": "HapticService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Hat": {
      "Name": "Hat",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Accoutrement",
      "Properties": {},
      "DefaultProperties": {
        "AttachmentPoint": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "HeightmapImporterService": {
      "Name": "HeightmapImporterService",
      "Tags": [
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HiddenSurfaceRemovalAsset": {
      "Name": "HiddenSurfaceRemovalAsset",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Highlight": {
      "Name": "Highlight",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Adornee": {
          "Name": "Adornee",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DepthMode": {
          "Name": "DepthMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HighlightDepthMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FillColor": {
          "Name": "FillColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FillTransparency": {
          "Name": "FillTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OutlineColor": {
          "Name": "OutlineColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OutlineTransparency": {
          "Name": "OutlineTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "DepthMode": {
          "Enum": 0
        },
        "Enabled": {
          "Bool": true
        },
        "FillColor": {
          "Color3": [
            1.0,
            0.0,
            0.0
          ]
        },
        "FillTransparency": {
          "Float32": 0.5
        },
        "OutlineColor": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "OutlineTransparency": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "HingeConstraint": {
      "Name": "HingeConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "ActuatorType": {
          "Name": "ActuatorType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularResponsiveness": {
          "Name": "AngularResponsiveness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularSpeed": {
          "Name": "AngularSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularVelocity": {
          "Name": "AngularVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentAngle": {
          "Name": "CurrentAngle",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LowerAngle": {
          "Name": "LowerAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MotorMaxAcceleration": {
          "Name": "MotorMaxAcceleration",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MotorMaxTorque": {
          "Name": "MotorMaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Restitution": {
          "Name": "Restitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ServoMaxTorque": {
          "Name": "ServoMaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetAngle": {
          "Name": "TargetAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UpperAngle": {
          "Name": "UpperAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ActuatorType": {
          "Enum": 0
        },
        "AngularResponsiveness": {
          "Float32": 45.0
        },
        "AngularSpeed": {
          "Float32": 0.0
        },
        "AngularVelocity": {
          "Float32": 0.0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 1009
        },
        "Enabled": {
          "Bool": true
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "LowerAngle": {
          "Float32": -45.0
        },
        "MotorMaxAcceleration": {
          "Float32": null
        },
        "MotorMaxTorque": {
          "Float32": 0.0
        },
        "Radius": {
          "Float32": 0.15
        },
        "Restitution": {
          "Float32": 0.0
        },
        "ServoMaxTorque": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TargetAngle": {
          "Float32": 0.0
        },
        "UpperAngle": {
          "Float32": 45.0
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "Hint": {
      "Name": "Hint",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Message",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Text": {
          "String": ""
        }
      }
    },
    "Hole": {
      "Name": "Hole",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Feature",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "FaceId": {
          "Enum": 0
        },
        "InOut": {
          "Enum": 2
        },
        "LeftRight": {
          "Enum": 1
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopBottom": {
          "Enum": 1
        }
      }
    },
    "Hopper": {
      "Name": "Hopper",
      "Tags": [
        "Deprecated",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HopperBin": {
      "Name": "HopperBin",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BackpackItem",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BinType": {
          "Name": "BinType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "BinType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BinType": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TextureId": {
          "Content": ""
        }
      }
    },
    "HttpRbxApiService": {
      "Name": "HttpRbxApiService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HttpRequest": {
      "Name": "HttpRequest",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HttpService": {
      "Name": "HttpService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "HttpEnabled": {
          "Name": "HttpEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "HttpEnabled": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Humanoid": {
      "Name": "Humanoid",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AutoJumpEnabled": {
          "Name": "AutoJumpEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AutoRotate": {
          "Name": "AutoRotate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AutomaticScalingEnabled": {
          "Name": "AutomaticScalingEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BreakJointsOnDeath": {
          "Name": "BreakJointsOnDeath",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraOffset": {
          "Name": "CameraOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CollisionType": {
          "Name": "CollisionType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HumanoidCollisionType"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DisplayDistanceType": {
          "Name": "DisplayDistanceType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HumanoidDisplayDistanceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DisplayName": {
          "Name": "DisplayName",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FloorMaterial": {
          "Name": "FloorMaterial",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "Material"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Health": {
          "Name": "Health",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HealthDisplayDistance": {
          "Name": "HealthDisplayDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HealthDisplayType": {
          "Name": "HealthDisplayType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HumanoidHealthDisplayType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HipHeight": {
          "Name": "HipHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Jump": {
          "Name": "Jump",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "JumpHeight": {
          "Name": "JumpHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "JumpPower": {
          "Name": "JumpPower",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftLeg": {
          "Name": "LeftLeg",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxHealth": {
          "Name": "MaxHealth",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxSlopeAngle": {
          "Name": "MaxSlopeAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MoveDirection": {
          "Name": "MoveDirection",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "NameDisplayDistance": {
          "Name": "NameDisplayDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NameOcclusion": {
          "Name": "NameOcclusion",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NameOcclusion"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlatformStand": {
          "Name": "PlatformStand",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RequiresNeck": {
          "Name": "RequiresNeck",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RigType": {
          "Name": "RigType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HumanoidRigType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightLeg": {
          "Name": "RightLeg",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RootPart": {
          "Name": "RootPart",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SeatPart": {
          "Name": "SeatPart",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Sit": {
          "Name": "Sit",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TargetPoint": {
          "Name": "TargetPoint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Torso": {
          "Name": "Torso",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UseJumpPower": {
          "Name": "UseJumpPower",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WalkSpeed": {
          "Name": "WalkSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WalkToPart": {
          "Name": "WalkToPart",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WalkToPoint": {
          "Name": "WalkToPoint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "maxHealth": {
          "Name": "maxHealth",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutoJumpEnabled": {
          "Bool": true
        },
        "AutoRotate": {
          "Bool": true
        },
        "AutomaticScalingEnabled": {
          "Bool": true
        },
        "BreakJointsOnDeath": {
          "Bool": true
        },
        "CollisionType": {
          "Enum": 0
        },
        "DisplayDistanceType": {
          "Enum": 0
        },
        "DisplayName": {
          "String": ""
        },
        "HealthDisplayDistance": {
          "Float32": 100.0
        },
        "HealthDisplayType": {
          "Enum": 0
        },
        "HipHeight": {
          "Float32": 0.0
        },
        "JumpHeight": {
          "Float32": 7.2
        },
        "JumpPower": {
          "Float32": 50.0
        },
        "MaxHealth": {
          "Float32": 100.0
        },
        "MaxSlopeAngle": {
          "Float32": 89.0
        },
        "NameDisplayDistance": {
          "Float32": 100.0
        },
        "NameOcclusion": {
          "Enum": 2
        },
        "RequiresNeck": {
          "Bool": true
        },
        "RigType": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UseJumpPower": {
          "Bool": true
        },
        "WalkSpeed": {
          "Float32": 16.0
        }
      }
    },
    "HumanoidController": {
      "Name": "HumanoidController",
      "Tags": [],
      "Superclass": "Controller",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "HumanoidDescription": {
      "Name": "HumanoidDescription",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AccessoryBlob": {
          "Name": "AccessoryBlob",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BackAccessory": {
          "Name": "BackAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BodyTypeScale": {
          "Name": "BodyTypeScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClimbAnimation": {
          "Name": "ClimbAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DepthScale": {
          "Name": "DepthScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Face": {
          "Name": "Face",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FaceAccessory": {
          "Name": "FaceAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FallAnimation": {
          "Name": "FallAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FrontAccessory": {
          "Name": "FrontAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GraphicTShirt": {
          "Name": "GraphicTShirt",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HairAccessory": {
          "Name": "HairAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HatAccessory": {
          "Name": "HatAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Head": {
          "Name": "Head",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HeadColor": {
          "Name": "HeadColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HeadScale": {
          "Name": "HeadScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HeightScale": {
          "Name": "HeightScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IdleAnimation": {
          "Name": "IdleAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "JumpAnimation": {
          "Name": "JumpAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftArm": {
          "Name": "LeftArm",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftArmColor": {
          "Name": "LeftArmColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftLeg": {
          "Name": "LeftLeg",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftLegColor": {
          "Name": "LeftLegColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NeckAccessory": {
          "Name": "NeckAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NumberEmotesLoaded": {
          "Name": "NumberEmotesLoaded",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Pants": {
          "Name": "Pants",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ProportionScale": {
          "Name": "ProportionScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightArm": {
          "Name": "RightArm",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightArmColor": {
          "Name": "RightArmColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightLeg": {
          "Name": "RightLeg",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightLegColor": {
          "Name": "RightLegColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RunAnimation": {
          "Name": "RunAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Shirt": {
          "Name": "Shirt",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShouldersAccessory": {
          "Name": "ShouldersAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SwimAnimation": {
          "Name": "SwimAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Torso": {
          "Name": "Torso",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TorsoColor": {
          "Name": "TorsoColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WaistAccessory": {
          "Name": "WaistAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WalkAnimation": {
          "Name": "WalkAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WidthScale": {
          "Name": "WidthScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AccessoryBlob": {
          "String": "[]"
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackAccessory": {
          "String": ""
        },
        "BodyTypeScale": {
          "Float32": 0.3
        },
        "ClimbAnimation": {
          "Int64": 0
        },
        "DepthScale": {
          "Float32": 1.0
        },
        "Face": {
          "Int64": 0
        },
        "FaceAccessory": {
          "String": ""
        },
        "FallAnimation": {
          "Int64": 0
        },
        "FrontAccessory": {
          "String": ""
        },
        "GraphicTShirt": {
          "Int64": 0
        },
        "HairAccessory": {
          "String": ""
        },
        "HatAccessory": {
          "String": ""
        },
        "Head": {
          "Int64": 0
        },
        "HeadColor": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "HeadScale": {
          "Float32": 1.0
        },
        "HeightScale": {
          "Float32": 1.0
        },
        "IdleAnimation": {
          "Int64": 0
        },
        "JumpAnimation": {
          "Int64": 0
        },
        "LeftArm": {
          "Int64": 0
        },
        "LeftArmColor": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "LeftLeg": {
          "Int64": 0
        },
        "LeftLegColor": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "NeckAccessory": {
          "String": ""
        },
        "Pants": {
          "Int64": 0
        },
        "ProportionScale": {
          "Float32": 1.0
        },
        "RightArm": {
          "Int64": 0
        },
        "RightArmColor": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "RightLeg": {
          "Int64": 0
        },
        "RightLegColor": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "RunAnimation": {
          "Int64": 0
        },
        "Shirt": {
          "Int64": 0
        },
        "ShouldersAccessory": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "SwimAnimation": {
          "Int64": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Torso": {
          "Int64": 0
        },
        "TorsoColor": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "WaistAccessory": {
          "String": ""
        },
        "WalkAnimation": {
          "Int64": 0
        },
        "WidthScale": {
          "Float32": 1.0
        }
      }
    },
    "ILegacyStudioBridge": {
      "Name": "ILegacyStudioBridge",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "IXPService": {
      "Name": "IXPService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ImageButton": {
      "Name": "ImageButton",
      "Tags": [],
      "Superclass": "GuiButton",
      "Properties": {
        "ContentImageSize": {
          "Name": "ContentImageSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HoverImage": {
          "Name": "HoverImage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Image": {
          "Name": "Image",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageColor3": {
          "Name": "ImageColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageRectOffset": {
          "Name": "ImageRectOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageRectSize": {
          "Name": "ImageRectSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageTransparency": {
          "Name": "ImageTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsLoaded": {
          "Name": "IsLoaded",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PressedImage": {
          "Name": "PressedImage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ResampleMode": {
          "Name": "ResampleMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ResamplerMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScaleType": {
          "Name": "ScaleType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScaleType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SliceCenter": {
          "Name": "SliceCenter",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Rect"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SliceScale": {
          "Name": "SliceScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TileSize": {
          "Name": "TileSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": true
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoButtonColor": {
          "Bool": true
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "HoverImage": {
          "Content": ""
        },
        "Image": {
          "Content": ""
        },
        "ImageColor3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "ImageRectOffset": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "ImageRectSize": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "ImageTransparency": {
          "Float32": 0.0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "Modal": {
          "Bool": false
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "PressedImage": {
          "Content": ""
        },
        "ResampleMode": {
          "Enum": 0
        },
        "Rotation": {
          "Float32": 0.0
        },
        "ScaleType": {
          "Enum": 0
        },
        "Selectable": {
          "Bool": true
        },
        "Selected": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SliceCenter": {
          "Rect": [
            [
              0.0,
              0.0
            ],
            [
              0.0,
              0.0
            ]
          ]
        },
        "SliceScale": {
          "Float32": 1.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Style": {
          "Enum": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "TileSize": {
          "UDim2": [
            [
              1.0,
              0
            ],
            [
              1.0,
              0
            ]
          ]
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "ImageHandleAdornment": {
      "Name": "ImageHandleAdornment",
      "Tags": [],
      "Superclass": "HandleAdornment",
      "Properties": {
        "Image": {
          "Name": "Image",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AdornCullingMode": {
          "Enum": 0
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color3": {
          "Color3": [
            0.9490197,
            0.95294124,
            0.95294124
          ]
        },
        "Image": {
          "Content": "rbxasset://textures/SurfacesDefault.png"
        },
        "Size": {
          "Vector2": [
            1.0,
            1.0
          ]
        },
        "SizeRelativeOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": -1
        }
      }
    },
    "ImageLabel": {
      "Name": "ImageLabel",
      "Tags": [],
      "Superclass": "GuiLabel",
      "Properties": {
        "ContentImageSize": {
          "Name": "ContentImageSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Image": {
          "Name": "Image",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageColor3": {
          "Name": "ImageColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageRectOffset": {
          "Name": "ImageRectOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageRectSize": {
          "Name": "ImageRectSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageTransparency": {
          "Name": "ImageTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsLoaded": {
          "Name": "IsLoaded",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ResampleMode": {
          "Name": "ResampleMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ResamplerMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScaleType": {
          "Name": "ScaleType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScaleType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SliceCenter": {
          "Name": "SliceCenter",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Rect"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SliceScale": {
          "Name": "SliceScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TileSize": {
          "Name": "TileSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "Image": {
          "Content": ""
        },
        "ImageColor3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "ImageRectOffset": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "ImageRectSize": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "ImageTransparency": {
          "Float32": 0.0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "ResampleMode": {
          "Enum": 0
        },
        "Rotation": {
          "Float32": 0.0
        },
        "ScaleType": {
          "Enum": 0
        },
        "Selectable": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SliceCenter": {
          "Rect": [
            [
              0.0,
              0.0
            ],
            [
              0.0,
              0.0
            ]
          ]
        },
        "SliceScale": {
          "Float32": 1.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TileSize": {
          "UDim2": [
            [
              1.0,
              0
            ],
            [
              1.0,
              0
            ]
          ]
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "ImporterAnimationSettings": {
      "Name": "ImporterAnimationSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "ImporterBaseSettings",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ImporterBaseSettings": {
      "Name": "ImporterBaseSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Id": {
          "Name": "Id",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ImportName": {
          "Name": "ImportName",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShouldImport": {
          "Name": "ShouldImport",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ImporterGroupSettings": {
      "Name": "ImporterGroupSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "ImporterBaseSettings",
      "Properties": {
        "Anchored": {
          "Name": "Anchored",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImportAsModelAsset": {
          "Name": "ImportAsModelAsset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InsertInWorkspace": {
          "Name": "InsertInWorkspace",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ImporterJointSettings": {
      "Name": "ImporterJointSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "ImporterBaseSettings",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ImporterMaterialSettings": {
      "Name": "ImporterMaterialSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "ImporterBaseSettings",
      "Properties": {
        "DiffuseFilePath": {
          "Name": "DiffuseFilePath",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsPbr": {
          "Name": "IsPbr",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MetalnessFilePath": {
          "Name": "MetalnessFilePath",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "NormalFilePath": {
          "Name": "NormalFilePath",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RoughnessFilePath": {
          "Name": "RoughnessFilePath",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ImporterMeshSettings": {
      "Name": "ImporterMeshSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "ImporterBaseSettings",
      "Properties": {
        "Anchored": {
          "Name": "Anchored",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CageManifold": {
          "Name": "CageManifold",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CageManifoldPreview": {
          "Name": "CageManifoldPreview",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CageNoOverlappingVertices": {
          "Name": "CageNoOverlappingVertices",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CageNoOverlappingVerticesPreview": {
          "Name": "CageNoOverlappingVerticesPreview",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Dimensions": {
          "Name": "Dimensions",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DoubleSided": {
          "Name": "DoubleSided",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IgnoreVertexColors": {
          "Name": "IgnoreVertexColors",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PolygonCount": {
          "Name": "PolygonCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ImporterRootSettings": {
      "Name": "ImporterRootSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "ImporterBaseSettings",
      "Properties": {
        "Anchored": {
          "Name": "Anchored",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FileDimensions": {
          "Name": "FileDimensions",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ImportAsModelAsset": {
          "Name": "ImportAsModelAsset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InsertInWorkspace": {
          "Name": "InsertInWorkspace",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InsertWithScenePosition": {
          "Name": "InsertWithScenePosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InvertNegativeFaces": {
          "Name": "InvertNegativeFaces",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MergeMeshes": {
          "Name": "MergeMeshes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PolygonCount": {
          "Name": "PolygonCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RigType": {
          "Name": "RigType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RigType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScaleUnit": {
          "Name": "ScaleUnit",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "MeshScaleUnit"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UseSceneOriginAsPivot": {
          "Name": "UseSceneOriginAsPivot",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WorldForward": {
          "Name": "WorldForward",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WorldUp": {
          "Name": "WorldUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "IncrementalPatchBuilder": {
      "Name": "IncrementalPatchBuilder",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "InputObject": {
      "Name": "InputObject",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Delta": {
          "Name": "Delta",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "KeyCode": {
          "Name": "KeyCode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "KeyCode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UserInputState": {
          "Name": "UserInputState",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "UserInputState"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UserInputType": {
          "Name": "UserInputType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "UserInputType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "InsertService": {
      "Name": "InsertService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllowClientInsertModels": {
          "Name": "AllowClientInsertModels",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AllowInsertFreeModels": {
          "Name": "AllowInsertFreeModels",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotBrowsable",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AllowClientInsertModels": {
          "Bool": false
        },
        "AllowInsertFreeModels": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Instance": {
      "Name": "Instance",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": null,
      "Properties": {
        "Archivable": {
          "Name": "Archivable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "archivable"
              }
            }
          }
        },
        "Attributes": {
          "Name": "Attributes",
          "Scriptability": "Custom",
          "DataType": {
            "Value": "Attributes"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "AttributesSerialize"
              }
            }
          }
        },
        "AttributesSerialize": {
          "Name": "AttributesSerialize",
          "Scriptability": "None",
          "DataType": {
            "Value": "BinaryString"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Attributes"
            }
          }
        },
        "ClassName": {
          "Name": "ClassName",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataCost": {
          "Name": "DataCost",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Name": {
          "Name": "Name",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Parent": {
          "Name": "Parent",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RobloxLocked": {
          "Name": "RobloxLocked",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SourceAssetId": {
          "Name": "SourceAssetId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Tags": {
          "Name": "Tags",
          "Scriptability": "Custom",
          "DataType": {
            "Value": "Tags"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "archivable": {
          "Name": "archivable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Archivable"
            }
          }
        },
        "className": {
          "Name": "className",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "ClassName"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "InstanceAdornment": {
      "Name": "InstanceAdornment",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GuiBase3d",
      "Properties": {
        "Adornee": {
          "Name": "Adornee",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "IntConstrainedValue": {
      "Name": "IntConstrainedValue",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "ValueBase",
      "Properties": {
        "ConstrainedValue": {
          "Name": "ConstrainedValue",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxValue": {
          "Name": "MaxValue",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MinValue": {
          "Name": "MinValue",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MaxValue": {
          "Int64": 10
        },
        "MinValue": {
          "Int64": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "IntValue": {
      "Name": "IntValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Int64": 0
        }
      }
    },
    "InventoryPages": {
      "Name": "InventoryPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "JointInstance": {
      "Name": "JointInstance",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "C0": {
          "Name": "C0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "C1": {
          "Name": "C1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Part0": {
          "Name": "Part0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Part1": {
          "Name": "Part1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "part1": {
          "Name": "part1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Part1"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "JointsService": {
      "Name": "JointsService",
      "Tags": [
        "Deprecated",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "KeyboardService": {
      "Name": "KeyboardService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Keyframe": {
      "Name": "Keyframe",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Time": {
          "Name": "Time",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Time": {
          "Float32": 0.0
        }
      }
    },
    "KeyframeMarker": {
      "Name": "KeyframeMarker",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "String": ""
        }
      }
    },
    "KeyframeSequence": {
      "Name": "KeyframeSequence",
      "Tags": [],
      "Superclass": "AnimationClip",
      "Properties": {
        "AuthoredHipHeight": {
          "Name": "AuthoredHipHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AuthoredHipHeight": {
          "Float32": 2.0
        },
        "Loop": {
          "Bool": true
        },
        "Priority": {
          "Enum": 2
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "KeyframeSequenceProvider": {
      "Name": "KeyframeSequenceProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LSPFileSyncService": {
      "Name": "LSPFileSyncService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LanguageService": {
      "Name": "LanguageService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "LayerCollector": {
      "Name": "LayerCollector",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "GuiBase2d",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ResetOnSpawn": {
          "Name": "ResetOnSpawn",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ZIndexBehavior": {
          "Name": "ZIndexBehavior",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ZIndexBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "LegacyStudioBridge": {
      "Name": "LegacyStudioBridge",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "ILegacyStudioBridge",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Light": {
      "Name": "Light",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Shadows": {
          "Name": "Shadows",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Lighting": {
      "Name": "Lighting",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Ambient": {
          "Name": "Ambient",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClockTime": {
          "Name": "ClockTime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ColorShift_Bottom": {
          "Name": "ColorShift_Bottom",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ColorShift_Top": {
          "Name": "ColorShift_Top",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EnvironmentDiffuseScale": {
          "Name": "EnvironmentDiffuseScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EnvironmentSpecularScale": {
          "Name": "EnvironmentSpecularScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ExposureCompensation": {
          "Name": "ExposureCompensation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FogColor": {
          "Name": "FogColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FogEnd": {
          "Name": "FogEnd",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FogStart": {
          "Name": "FogStart",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GeographicLatitude": {
          "Name": "GeographicLatitude",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GlobalShadows": {
          "Name": "GlobalShadows",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OutdoorAmbient": {
          "Name": "OutdoorAmbient",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Outlines": {
          "Name": "Outlines",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShadowColor": {
          "Name": "ShadowColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShadowSoftness": {
          "Name": "ShadowSoftness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Technology": {
          "Name": "Technology",
          "Scriptability": "None",
          "DataType": {
            "Enum": "Technology"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TempUseNewSkyRemovalBehaviour": {
          "Name": "TempUseNewSkyRemovalBehaviour",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TimeOfDay": {
          "Name": "TimeOfDay",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Ambient": {
          "Color3": [
            0.5,
            0.5,
            0.5
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "ColorShift_Bottom": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "ColorShift_Top": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "EnvironmentDiffuseScale": {
          "Float32": 0.0
        },
        "EnvironmentSpecularScale": {
          "Float32": 0.0
        },
        "ExposureCompensation": {
          "Float32": 0.0
        },
        "FogColor": {
          "Color3": [
            0.75,
            0.75,
            0.75
          ]
        },
        "FogEnd": {
          "Float32": 100000.0
        },
        "FogStart": {
          "Float32": 0.0
        },
        "GeographicLatitude": {
          "Float32": 41.7333
        },
        "GlobalShadows": {
          "Bool": false
        },
        "OutdoorAmbient": {
          "Color3": [
            0.5,
            0.5,
            0.5
          ]
        },
        "Outlines": {
          "Bool": true
        },
        "ShadowSoftness": {
          "Float32": 0.5
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Technology": {
          "Enum": 2
        },
        "TimeOfDay": {
          "String": "14:00:00"
        }
      }
    },
    "LineForce": {
      "Name": "LineForce",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "ApplyAtCenterOfMass": {
          "Name": "ApplyAtCenterOfMass",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InverseSquareLaw": {
          "Name": "InverseSquareLaw",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Magnitude": {
          "Name": "Magnitude",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxForce": {
          "Name": "MaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReactionForceEnabled": {
          "Name": "ReactionForceEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ApplyAtCenterOfMass": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 23
        },
        "Enabled": {
          "Bool": true
        },
        "InverseSquareLaw": {
          "Bool": false
        },
        "Magnitude": {
          "Float32": 1000.0
        },
        "MaxForce": {
          "Float32": null
        },
        "ReactionForceEnabled": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "LineHandleAdornment": {
      "Name": "LineHandleAdornment",
      "Tags": [],
      "Superclass": "HandleAdornment",
      "Properties": {
        "Length": {
          "Name": "Length",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Thickness": {
          "Name": "Thickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AdornCullingMode": {
          "Enum": 0
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Length": {
          "Float32": 5.0
        },
        "SizeRelativeOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Thickness": {
          "Float32": 1.0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": -1
        }
      }
    },
    "LinearVelocity": {
      "Name": "LinearVelocity",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "LineDirection": {
          "Name": "LineDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LineVelocity": {
          "Name": "LineVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxForce": {
          "Name": "MaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlaneVelocity": {
          "Name": "PlaneVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrimaryTangentAxis": {
          "Name": "PrimaryTangentAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RelativeTo": {
          "Name": "RelativeTo",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorRelativeTo"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SecondaryTangentAxis": {
          "Name": "SecondaryTangentAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VectorVelocity": {
          "Name": "VectorVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VelocityConstraintMode": {
          "Name": "VelocityConstraintMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "VelocityConstraintMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 26
        },
        "Enabled": {
          "Bool": true
        },
        "LineDirection": {
          "Vector3": [
            1.0,
            0.0,
            0.0
          ]
        },
        "LineVelocity": {
          "Float32": -0.0
        },
        "MaxForce": {
          "Float32": 1000.0
        },
        "PlaneVelocity": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "PrimaryTangentAxis": {
          "Vector3": [
            1.0,
            0.0,
            0.0
          ]
        },
        "RelativeTo": {
          "Enum": 2
        },
        "SecondaryTangentAxis": {
          "Vector3": [
            0.0,
            1.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "VectorVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "VelocityConstraintMode": {
          "Enum": 2
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "LocalDebuggerConnection": {
      "Name": "LocalDebuggerConnection",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "DebuggerConnection",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LocalScript": {
      "Name": "LocalScript",
      "Tags": [],
      "Superclass": "Script",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Disabled": {
          "Bool": false
        },
        "LinkedSource": {
          "Content": ""
        },
        "Source": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "LocalStorageService": {
      "Name": "LocalStorageService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LocalizationService": {
      "Name": "LocalizationService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ForcePlayModeGameLocaleId": {
          "Name": "ForcePlayModeGameLocaleId",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ForcePlayModeRobloxLocaleId": {
          "Name": "ForcePlayModeRobloxLocaleId",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsTextScraperRunning": {
          "Name": "IsTextScraperRunning",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RobloxForcePlayModeGameLocaleId": {
          "Name": "RobloxForcePlayModeGameLocaleId",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RobloxForcePlayModeRobloxLocaleId": {
          "Name": "RobloxForcePlayModeRobloxLocaleId",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RobloxLocaleId": {
          "Name": "RobloxLocaleId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SystemLocaleId": {
          "Name": "SystemLocaleId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "LocalizationTable": {
      "Name": "LocalizationTable",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Contents": {
          "Name": "Contents",
          "Scriptability": "Custom",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevelopmentLanguage": {
          "Name": "DevelopmentLanguage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Root": {
          "Name": "Root",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SourceLocaleId": {
          "Name": "SourceLocaleId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Contents": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "SourceLocaleId": {
          "String": "en-us"
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "LodDataEntity": {
      "Name": "LodDataEntity",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "EntityLodEnabled": {
          "Name": "EntityLodEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "LodDataService": {
      "Name": "LodDataService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "LogService": {
      "Name": "LogService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LoginService": {
      "Name": "LoginService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LuaSettings": {
      "Name": "LuaSettings",
      "Tags": [
        "NotCreatable",
        "Settings"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LuaSourceContainer": {
      "Name": "LuaSourceContainer",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CurrentEditor": {
          "Name": "CurrentEditor",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "LuaWebService": {
      "Name": "LuaWebService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "LuauScriptAnalyzerService": {
      "Name": "LuauScriptAnalyzerService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ManualGlue": {
      "Name": "ManualGlue",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "ManualSurfaceJointInstance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ManualSurfaceJointInstance": {
      "Name": "ManualSurfaceJointInstance",
      "Tags": [
        "Deprecated",
        "NotCreatable"
      ],
      "Superclass": "JointInstance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ManualWeld": {
      "Name": "ManualWeld",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "ManualSurfaceJointInstance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "MarkerCurve": {
      "Name": "MarkerCurve",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Length": {
          "Name": "Length",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "MarketplaceService": {
      "Name": "MarketplaceService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MaterialService": {
      "Name": "MaterialService",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AsphaltName": {
          "Name": "AsphaltName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BasaltName": {
          "Name": "BasaltName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BrickName": {
          "Name": "BrickName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CobblestoneName": {
          "Name": "CobblestoneName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ConcreteName": {
          "Name": "ConcreteName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CorrodedMetalName": {
          "Name": "CorrodedMetalName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CrackedLavaName": {
          "Name": "CrackedLavaName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DiamondPlateName": {
          "Name": "DiamondPlateName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FabricName": {
          "Name": "FabricName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FoilName": {
          "Name": "FoilName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GlacierName": {
          "Name": "GlacierName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GraniteName": {
          "Name": "GraniteName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GrassName": {
          "Name": "GrassName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GroundName": {
          "Name": "GroundName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IceName": {
          "Name": "IceName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeafyGrassName": {
          "Name": "LeafyGrassName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimestoneName": {
          "Name": "LimestoneName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MarbleName": {
          "Name": "MarbleName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MetalName": {
          "Name": "MetalName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MudName": {
          "Name": "MudName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PavementName": {
          "Name": "PavementName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PebbleName": {
          "Name": "PebbleName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlasticName": {
          "Name": "PlasticName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RockName": {
          "Name": "RockName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SaltName": {
          "Name": "SaltName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SandName": {
          "Name": "SandName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SandstoneName": {
          "Name": "SandstoneName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SlateName": {
          "Name": "SlateName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SmoothPlasticName": {
          "Name": "SmoothPlasticName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SnowName": {
          "Name": "SnowName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Use2022Materials": {
          "Name": "Use2022Materials",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WoodName": {
          "Name": "WoodName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WoodPlanksName": {
          "Name": "WoodPlanksName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "hasPropertyWarningInStudio": {
          "Name": "hasPropertyWarningInStudio",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "AsphaltName": {
          "String": ""
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BasaltName": {
          "String": ""
        },
        "BrickName": {
          "String": ""
        },
        "CobblestoneName": {
          "String": ""
        },
        "ConcreteName": {
          "String": ""
        },
        "CorrodedMetalName": {
          "String": ""
        },
        "CrackedLavaName": {
          "String": ""
        },
        "DiamondPlateName": {
          "String": ""
        },
        "FabricName": {
          "String": ""
        },
        "FoilName": {
          "String": ""
        },
        "GlacierName": {
          "String": ""
        },
        "GraniteName": {
          "String": ""
        },
        "GrassName": {
          "String": ""
        },
        "GroundName": {
          "String": ""
        },
        "IceName": {
          "String": ""
        },
        "LeafyGrassName": {
          "String": ""
        },
        "LimestoneName": {
          "String": ""
        },
        "MarbleName": {
          "String": ""
        },
        "MetalName": {
          "String": ""
        },
        "MudName": {
          "String": ""
        },
        "PavementName": {
          "String": ""
        },
        "PebbleName": {
          "String": ""
        },
        "PlasticName": {
          "String": ""
        },
        "RockName": {
          "String": ""
        },
        "SaltName": {
          "String": ""
        },
        "SandName": {
          "String": ""
        },
        "SandstoneName": {
          "String": ""
        },
        "SlateName": {
          "String": ""
        },
        "SmoothPlasticName": {
          "String": ""
        },
        "SnowName": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "WoodName": {
          "String": ""
        },
        "WoodPlanksName": {
          "String": ""
        }
      }
    },
    "MaterialVariant": {
      "Name": "MaterialVariant",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "BaseMaterial": {
          "Name": "BaseMaterial",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "Material"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ColorMap": {
          "Name": "ColorMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaterialPattern": {
          "Name": "MaterialPattern",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "MaterialPattern"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MetalnessMap": {
          "Name": "MetalnessMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NormalMap": {
          "Name": "NormalMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RoughnessMap": {
          "Name": "RoughnessMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsPerTile": {
          "Name": "StudsPerTile",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BaseMaterial": {
          "Enum": 256
        },
        "ColorMap": {
          "Content": ""
        },
        "MaterialPattern": {
          "Enum": 0
        },
        "MetalnessMap": {
          "Content": ""
        },
        "NormalMap": {
          "Content": ""
        },
        "RoughnessMap": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StudsPerTile": {
          "Float32": 10.0
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "MemStorageConnection": {
      "Name": "MemStorageConnection",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MemStorageService": {
      "Name": "MemStorageService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MemoryStoreQueue": {
      "Name": "MemoryStoreQueue",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MemoryStoreService": {
      "Name": "MemoryStoreService",
      "Tags": [
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "MemoryStoreSortedMap": {
      "Name": "MemoryStoreSortedMap",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MeshContentProvider": {
      "Name": "MeshContentProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "CacheableContentProvider",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MeshPart": {
      "Name": "MeshPart",
      "Tags": [],
      "Superclass": "TriangleMeshPart",
      "Properties": {
        "DoubleSided": {
          "Name": "DoubleSided",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HasJointOffset": {
          "Name": "HasJointOffset",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HasSkinnedMesh": {
          "Name": "HasSkinnedMesh",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "JointOffset": {
          "Name": "JointOffset",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshID": {
          "Name": "MeshID",
          "Scriptability": "None",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [
            "Deprecated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshId": {
          "Name": "MeshId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshSize": {
          "Name": "MeshSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RenderFidelity": {
          "Name": "RenderFidelity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RenderFidelity"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureID": {
          "Name": "TextureID",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 0
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "DoubleSided": {
          "Bool": false
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "HasJointOffset": {
          "Bool": false
        },
        "HasSkinnedMesh": {
          "Bool": false
        },
        "JointOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "MeshID": {
          "Content": ""
        },
        "MeshId": {
          "Content": ""
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RenderFidelity": {
          "Enum": 1
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TextureID": {
          "Content": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 0
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "Message": {
      "Name": "Message",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Text": {
          "String": ""
        }
      }
    },
    "MessageBusConnection": {
      "Name": "MessageBusConnection",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MessageBusService": {
      "Name": "MessageBusService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MessagingService": {
      "Name": "MessagingService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MetaBreakpoint": {
      "Name": "MetaBreakpoint",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Condition": {
          "Name": "Condition",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ContinueExecution": {
          "Name": "ContinueExecution",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Id": {
          "Name": "Id",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsLogpoint": {
          "Name": "IsLogpoint",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Line": {
          "Name": "Line",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LogMessage": {
          "Name": "LogMessage",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Script": {
          "Name": "Script",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Condition": {
          "String": ""
        },
        "ContinueExecution": {
          "Bool": false
        },
        "Enabled": {
          "Bool": true
        },
        "Line": {
          "Int32": 0
        },
        "LogMessage": {
          "String": ""
        },
        "Script": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "MetaBreakpointContext": {
      "Name": "MetaBreakpointContext",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Model": {
      "Name": "Model",
      "Tags": [],
      "Superclass": "PVInstance",
      "Properties": {
        "LevelOfDetail": {
          "Name": "LevelOfDetail",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ModelLevelOfDetail"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrimaryPart": {
          "Name": "PrimaryPart",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "World Pivot Orientation": {
          "Name": "World Pivot Orientation",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "World Pivot Position": {
          "Name": "World Pivot Position",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WorldPivot": {
          "Name": "WorldPivot",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "LevelOfDetail": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ModuleScript": {
      "Name": "ModuleScript",
      "Tags": [],
      "Superclass": "LuaSourceContainer",
      "Properties": {
        "LinkedSource": {
          "Name": "LinkedSource",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Source": {
          "Name": "Source",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "LinkedSource": {
          "Content": ""
        },
        "Source": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Motor": {
      "Name": "Motor",
      "Tags": [],
      "Superclass": "JointInstance",
      "Properties": {
        "CurrentAngle": {
          "Name": "CurrentAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DesiredAngle": {
          "Name": "DesiredAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxVelocity": {
          "Name": "MaxVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "DesiredAngle": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "MaxVelocity": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Motor6D": {
      "Name": "Motor6D",
      "Tags": [],
      "Superclass": "Motor",
      "Properties": {
        "ChildName": {
          "Name": "ChildName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ParentName": {
          "Name": "ParentName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Transform": {
          "Name": "Transform",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "DesiredAngle": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "MaxVelocity": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "MotorFeature": {
      "Name": "MotorFeature",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Feature",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "FaceId": {
          "Enum": 0
        },
        "InOut": {
          "Enum": 2
        },
        "LeftRight": {
          "Enum": 1
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopBottom": {
          "Enum": 1
        }
      }
    },
    "Mouse": {
      "Name": "Mouse",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Hit": {
          "Name": "Hit",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Icon": {
          "Name": "Icon",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Origin": {
          "Name": "Origin",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Target": {
          "Name": "Target",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TargetFilter": {
          "Name": "TargetFilter",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetSurface": {
          "Name": "TargetSurface",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UnitRay": {
          "Name": "UnitRay",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ray"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ViewSizeX": {
          "Name": "ViewSizeX",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ViewSizeY": {
          "Name": "ViewSizeY",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "X": {
          "Name": "X",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Y": {
          "Name": "Y",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "hit": {
          "Name": "hit",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "target": {
          "Name": "target",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "MouseService": {
      "Name": "MouseService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MultipleDocumentInterfaceInstance": {
      "Name": "MultipleDocumentInterfaceInstance",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "FocusedDataModelSession": {
          "Name": "FocusedDataModelSession",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "NegateOperation": {
      "Name": "NegateOperation",
      "Tags": [],
      "Superclass": "PartOperation",
      "Properties": {},
      "DefaultProperties": {
        "Anchored": {
          "Bool": true
        },
        "AssetId": {
          "Content": ""
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 0
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": false
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            255,
            255,
            255
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RenderFidelity": {
          "Enum": 1
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SmoothingAngle": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 0
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.1
        },
        "UsePartColor": {
          "Bool": false
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "NetworkClient": {
      "Name": "NetworkClient",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "NetworkPeer",
      "Properties": {},
      "DefaultProperties": {}
    },
    "NetworkMarker": {
      "Name": "NetworkMarker",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "NetworkPeer": {
      "Name": "NetworkPeer",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "NetworkReplicator": {
      "Name": "NetworkReplicator",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "NetworkServer": {
      "Name": "NetworkServer",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "NetworkPeer",
      "Properties": {},
      "DefaultProperties": {}
    },
    "NetworkSettings": {
      "Name": "NetworkSettings",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "EmulatedTotalMemoryInMB": {
          "Name": "EmulatedTotalMemoryInMB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FreeMemoryMBytes": {
          "Name": "FreeMemoryMBytes",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HttpProxyEnabled": {
          "Name": "HttpProxyEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HttpProxyURL": {
          "Name": "HttpProxyURL",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IncomingReplicationLag": {
          "Name": "IncomingReplicationLag",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrintJoinSizeBreakdown": {
          "Name": "PrintJoinSizeBreakdown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrintPhysicsErrors": {
          "Name": "PrintPhysicsErrors",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrintStreamInstanceQuota": {
          "Name": "PrintStreamInstanceQuota",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RandomizeJoinInstanceOrder": {
          "Name": "RandomizeJoinInstanceOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RenderStreamedRegions": {
          "Name": "RenderStreamedRegions",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShowActiveAnimationAsset": {
          "Name": "ShowActiveAnimationAsset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "NoCollisionConstraint": {
      "Name": "NoCollisionConstraint",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Part0": {
          "Name": "Part0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Part1": {
          "Name": "Part1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "NonReplicatedCSGDictionaryService": {
      "Name": "NonReplicatedCSGDictionaryService",
      "Tags": [
        "Service"
      ],
      "Superclass": "FlyweightService",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "NotificationService": {
      "Name": "NotificationService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "IsLuaChatEnabled": {
          "Name": "IsLuaChatEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsLuaGameDetailsEnabled": {
          "Name": "IsLuaGameDetailsEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SelectedTheme": {
          "Name": "SelectedTheme",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "NumberPose": {
      "Name": "NumberPose",
      "Tags": [],
      "Superclass": "PoseBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "EasingDirection": {
          "Enum": 0
        },
        "EasingStyle": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Float64": 0.0
        },
        "Weight": {
          "Float32": 1.0
        }
      }
    },
    "NumberValue": {
      "Name": "NumberValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Float64": 0.0
        }
      }
    },
    "ObjectValue": {
      "Name": "ObjectValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "OrderedDataStore": {
      "Name": "OrderedDataStore",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "GlobalDataStore",
      "Properties": {},
      "DefaultProperties": {}
    },
    "OutfitPages": {
      "Name": "OutfitPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PVAdornment": {
      "Name": "PVAdornment",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GuiBase3d",
      "Properties": {
        "Adornee": {
          "Name": "Adornee",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PVInstance": {
      "Name": "PVInstance",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Origin Orientation": {
          "Name": "Origin Orientation",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Origin Position": {
          "Name": "Origin Position",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Pivot Offset Orientation": {
          "Name": "Pivot Offset Orientation",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Pivot Offset Position": {
          "Name": "Pivot Offset Position",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PackageLink": {
      "Name": "PackageLink",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AutoUpdate": {
          "Name": "AutoUpdate",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Creator": {
          "Name": "Creator",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PackageAssetName": {
          "Name": "PackageAssetName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PackageId": {
          "Name": "PackageId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "PackageIdSerialize"
              }
            }
          }
        },
        "PackageIdSerialize": {
          "Name": "PackageIdSerialize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "PackageId"
            }
          }
        },
        "PermissionLevel": {
          "Name": "PermissionLevel",
          "Scriptability": "None",
          "DataType": {
            "Enum": "PackagePermission"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Status": {
          "Name": "Status",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VersionNumber": {
          "Name": "VersionNumber",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PackageService": {
      "Name": "PackageService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PackageUIService": {
      "Name": "PackageUIService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Pages": {
      "Name": "Pages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "IsFinished": {
          "Name": "IsFinished",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Pants": {
      "Name": "Pants",
      "Tags": [],
      "Superclass": "Clothing",
      "Properties": {
        "PantsTemplate": {
          "Name": "PantsTemplate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "PantsTemplate": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ParabolaAdornment": {
      "Name": "ParabolaAdornment",
      "Tags": [],
      "Superclass": "PVAdornment",
      "Properties": {
        "A": {
          "Name": "A",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "B": {
          "Name": "B",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "C": {
          "Name": "C",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Range": {
          "Name": "Range",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Thickness": {
          "Name": "Thickness",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.9490197,
            0.95294124,
            0.95294124
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "Part": {
      "Name": "Part",
      "Tags": [],
      "Superclass": "FormFactorPart",
      "Properties": {
        "Shape": {
          "Name": "Shape",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "PartType"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "shape"
              }
            }
          }
        },
        "shape": {
          "Name": "shape",
          "Scriptability": "None",
          "DataType": {
            "Enum": "PartType"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Shape"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FormFactor": {
          "Enum": 1
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Shape": {
          "Enum": 1
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "PartAdornment": {
      "Name": "PartAdornment",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GuiBase3d",
      "Properties": {
        "Adornee": {
          "Name": "Adornee",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PartOperation": {
      "Name": "PartOperation",
      "Tags": [],
      "Superclass": "TriangleMeshPart",
      "Properties": {
        "AssetId": {
          "Name": "AssetId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RenderFidelity": {
          "Name": "RenderFidelity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RenderFidelity"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SmoothingAngle": {
          "Name": "SmoothingAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TriangleCount": {
          "Name": "TriangleCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UsePartColor": {
          "Name": "UsePartColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "AssetId": {
          "Content": ""
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 0
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            255,
            255,
            255
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RenderFidelity": {
          "Enum": 1
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SmoothingAngle": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 0
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "UsePartColor": {
          "Bool": false
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "PartOperationAsset": {
      "Name": "PartOperationAsset",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ParticleEmitter": {
      "Name": "ParticleEmitter",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Acceleration": {
          "Name": "Acceleration",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "ColorSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Drag": {
          "Name": "Drag",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EmissionDirection": {
          "Name": "EmissionDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FlipbookFramerate": {
          "Name": "FlipbookFramerate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FlipbookIncompatible": {
          "Name": "FlipbookIncompatible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FlipbookLayout": {
          "Name": "FlipbookLayout",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ParticleFlipbookLayout"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FlipbookMode": {
          "Name": "FlipbookMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ParticleFlipbookMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FlipbookStartRandom": {
          "Name": "FlipbookStartRandom",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Lifetime": {
          "Name": "Lifetime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightEmission": {
          "Name": "LightEmission",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightInfluence": {
          "Name": "LightInfluence",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LockedToPart": {
          "Name": "LockedToPart",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Orientation": {
          "Name": "Orientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ParticleOrientation"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rate": {
          "Name": "Rate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RotSpeed": {
          "Name": "RotSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rotation": {
          "Name": "Rotation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Shape": {
          "Name": "Shape",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ParticleEmitterShape"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShapeInOut": {
          "Name": "ShapeInOut",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ParticleEmitterShapeInOut"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShapePartial": {
          "Name": "ShapePartial",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShapeStyle": {
          "Name": "ShapeStyle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ParticleEmitterShapeStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Speed": {
          "Name": "Speed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SpreadAngle": {
          "Name": "SpreadAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Squash": {
          "Name": "Squash",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Texture": {
          "Name": "Texture",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TimeScale": {
          "Name": "TimeScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VelocityInheritance": {
          "Name": "VelocityInheritance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VelocitySpread": {
          "Name": "VelocitySpread",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ZOffset": {
          "Name": "ZOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Acceleration": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "Color": {
          "ColorSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              },
              {
                "time": 1.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              }
            ]
          }
        },
        "Drag": {
          "Float32": 0.0
        },
        "EmissionDirection": {
          "Enum": 1
        },
        "Enabled": {
          "Bool": true
        },
        "FlipbookFramerate": {
          "NumberRange": [
            1.0,
            1.0
          ]
        },
        "FlipbookIncompatible": {
          "String": "Particle texture must be 1024 by 1024 to use flipbooks."
        },
        "FlipbookLayout": {
          "Enum": 0
        },
        "FlipbookMode": {
          "Enum": 0
        },
        "FlipbookStartRandom": {
          "Bool": false
        },
        "Lifetime": {
          "NumberRange": [
            5.0,
            10.0
          ]
        },
        "LightEmission": {
          "Float32": 0.0
        },
        "LightInfluence": {
          "Float32": 0.0
        },
        "LockedToPart": {
          "Bool": false
        },
        "Orientation": {
          "Enum": 0
        },
        "Rate": {
          "Float32": 20.0
        },
        "RotSpeed": {
          "NumberRange": [
            0.0,
            0.0
          ]
        },
        "Rotation": {
          "NumberRange": [
            0.0,
            0.0
          ]
        },
        "Shape": {
          "Enum": 0
        },
        "ShapeInOut": {
          "Enum": 0
        },
        "ShapePartial": {
          "Float32": 1.0
        },
        "ShapeStyle": {
          "Enum": 0
        },
        "Size": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 1.0,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 1.0,
                "envelope": 0.0
              }
            ]
          }
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Speed": {
          "NumberRange": [
            5.0,
            5.0
          ]
        },
        "SpreadAngle": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Squash": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 0.0,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 0.0,
                "envelope": 0.0
              }
            ]
          }
        },
        "Tags": {
          "BinaryString": ""
        },
        "Texture": {
          "Content": "rbxasset://textures/particles/sparkles_main.dds"
        },
        "TimeScale": {
          "Float32": 1.0
        },
        "Transparency": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 0.0,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 0.0,
                "envelope": 0.0
              }
            ]
          }
        },
        "VelocityInheritance": {
          "Float32": 0.0
        },
        "ZOffset": {
          "Float32": 0.0
        }
      }
    },
    "Path": {
      "Name": "Path",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Status": {
          "Name": "Status",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "PathStatus"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PathfindingLink": {
      "Name": "PathfindingLink",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Attachment0": {
          "Name": "Attachment0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Attachment1": {
          "Name": "Attachment1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsBidirectional": {
          "Name": "IsBidirectional",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Label": {
          "Name": "Label",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "IsBidirectional": {
          "Bool": true
        },
        "Label": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PathfindingModifier": {
      "Name": "PathfindingModifier",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Label": {
          "Name": "Label",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PassThrough": {
          "Name": "PassThrough",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Label": {
          "String": ""
        },
        "PassThrough": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PathfindingService": {
      "Name": "PathfindingService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "EmptyCutoff": {
          "Name": "EmptyCutoff",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PausedState": {
      "Name": "PausedState",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllThreadsPaused": {
          "Name": "AllThreadsPaused",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Reason": {
          "Name": "Reason",
          "Scriptability": "None",
          "DataType": {
            "Enum": "DebuggerPauseReason"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ThreadId": {
          "Name": "ThreadId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PausedStateBreakpoint": {
      "Name": "PausedStateBreakpoint",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "PausedState",
      "Properties": {
        "Breakpoint": {
          "Name": "Breakpoint",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PausedStateException": {
      "Name": "PausedStateException",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "PausedState",
      "Properties": {
        "ExceptionText": {
          "Name": "ExceptionText",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PermissionsService": {
      "Name": "PermissionsService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PhysicsService": {
      "Name": "PhysicsService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PhysicsSettings": {
      "Name": "PhysicsSettings",
      "Tags": [
        "NotCreatable",
        "Settings"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllowSleep": {
          "Name": "AllowSleep",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreAnchorsShown": {
          "Name": "AreAnchorsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreAssembliesShown": {
          "Name": "AreAssembliesShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreAwakePartsHighlighted": {
          "Name": "AreAwakePartsHighlighted",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreBodyTypesShown": {
          "Name": "AreBodyTypesShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreContactIslandsShown": {
          "Name": "AreContactIslandsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreContactPointsShown": {
          "Name": "AreContactPointsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreJointCoordinatesShown": {
          "Name": "AreJointCoordinatesShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreMechanismsShown": {
          "Name": "AreMechanismsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreModelCoordsShown": {
          "Name": "AreModelCoordsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreOwnersShown": {
          "Name": "AreOwnersShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ArePartCoordsShown": {
          "Name": "ArePartCoordsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreRegionsShown": {
          "Name": "AreRegionsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreTerrainReplicationRegionsShown": {
          "Name": "AreTerrainReplicationRegionsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreTimestepsShown": {
          "Name": "AreTimestepsShown",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreUnalignedPartsShown": {
          "Name": "AreUnalignedPartsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreWorldCoordsShown": {
          "Name": "AreWorldCoordsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DisableCSGv2": {
          "Name": "DisableCSGv2",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ForceCSGv2": {
          "Name": "ForceCSGv2",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsInterpolationThrottleShown": {
          "Name": "IsInterpolationThrottleShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsReceiveAgeShown": {
          "Name": "IsReceiveAgeShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsTreeShown": {
          "Name": "IsTreeShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PhysicsEnvironmentalThrottle": {
          "Name": "PhysicsEnvironmentalThrottle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "EnviromentalPhysicsThrottle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShowDecompositionGeometry": {
          "Name": "ShowDecompositionGeometry",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ThrottleAdjustTime": {
          "Name": "ThrottleAdjustTime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UseCSGv2": {
          "Name": "UseCSGv2",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PitchShiftSoundEffect": {
      "Name": "PitchShiftSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Octave": {
          "Name": "Octave",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "Octave": {
          "Float32": 1.25
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Plane": {
      "Name": "Plane",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "PlaneConstraint",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 194
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "PlaneConstraint": {
      "Name": "PlaneConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 194
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "Platform": {
      "Name": "Platform",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Part",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Player": {
      "Name": "Player",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AccountAge": {
          "Name": "AccountAge",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AppearanceDidLoad": {
          "Name": "AppearanceDidLoad",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AutoJumpEnabled": {
          "Name": "AutoJumpEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMaxZoomDistance": {
          "Name": "CameraMaxZoomDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMinZoomDistance": {
          "Name": "CameraMinZoomDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMode": {
          "Name": "CameraMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "CameraMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanLoadCharacterAppearance": {
          "Name": "CanLoadCharacterAppearance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Character": {
          "Name": "Character",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterAppearance": {
          "Name": "CharacterAppearance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Deprecated",
            "NotBrowsable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterAppearanceId": {
          "Name": "CharacterAppearanceId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ChatMode": {
          "Name": "ChatMode",
          "Scriptability": "None",
          "DataType": {
            "Enum": "ChatMode"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataComplexity": {
          "Name": "DataComplexity",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataComplexityLimit": {
          "Name": "DataComplexityLimit",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataReady": {
          "Name": "DataReady",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DevCameraOcclusionMode": {
          "Name": "DevCameraOcclusionMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevCameraOcclusionMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevComputerCameraMode": {
          "Name": "DevComputerCameraMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevComputerCameraMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevComputerMovementMode": {
          "Name": "DevComputerMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevComputerMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevEnableMouseLock": {
          "Name": "DevEnableMouseLock",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevTouchCameraMode": {
          "Name": "DevTouchCameraMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevTouchCameraMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevTouchMovementMode": {
          "Name": "DevTouchMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevTouchMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DisplayName": {
          "Name": "DisplayName",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FollowUserId": {
          "Name": "FollowUserId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GameplayPaused": {
          "Name": "GameplayPaused",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Guest": {
          "Name": "Guest",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HealthDisplayDistance": {
          "Name": "HealthDisplayDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LocaleId": {
          "Name": "LocaleId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaximumSimulationRadius": {
          "Name": "MaximumSimulationRadius",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MembershipType": {
          "Name": "MembershipType",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "MembershipType"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "NameDisplayDistance": {
          "Name": "NameDisplayDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Neutral": {
          "Name": "Neutral",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OsPlatform": {
          "Name": "OsPlatform",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlatformName": {
          "Name": "PlatformName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ReplicationFocus": {
          "Name": "ReplicationFocus",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RespawnLocation": {
          "Name": "RespawnLocation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SimulationRadius": {
          "Name": "SimulationRadius",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Team": {
          "Name": "Team",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TeamColor": {
          "Name": "TeamColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Teleported": {
          "Name": "Teleported",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TeleportedIn": {
          "Name": "TeleportedIn",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UserId": {
          "Name": "UserId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VRDevice": {
          "Name": "VRDevice",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "userId": {
          "Name": "userId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PlayerEmulatorService": {
      "Name": "PlayerEmulatorService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CustomPoliciesEnabled": {
          "Name": "CustomPoliciesEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EmulatedCountryCode": {
          "Name": "EmulatedCountryCode",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EmulatedGameLocale": {
          "Name": "EmulatedGameLocale",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlayerEmulationEnabled": {
          "Name": "PlayerEmulationEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SerializedEmulatedPolicyInfo": {
          "Name": "SerializedEmulatedPolicyInfo",
          "Scriptability": "None",
          "DataType": {
            "Value": "BinaryString"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CustomPoliciesEnabled": {
          "Bool": false
        },
        "EmulatedCountryCode": {
          "String": ""
        },
        "EmulatedGameLocale": {
          "String": ""
        },
        "PlayerEmulationEnabled": {
          "Bool": false
        },
        "SerializedEmulatedPolicyInfo": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PlayerGui": {
      "Name": "PlayerGui",
      "Tags": [
        "NotCreatable",
        "PlayerReplicated"
      ],
      "Superclass": "BasePlayerGui",
      "Properties": {
        "CurrentScreenOrientation": {
          "Name": "CurrentScreenOrientation",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "ScreenOrientation"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ScreenOrientation": {
          "Name": "ScreenOrientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScreenOrientation"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionImageObject": {
          "Name": "SelectionImageObject",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PlayerMouse": {
      "Name": "PlayerMouse",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Mouse",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PlayerScripts": {
      "Name": "PlayerScripts",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Players": {
      "Name": "Players",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "BubbleChat": {
          "Name": "BubbleChat",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CharacterAutoLoads": {
          "Name": "CharacterAutoLoads",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClassicChat": {
          "Name": "ClassicChat",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LocalPlayer": {
          "Name": "LocalPlayer",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxPlayers": {
          "Name": "MaxPlayers",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "MaxPlayersInternal"
              }
            }
          }
        },
        "MaxPlayersInternal": {
          "Name": "MaxPlayersInternal",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "MaxPlayers"
            }
          }
        },
        "NumPlayers": {
          "Name": "NumPlayers",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PreferredPlayers": {
          "Name": "PreferredPlayers",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "PreferredPlayersInternal"
              }
            }
          }
        },
        "PreferredPlayersInternal": {
          "Name": "PreferredPlayersInternal",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "PreferredPlayers"
            }
          }
        },
        "RespawnTime": {
          "Name": "RespawnTime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "localPlayer": {
          "Name": "localPlayer",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "numPlayers": {
          "Name": "numPlayers",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CharacterAutoLoads": {
          "Bool": true
        },
        "MaxPlayers": {
          "Int32": 12
        },
        "PreferredPlayers": {
          "Int32": 0
        },
        "RespawnTime": {
          "Float32": 5.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Plugin": {
      "Name": "Plugin",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CollisionEnabled": {
          "Name": "CollisionEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GridSize": {
          "Name": "GridSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HostDataModelType": {
          "Name": "HostDataModelType",
          "Scriptability": "None",
          "DataType": {
            "Enum": "StudioDataModelType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HostDataModelTypeIsCurrent": {
          "Name": "HostDataModelTypeIsCurrent",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MultipleDocumentInterfaceInstance": {
          "Name": "MultipleDocumentInterfaceInstance",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UsesAssetInsertionDrag": {
          "Name": "UsesAssetInsertionDrag",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PluginAction": {
      "Name": "PluginAction",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ActionId": {
          "Name": "ActionId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AllowBinding": {
          "Name": "AllowBinding",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Checked": {
          "Name": "Checked",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DefaultShortcut": {
          "Name": "DefaultShortcut",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "StatusTip": {
          "Name": "StatusTip",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PluginDebugService": {
      "Name": "PluginDebugService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginDragEvent": {
      "Name": "PluginDragEvent",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Data": {
          "Name": "Data",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MimeType": {
          "Name": "MimeType",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Sender": {
          "Name": "Sender",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PluginGui": {
      "Name": "PluginGui",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "LayerCollector",
      "Properties": {
        "Title": {
          "Name": "Title",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PluginGuiService": {
      "Name": "PluginGuiService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginManager": {
      "Name": "PluginManager",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginManagerInterface": {
      "Name": "PluginManagerInterface",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginMenu": {
      "Name": "PluginMenu",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Icon": {
          "Name": "Icon",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Title": {
          "Name": "Title",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PluginMouse": {
      "Name": "PluginMouse",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Mouse",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginPolicyService": {
      "Name": "PluginPolicyService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginToolbar": {
      "Name": "PluginToolbar",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginToolbarButton": {
      "Name": "PluginToolbarButton",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ClickableWhenViewportHidden": {
          "Name": "ClickableWhenViewportHidden",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Icon": {
          "Name": "Icon",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PointLight": {
      "Name": "PointLight",
      "Tags": [],
      "Superclass": "Light",
      "Properties": {
        "Range": {
          "Name": "Range",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "Color": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Enabled": {
          "Bool": true
        },
        "Range": {
          "Float32": 8.0
        },
        "Shadows": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PointsService": {
      "Name": "PointsService",
      "Tags": [
        "Deprecated",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PolicyService": {
      "Name": "PolicyService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "IsLuobuServer": {
          "Name": "IsLuobuServer",
          "Scriptability": "None",
          "DataType": {
            "Enum": "TriStateBoolean"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LuobuWhitelisted": {
          "Name": "LuobuWhitelisted",
          "Scriptability": "None",
          "DataType": {
            "Enum": "TriStateBoolean"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Pose": {
      "Name": "Pose",
      "Tags": [],
      "Superclass": "PoseBase",
      "Properties": {
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaskWeight": {
          "Name": "MaskWeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "EasingDirection": {
          "Enum": 0
        },
        "EasingStyle": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Weight": {
          "Float32": 1.0
        }
      }
    },
    "PoseBase": {
      "Name": "PoseBase",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "EasingDirection": {
          "Name": "EasingDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "PoseEasingDirection"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EasingStyle": {
          "Name": "EasingStyle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "PoseEasingStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Weight": {
          "Name": "Weight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PostEffect": {
      "Name": "PostEffect",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PrismaticConstraint": {
      "Name": "PrismaticConstraint",
      "Tags": [],
      "Superclass": "SlidingBallConstraint",
      "Properties": {},
      "DefaultProperties": {
        "ActuatorType": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 1009
        },
        "Enabled": {
          "Bool": true
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "LinearResponsiveness": {
          "Float32": 45.0
        },
        "LowerLimit": {
          "Float32": 0.0
        },
        "MotorMaxAcceleration": {
          "Float32": null
        },
        "MotorMaxForce": {
          "Float32": 0.0
        },
        "Restitution": {
          "Float32": 0.0
        },
        "ServoMaxForce": {
          "Float32": 0.0
        },
        "Size": {
          "Float32": 0.15
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Speed": {
          "Float32": 0.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "TargetPosition": {
          "Float32": 0.0
        },
        "UpperLimit": {
          "Float32": 5.0
        },
        "Velocity": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "ProcessInstancePhysicsService": {
      "Name": "ProcessInstancePhysicsService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ProximityPrompt": {
      "Name": "ProximityPrompt",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "ActionText": {
          "Name": "ActionText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AutoLocalize": {
          "Name": "AutoLocalize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClickablePrompt": {
          "Name": "ClickablePrompt",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Exclusivity": {
          "Name": "Exclusivity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ProximityPromptExclusivity"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GamepadKeyCode": {
          "Name": "GamepadKeyCode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "KeyCode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HoldDuration": {
          "Name": "HoldDuration",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "KeyboardKeyCode": {
          "Name": "KeyboardKeyCode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "KeyCode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxActivationDistance": {
          "Name": "MaxActivationDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ObjectText": {
          "Name": "ObjectText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RequiresLineOfSight": {
          "Name": "RequiresLineOfSight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RootLocalizationTable": {
          "Name": "RootLocalizationTable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Style": {
          "Name": "Style",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ProximityPromptStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UIOffset": {
          "Name": "UIOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ActionText": {
          "String": "Interact"
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "ClickablePrompt": {
          "Bool": true
        },
        "Enabled": {
          "Bool": true
        },
        "Exclusivity": {
          "Enum": 0
        },
        "GamepadKeyCode": {
          "Enum": 1000
        },
        "HoldDuration": {
          "Float32": 0.0
        },
        "KeyboardKeyCode": {
          "Enum": 101
        },
        "MaxActivationDistance": {
          "Float32": 10.0
        },
        "ObjectText": {
          "String": ""
        },
        "RequiresLineOfSight": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Style": {
          "Enum": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "UIOffset": {
          "Vector2": [
            0.0,
            0.0
          ]
        }
      }
    },
    "ProximityPromptService": {
      "Name": "ProximityPromptService",
      "Tags": [
        "NotBrowsable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxPromptsVisible": {
          "Name": "MaxPromptsVisible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "MaxPromptsVisible": {
          "Int32": 16
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PublishService": {
      "Name": "PublishService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "QWidgetPluginGui": {
      "Name": "QWidgetPluginGui",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "PluginGui",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RayValue": {
      "Name": "RayValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ray"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Ray": {
            "origin": [
              0.0,
              0.0,
              0.0
            ],
            "direction": [
              0.0,
              0.0,
              0.0
            ]
          }
        }
      }
    },
    "RbxAnalyticsService": {
      "Name": "RbxAnalyticsService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ReflectionMetadata": {
      "Name": "ReflectionMetadata",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataCallbacks": {
      "Name": "ReflectionMetadataCallbacks",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataClass": {
      "Name": "ReflectionMetadataClass",
      "Tags": [],
      "Superclass": "ReflectionMetadataItem",
      "Properties": {
        "ExplorerImageIndex": {
          "Name": "ExplorerImageIndex",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ExplorerOrder": {
          "Name": "ExplorerOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Insertable": {
          "Name": "Insertable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PreferredParent": {
          "Name": "PreferredParent",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Browsable": {
          "Bool": true
        },
        "ClassCategory": {
          "String": ""
        },
        "ClientOnly": {
          "Bool": false
        },
        "Constraint": {
          "String": ""
        },
        "Deprecated": {
          "Bool": false
        },
        "EditingDisabled": {
          "Bool": false
        },
        "EditorType": {
          "String": ""
        },
        "ExplorerImageIndex": {
          "Int32": 0
        },
        "ExplorerOrder": {
          "Int32": 2147483647
        },
        "FFlag": {
          "String": ""
        },
        "Insertable": {
          "Bool": true
        },
        "IsBackend": {
          "Bool": false
        },
        "PreferredParent": {
          "String": ""
        },
        "PropertyOrder": {
          "Int32": 5000
        },
        "ScriptContext": {
          "String": ""
        },
        "ServerOnly": {
          "Bool": false
        },
        "SliderScaling": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UIMaximum": {
          "Float64": 0.0
        },
        "UIMinimum": {
          "Float64": 0.0
        },
        "UINumTicks": {
          "Float64": 0.0
        }
      }
    },
    "ReflectionMetadataClasses": {
      "Name": "ReflectionMetadataClasses",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataEnum": {
      "Name": "ReflectionMetadataEnum",
      "Tags": [],
      "Superclass": "ReflectionMetadataItem",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Browsable": {
          "Bool": true
        },
        "ClassCategory": {
          "String": ""
        },
        "ClientOnly": {
          "Bool": false
        },
        "Constraint": {
          "String": ""
        },
        "Deprecated": {
          "Bool": false
        },
        "EditingDisabled": {
          "Bool": false
        },
        "EditorType": {
          "String": ""
        },
        "FFlag": {
          "String": ""
        },
        "IsBackend": {
          "Bool": false
        },
        "PropertyOrder": {
          "Int32": 5000
        },
        "ScriptContext": {
          "String": ""
        },
        "ServerOnly": {
          "Bool": false
        },
        "SliderScaling": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UIMaximum": {
          "Float64": 0.0
        },
        "UIMinimum": {
          "Float64": 0.0
        },
        "UINumTicks": {
          "Float64": 0.0
        }
      }
    },
    "ReflectionMetadataEnumItem": {
      "Name": "ReflectionMetadataEnumItem",
      "Tags": [],
      "Superclass": "ReflectionMetadataItem",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Browsable": {
          "Bool": true
        },
        "ClassCategory": {
          "String": ""
        },
        "ClientOnly": {
          "Bool": false
        },
        "Constraint": {
          "String": ""
        },
        "Deprecated": {
          "Bool": false
        },
        "EditingDisabled": {
          "Bool": false
        },
        "EditorType": {
          "String": ""
        },
        "FFlag": {
          "String": ""
        },
        "IsBackend": {
          "Bool": false
        },
        "PropertyOrder": {
          "Int32": 5000
        },
        "ScriptContext": {
          "String": ""
        },
        "ServerOnly": {
          "Bool": false
        },
        "SliderScaling": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UIMaximum": {
          "Float64": 0.0
        },
        "UIMinimum": {
          "Float64": 0.0
        },
        "UINumTicks": {
          "Float64": 0.0
        }
      }
    },
    "ReflectionMetadataEnums": {
      "Name": "ReflectionMetadataEnums",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataEvents": {
      "Name": "ReflectionMetadataEvents",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataFunctions": {
      "Name": "ReflectionMetadataFunctions",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataItem": {
      "Name": "ReflectionMetadataItem",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Browsable": {
          "Name": "Browsable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClassCategory": {
          "Name": "ClassCategory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClientOnly": {
          "Name": "ClientOnly",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Constraint": {
          "Name": "Constraint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Deprecated": {
          "Name": "Deprecated",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EditingDisabled": {
          "Name": "EditingDisabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EditorType": {
          "Name": "EditorType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FFlag": {
          "Name": "FFlag",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsBackend": {
          "Name": "IsBackend",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PropertyOrder": {
          "Name": "PropertyOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScriptContext": {
          "Name": "ScriptContext",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ServerOnly": {
          "Name": "ServerOnly",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SliderScaling": {
          "Name": "SliderScaling",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UIMaximum": {
          "Name": "UIMaximum",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UIMinimum": {
          "Name": "UIMinimum",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UINumTicks": {
          "Name": "UINumTicks",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ReflectionMetadataMember": {
      "Name": "ReflectionMetadataMember",
      "Tags": [],
      "Superclass": "ReflectionMetadataItem",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Browsable": {
          "Bool": true
        },
        "ClassCategory": {
          "String": ""
        },
        "ClientOnly": {
          "Bool": false
        },
        "Constraint": {
          "String": ""
        },
        "Deprecated": {
          "Bool": false
        },
        "EditingDisabled": {
          "Bool": false
        },
        "EditorType": {
          "String": ""
        },
        "FFlag": {
          "String": ""
        },
        "IsBackend": {
          "Bool": false
        },
        "PropertyOrder": {
          "Int32": 5000
        },
        "ScriptContext": {
          "String": ""
        },
        "ServerOnly": {
          "Bool": false
        },
        "SliderScaling": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UIMaximum": {
          "Float64": 0.0
        },
        "UIMinimum": {
          "Float64": 0.0
        },
        "UINumTicks": {
          "Float64": 0.0
        }
      }
    },
    "ReflectionMetadataProperties": {
      "Name": "ReflectionMetadataProperties",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataYieldFunctions": {
      "Name": "ReflectionMetadataYieldFunctions",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RemoteDebuggerServer": {
      "Name": "RemoteDebuggerServer",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RemoteEvent": {
      "Name": "RemoteEvent",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RemoteFunction": {
      "Name": "RemoteFunction",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RenderSettings": {
      "Name": "RenderSettings",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AutoFRMLevel": {
          "Name": "AutoFRMLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EagerBulkExecution": {
          "Name": "EagerBulkExecution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EditQualityLevel": {
          "Name": "EditQualityLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "QualityLevel"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EnableFRM": {
          "Name": "EnableFRM",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ExportMergeByMaterial": {
          "Name": "ExportMergeByMaterial",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FrameRateManager": {
          "Name": "FrameRateManager",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FramerateManagerMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GraphicsMode": {
          "Name": "GraphicsMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "GraphicsMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshCacheSize": {
          "Name": "MeshCacheSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshPartDetailLevel": {
          "Name": "MeshPartDetailLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "MeshPartDetailLevel"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "QualityLevel": {
          "Name": "QualityLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "QualityLevel"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReloadAssets": {
          "Name": "ReloadAssets",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RenderCSGTrianglesDebug": {
          "Name": "RenderCSGTrianglesDebug",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShowBoundingBoxes": {
          "Name": "ShowBoundingBoxes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "RenderingTest": {
      "Name": "RenderingTest",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ComparisonDiffThreshold": {
          "Name": "ComparisonDiffThreshold",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ComparisonMethod": {
          "Name": "ComparisonMethod",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RenderingTestComparisonMethod"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ComparisonPsnrThreshold": {
          "Name": "ComparisonPsnrThreshold",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Description": {
          "Name": "Description",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FieldOfView": {
          "Name": "FieldOfView",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Orientation": {
          "Name": "Orientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "QualityLevel": {
          "Name": "QualityLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShouldSkip": {
          "Name": "ShouldSkip",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Ticket": {
          "Name": "Ticket",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "ComparisonDiffThreshold": {
          "Int32": 10
        },
        "ComparisonMethod": {
          "Enum": 0
        },
        "ComparisonPsnrThreshold": {
          "Float32": 50.0
        },
        "Description": {
          "String": ""
        },
        "FieldOfView": {
          "Float32": 70.0
        },
        "QualityLevel": {
          "Int32": 21
        },
        "ShouldSkip": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Ticket": {
          "String": ""
        }
      }
    },
    "ReplicatedFirst": {
      "Name": "ReplicatedFirst",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReplicatedStorage": {
      "Name": "ReplicatedStorage",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReverbSoundEffect": {
      "Name": "ReverbSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "DecayTime": {
          "Name": "DecayTime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Density": {
          "Name": "Density",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Diffusion": {
          "Name": "Diffusion",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DryLevel": {
          "Name": "DryLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WetLevel": {
          "Name": "WetLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "DecayTime": {
          "Float32": 1.5
        },
        "Density": {
          "Float32": 1.0
        },
        "Diffusion": {
          "Float32": 1.0
        },
        "DryLevel": {
          "Float32": -6.0
        },
        "Enabled": {
          "Bool": true
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "WetLevel": {
          "Float32": 0.0
        }
      }
    },
    "RigidConstraint": {
      "Name": "RigidConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "Broken": {
          "Name": "Broken",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotBrowsable",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DestructionEnabled": {
          "Name": "DestructionEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotBrowsable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DestructionForce": {
          "Name": "DestructionForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotBrowsable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DestructionTorque": {
          "Name": "DestructionTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotBrowsable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 194
        },
        "DestructionEnabled": {
          "Bool": false
        },
        "DestructionForce": {
          "Float32": null
        },
        "DestructionTorque": {
          "Float32": null
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "RobloxPluginGuiService": {
      "Name": "RobloxPluginGuiService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RobloxReplicatedStorage": {
      "Name": "RobloxReplicatedStorage",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RocketPropulsion": {
      "Name": "RocketPropulsion",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "CartoonFactor": {
          "Name": "CartoonFactor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxSpeed": {
          "Name": "MaxSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxThrust": {
          "Name": "MaxThrust",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxTorque": {
          "Name": "MaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Target": {
          "Name": "Target",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetOffset": {
          "Name": "TargetOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetRadius": {
          "Name": "TargetRadius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ThrustD": {
          "Name": "ThrustD",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ThrustP": {
          "Name": "ThrustP",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TurnD": {
          "Name": "TurnD",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TurnP": {
          "Name": "TurnP",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CartoonFactor": {
          "Float32": 0.7
        },
        "MaxSpeed": {
          "Float32": 30.0
        },
        "MaxThrust": {
          "Float32": 4000.0
        },
        "MaxTorque": {
          "Vector3": [
            400000.0,
            400000.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TargetOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "TargetRadius": {
          "Float32": 4.0
        },
        "ThrustD": {
          "Float32": 0.001
        },
        "ThrustP": {
          "Float32": 5.0
        },
        "TurnD": {
          "Float32": 500.0
        },
        "TurnP": {
          "Float32": 3000.0
        }
      }
    },
    "RodConstraint": {
      "Name": "RodConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "CurrentDistance": {
          "Name": "CurrentDistance",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Length": {
          "Name": "Length",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimitAngle0": {
          "Name": "LimitAngle0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimitAngle1": {
          "Name": "LimitAngle1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Thickness": {
          "Name": "Thickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 26
        },
        "Enabled": {
          "Bool": true
        },
        "Length": {
          "Float32": 5.0
        },
        "LimitAngle0": {
          "Float32": 90.0
        },
        "LimitAngle1": {
          "Float32": 90.0
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Thickness": {
          "Float32": 0.1
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "RopeConstraint": {
      "Name": "RopeConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "CurrentDistance": {
          "Name": "CurrentDistance",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Length": {
          "Name": "Length",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Restitution": {
          "Name": "Restitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Thickness": {
          "Name": "Thickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WinchEnabled": {
          "Name": "WinchEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WinchForce": {
          "Name": "WinchForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WinchResponsiveness": {
          "Name": "WinchResponsiveness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WinchSpeed": {
          "Name": "WinchSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WinchTarget": {
          "Name": "WinchTarget",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 25
        },
        "Enabled": {
          "Bool": true
        },
        "Length": {
          "Float32": 5.0
        },
        "Restitution": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Thickness": {
          "Float32": 0.1
        },
        "Visible": {
          "Bool": false
        },
        "WinchEnabled": {
          "Bool": false
        },
        "WinchForce": {
          "Float32": 10000.0
        },
        "WinchResponsiveness": {
          "Float32": 45.0
        },
        "WinchSpeed": {
          "Float32": 2.0
        },
        "WinchTarget": {
          "Float32": 5.0
        }
      }
    },
    "Rotate": {
      "Name": "Rotate",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "JointInstance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RotateP": {
      "Name": "RotateP",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "DynamicRotate",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BaseAngle": {
          "Float32": 0.0
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RotateV": {
      "Name": "RotateV",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "DynamicRotate",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BaseAngle": {
          "Float32": 0.0
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RotationCurve": {
      "Name": "RotationCurve",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Length": {
          "Name": "Length",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RtMessagingService": {
      "Name": "RtMessagingService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RunService": {
      "Name": "RunService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ClientGitHash": {
          "Name": "ClientGitHash",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "RunningAverageItemDouble": {
      "Name": "RunningAverageItemDouble",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "StatsItem",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RunningAverageItemInt": {
      "Name": "RunningAverageItemInt",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "StatsItem",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RunningAverageTimeIntervalItem": {
      "Name": "RunningAverageTimeIntervalItem",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "StatsItem",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RuntimeScriptService": {
      "Name": "RuntimeScriptService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScreenGui": {
      "Name": "ScreenGui",
      "Tags": [],
      "Superclass": "LayerCollector",
      "Properties": {
        "DisplayOrder": {
          "Name": "DisplayOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IgnoreGuiInset": {
          "Name": "IgnoreGuiInset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OnTopOfCoreBlur": {
          "Name": "OnTopOfCoreBlur",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "DisplayOrder": {
          "Int32": 0
        },
        "Enabled": {
          "Bool": true
        },
        "IgnoreGuiInset": {
          "Bool": false
        },
        "ResetOnSpawn": {
          "Bool": true
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "ZIndexBehavior": {
          "Enum": 0
        }
      }
    },
    "Script": {
      "Name": "Script",
      "Tags": [],
      "Superclass": "BaseScript",
      "Properties": {
        "Source": {
          "Name": "Source",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Disabled": {
          "Bool": false
        },
        "LinkedSource": {
          "Content": ""
        },
        "Source": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ScriptChangeService": {
      "Name": "ScriptChangeService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScriptCloneWatcher": {
      "Name": "ScriptCloneWatcher",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScriptCloneWatcherHelper": {
      "Name": "ScriptCloneWatcherHelper",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScriptContext": {
      "Name": "ScriptContext",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ScriptsDisabled": {
          "Name": "ScriptsDisabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ScriptDebugger": {
      "Name": "ScriptDebugger",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CurrentLine": {
          "Name": "CurrentLine",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsDebugging": {
          "Name": "IsDebugging",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsPaused": {
          "Name": "IsPaused",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Script": {
          "Name": "Script",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ScriptDocument": {
      "Name": "ScriptDocument",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScriptEditorService": {
      "Name": "ScriptEditorService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScriptRegistrationService": {
      "Name": "ScriptRegistrationService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScriptService": {
      "Name": "ScriptService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ScrollingFrame": {
      "Name": "ScrollingFrame",
      "Tags": [],
      "Superclass": "GuiObject",
      "Properties": {
        "AbsoluteCanvasSize": {
          "Name": "AbsoluteCanvasSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AbsoluteWindowSize": {
          "Name": "AbsoluteWindowSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AutomaticCanvasSize": {
          "Name": "AutomaticCanvasSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AutomaticSize"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BottomImage": {
          "Name": "BottomImage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanvasPosition": {
          "Name": "CanvasPosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanvasSize": {
          "Name": "CanvasSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ElasticBehavior": {
          "Name": "ElasticBehavior",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ElasticBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HorizontalBarRect": {
          "Name": "HorizontalBarRect",
          "Scriptability": "None",
          "DataType": {
            "Value": "Rect"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HorizontalScrollBarInset": {
          "Name": "HorizontalScrollBarInset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScrollBarInset"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxCanvasPosition": {
          "Name": "MaxCanvasPosition",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MidImage": {
          "Name": "MidImage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScrollBarImageColor3": {
          "Name": "ScrollBarImageColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScrollBarImageTransparency": {
          "Name": "ScrollBarImageTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScrollBarThickness": {
          "Name": "ScrollBarThickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScrollVelocity": {
          "Name": "ScrollVelocity",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ScrollingDirection": {
          "Name": "ScrollingDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScrollingDirection"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScrollingEnabled": {
          "Name": "ScrollingEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TopImage": {
          "Name": "TopImage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VerticalBarRect": {
          "Name": "VerticalBarRect",
          "Scriptability": "None",
          "DataType": {
            "Value": "Rect"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VerticalScrollBarInset": {
          "Name": "VerticalScrollBarInset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScrollBarInset"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VerticalScrollBarPosition": {
          "Name": "VerticalScrollBarPosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "VerticalScrollBarPosition"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticCanvasSize": {
          "Enum": 0
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "BottomImage": {
          "Content": "rbxasset://textures/ui/Scroll/scroll-bottom.png"
        },
        "CanvasPosition": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "CanvasSize": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              2.0,
              0
            ]
          ]
        },
        "ClipsDescendants": {
          "Bool": true
        },
        "Draggable": {
          "Bool": false
        },
        "ElasticBehavior": {
          "Enum": 0
        },
        "HorizontalScrollBarInset": {
          "Enum": 0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "MidImage": {
          "Content": "rbxasset://textures/ui/Scroll/scroll-middle.png"
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "Rotation": {
          "Float32": 0.0
        },
        "ScrollBarImageColor3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "ScrollBarImageTransparency": {
          "Float32": 0.0
        },
        "ScrollBarThickness": {
          "Int32": 12
        },
        "ScrollingDirection": {
          "Enum": 4
        },
        "ScrollingEnabled": {
          "Bool": true
        },
        "Selectable": {
          "Bool": true
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": true
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopImage": {
          "Content": "rbxasset://textures/ui/Scroll/scroll-top.png"
        },
        "VerticalScrollBarInset": {
          "Enum": 0
        },
        "VerticalScrollBarPosition": {
          "Enum": 0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "Seat": {
      "Name": "Seat",
      "Tags": [],
      "Superclass": "Part",
      "Properties": {
        "Disabled": {
          "Name": "Disabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Occupant": {
          "Name": "Occupant",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "Disabled": {
          "Bool": false
        },
        "FormFactor": {
          "Enum": 1
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Shape": {
          "Enum": 1
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "Selection": {
      "Name": "Selection",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ActiveInstance": {
          "Name": "ActiveInstance",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SelectionThickness": {
          "Name": "SelectionThickness",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SelectionBox": {
      "Name": "SelectionBox",
      "Tags": [],
      "Superclass": "InstanceAdornment",
      "Properties": {
        "LineThickness": {
          "Name": "LineThickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SurfaceColor": {
          "Name": "SurfaceColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SurfaceColor3": {
          "Name": "SurfaceColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SurfaceTransparency": {
          "Name": "SurfaceTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "LineThickness": {
          "Float32": 0.15
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "SurfaceColor3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SurfaceTransparency": {
          "Float32": 1.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "SelectionLasso": {
      "Name": "SelectionLasso",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GuiBase3d",
      "Properties": {
        "Humanoid": {
          "Name": "Humanoid",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "SelectionPartLasso": {
      "Name": "SelectionPartLasso",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "SelectionLasso",
      "Properties": {
        "Part": {
          "Name": "Part",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "SelectionPointLasso": {
      "Name": "SelectionPointLasso",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "SelectionLasso",
      "Properties": {
        "Point": {
          "Name": "Point",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Point": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "SelectionSphere": {
      "Name": "SelectionSphere",
      "Tags": [],
      "Superclass": "PVAdornment",
      "Properties": {
        "SurfaceColor": {
          "Name": "SurfaceColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SurfaceColor3": {
          "Name": "SurfaceColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SurfaceTransparency": {
          "Name": "SurfaceTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "SurfaceColor3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SurfaceTransparency": {
          "Float32": 1.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "ServerReplicator": {
      "Name": "ServerReplicator",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "NetworkReplicator",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ServerScriptService": {
      "Name": "ServerScriptService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "LoadStringEnabled": {
          "Name": "LoadStringEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "LoadStringEnabled": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ServerStorage": {
      "Name": "ServerStorage",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ServiceProvider": {
      "Name": "ServiceProvider",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "SessionService": {
      "Name": "SessionService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Shirt": {
      "Name": "Shirt",
      "Tags": [],
      "Superclass": "Clothing",
      "Properties": {
        "ShirtTemplate": {
          "Name": "ShirtTemplate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "ShirtTemplate": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ShirtGraphic": {
      "Name": "ShirtGraphic",
      "Tags": [],
      "Superclass": "CharacterAppearance",
      "Properties": {
        "Color3": {
          "Name": "Color3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Graphic": {
          "Name": "Graphic",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Graphic": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SkateboardController": {
      "Name": "SkateboardController",
      "Tags": [],
      "Superclass": "Controller",
      "Properties": {
        "Steer": {
          "Name": "Steer",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Throttle": {
          "Name": "Throttle",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SkateboardPlatform": {
      "Name": "SkateboardPlatform",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Part",
      "Properties": {
        "Controller": {
          "Name": "Controller",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ControllingHumanoid": {
          "Name": "ControllingHumanoid",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Steer": {
          "Name": "Steer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StickyWheels": {
          "Name": "StickyWheels",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Throttle": {
          "Name": "Throttle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FormFactor": {
          "Enum": 1
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Shape": {
          "Enum": 1
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Steer": {
          "Int32": 0
        },
        "StickyWheels": {
          "Bool": true
        },
        "Tags": {
          "BinaryString": ""
        },
        "Throttle": {
          "Int32": 0
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "Skin": {
      "Name": "Skin",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "CharacterAppearance",
      "Properties": {
        "SkinColor": {
          "Name": "SkinColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SkinColor": {
          "Int32": 226
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Sky": {
      "Name": "Sky",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "CelestialBodiesShown": {
          "Name": "CelestialBodiesShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MoonAngularSize": {
          "Name": "MoonAngularSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MoonTextureId": {
          "Name": "MoonTextureId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SkyboxBk": {
          "Name": "SkyboxBk",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SkyboxDn": {
          "Name": "SkyboxDn",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SkyboxFt": {
          "Name": "SkyboxFt",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SkyboxLf": {
          "Name": "SkyboxLf",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SkyboxRt": {
          "Name": "SkyboxRt",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SkyboxUp": {
          "Name": "SkyboxUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StarCount": {
          "Name": "StarCount",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SunAngularSize": {
          "Name": "SunAngularSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SunTextureId": {
          "Name": "SunTextureId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CelestialBodiesShown": {
          "Bool": true
        },
        "MoonAngularSize": {
          "Float32": 11.0
        },
        "MoonTextureId": {
          "Content": "rbxasset://sky/moon.jpg"
        },
        "SkyboxBk": {
          "Content": "rbxasset://textures/sky/sky512_bk.tex"
        },
        "SkyboxDn": {
          "Content": "rbxasset://textures/sky/sky512_dn.tex"
        },
        "SkyboxFt": {
          "Content": "rbxasset://textures/sky/sky512_ft.tex"
        },
        "SkyboxLf": {
          "Content": "rbxasset://textures/sky/sky512_lf.tex"
        },
        "SkyboxRt": {
          "Content": "rbxasset://textures/sky/sky512_rt.tex"
        },
        "SkyboxUp": {
          "Content": "rbxasset://textures/sky/sky512_up.tex"
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StarCount": {
          "Int32": 3000
        },
        "SunAngularSize": {
          "Float32": 21.0
        },
        "SunTextureId": {
          "Content": "rbxasset://sky/sun.jpg"
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SlidingBallConstraint": {
      "Name": "SlidingBallConstraint",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Constraint",
      "Properties": {
        "ActuatorType": {
          "Name": "ActuatorType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentPosition": {
          "Name": "CurrentPosition",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LinearResponsiveness": {
          "Name": "LinearResponsiveness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LowerLimit": {
          "Name": "LowerLimit",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MotorMaxAcceleration": {
          "Name": "MotorMaxAcceleration",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MotorMaxForce": {
          "Name": "MotorMaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Restitution": {
          "Name": "Restitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ServoMaxForce": {
          "Name": "ServoMaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Speed": {
          "Name": "Speed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetPosition": {
          "Name": "TargetPosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UpperLimit": {
          "Name": "UpperLimit",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Velocity": {
          "Name": "Velocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Smoke": {
      "Name": "Smoke",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Opacity": {
          "Name": "Opacity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "opacity_xml"
              }
            }
          }
        },
        "RiseVelocity": {
          "Name": "RiseVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "riseVelocity_xml"
              }
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "size_xml"
              }
            }
          }
        },
        "TimeScale": {
          "Name": "TimeScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "opacity_xml": {
          "Name": "opacity_xml",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Opacity"
            }
          }
        },
        "riseVelocity_xml": {
          "Name": "riseVelocity_xml",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "RiseVelocity"
            }
          }
        },
        "size_xml": {
          "Name": "size_xml",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Size"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Enabled": {
          "Bool": true
        },
        "Opacity": {
          "Float32": 0.5
        },
        "RiseVelocity": {
          "Float32": 1.0
        },
        "Size": {
          "Float32": 1.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TimeScale": {
          "Float32": 1.0
        }
      }
    },
    "Snap": {
      "Name": "Snap",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "JointInstance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SnippetService": {
      "Name": "SnippetService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "SocialService": {
      "Name": "SocialService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "SolidModelContentProvider": {
      "Name": "SolidModelContentProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "CacheableContentProvider",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Sound": {
      "Name": "Sound",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "ChannelCount": {
          "Name": "ChannelCount",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotBrowsable",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EmitterSize": {
          "Name": "EmitterSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsLoaded": {
          "Name": "IsLoaded",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsPaused": {
          "Name": "IsPaused",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsPlaying": {
          "Name": "IsPlaying",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Looped": {
          "Name": "Looped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxDistance": {
          "Name": "MaxDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "xmlRead_MaxDistance_3"
              }
            }
          }
        },
        "MinDistance": {
          "Name": "MinDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Pitch": {
          "Name": "Pitch",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlayOnRemove": {
          "Name": "PlayOnRemove",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlaybackLoudness": {
          "Name": "PlaybackLoudness",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlaybackSpeed": {
          "Name": "PlaybackSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Playing": {
          "Name": "Playing",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RollOffMaxDistance": {
          "Name": "RollOffMaxDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RollOffMinDistance": {
          "Name": "RollOffMinDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RollOffMode": {
          "Name": "RollOffMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RollOffMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SoundGroup": {
          "Name": "SoundGroup",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SoundId": {
          "Name": "SoundId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TimeLength": {
          "Name": "TimeLength",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TimePosition": {
          "Name": "TimePosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UsageContextPermission": {
          "Name": "UsageContextPermission",
          "Scriptability": "None",
          "DataType": {
            "Enum": "UsageContext"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Volume": {
          "Name": "Volume",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "isPlaying": {
          "Name": "isPlaying",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "xmlRead_MaxDistance_3": {
          "Name": "xmlRead_MaxDistance_3",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "MaxDistance"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "EmitterSize": {
          "Float32": 10.0
        },
        "Looped": {
          "Bool": false
        },
        "MaxDistance": {
          "Float32": 10000.0
        },
        "PlayOnRemove": {
          "Bool": false
        },
        "PlaybackSpeed": {
          "Float32": 1.0
        },
        "Playing": {
          "Bool": false
        },
        "RollOffMode": {
          "Enum": 0
        },
        "SoundId": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TimePosition": {
          "Float64": 0.0
        },
        "Volume": {
          "Float32": 0.5
        }
      }
    },
    "SoundEffect": {
      "Name": "SoundEffect",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Priority": {
          "Name": "Priority",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "SoundGroup": {
      "Name": "SoundGroup",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Volume": {
          "Name": "Volume",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Volume": {
          "Float32": 0.5
        }
      }
    },
    "SoundService": {
      "Name": "SoundService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AmbientReverb": {
          "Name": "AmbientReverb",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ReverbType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DistanceFactor": {
          "Name": "DistanceFactor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DopplerScale": {
          "Name": "DopplerScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RespectFilteringEnabled": {
          "Name": "RespectFilteringEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RolloffScale": {
          "Name": "RolloffScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AmbientReverb": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "DistanceFactor": {
          "Float32": 3.33
        },
        "DopplerScale": {
          "Float32": 1.0
        },
        "RespectFilteringEnabled": {
          "Bool": false
        },
        "RolloffScale": {
          "Float32": 1.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Sparkles": {
      "Name": "Sparkles",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SparkleColor": {
          "Name": "SparkleColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TimeScale": {
          "Name": "TimeScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "SparkleColor": {
          "Color3": [
            0.5647059,
            0.098039225,
            1.0
          ]
        },
        "Tags": {
          "BinaryString": ""
        },
        "TimeScale": {
          "Float32": 1.0
        }
      }
    },
    "SpawnLocation": {
      "Name": "SpawnLocation",
      "Tags": [],
      "Superclass": "Part",
      "Properties": {
        "AllowTeamChangeOnTouch": {
          "Name": "AllowTeamChangeOnTouch",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Duration": {
          "Name": "Duration",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Neutral": {
          "Name": "Neutral",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TeamColor": {
          "Name": "TeamColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AllowTeamChangeOnTouch": {
          "Bool": false
        },
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "Duration": {
          "Int32": 10
        },
        "Enabled": {
          "Bool": true
        },
        "FormFactor": {
          "Enum": 1
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "Neutral": {
          "Bool": true
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Shape": {
          "Enum": 1
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TeamColor": {
          "Int32": 194
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "SpawnerService": {
      "Name": "SpawnerService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Speaker": {
      "Name": "Speaker",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ChannelCount": {
          "Name": "ChannelCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotBrowsable",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlaybackLoudness": {
          "Name": "PlaybackLoudness",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RollOffMaxDistance": {
          "Name": "RollOffMaxDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RollOffMinDistance": {
          "Name": "RollOffMinDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RollOffMode": {
          "Name": "RollOffMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RollOffMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SoundGroup": {
          "Name": "SoundGroup",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Source": {
          "Name": "Source",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Volume": {
          "Name": "Volume",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "RollOffMode": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Volume": {
          "Float32": 0.0
        }
      }
    },
    "SpecialMesh": {
      "Name": "SpecialMesh",
      "Tags": [],
      "Superclass": "FileMesh",
      "Properties": {
        "MeshType": {
          "Name": "MeshType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "MeshType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MeshId": {
          "Content": ""
        },
        "MeshType": {
          "Enum": 0
        },
        "Offset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Scale": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TextureId": {
          "Content": ""
        },
        "VertexColor": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        }
      }
    },
    "SphereHandleAdornment": {
      "Name": "SphereHandleAdornment",
      "Tags": [],
      "Superclass": "HandleAdornment",
      "Properties": {
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AdornCullingMode": {
          "Enum": 0
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Radius": {
          "Float32": 1.0
        },
        "SizeRelativeOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": -1
        }
      }
    },
    "SpotLight": {
      "Name": "SpotLight",
      "Tags": [],
      "Superclass": "Light",
      "Properties": {
        "Angle": {
          "Name": "Angle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Face": {
          "Name": "Face",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Range": {
          "Name": "Range",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Angle": {
          "Float32": 90.0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "Color": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Enabled": {
          "Bool": true
        },
        "Face": {
          "Enum": 5
        },
        "Range": {
          "Float32": 16.0
        },
        "Shadows": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SpringConstraint": {
      "Name": "SpringConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "Coils": {
          "Name": "Coils",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentLength": {
          "Name": "CurrentLength",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Damping": {
          "Name": "Damping",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FreeLength": {
          "Name": "FreeLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxForce": {
          "Name": "MaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxLength": {
          "Name": "MaxLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MinLength": {
          "Name": "MinLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Stiffness": {
          "Name": "Stiffness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Thickness": {
          "Name": "Thickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Coils": {
          "Float32": 3.0
        },
        "Color": {
          "Int32": 200
        },
        "Damping": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "FreeLength": {
          "Float32": 1.0
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "MaxForce": {
          "Float32": null
        },
        "MaxLength": {
          "Float32": 5.0
        },
        "MinLength": {
          "Float32": 0.0
        },
        "Radius": {
          "Float32": 0.4
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Stiffness": {
          "Float32": 0.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Thickness": {
          "Float32": 0.1
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "StackFrame": {
      "Name": "StackFrame",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "FrameId": {
          "Name": "FrameId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FrameName": {
          "Name": "FrameName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FrameType": {
          "Name": "FrameType",
          "Scriptability": "None",
          "DataType": {
            "Enum": "DebuggerFrameType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Globals": {
          "Name": "Globals",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Line": {
          "Name": "Line",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Locals": {
          "Name": "Locals",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Populated": {
          "Name": "Populated",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Script": {
          "Name": "Script",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Upvalues": {
          "Name": "Upvalues",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "StandalonePluginScripts": {
      "Name": "StandalonePluginScripts",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "StandardPages": {
      "Name": "StandardPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StarterCharacterScripts": {
      "Name": "StarterCharacterScripts",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "StarterPlayerScripts",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "StarterGear": {
      "Name": "StarterGear",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "StarterGui": {
      "Name": "StarterGui",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "BasePlayerGui",
      "Properties": {
        "ProcessUserInput": {
          "Name": "ProcessUserInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ResetPlayerGuiOnSpawn": {
          "Name": "ResetPlayerGuiOnSpawn",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScreenOrientation": {
          "Name": "ScreenOrientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScreenOrientation"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShowDevelopmentGui": {
          "Name": "ShowDevelopmentGui",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VirtualCursorMode": {
          "Name": "VirtualCursorMode",
          "Scriptability": "None",
          "DataType": {
            "Enum": "VirtualCursorMode"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "ResetPlayerGuiOnSpawn": {
          "Bool": true
        },
        "ScreenOrientation": {
          "Enum": 2
        },
        "ShowDevelopmentGui": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "VirtualCursorMode": {
          "Enum": 0
        }
      }
    },
    "StarterPack": {
      "Name": "StarterPack",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "StarterPlayer": {
      "Name": "StarterPlayer",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllowCustomAnimations": {
          "Name": "AllowCustomAnimations",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AutoJumpEnabled": {
          "Name": "AutoJumpEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMaxZoomDistance": {
          "Name": "CameraMaxZoomDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMinZoomDistance": {
          "Name": "CameraMinZoomDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMode": {
          "Name": "CameraMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "CameraMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterJumpHeight": {
          "Name": "CharacterJumpHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterJumpPower": {
          "Name": "CharacterJumpPower",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterMaxSlopeAngle": {
          "Name": "CharacterMaxSlopeAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterUseJumpPower": {
          "Name": "CharacterUseJumpPower",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterWalkSpeed": {
          "Name": "CharacterWalkSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevCameraOcclusionMode": {
          "Name": "DevCameraOcclusionMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevCameraOcclusionMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevComputerCameraMovementMode": {
          "Name": "DevComputerCameraMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevComputerCameraMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevComputerMovementMode": {
          "Name": "DevComputerMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevComputerMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevTouchCameraMovementMode": {
          "Name": "DevTouchCameraMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevTouchCameraMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevTouchMovementMode": {
          "Name": "DevTouchMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevTouchMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EnableMouseLockOption": {
          "Name": "EnableMouseLockOption",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDFace": {
          "Name": "GameSettingsAssetIDFace",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDHead": {
          "Name": "GameSettingsAssetIDHead",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDLeftArm": {
          "Name": "GameSettingsAssetIDLeftArm",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDLeftLeg": {
          "Name": "GameSettingsAssetIDLeftLeg",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDPants": {
          "Name": "GameSettingsAssetIDPants",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDRightArm": {
          "Name": "GameSettingsAssetIDRightArm",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDRightLeg": {
          "Name": "GameSettingsAssetIDRightLeg",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDShirt": {
          "Name": "GameSettingsAssetIDShirt",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDTeeShirt": {
          "Name": "GameSettingsAssetIDTeeShirt",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDTorso": {
          "Name": "GameSettingsAssetIDTorso",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAvatar": {
          "Name": "GameSettingsAvatar",
          "Scriptability": "None",
          "DataType": {
            "Enum": "GameAvatarType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsR15Collision": {
          "Name": "GameSettingsR15Collision",
          "Scriptability": "None",
          "DataType": {
            "Enum": "R15CollisionType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsScaleRangeBodyType": {
          "Name": "GameSettingsScaleRangeBodyType",
          "Scriptability": "None",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsScaleRangeHead": {
          "Name": "GameSettingsScaleRangeHead",
          "Scriptability": "None",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsScaleRangeHeight": {
          "Name": "GameSettingsScaleRangeHeight",
          "Scriptability": "None",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsScaleRangeProportion": {
          "Name": "GameSettingsScaleRangeProportion",
          "Scriptability": "None",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsScaleRangeWidth": {
          "Name": "GameSettingsScaleRangeWidth",
          "Scriptability": "None",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HealthDisplayDistance": {
          "Name": "HealthDisplayDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LoadCharacterAppearance": {
          "Name": "LoadCharacterAppearance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LoadCharacterLayeredClothing ": {
          "Name": "LoadCharacterLayeredClothing ",
          "Scriptability": "None",
          "DataType": {
            "Enum": "LoadCharacterLayeredClothing"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "NameDisplayDistance": {
          "Name": "NameDisplayDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UserEmotesEnabled": {
          "Name": "UserEmotesEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AllowCustomAnimations": {
          "Bool": true
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoJumpEnabled": {
          "Bool": true
        },
        "CameraMaxZoomDistance": {
          "Float32": 400.0
        },
        "CameraMinZoomDistance": {
          "Float32": 0.5
        },
        "CameraMode": {
          "Enum": 0
        },
        "CharacterJumpHeight": {
          "Float32": 7.2
        },
        "CharacterJumpPower": {
          "Float32": 50.0
        },
        "CharacterMaxSlopeAngle": {
          "Float32": 89.0
        },
        "CharacterUseJumpPower": {
          "Bool": true
        },
        "CharacterWalkSpeed": {
          "Float32": 16.0
        },
        "DevCameraOcclusionMode": {
          "Enum": 0
        },
        "DevComputerCameraMovementMode": {
          "Enum": 0
        },
        "DevComputerMovementMode": {
          "Enum": 0
        },
        "DevTouchCameraMovementMode": {
          "Enum": 0
        },
        "DevTouchMovementMode": {
          "Enum": 0
        },
        "EnableMouseLockOption": {
          "Bool": true
        },
        "GameSettingsAssetIDFace": {
          "Int64": 0
        },
        "GameSettingsAssetIDHead": {
          "Int64": 0
        },
        "GameSettingsAssetIDLeftArm": {
          "Int64": 0
        },
        "GameSettingsAssetIDLeftLeg": {
          "Int64": 0
        },
        "GameSettingsAssetIDPants": {
          "Int64": 0
        },
        "GameSettingsAssetIDRightArm": {
          "Int64": 0
        },
        "GameSettingsAssetIDRightLeg": {
          "Int64": 0
        },
        "GameSettingsAssetIDShirt": {
          "Int64": 0
        },
        "GameSettingsAssetIDTeeShirt": {
          "Int64": 0
        },
        "GameSettingsAssetIDTorso": {
          "Int64": 0
        },
        "GameSettingsAvatar": {
          "Enum": 1
        },
        "GameSettingsR15Collision": {
          "Enum": 0
        },
        "GameSettingsScaleRangeBodyType": {
          "NumberRange": [
            0.0,
            1.0
          ]
        },
        "GameSettingsScaleRangeHead": {
          "NumberRange": [
            0.95,
            1.0
          ]
        },
        "GameSettingsScaleRangeHeight": {
          "NumberRange": [
            0.9,
            1.05
          ]
        },
        "GameSettingsScaleRangeProportion": {
          "NumberRange": [
            0.0,
            1.0
          ]
        },
        "GameSettingsScaleRangeWidth": {
          "NumberRange": [
            0.7,
            1.0
          ]
        },
        "HealthDisplayDistance": {
          "Float32": 100.0
        },
        "LoadCharacterAppearance": {
          "Bool": true
        },
        "NameDisplayDistance": {
          "Float32": 100.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UserEmotesEnabled": {
          "Bool": true
        }
      }
    },
    "StarterPlayerScripts": {
      "Name": "StarterPlayerScripts",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Stats": {
      "Name": "Stats",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ContactsCount": {
          "Name": "ContactsCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataReceiveKbps": {
          "Name": "DataReceiveKbps",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataSendKbps": {
          "Name": "DataSendKbps",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HeartbeatTimeMs": {
          "Name": "HeartbeatTimeMs",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "InstanceCount": {
          "Name": "InstanceCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MovingPrimitivesCount": {
          "Name": "MovingPrimitivesCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PhysicsReceiveKbps": {
          "Name": "PhysicsReceiveKbps",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PhysicsSendKbps": {
          "Name": "PhysicsSendKbps",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PhysicsStepTimeMs": {
          "Name": "PhysicsStepTimeMs",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PrimitivesCount": {
          "Name": "PrimitivesCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "StatsItem": {
      "Name": "StatsItem",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "DisplayName": {
          "Name": "DisplayName",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Status": {
      "Name": "Status",
      "Tags": [
        "Deprecated",
        "NotCreatable"
      ],
      "Superclass": "Model",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StopWatchReporter": {
      "Name": "StopWatchReporter",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StringValue": {
      "Name": "StringValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "String": ""
        }
      }
    },
    "Studio": {
      "Name": "Studio",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "\"TODO\" Color": {
          "Name": "\"TODO\" Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "\"function\" Color": {
          "Name": "\"function\" Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "\"local\" Color": {
          "Name": "\"local\" Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "\"nil\" Color": {
          "Name": "\"nil\" Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "\"self\" Color": {
          "Name": "\"self\" Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Active Color": {
          "Name": "Active Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Active Hover Over Color": {
          "Name": "Active Hover Over Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Always Save Script Changes": {
          "Name": "Always Save Script Changes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Animate Hover Over": {
          "Name": "Animate Hover Over",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Auto Clean Empty Line": {
          "Name": "Auto Clean Empty Line",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Auto Closing Brackets": {
          "Name": "Auto Closing Brackets",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Auto Closing Quotes": {
          "Name": "Auto Closing Quotes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Auto Indent Rule": {
          "Name": "Auto Indent Rule",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AutoIndentRule"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Auto-Recovery Enabled": {
          "Name": "Auto-Recovery Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Auto-Recovery Interval (Minutes)": {
          "Name": "Auto-Recovery Interval (Minutes)",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Background Color": {
          "Name": "Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Basic Objects Display Mode": {
          "Name": "Basic Objects Display Mode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ListDisplayMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Bool Color": {
          "Name": "Bool Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Bracket Color": {
          "Name": "Bracket Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Built-in Function Color": {
          "Name": "Built-in Function Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Camera Mouse Wheel Speed": {
          "Name": "Camera Mouse Wheel Speed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Camera Shift Speed": {
          "Name": "Camera Shift Speed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Camera Speed": {
          "Name": "Camera Speed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Camera Zoom to Mouse Position": {
          "Name": "Camera Zoom to Mouse Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Clear Output On Start": {
          "Name": "Clear Output On Start",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CommandBarLocalState": {
          "Name": "CommandBarLocalState",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Comment Color": {
          "Name": "Comment Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Current Line Highlight Color": {
          "Name": "Current Line Highlight Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Debugger Current Line Color": {
          "Name": "Debugger Current Line Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Debugger Error Line Color": {
          "Name": "Debugger Error Line Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DeprecatedObjectsShown": {
          "Name": "DeprecatedObjectsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DisplayLanguage": {
          "Name": "DisplayLanguage",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Doc View Code Background Color": {
          "Name": "Doc View Code Background Color",
          "Scriptability": "None",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Drag Multiple Parts As Single Part": {
          "Name": "Drag Multiple Parts As Single Part",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Autocomplete": {
          "Name": "Enable Autocomplete",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Autocomplete Doc View": {
          "Name": "Enable Autocomplete Doc View",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable CoreScript Debugger": {
          "Name": "Enable CoreScript Debugger",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Http Sandboxing": {
          "Name": "Enable Http Sandboxing",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Internal Beta Features": {
          "Name": "Enable Internal Beta Features",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Internal Features": {
          "Name": "Enable Internal Features",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Script Analysis": {
          "Name": "Enable Script Analysis",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Scrollbar Markers": {
          "Name": "Enable Scrollbar Markers",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Signature Help": {
          "Name": "Enable Signature Help",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Signature Help Doc View": {
          "Name": "Enable Signature Help Doc View",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Temporary Tabs": {
          "Name": "Enable Temporary Tabs",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Temporary Tabs In Explorer": {
          "Name": "Enable Temporary Tabs In Explorer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Type Hover": {
          "Name": "Enable Type Hover",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EnableOnTypeAutocomplete": {
          "Name": "EnableOnTypeAutocomplete",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Error Color": {
          "Name": "Error Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Find Selection Background Color": {
          "Name": "Find Selection Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Format On Paste": {
          "Name": "Format On Paste",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Format On Type": {
          "Name": "Format On Type",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Function Name Color": {
          "Name": "Function Name Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Highlight Current Line": {
          "Name": "Highlight Current Line",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Highlight Occurances": {
          "Name": "Highlight Occurances",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Hover Animate Speed": {
          "Name": "Hover Animate Speed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HoverAnimateSpeed"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Hover Box Thickness": {
          "Name": "Hover Box Thickness",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Hover Over Color": {
          "Name": "Hover Over Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Indent Using Spaces": {
          "Name": "Indent Using Spaces",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Keyword Color": {
          "Name": "Keyword Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Line Thickness": {
          "Name": "Line Thickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LuaDebuggerEnabled": {
          "Name": "LuaDebuggerEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LuaDebuggerEnabledAtStartup": {
          "Name": "LuaDebuggerEnabledAtStartup",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Luau Keyword Color": {
          "Name": "Luau Keyword Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Main Volume": {
          "Name": "Main Volume",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Matching Word Background Color": {
          "Name": "Matching Word Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Maximum Output Lines": {
          "Name": "Maximum Output Lines",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Menu Item Background Color": {
          "Name": "Menu Item Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Method Color": {
          "Name": "Method Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Number Color": {
          "Name": "Number Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Only Play Audio from Window in Focus": {
          "Name": "Only Play Audio from Window in Focus",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Operator Color": {
          "Name": "Operator Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Output Layout Mode": {
          "Name": "Output Layout Mode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "OutputLayoutMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PermissionLevelShown": {
          "Name": "PermissionLevelShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "PermissionLevelShown"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Physical Draggers Select Scope By Default": {
          "Name": "Physical Draggers Select Scope By Default",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Pivot Snap To Geometry Color": {
          "Name": "Pivot Snap To Geometry Color",
          "Scriptability": "None",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PluginDebuggingEnabled": {
          "Name": "PluginDebuggingEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Primary Text Color": {
          "Name": "Primary Text Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Property Color": {
          "Name": "Property Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Render Throttle Percentage": {
          "Name": "Render Throttle Percentage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Respect Studio shortcuts when game has focus": {
          "Name": "Respect Studio shortcuts when game has focus",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Ruler Color": {
          "Name": "Ruler Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Rulers": {
          "Name": "Rulers",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RuntimeUndoBehavior": {
          "Name": "RuntimeUndoBehavior",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RuntimeUndoBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Script Editor Color Preset": {
          "Name": "Script Editor Color Preset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "StudioScriptEditorColorPresets"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Script Editor Scrollbar Background Color": {
          "Name": "Script Editor Scrollbar Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Script Editor Scrollbar Handle Color": {
          "Name": "Script Editor Scrollbar Handle Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ScriptEditorMenuBorderColor": {
          "Name": "ScriptEditorMenuBorderColor",
          "Scriptability": "None",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ScriptEditorShouldShowPluginMethods": {
          "Name": "ScriptEditorShouldShowPluginMethods",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScriptTimeoutLength": {
          "Name": "ScriptTimeoutLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Scroll Past Last Line": {
          "Name": "Scroll Past Last Line",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Search Content For Core Scripts": {
          "Name": "Search Content For Core Scripts",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Secondary Text Color": {
          "Name": "Secondary Text Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Select Color": {
          "Name": "Select Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Select/Hover Color": {
          "Name": "Select/Hover Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Selected Menu Item Background Color": {
          "Name": "Selected Menu Item Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Selected Text Color": {
          "Name": "Selected Text Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Selection Background Color": {
          "Name": "Selection Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Selection Color": {
          "Name": "Selection Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Selection Highlight Thickness": {
          "Name": "Selection Highlight Thickness",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Server Audio Behavior": {
          "Name": "Server Audio Behavior",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ServerAudioBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Set Pivot of Imported Parts": {
          "Name": "Set Pivot of Imported Parts",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Core GUI in Explorer while Playing": {
          "Name": "Show Core GUI in Explorer while Playing",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Deployment Warnings": {
          "Name": "Show Deployment Warnings",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Diagnostics Bar": {
          "Name": "Show Diagnostics Bar",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show FileSyncService": {
          "Name": "Show FileSyncService",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Hidden Objects in Explorer": {
          "Name": "Show Hidden Objects in Explorer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Hover Over": {
          "Name": "Show Hover Over",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Light Guides": {
          "Name": "Show Light Guides",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Navigation Labels": {
          "Name": "Show Navigation Labels",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Navigation Mesh": {
          "Name": "Show Navigation Mesh",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Pathfinding Links": {
          "Name": "Show Pathfinding Links",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Plugin GUI Service in Explorer": {
          "Name": "Show Plugin GUI Service in Explorer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show QT warnings in output": {
          "Name": "Show QT warnings in output",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Whitespace": {
          "Name": "Show Whitespace",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show plus button on hover in Explorer": {
          "Name": "Show plus button on hover in Explorer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShowCorePackagesInExplorer": {
          "Name": "ShowCorePackagesInExplorer",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Skip Closing Brackets and Quotes": {
          "Name": "Skip Closing Brackets and Quotes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "String Color": {
          "Name": "String Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Tab Width": {
          "Name": "Tab Width",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Text Color": {
          "Name": "Text Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Text Wrapping": {
          "Name": "Text Wrapping",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Theme": {
          "Name": "Theme",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UI Theme": {
          "Name": "UI Theme",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "UITheme"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Use Bounding Box Move Handles": {
          "Name": "Use Bounding Box Move Handles",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Warning Color": {
          "Name": "Warning Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Whitespace Color": {
          "Name": "Whitespace Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "StudioAssetService": {
      "Name": "StudioAssetService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StudioData": {
      "Name": "StudioData",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "EnableScriptCollabByDefaultOnLoad": {
          "Name": "EnableScriptCollabByDefaultOnLoad",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SrcPlaceId": {
          "Name": "SrcPlaceId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SrcUniverseId": {
          "Name": "SrcUniverseId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "EnableScriptCollabByDefaultOnLoad": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "SrcPlaceId": {
          "Int64": 0
        },
        "SrcUniverseId": {
          "Int64": 0
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "StudioDeviceEmulatorService": {
      "Name": "StudioDeviceEmulatorService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StudioHighDpiService": {
      "Name": "StudioHighDpiService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StudioPublishService": {
      "Name": "StudioPublishService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StudioScriptDebugEventListener": {
      "Name": "StudioScriptDebugEventListener",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StudioService": {
      "Name": "StudioService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ActiveScript": {
          "Name": "ActiveScript",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AlignDraggedObjects": {
          "Name": "AlignDraggedObjects",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DraggerSolveConstraints": {
          "Name": "DraggerSolveConstraints",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DrawConstraintsOnTop": {
          "Name": "DrawConstraintsOnTop",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GridSize": {
          "Name": "GridSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HoverInstance": {
          "Name": "HoverInstance",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "InstalledPluginData": {
          "Name": "InstalledPluginData",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PivotSnapToGeometry": {
          "Name": "PivotSnapToGeometry",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RotateIncrement": {
          "Name": "RotateIncrement",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShowActiveInstanceHighlight": {
          "Name": "ShowActiveInstanceHighlight",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShowConstraintDetails": {
          "Name": "ShowConstraintDetails",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "StudioLocaleId": {
          "Name": "StudioLocaleId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UseLocalSpace": {
          "Name": "UseLocalSpace",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "StudioTheme": {
      "Name": "StudioTheme",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "SunRaysEffect": {
      "Name": "SunRaysEffect",
      "Tags": [],
      "Superclass": "PostEffect",
      "Properties": {
        "Intensity": {
          "Name": "Intensity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Spread": {
          "Name": "Spread",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "Intensity": {
          "Float32": 0.25
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Spread": {
          "Float32": 1.0
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SurfaceAppearance": {
      "Name": "SurfaceAppearance",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AlphaMode": {
          "Name": "AlphaMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AlphaMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ColorMap": {
          "Name": "ColorMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MetalnessMap": {
          "Name": "MetalnessMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NormalMap": {
          "Name": "NormalMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RoughnessMap": {
          "Name": "RoughnessMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TexturePack": {
          "Name": "TexturePack",
          "Scriptability": "None",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AlphaMode": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "ColorMap": {
          "Content": ""
        },
        "MetalnessMap": {
          "Content": ""
        },
        "NormalMap": {
          "Content": ""
        },
        "RoughnessMap": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TexturePack": {
          "Content": ""
        }
      }
    },
    "SurfaceGui": {
      "Name": "SurfaceGui",
      "Tags": [],
      "Superclass": "LayerCollector",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Adornee": {
          "Name": "Adornee",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AlwaysOnTop": {
          "Name": "AlwaysOnTop",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanvasSize": {
          "Name": "CanvasSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClipsDescendants": {
          "Name": "ClipsDescendants",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Face": {
          "Name": "Face",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightInfluence": {
          "Name": "LightInfluence",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PixelsPerStud": {
          "Name": "PixelsPerStud",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SizingMode": {
          "Name": "SizingMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceGuiSizingMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ToolPunchThroughDistance": {
          "Name": "ToolPunchThroughDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ZOffset": {
          "Name": "ZOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": true
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "Brightness": {
          "Float32": 1.0
        },
        "CanvasSize": {
          "Vector2": [
            800.0,
            600.0
          ]
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Enabled": {
          "Bool": true
        },
        "Face": {
          "Enum": 5
        },
        "LightInfluence": {
          "Float32": 0.0
        },
        "PixelsPerStud": {
          "Float32": 50.0
        },
        "ResetOnSpawn": {
          "Bool": true
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SizingMode": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "ToolPunchThroughDistance": {
          "Float32": 0.0
        },
        "ZIndexBehavior": {
          "Enum": 0
        },
        "ZOffset": {
          "Float32": 0.0
        }
      }
    },
    "SurfaceLight": {
      "Name": "SurfaceLight",
      "Tags": [],
      "Superclass": "Light",
      "Properties": {
        "Angle": {
          "Name": "Angle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Face": {
          "Name": "Face",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Range": {
          "Name": "Range",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Angle": {
          "Float32": 90.0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "Color": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Enabled": {
          "Bool": true
        },
        "Face": {
          "Enum": 5
        },
        "Range": {
          "Float32": 16.0
        },
        "Shadows": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SurfaceSelection": {
      "Name": "SurfaceSelection",
      "Tags": [],
      "Superclass": "PartAdornment",
      "Properties": {
        "TargetSurface": {
          "Name": "TargetSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TargetSurface": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "TaskScheduler": {
      "Name": "TaskScheduler",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "SchedulerDutyCycle": {
          "Name": "SchedulerDutyCycle",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SchedulerRate": {
          "Name": "SchedulerRate",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ThreadPoolConfig": {
          "Name": "ThreadPoolConfig",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ThreadPoolConfig"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ThreadPoolSize": {
          "Name": "ThreadPoolSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Team": {
      "Name": "Team",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AutoAssignable": {
          "Name": "AutoAssignable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AutoColorCharacters": {
          "Name": "AutoColorCharacters",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ChildOrder": {
          "Name": "ChildOrder",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Score": {
          "Name": "Score",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TeamColor": {
          "Name": "TeamColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutoAssignable": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TeamColor": {
          "Int32": 1
        }
      }
    },
    "Teams": {
      "Name": "Teams",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TeleportAsyncResult": {
      "Name": "TeleportAsyncResult",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "PrivateServerId": {
          "Name": "PrivateServerId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ReservedServerAccessCode": {
          "Name": "ReservedServerAccessCode",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "TeleportOptions": {
      "Name": "TeleportOptions",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "ReservedServerAccessCode": {
          "Name": "ReservedServerAccessCode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ServerInstanceId": {
          "Name": "ServerInstanceId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShouldReserveServer": {
          "Name": "ShouldReserveServer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "ReservedServerAccessCode": {
          "String": ""
        },
        "ServerInstanceId": {
          "String": ""
        },
        "ShouldReserveServer": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TeleportService": {
      "Name": "TeleportService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CustomizedTeleportUI": {
          "Name": "CustomizedTeleportUI",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TemporaryCageMeshProvider": {
      "Name": "TemporaryCageMeshProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TemporaryScriptService": {
      "Name": "TemporaryScriptService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Terrain": {
      "Name": "Terrain",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "BasePart",
      "Properties": {
        "Decoration": {
          "Name": "Decoration",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsSmooth": {
          "Name": "IsSmooth",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LastUsedModificationMethod": {
          "Name": "LastUsedModificationMethod",
          "Scriptability": "None",
          "DataType": {
            "Enum": "TerrainAcquisitionMethod"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaterialColors": {
          "Name": "MaterialColors",
          "Scriptability": "None",
          "DataType": {
            "Value": "BinaryString"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxExtents": {
          "Name": "MaxExtents",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Region3int16"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WaterColor": {
          "Name": "WaterColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WaterReflectance": {
          "Name": "WaterReflectance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WaterTransparency": {
          "Name": "WaterTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WaterWaveSize": {
          "Name": "WaterWaveSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WaterWaveSpeed": {
          "Name": "WaterWaveSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": true
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "Decoration": {
          "Bool": false
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": true
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "MaterialColors": {
          "BinaryString": "AAAAAAAAan8/P39rf2Y/ilY+j35fi21PZmxvZbDqw8faiVpHOi4kHh4lZlw76JxKc3trhHtagcLgc4RKxr21zq2UlJSM"
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            2044.0,
            252.0,
            2044.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "WaterColor": {
          "Color3": [
            0.05,
            0.33,
            0.36
          ]
        },
        "WaterReflectance": {
          "Float32": 1.0
        },
        "WaterTransparency": {
          "Float32": 0.3
        },
        "WaterWaveSize": {
          "Float32": 0.15
        },
        "WaterWaveSpeed": {
          "Float32": 10.0
        }
      }
    },
    "TerrainDetail": {
      "Name": "TerrainDetail",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ColorMap": {
          "Name": "ColorMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Face": {
          "Name": "Face",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TerrainFace"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaterialPattern": {
          "Name": "MaterialPattern",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "MaterialPattern"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MetalnessMap": {
          "Name": "MetalnessMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NormalMap": {
          "Name": "NormalMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RoughnessMap": {
          "Name": "RoughnessMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsPerTile": {
          "Name": "StudsPerTile",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "ColorMap": {
          "Content": ""
        },
        "Face": {
          "Enum": 1
        },
        "MaterialPattern": {
          "Enum": 0
        },
        "MetalnessMap": {
          "Content": ""
        },
        "NormalMap": {
          "Content": ""
        },
        "RoughnessMap": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StudsPerTile": {
          "Float32": 10.0
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TerrainRegion": {
      "Name": "TerrainRegion",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "IsSmooth": {
          "Name": "IsSmooth",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SizeInCells": {
          "Name": "SizeInCells",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TestService": {
      "Name": "TestService",
      "Tags": [
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AutoRuns": {
          "Name": "AutoRuns",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Description": {
          "Name": "Description",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ErrorCount": {
          "Name": "ErrorCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ExecuteWithStudioRun": {
          "Name": "ExecuteWithStudioRun",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Is30FpsThrottleEnabled": {
          "Name": "Is30FpsThrottleEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsPhysicsEnvironmentalThrottled": {
          "Name": "IsPhysicsEnvironmentalThrottled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsSleepAllowed": {
          "Name": "IsSleepAllowed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NumberOfPlayers": {
          "Name": "NumberOfPlayers",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SimulateSecondsLag": {
          "Name": "SimulateSecondsLag",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TestCount": {
          "Name": "TestCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Timeout": {
          "Name": "Timeout",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WarnCount": {
          "Name": "WarnCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutoRuns": {
          "Bool": true
        },
        "Description": {
          "String": ""
        },
        "ExecuteWithStudioRun": {
          "Bool": false
        },
        "Is30FpsThrottleEnabled": {
          "Bool": true
        },
        "IsPhysicsEnvironmentalThrottled": {
          "Bool": true
        },
        "IsSleepAllowed": {
          "Bool": true
        },
        "NumberOfPlayers": {
          "Int32": 0
        },
        "SimulateSecondsLag": {
          "Float64": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Timeout": {
          "Float64": 10.0
        }
      }
    },
    "TextBox": {
      "Name": "TextBox",
      "Tags": [],
      "Superclass": "GuiObject",
      "Properties": {
        "ClearTextOnFocus": {
          "Name": "ClearTextOnFocus",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ContentText": {
          "Name": "ContentText",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CursorPosition": {
          "Name": "CursorPosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EnableRealtimeFilteringHints": {
          "Name": "EnableRealtimeFilteringHints",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Font": {
          "Name": "Font",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "Font"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FontSize": {
          "Name": "FontSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FontSize"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LineHeight": {
          "Name": "LineHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ManualFocusRelease": {
          "Name": "ManualFocusRelease",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxVisibleGraphemes": {
          "Name": "MaxVisibleGraphemes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MultiLine": {
          "Name": "MultiLine",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OverlayNativeInput": {
          "Name": "OverlayNativeInput",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlaceholderColor3": {
          "Name": "PlaceholderColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlaceholderText": {
          "Name": "PlaceholderText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReturnKeyType": {
          "Name": "ReturnKeyType",
          "Scriptability": "None",
          "DataType": {
            "Enum": "ReturnKeyType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RichText": {
          "Name": "RichText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionStart": {
          "Name": "SelectionStart",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShowNativeInput": {
          "Name": "ShowNativeInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextBounds": {
          "Name": "TextBounds",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextColor": {
          "Name": "TextColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextColor3": {
          "Name": "TextColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextEditable": {
          "Name": "TextEditable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextFits": {
          "Name": "TextFits",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextInputType": {
          "Name": "TextInputType",
          "Scriptability": "None",
          "DataType": {
            "Enum": "TextInputType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextScaled": {
          "Name": "TextScaled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextSize": {
          "Name": "TextSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextStrokeColor3": {
          "Name": "TextStrokeColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextStrokeTransparency": {
          "Name": "TextStrokeTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextTransparency": {
          "Name": "TextTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextTruncate": {
          "Name": "TextTruncate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextTruncate"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextWrap": {
          "Name": "TextWrap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextWrapped": {
          "Name": "TextWrapped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextXAlignment": {
          "Name": "TextXAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextXAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextYAlignment": {
          "Name": "TextYAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextYAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": true
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClearTextOnFocus": {
          "Bool": true
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "Font": {
          "Enum": 0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "LineHeight": {
          "Float32": 1.0
        },
        "MaxVisibleGraphemes": {
          "Int32": -1
        },
        "MultiLine": {
          "Bool": false
        },
        "PlaceholderColor3": {
          "Color3": [
            0.7,
            0.7,
            0.7
          ]
        },
        "PlaceholderText": {
          "String": ""
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "RichText": {
          "Bool": false
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": true
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "ShowNativeInput": {
          "Bool": true
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Text": {
          "String": "TextBox"
        },
        "TextColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "TextEditable": {
          "Bool": true
        },
        "TextScaled": {
          "Bool": false
        },
        "TextSize": {
          "Float32": 8.0
        },
        "TextStrokeColor3": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "TextStrokeTransparency": {
          "Float32": 1.0
        },
        "TextTransparency": {
          "Float32": 0.0
        },
        "TextTruncate": {
          "Enum": 0
        },
        "TextWrapped": {
          "Bool": false
        },
        "TextXAlignment": {
          "Enum": 2
        },
        "TextYAlignment": {
          "Enum": 1
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "TextBoxService": {
      "Name": "TextBoxService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TextButton": {
      "Name": "TextButton",
      "Tags": [],
      "Superclass": "GuiButton",
      "Properties": {
        "ContentText": {
          "Name": "ContentText",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Font": {
          "Name": "Font",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "Font"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FontSize": {
          "Name": "FontSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FontSize"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LineHeight": {
          "Name": "LineHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LocalizedText": {
          "Name": "LocalizedText",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxVisibleGraphemes": {
          "Name": "MaxVisibleGraphemes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RichText": {
          "Name": "RichText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextBounds": {
          "Name": "TextBounds",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextColor": {
          "Name": "TextColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextColor3": {
          "Name": "TextColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextFits": {
          "Name": "TextFits",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextScaled": {
          "Name": "TextScaled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextSize": {
          "Name": "TextSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextStrokeColor3": {
          "Name": "TextStrokeColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextStrokeTransparency": {
          "Name": "TextStrokeTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextTransparency": {
          "Name": "TextTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextTruncate": {
          "Name": "TextTruncate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextTruncate"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextWrap": {
          "Name": "TextWrap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextWrapped": {
          "Name": "TextWrapped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextXAlignment": {
          "Name": "TextXAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextXAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextYAlignment": {
          "Name": "TextYAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextYAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": true
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoButtonColor": {
          "Bool": true
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "Font": {
          "Enum": 0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "LineHeight": {
          "Float32": 1.0
        },
        "MaxVisibleGraphemes": {
          "Int32": -1
        },
        "Modal": {
          "Bool": false
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "RichText": {
          "Bool": false
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": true
        },
        "Selected": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Style": {
          "Enum": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Text": {
          "String": "Button"
        },
        "TextColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "TextScaled": {
          "Bool": false
        },
        "TextSize": {
          "Float32": 8.0
        },
        "TextStrokeColor3": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "TextStrokeTransparency": {
          "Float32": 1.0
        },
        "TextTransparency": {
          "Float32": 0.0
        },
        "TextTruncate": {
          "Enum": 0
        },
        "TextWrapped": {
          "Bool": false
        },
        "TextXAlignment": {
          "Enum": 2
        },
        "TextYAlignment": {
          "Enum": 1
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "TextChannel": {
      "Name": "TextChannel",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TextChatCommand": {
      "Name": "TextChatCommand",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrimaryAlias": {
          "Name": "PrimaryAlias",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SecondaryAlias": {
          "Name": "SecondaryAlias",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "PrimaryAlias": {
          "String": ""
        },
        "SecondaryAlias": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TextChatConfigurations": {
      "Name": "TextChatConfigurations",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TextChatMessage": {
      "Name": "TextChatMessage",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "MessageId": {
          "Name": "MessageId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Metadata": {
          "Name": "Metadata",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PrefixText": {
          "Name": "PrefixText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Status": {
          "Name": "Status",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextChatMessageStatus"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextChannel": {
          "Name": "TextChannel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextSource": {
          "Name": "TextSource",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "TextChatMessageProperties": {
      "Name": "TextChatMessageProperties",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "PrefixText": {
          "Name": "PrefixText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TextChatService": {
      "Name": "TextChatService",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ChatVersion": {
          "Name": "ChatVersion",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "ChatVersion"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CreateDefaultCommands": {
          "Name": "CreateDefaultCommands",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CreateDefaultTextChannels": {
          "Name": "CreateDefaultTextChannels",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "ChatVersion": {
          "Enum": 0
        },
        "CreateDefaultCommands": {
          "Bool": true
        },
        "CreateDefaultTextChannels": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TextFilterResult": {
      "Name": "TextFilterResult",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TextLabel": {
      "Name": "TextLabel",
      "Tags": [],
      "Superclass": "GuiLabel",
      "Properties": {
        "ContentText": {
          "Name": "ContentText",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Font": {
          "Name": "Font",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "Font"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FontSize": {
          "Name": "FontSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FontSize"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LineHeight": {
          "Name": "LineHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LocalizedText": {
          "Name": "LocalizedText",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxVisibleGraphemes": {
          "Name": "MaxVisibleGraphemes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RichText": {
          "Name": "RichText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextBounds": {
          "Name": "TextBounds",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextColor": {
          "Name": "TextColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextColor3": {
          "Name": "TextColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextFits": {
          "Name": "TextFits",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextScaled": {
          "Name": "TextScaled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextSize": {
          "Name": "TextSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextStrokeColor3": {
          "Name": "TextStrokeColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextStrokeTransparency": {
          "Name": "TextStrokeTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextTransparency": {
          "Name": "TextTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextTruncate": {
          "Name": "TextTruncate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextTruncate"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextWrap": {
          "Name": "TextWrap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextWrapped": {
          "Name": "TextWrapped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextXAlignment": {
          "Name": "TextXAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextXAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextYAlignment": {
          "Name": "TextYAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextYAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "Font": {
          "Enum": 0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "LineHeight": {
          "Float32": 1.0
        },
        "MaxVisibleGraphemes": {
          "Int32": -1
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "RichText": {
          "Bool": false
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Text": {
          "String": "Label"
        },
        "TextColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "TextScaled": {
          "Bool": false
        },
        "TextSize": {
          "Float32": 8.0
        },
        "TextStrokeColor3": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "TextStrokeTransparency": {
          "Float32": 1.0
        },
        "TextTransparency": {
          "Float32": 0.0
        },
        "TextTruncate": {
          "Enum": 0
        },
        "TextWrapped": {
          "Bool": false
        },
        "TextXAlignment": {
          "Enum": 2
        },
        "TextYAlignment": {
          "Enum": 1
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "TextService": {
      "Name": "TextService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TextSource": {
      "Name": "TextSource",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CanSend": {
          "Name": "CanSend",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UserId": {
          "Name": "UserId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Texture": {
      "Name": "Texture",
      "Tags": [],
      "Superclass": "Decal",
      "Properties": {
        "OffsetStudsU": {
          "Name": "OffsetStudsU",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OffsetStudsV": {
          "Name": "OffsetStudsV",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsPerTileU": {
          "Name": "StudsPerTileU",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsPerTileV": {
          "Name": "StudsPerTileV",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Face": {
          "Enum": 5
        },
        "OffsetStudsU": {
          "Float32": 0.0
        },
        "OffsetStudsV": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StudsPerTileU": {
          "Float32": 2.0
        },
        "StudsPerTileV": {
          "Float32": 2.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Texture": {
          "Content": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "ThirdPartyUserService": {
      "Name": "ThirdPartyUserService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ThreadState": {
      "Name": "ThreadState",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "FrameCount": {
          "Name": "FrameCount",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Populated": {
          "Name": "Populated",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ThreadId": {
          "Name": "ThreadId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ThreadName": {
          "Name": "ThreadName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "TimerService": {
      "Name": "TimerService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ToastNotificationService": {
      "Name": "ToastNotificationService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Tool": {
      "Name": "Tool",
      "Tags": [],
      "Superclass": "BackpackItem",
      "Properties": {
        "CanBeDropped": {
          "Name": "CanBeDropped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Grip": {
          "Name": "Grip",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GripForward": {
          "Name": "GripForward",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GripPos": {
          "Name": "GripPos",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GripRight": {
          "Name": "GripRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GripUp": {
          "Name": "GripUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ManualActivationOnly": {
          "Name": "ManualActivationOnly",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RequiresHandle": {
          "Name": "RequiresHandle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ToolTip": {
          "Name": "ToolTip",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CanBeDropped": {
          "Bool": true
        },
        "Enabled": {
          "Bool": true
        },
        "Grip": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "ManualActivationOnly": {
          "Bool": false
        },
        "RequiresHandle": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TextureId": {
          "Content": ""
        },
        "ToolTip": {
          "String": ""
        }
      }
    },
    "ToolboxService": {
      "Name": "ToolboxService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Torque": {
      "Name": "Torque",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "RelativeTo": {
          "Name": "RelativeTo",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorRelativeTo"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Torque": {
          "Name": "Torque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 23
        },
        "Enabled": {
          "Bool": true
        },
        "RelativeTo": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Torque": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "TorsionSpringConstraint": {
      "Name": "TorsionSpringConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "Coils": {
          "Name": "Coils",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentAngle": {
          "Name": "CurrentAngle",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Damping": {
          "Name": "Damping",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimitEnabled": {
          "Name": "LimitEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxAngle": {
          "Name": "MaxAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxTorque": {
          "Name": "MaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Restitution": {
          "Name": "Restitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Stiffness": {
          "Name": "Stiffness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Coils": {
          "Float32": 8.0
        },
        "Color": {
          "Int32": 200
        },
        "Damping": {
          "Float32": 0.01
        },
        "Enabled": {
          "Bool": true
        },
        "LimitEnabled": {
          "Bool": false
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "MaxAngle": {
          "Float32": 45.0
        },
        "MaxTorque": {
          "Float32": null
        },
        "Radius": {
          "Float32": 0.4
        },
        "Restitution": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Stiffness": {
          "Float32": 100.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "TotalCountTimeIntervalItem": {
      "Name": "TotalCountTimeIntervalItem",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "StatsItem",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TouchInputService": {
      "Name": "TouchInputService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TouchTransmitter": {
      "Name": "TouchTransmitter",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TracerService": {
      "Name": "TracerService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TrackerStreamAnimation": {
      "Name": "TrackerStreamAnimation",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Trail": {
      "Name": "Trail",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Attachment0": {
          "Name": "Attachment0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Attachment1": {
          "Name": "Attachment1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "ColorSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FaceCamera": {
          "Name": "FaceCamera",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Lifetime": {
          "Name": "Lifetime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightEmission": {
          "Name": "LightEmission",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightInfluence": {
          "Name": "LightInfluence",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxLength": {
          "Name": "MaxLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MinLength": {
          "Name": "MinLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Texture": {
          "Name": "Texture",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureLength": {
          "Name": "TextureLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureMode": {
          "Name": "TextureMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextureMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WidthScale": {
          "Name": "WidthScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "Color": {
          "ColorSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              },
              {
                "time": 1.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              }
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "FaceCamera": {
          "Bool": false
        },
        "Lifetime": {
          "Float32": 2.0
        },
        "LightEmission": {
          "Float32": 0.0
        },
        "LightInfluence": {
          "Float32": 0.0
        },
        "MaxLength": {
          "Float32": 0.0
        },
        "MinLength": {
          "Float32": 0.1
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Texture": {
          "Content": ""
        },
        "TextureLength": {
          "Float32": 1.0
        },
        "TextureMode": {
          "Enum": 0
        },
        "Transparency": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 0.5,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 0.5,
                "envelope": 0.0
              }
            ]
          }
        },
        "WidthScale": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 1.0,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 1.0,
                "envelope": 0.0
              }
            ]
          }
        }
      }
    },
    "Translator": {
      "Name": "Translator",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "LocaleId": {
          "Name": "LocaleId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "TremoloSoundEffect": {
      "Name": "TremoloSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Depth": {
          "Name": "Depth",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Duty": {
          "Name": "Duty",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Frequency": {
          "Name": "Frequency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Depth": {
          "Float32": 1.0
        },
        "Duty": {
          "Float32": 0.5
        },
        "Enabled": {
          "Bool": true
        },
        "Frequency": {
          "Float32": 5.0
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TriangleMeshPart": {
      "Name": "TriangleMeshPart",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "BasePart",
      "Properties": {
        "CollisionFidelity": {
          "Name": "CollisionFidelity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "CollisionFidelity"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "TrussPart": {
      "Name": "TrussPart",
      "Tags": [],
      "Superclass": "BasePart",
      "Properties": {
        "Style": {
          "Name": "Style",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "Style"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 5
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 5
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 5
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 5
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 5
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            2.0,
            2.0,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 5
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "Tween": {
      "Name": "Tween",
      "Tags": [],
      "Superclass": "TweenBase",
      "Properties": {
        "Instance": {
          "Name": "Instance",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TweenBase": {
      "Name": "TweenBase",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "PlaybackState": {
          "Name": "PlaybackState",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "PlaybackState"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "TweenService": {
      "Name": "TweenService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UGCValidationService": {
      "Name": "UGCValidationService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UIAspectRatioConstraint": {
      "Name": "UIAspectRatioConstraint",
      "Tags": [],
      "Superclass": "UIConstraint",
      "Properties": {
        "AspectRatio": {
          "Name": "AspectRatio",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AspectType": {
          "Name": "AspectType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AspectType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DominantAxis": {
          "Name": "DominantAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DominantAxis"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AspectRatio": {
          "Float32": 1.0
        },
        "AspectType": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "DominantAxis": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UIBase": {
      "Name": "UIBase",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UIComponent": {
      "Name": "UIComponent",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "UIBase",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UIConstraint": {
      "Name": "UIConstraint",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "UIComponent",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UICorner": {
      "Name": "UICorner",
      "Tags": [],
      "Superclass": "UIComponent",
      "Properties": {
        "CornerRadius": {
          "Name": "CornerRadius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CornerRadius": {
          "UDim": [
            0.0,
            8
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UIGradient": {
      "Name": "UIGradient",
      "Tags": [],
      "Superclass": "UIComponent",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "ColorSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Offset": {
          "Name": "Offset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rotation": {
          "Name": "Rotation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "ColorSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              },
              {
                "time": 1.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              }
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "Offset": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Rotation": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 0.0,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 0.0,
                "envelope": 0.0
              }
            ]
          }
        }
      }
    },
    "UIGridLayout": {
      "Name": "UIGridLayout",
      "Tags": [],
      "Superclass": "UIGridStyleLayout",
      "Properties": {
        "AbsoluteCellCount": {
          "Name": "AbsoluteCellCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AbsoluteCellSize": {
          "Name": "AbsoluteCellSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CellPadding": {
          "Name": "CellPadding",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CellSize": {
          "Name": "CellSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FillDirectionMaxCells": {
          "Name": "FillDirectionMaxCells",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StartCorner": {
          "Name": "StartCorner",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "StartCorner"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CellPadding": {
          "UDim2": [
            [
              0.0,
              5
            ],
            [
              0.0,
              5
            ]
          ]
        },
        "CellSize": {
          "UDim2": [
            [
              0.0,
              100
            ],
            [
              0.0,
              100
            ]
          ]
        },
        "FillDirection": {
          "Enum": 0
        },
        "FillDirectionMaxCells": {
          "Int32": 0
        },
        "HorizontalAlignment": {
          "Enum": 1
        },
        "SortOrder": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StartCorner": {
          "Enum": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "VerticalAlignment": {
          "Enum": 1
        }
      }
    },
    "UIGridStyleLayout": {
      "Name": "UIGridStyleLayout",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "UILayout",
      "Properties": {
        "AbsoluteContentSize": {
          "Name": "AbsoluteContentSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FillDirection": {
          "Name": "FillDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FillDirection"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HorizontalAlignment": {
          "Name": "HorizontalAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HorizontalAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SortOrder": {
          "Name": "SortOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SortOrder"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VerticalAlignment": {
          "Name": "VerticalAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "VerticalAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "UILayout": {
      "Name": "UILayout",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "UIComponent",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UIListLayout": {
      "Name": "UIListLayout",
      "Tags": [],
      "Superclass": "UIGridStyleLayout",
      "Properties": {
        "Padding": {
          "Name": "Padding",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "FillDirection": {
          "Enum": 1
        },
        "HorizontalAlignment": {
          "Enum": 1
        },
        "Padding": {
          "UDim": [
            0.0,
            0
          ]
        },
        "SortOrder": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "VerticalAlignment": {
          "Enum": 1
        }
      }
    },
    "UIPadding": {
      "Name": "UIPadding",
      "Tags": [],
      "Superclass": "UIComponent",
      "Properties": {
        "PaddingBottom": {
          "Name": "PaddingBottom",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PaddingLeft": {
          "Name": "PaddingLeft",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PaddingRight": {
          "Name": "PaddingRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PaddingTop": {
          "Name": "PaddingTop",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "PaddingBottom": {
          "UDim": [
            0.0,
            0
          ]
        },
        "PaddingLeft": {
          "UDim": [
            0.0,
            0
          ]
        },
        "PaddingRight": {
          "UDim": [
            0.0,
            0
          ]
        },
        "PaddingTop": {
          "UDim": [
            0.0,
            0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UIPageLayout": {
      "Name": "UIPageLayout",
      "Tags": [],
      "Superclass": "UIGridStyleLayout",
      "Properties": {
        "Animated": {
          "Name": "Animated",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Circular": {
          "Name": "Circular",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentPage": {
          "Name": "CurrentPage",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EasingDirection": {
          "Name": "EasingDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "EasingDirection"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EasingStyle": {
          "Name": "EasingStyle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "EasingStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GamepadInputEnabled": {
          "Name": "GamepadInputEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Padding": {
          "Name": "Padding",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScrollWheelInputEnabled": {
          "Name": "ScrollWheelInputEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TouchInputEnabled": {
          "Name": "TouchInputEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TweenTime": {
          "Name": "TweenTime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Animated": {
          "Bool": true
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Circular": {
          "Bool": false
        },
        "EasingDirection": {
          "Enum": 1
        },
        "EasingStyle": {
          "Enum": 2
        },
        "FillDirection": {
          "Enum": 0
        },
        "GamepadInputEnabled": {
          "Bool": true
        },
        "HorizontalAlignment": {
          "Enum": 1
        },
        "Padding": {
          "UDim": [
            0.0,
            0
          ]
        },
        "ScrollWheelInputEnabled": {
          "Bool": true
        },
        "SortOrder": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TouchInputEnabled": {
          "Bool": true
        },
        "TweenTime": {
          "Float32": 1.0
        },
        "VerticalAlignment": {
          "Enum": 1
        }
      }
    },
    "UIScale": {
      "Name": "UIScale",
      "Tags": [],
      "Superclass": "UIComponent",
      "Properties": {
        "Scale": {
          "Name": "Scale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Scale": {
          "Float32": 1.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UISizeConstraint": {
      "Name": "UISizeConstraint",
      "Tags": [],
      "Superclass": "UIConstraint",
      "Properties": {
        "MaxSize": {
          "Name": "MaxSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MinSize": {
          "Name": "MinSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MaxSize": {
          "Vector2": [
            null,
            null
          ]
        },
        "MinSize": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UIStroke": {
      "Name": "UIStroke",
      "Tags": [],
      "Superclass": "UIComponent",
      "Properties": {
        "ApplyStrokeMode": {
          "Name": "ApplyStrokeMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ApplyStrokeMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LineJoinMode": {
          "Name": "LineJoinMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "LineJoinMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Thickness": {
          "Name": "Thickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ApplyStrokeMode": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Enabled": {
          "Bool": true
        },
        "LineJoinMode": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Thickness": {
          "Float32": 1.0
        },
        "Transparency": {
          "Float32": 0.0
        }
      }
    },
    "UITableLayout": {
      "Name": "UITableLayout",
      "Tags": [],
      "Superclass": "UIGridStyleLayout",
      "Properties": {
        "FillEmptySpaceColumns": {
          "Name": "FillEmptySpaceColumns",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FillEmptySpaceRows": {
          "Name": "FillEmptySpaceRows",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MajorAxis": {
          "Name": "MajorAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TableMajorAxis"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Padding": {
          "Name": "Padding",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "FillDirection": {
          "Enum": 1
        },
        "FillEmptySpaceColumns": {
          "Bool": false
        },
        "FillEmptySpaceRows": {
          "Bool": false
        },
        "HorizontalAlignment": {
          "Enum": 1
        },
        "MajorAxis": {
          "Enum": 0
        },
        "Padding": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SortOrder": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "VerticalAlignment": {
          "Enum": 1
        }
      }
    },
    "UITextSizeConstraint": {
      "Name": "UITextSizeConstraint",
      "Tags": [],
      "Superclass": "UIConstraint",
      "Properties": {
        "MaxTextSize": {
          "Name": "MaxTextSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MinTextSize": {
          "Name": "MinTextSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MaxTextSize": {
          "Int32": 100
        },
        "MinTextSize": {
          "Int32": 1
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UnionOperation": {
      "Name": "UnionOperation",
      "Tags": [],
      "Superclass": "PartOperation",
      "Properties": {},
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "AssetId": {
          "Content": ""
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 0
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            255,
            255,
            255
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RenderFidelity": {
          "Enum": 1
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SmoothingAngle": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 0
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "UsePartColor": {
          "Bool": false
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "UniversalConstraint": {
      "Name": "UniversalConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxAngle": {
          "Name": "MaxAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Restitution": {
          "Name": "Restitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 1009
        },
        "Enabled": {
          "Bool": true
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "MaxAngle": {
          "Float32": 45.0
        },
        "Radius": {
          "Float32": 0.2
        },
        "Restitution": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "UnvalidatedAssetService": {
      "Name": "UnvalidatedAssetService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UserGameSettings": {
      "Name": "UserGameSettings",
      "Tags": [
        "NotCreatable",
        "UserSettings"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllTutorialsDisabled": {
          "Name": "AllTutorialsDisabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMode": {
          "Name": "CameraMode",
          "Scriptability": "None",
          "DataType": {
            "Enum": "CustomCameraMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraYInverted": {
          "Name": "CameraYInverted",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ChatVisible": {
          "Name": "ChatVisible",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ComputerCameraMovementMode": {
          "Name": "ComputerCameraMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ComputerCameraMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ComputerMovementMode": {
          "Name": "ComputerMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ComputerMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ControlMode": {
          "Name": "ControlMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ControlMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DefaultCameraID": {
          "Name": "DefaultCameraID",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Fullscreen": {
          "Name": "Fullscreen",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GamepadCameraSensitivity": {
          "Name": "GamepadCameraSensitivity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GraphicsQualityLevel": {
          "Name": "GraphicsQualityLevel",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HasEverUsedVR": {
          "Name": "HasEverUsedVR",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsUsingCameraYInverted": {
          "Name": "IsUsingCameraYInverted",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsUsingGamepadCameraSensitivity": {
          "Name": "IsUsingGamepadCameraSensitivity",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MasterVolume": {
          "Name": "MasterVolume",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MicroProfilerWebServerEnabled": {
          "Name": "MicroProfilerWebServerEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MicroProfilerWebServerIP": {
          "Name": "MicroProfilerWebServerIP",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MicroProfilerWebServerPort": {
          "Name": "MicroProfilerWebServerPort",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MouseSensitivity": {
          "Name": "MouseSensitivity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MouseSensitivityFirstPerson": {
          "Name": "MouseSensitivityFirstPerson",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MouseSensitivityThirdPerson": {
          "Name": "MouseSensitivityThirdPerson",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OnScreenProfilerEnabled": {
          "Name": "OnScreenProfilerEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OnboardingsCompleted": {
          "Name": "OnboardingsCompleted",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PerformanceStatsVisible": {
          "Name": "PerformanceStatsVisible",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RCCProfilerRecordFrameRate": {
          "Name": "RCCProfilerRecordFrameRate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RCCProfilerRecordTimeFrame": {
          "Name": "RCCProfilerRecordTimeFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RotationType": {
          "Name": "RotationType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RotationType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SavedQualityLevel": {
          "Name": "SavedQualityLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SavedQualitySetting"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StartMaximized": {
          "Name": "StartMaximized",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StartScreenPosition": {
          "Name": "StartScreenPosition",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StartScreenSize": {
          "Name": "StartScreenSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TouchCameraMovementMode": {
          "Name": "TouchCameraMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TouchCameraMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TouchMovementMode": {
          "Name": "TouchMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TouchMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UsedCoreGuiIsVisibleToggle": {
          "Name": "UsedCoreGuiIsVisibleToggle",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UsedCustomGuiIsVisibleToggle": {
          "Name": "UsedCustomGuiIsVisibleToggle",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UsedHideHudShortcut": {
          "Name": "UsedHideHudShortcut",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VREnabled": {
          "Name": "VREnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VRRotationIntensity": {
          "Name": "VRRotationIntensity",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VignetteEnabled": {
          "Name": "VignetteEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "UserInputService": {
      "Name": "UserInputService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AccelerometerEnabled": {
          "Name": "AccelerometerEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "BottomBarSize": {
          "Name": "BottomBarSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GamepadEnabled": {
          "Name": "GamepadEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GazeSelectionEnabled": {
          "Name": "GazeSelectionEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GyroscopeEnabled": {
          "Name": "GyroscopeEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "KeyboardEnabled": {
          "Name": "KeyboardEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LegacyInputEventsEnabled": {
          "Name": "LegacyInputEventsEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ModalEnabled": {
          "Name": "ModalEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MouseBehavior": {
          "Name": "MouseBehavior",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "MouseBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MouseDeltaSensitivity": {
          "Name": "MouseDeltaSensitivity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MouseEnabled": {
          "Name": "MouseEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MouseIconEnabled": {
          "Name": "MouseIconEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NavBarSize": {
          "Name": "NavBarSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "OnScreenKeyboardAnimationDuration": {
          "Name": "OnScreenKeyboardAnimationDuration",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "OnScreenKeyboardPosition": {
          "Name": "OnScreenKeyboardPosition",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "OnScreenKeyboardSize": {
          "Name": "OnScreenKeyboardSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "OnScreenKeyboardVisible": {
          "Name": "OnScreenKeyboardVisible",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "OverrideMouseIconBehavior": {
          "Name": "OverrideMouseIconBehavior",
          "Scriptability": "None",
          "DataType": {
            "Enum": "OverrideMouseIconBehavior"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightBarSize": {
          "Name": "RightBarSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "StatusBarSize": {
          "Name": "StatusBarSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TouchEnabled": {
          "Name": "TouchEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UserHeadCFrame": {
          "Name": "UserHeadCFrame",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VREnabled": {
          "Name": "VREnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "UserService": {
      "Name": "UserService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UserSettings": {
      "Name": "UserSettings",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GenericSettings",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UserStorageService": {
      "Name": "UserStorageService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "LocalStorageService",
      "Properties": {},
      "DefaultProperties": {}
    },
    "VRService": {
      "Name": "VRService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "DidPointerHit": {
          "Name": "DidPointerHit",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GuiInputUserCFrame": {
          "Name": "GuiInputUserCFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "UserCFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PointerHitCFrame": {
          "Name": "PointerHitCFrame",
          "Scriptability": "None",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VRDeviceAvailable": {
          "Name": "VRDeviceAvailable",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VRDeviceName": {
          "Name": "VRDeviceName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VREnabled": {
          "Name": "VREnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ValueBase": {
      "Name": "ValueBase",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Vector3Curve": {
      "Name": "Vector3Curve",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Vector3Value": {
      "Name": "Vector3Value",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "VectorForce": {
      "Name": "VectorForce",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "ApplyAtCenterOfMass": {
          "Name": "ApplyAtCenterOfMass",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Force": {
          "Name": "Force",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RelativeTo": {
          "Name": "RelativeTo",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorRelativeTo"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ApplyAtCenterOfMass": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 23
        },
        "Enabled": {
          "Bool": true
        },
        "Force": {
          "Vector3": [
            1000.0,
            0.0,
            0.0
          ]
        },
        "RelativeTo": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "VehicleController": {
      "Name": "VehicleController",
      "Tags": [],
      "Superclass": "Controller",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VehicleSeat": {
      "Name": "VehicleSeat",
      "Tags": [],
      "Superclass": "BasePart",
      "Properties": {
        "AreHingesDetected": {
          "Name": "AreHingesDetected",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Disabled": {
          "Name": "Disabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HeadsUpDisplay": {
          "Name": "HeadsUpDisplay",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxSpeed": {
          "Name": "MaxSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Occupant": {
          "Name": "Occupant",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Steer": {
          "Name": "Steer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SteerFloat": {
          "Name": "SteerFloat",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Throttle": {
          "Name": "Throttle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ThrottleFloat": {
          "Name": "ThrottleFloat",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Torque": {
          "Name": "Torque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TurnSpeed": {
          "Name": "TurnSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "Disabled": {
          "Bool": false
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "HeadsUpDisplay": {
          "Bool": true
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "MaxSpeed": {
          "Float32": 25.0
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Steer": {
          "Int32": 0
        },
        "SteerFloat": {
          "Float32": 0.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Throttle": {
          "Int32": 0
        },
        "ThrottleFloat": {
          "Float32": 0.0
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Torque": {
          "Float32": 10.0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "TurnSpeed": {
          "Float32": 1.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "VelocityMotor": {
      "Name": "VelocityMotor",
      "Tags": [],
      "Superclass": "JointInstance",
      "Properties": {
        "CurrentAngle": {
          "Name": "CurrentAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DesiredAngle": {
          "Name": "DesiredAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Hole": {
          "Name": "Hole",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxVelocity": {
          "Name": "MaxVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CurrentAngle": {
          "Float32": 0.0
        },
        "DesiredAngle": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "MaxVelocity": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VersionControlService": {
      "Name": "VersionControlService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ScriptCollabEnabled": {
          "Name": "ScriptCollabEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "VideoCaptureService": {
      "Name": "VideoCaptureService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CameraID": {
          "Name": "CameraID",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VideoFrame": {
      "Name": "VideoFrame",
      "Tags": [],
      "Superclass": "GuiObject",
      "Properties": {
        "IsLoaded": {
          "Name": "IsLoaded",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Looped": {
          "Name": "Looped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Playing": {
          "Name": "Playing",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Resolution": {
          "Name": "Resolution",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TimeLength": {
          "Name": "TimeLength",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TimePosition": {
          "Name": "TimePosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Video": {
          "Name": "Video",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Volume": {
          "Name": "Volume",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "Looped": {
          "Bool": false
        },
        "Playing": {
          "Bool": false
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TimePosition": {
          "Float64": 0.0
        },
        "Video": {
          "Content": ""
        },
        "Visible": {
          "Bool": true
        },
        "Volume": {
          "Float32": 1.0
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "ViewportFrame": {
      "Name": "ViewportFrame",
      "Tags": [],
      "Superclass": "GuiObject",
      "Properties": {
        "Ambient": {
          "Name": "Ambient",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentCamera": {
          "Name": "CurrentCamera",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ImageColor3": {
          "Name": "ImageColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageTransparency": {
          "Name": "ImageTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightColor": {
          "Name": "LightColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightDirection": {
          "Name": "LightDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "Ambient": {
          "Color3": [
            0.78431374,
            0.78431374,
            0.78431374
          ]
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "ImageColor3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "ImageTransparency": {
          "Float32": 0.0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "LightColor": {
          "Color3": [
            0.54901963,
            0.54901963,
            0.54901963
          ]
        },
        "LightDirection": {
          "Vector3": [
            -1.0,
            -1.0,
            -1.0
          ]
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "VirtualInputManager": {
      "Name": "VirtualInputManager",
      "Tags": [
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AdditionalLuaState": {
          "Name": "AdditionalLuaState",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VirtualUser": {
      "Name": "VirtualUser",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "VisibilityService": {
      "Name": "VisibilityService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Visit": {
      "Name": "Visit",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "VoiceChannel": {
      "Name": "VoiceChannel",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VoiceChatInternal": {
      "Name": "VoiceChatInternal",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "VoiceChatState": {
          "Name": "VoiceChatState",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "VoiceChatState"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VoiceChatService": {
      "Name": "VoiceChatService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "EnableDefaultVoice": {
          "Name": "EnableDefaultVoice",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VoiceChatEnabledForPlaceOnRcc": {
          "Name": "VoiceChatEnabledForPlaceOnRcc",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VoiceChatEnabledForUniverseOnRcc": {
          "Name": "VoiceChatEnabledForUniverseOnRcc",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "EnableDefaultVoice": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VoiceSource": {
      "Name": "VoiceSource",
      "Tags": [
        "Deprecated",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "UserId": {
          "Name": "UserId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "WedgePart": {
      "Name": "WedgePart",
      "Tags": [],
      "Superclass": "FormFactorPart",
      "Properties": {},
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FormFactor": {
          "Enum": 1
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 0
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "Weld": {
      "Name": "Weld",
      "Tags": [],
      "Superclass": "JointInstance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "WeldConstraint": {
      "Name": "WeldConstraint",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Part0": {
          "Name": "Part0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "Part0Internal"
              }
            }
          }
        },
        "Part0Internal": {
          "Name": "Part0Internal",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Part0"
            }
          }
        },
        "Part1": {
          "Name": "Part1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "Part1Internal"
              }
            }
          }
        },
        "Part1Internal": {
          "Name": "Part1Internal",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Part1"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Workspace": {
      "Name": "Workspace",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "WorldRoot",
      "Properties": {
        "AllowThirdPartySales": {
          "Name": "AllowThirdPartySales",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AnimationWeightedBlendFix": {
          "Name": "AnimationWeightedBlendFix",
          "Scriptability": "None",
          "DataType": {
            "Enum": "NewAnimationRuntimeSetting"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClientAnimatorThrottling": {
          "Name": "ClientAnimatorThrottling",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ClientAnimatorThrottlingMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CollisionGroups": {
          "Name": "CollisionGroups",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentCamera": {
          "Name": "CurrentCamera",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DistributedGameTime": {
          "Name": "DistributedGameTime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ExplicitAutoJoints": {
          "Name": "ExplicitAutoJoints",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FallenPartsDestroyHeight": {
          "Name": "FallenPartsDestroyHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FilteringEnabled": {
          "Name": "FilteringEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GlobalWind": {
          "Name": "GlobalWind",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Gravity": {
          "Name": "Gravity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HumanoidOnlySetCollisionsOnStateChange": {
          "Name": "HumanoidOnlySetCollisionsOnStateChange",
          "Scriptability": "None",
          "DataType": {
            "Enum": "HumanoidOnlySetCollisionsOnStateChange"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InterpolationThrottling": {
          "Name": "InterpolationThrottling",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InterpolationThrottlingMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshPartHeadsAndAccessories": {
          "Name": "MeshPartHeadsAndAccessories",
          "Scriptability": "None",
          "DataType": {
            "Enum": "MeshPartHeadsAndAccessories"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PhysicsInertiaAndVolumeFix": {
          "Name": "PhysicsInertiaAndVolumeFix",
          "Scriptability": "None",
          "DataType": {
            "Enum": "PhysicsInertiaAndVolumeFix"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PhysicsSimulationRate": {
          "Name": "PhysicsSimulationRate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "PhysicsSimulationRate"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PhysicsSteppingMethod": {
          "Name": "PhysicsSteppingMethod",
          "Scriptability": "None",
          "DataType": {
            "Enum": "PhysicsSteppingMethod"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReplicateInstanceDestroySetting": {
          "Name": "ReplicateInstanceDestroySetting",
          "Scriptability": "None",
          "DataType": {
            "Enum": "ReplicateInstanceDestroySetting"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Retargeting": {
          "Name": "Retargeting",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AnimatorRetargetingMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SignalBehavior": {
          "Name": "SignalBehavior",
          "Scriptability": "None",
          "DataType": {
            "Enum": "SignalBehavior"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StreamOutBehavior": {
          "Name": "StreamOutBehavior",
          "Scriptability": "None",
          "DataType": {
            "Enum": "StreamOutBehavior"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StreamingEnabled": {
          "Name": "StreamingEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StreamingMinRadius": {
          "Name": "StreamingMinRadius",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StreamingPauseMode": {
          "Name": "StreamingPauseMode",
          "Scriptability": "None",
          "DataType": {
            "Enum": "StreamingPauseMode"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StreamingTargetRadius": {
          "Name": "StreamingTargetRadius",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Terrain": {
          "Name": "Terrain",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TouchesUseCollisionGroups": {
          "Name": "TouchesUseCollisionGroups",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AllowThirdPartySales": {
          "Bool": false
        },
        "AnimationWeightedBlendFix": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "ClientAnimatorThrottling": {
          "Enum": 0
        },
        "CollisionGroups": {
          "String": "Default^0^-1"
        },
        "DistributedGameTime": {
          "Float64": 0.0
        },
        "ExplicitAutoJoints": {
          "Bool": true
        },
        "FallenPartsDestroyHeight": {
          "Float32": -500.0
        },
        "GlobalWind": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Gravity": {
          "Float32": 196.2
        },
        "HumanoidOnlySetCollisionsOnStateChange": {
          "Enum": 0
        },
        "InterpolationThrottling": {
          "Enum": 0
        },
        "LevelOfDetail": {
          "Enum": 0
        },
        "MeshPartHeadsAndAccessories": {
          "Enum": 0
        },
        "PhysicsInertiaAndVolumeFix": {
          "Enum": 0
        },
        "PhysicsSteppingMethod": {
          "Enum": 0
        },
        "ReplicateInstanceDestroySetting": {
          "Enum": 0
        },
        "Retargeting": {
          "Enum": 0
        },
        "SignalBehavior": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StreamOutBehavior": {
          "Enum": 0
        },
        "StreamingEnabled": {
          "Bool": false
        },
        "StreamingMinRadius": {
          "Int32": 64
        },
        "StreamingPauseMode": {
          "Enum": 0
        },
        "StreamingTargetRadius": {
          "Int32": 1024
        },
        "Tags": {
          "BinaryString": ""
        },
        "TouchesUseCollisionGroups": {
          "Bool": false
        }
      }
    },
    "WorldModel": {
      "Name": "WorldModel",
      "Tags": [],
      "Superclass": "WorldRoot",
      "Properties": {},
      "DefaultProperties": {}
    },
    "WorldRoot": {
      "Name": "WorldRoot",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Model",
      "Properties": {},
      "DefaultProperties": {}
    },
    "WrapLayer": {
      "Name": "WrapLayer",
      "Tags": [],
      "Superclass": "BaseWrap",
      "Properties": {
        "AutoSkin": {
          "Name": "AutoSkin",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "WrapLayerAutoSkin"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BindOffset": {
          "Name": "BindOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "None",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DebugMode": {
          "Name": "DebugMode",
          "Scriptability": "None",
          "DataType": {
            "Enum": "WrapLayerDebugMode"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Order": {
          "Name": "Order",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Puffiness": {
          "Name": "Puffiness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReferenceMeshId": {
          "Name": "ReferenceMeshId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReferenceOrigin": {
          "Name": "ReferenceOrigin",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReferenceOriginWorld": {
          "Name": "ReferenceOriginWorld",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShrinkFactor": {
          "Name": "ShrinkFactor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutoSkin": {
          "Enum": 0
        },
        "BindOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CageMeshId": {
          "Content": ""
        },
        "CageOrigin": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "HSRAssetId": {
          "Content": ""
        },
        "ImportOrigin": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Order": {
          "Int32": 1
        },
        "Puffiness": {
          "Float32": 1.0
        },
        "ReferenceMeshId": {
          "Content": ""
        },
        "ReferenceOrigin": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "ShrinkFactor": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "WrapTarget": {
      "Name": "WrapTarget",
      "Tags": [],
      "Superclass": "BaseWrap",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "None",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DebugMode": {
          "Name": "DebugMode",
          "Scriptability": "None",
          "DataType": {
            "Enum": "WrapTargetDebugMode"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Stiffness": {
          "Name": "Stiffness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CageMeshId": {
          "Content": ""
        },
        "CageOrigin": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "HSRAssetId": {
          "Content": ""
        },
        "ImportOrigin": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Stiffness": {
          "Float32": 0.0
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    }
  },
  "Enums": {
    "ABTestLoadingStatus": {
      "name": "ABTestLoadingStatus",
      "items": {
        "Error": 3,
        "Initialized": 2,
        "None": 0,
        "Pending": 1,
        "ShutOff": 5,
        "TimedOut": 4
      }
    },
    "AccessoryType": {
      "name": "AccessoryType",
      "items": {
        "Back": 7,
        "DressSkirt": 17,
        "Eyebrow": 18,
        "Eyelash": 19,
        "Face": 3,
        "Front": 6,
        "Hair": 2,
        "Hat": 1,
        "Jacket": 12,
        "LeftShoe": 15,
        "Neck": 4,
        "Pants": 11,
        "RightShoe": 16,
        "Shirt": 10,
        "Shorts": 14,
        "Shoulder": 5,
        "Sweater": 13,
        "TShirt": 9,
        "Unknown": 0,
        "Waist": 8
      }
    },
    "ActionType": {
      "name": "ActionType",
      "items": {
        "Draw": 3,
        "Lose": 2,
        "Nothing": 0,
        "Pause": 1,
        "Win": 4
      }
    },
    "ActuatorRelativeTo": {
      "name": "ActuatorRelativeTo",
      "items": {
        "Attachment0": 0,
        "Attachment1": 1,
        "World": 2
      }
    },
    "ActuatorType": {
      "name": "ActuatorType",
      "items": {
        "Motor": 1,
        "None": 0,
        "Servo": 2
      }
    },
    "AdornCullingMode": {
      "name": "AdornCullingMode",
      "items": {
        "Automatic": 0,
        "Never": 1
      }
    },
    "AlignType": {
      "name": "AlignType",
      "items": {
        "Parallel": 0,
        "Perpendicular": 1
      }
    },
    "AlphaMode": {
      "name": "AlphaMode",
      "items": {
        "Overlay": 0,
        "Transparency": 1
      }
    },
    "AnalyticsEconomyAction": {
      "name": "AnalyticsEconomyAction",
      "items": {
        "Acquire": 1,
        "Default": 0,
        "Spend": 2
      }
    },
    "AnalyticsLogLevel": {
      "name": "AnalyticsLogLevel",
      "items": {
        "Debug": 1,
        "Error": 4,
        "Fatal": 5,
        "Information": 2,
        "Trace": 0,
        "Warning": 3
      }
    },
    "AnalyticsProgressionStatus": {
      "name": "AnalyticsProgressionStatus",
      "items": {
        "Abandon": 3,
        "Begin": 1,
        "Complete": 2,
        "Default": 0,
        "Fail": 4
      }
    },
    "AnimationPriority": {
      "name": "AnimationPriority",
      "items": {
        "Action": 2,
        "Action2": 3,
        "Action3": 4,
        "Action4": 5,
        "Core": 1000,
        "Idle": 0,
        "Movement": 1
      }
    },
    "AnimatorRetargetingMode": {
      "name": "AnimatorRetargetingMode",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "AppShellActionType": {
      "name": "AppShellActionType",
      "items": {
        "AvatarEditorPageLoaded": 10,
        "GamePageLoaded": 8,
        "HomePageLoaded": 9,
        "None": 0,
        "OpenApp": 1,
        "ReadConversation": 5,
        "TapAvatarTab": 4,
        "TapChatTab": 2,
        "TapConversationEntry": 3,
        "TapGamePageTab": 6,
        "TapHomePageTab": 7
      }
    },
    "AppShellFeature": {
      "name": "AppShellFeature",
      "items": {
        "AvatarEditor": 2,
        "Chat": 1,
        "GamePage": 3,
        "HomePage": 4,
        "Landing": 6,
        "More": 5,
        "None": 0
      }
    },
    "AppUpdateStatus": {
      "name": "AppUpdateStatus",
      "items": {
        "Available": 4,
        "Failed": 2,
        "NotAvailable": 3,
        "NotSupported": 1,
        "Unknown": 0
      }
    },
    "ApplyStrokeMode": {
      "name": "ApplyStrokeMode",
      "items": {
        "Border": 1,
        "Contextual": 0
      }
    },
    "AspectType": {
      "name": "AspectType",
      "items": {
        "FitWithinMaxSize": 0,
        "ScaleWithParentSize": 1
      }
    },
    "AssetFetchStatus": {
      "name": "AssetFetchStatus",
      "items": {
        "Failure": 1,
        "Success": 0
      }
    },
    "AssetType": {
      "name": "AssetType",
      "items": {
        "Animation": 24,
        "Audio": 3,
        "BackAccessory": 46,
        "Badge": 21,
        "ClimbAnimation": 48,
        "DeathAnimation": 49,
        "Decal": 13,
        "DressSkirtAccessory": 72,
        "EarAccessory": 57,
        "EmoteAnimation": 61,
        "EyeAccessory": 58,
        "EyebrowAccessory": 76,
        "EyelashAccessory": 77,
        "Face": 18,
        "FaceAccessory": 42,
        "FallAnimation": 50,
        "FrontAccessory": 45,
        "GamePass": 34,
        "Gear": 19,
        "HairAccessory": 41,
        "Hat": 8,
        "Head": 17,
        "IdleAnimation": 51,
        "Image": 1,
        "JacketAccessory": 67,
        "JumpAnimation": 52,
        "LeftArm": 29,
        "LeftLeg": 30,
        "LeftShoeAccessory": 70,
        "Lua": 5,
        "Mesh": 4,
        "MeshPart": 40,
        "Model": 10,
        "NeckAccessory": 43,
        "Package": 32,
        "Pants": 12,
        "PantsAccessory": 66,
        "Place": 9,
        "Plugin": 38,
        "PoseAnimation": 56,
        "RightArm": 28,
        "RightLeg": 31,
        "RightShoeAccessory": 71,
        "RunAnimation": 53,
        "Shirt": 11,
        "ShirtAccessory": 65,
        "ShortsAccessory": 69,
        "ShoulderAccessory": 44,
        "SweaterAccessory": 68,
        "SwimAnimation": 54,
        "TShirt": 2,
        "TShirtAccessory": 64,
        "Torso": 27,
        "Video": 62,
        "WaistAccessory": 47,
        "WalkAnimation": 55
      }
    },
    "AssetTypeVerification": {
      "name": "AssetTypeVerification",
      "items": {
        "Always": 3,
        "ClientOnly": 2,
        "Default": 1
      }
    },
    "AutoIndentRule": {
      "name": "AutoIndentRule",
      "items": {
        "Absolute": 1,
        "Off": 0,
        "Relative": 2
      }
    },
    "AutomaticSize": {
      "name": "AutomaticSize",
      "items": {
        "None": 0,
        "X": 1,
        "XY": 3,
        "Y": 2
      }
    },
    "AvatarAssetType": {
      "name": "AvatarAssetType",
      "items": {
        "BackAccessory": 46,
        "ClimbAnimation": 48,
        "DressSkirtAccessory": 72,
        "EmoteAnimation": 61,
        "EyebrowAccessory": 76,
        "EyelashAccessory": 77,
        "Face": 18,
        "FaceAccessory": 42,
        "FallAnimation": 50,
        "FrontAccessory": 45,
        "Gear": 19,
        "HairAccessory": 41,
        "Hat": 8,
        "Head": 17,
        "IdleAnimation": 51,
        "JacketAccessory": 67,
        "JumpAnimation": 52,
        "LeftArm": 29,
        "LeftLeg": 30,
        "LeftShoeAccessory": 70,
        "NeckAccessory": 43,
        "Pants": 12,
        "PantsAccessory": 66,
        "RightArm": 28,
        "RightLeg": 31,
        "RightShoeAccessory": 71,
        "RunAnimation": 53,
        "Shirt": 11,
        "ShirtAccessory": 65,
        "ShortsAccessory": 69,
        "ShoulderAccessory": 44,
        "SweaterAccessory": 68,
        "SwimAnimation": 54,
        "TShirt": 2,
        "TShirtAccessory": 64,
        "Torso": 27,
        "WaistAccessory": 47,
        "WalkAnimation": 55
      }
    },
    "AvatarContextMenuOption": {
      "name": "AvatarContextMenuOption",
      "items": {
        "Chat": 1,
        "Emote": 2,
        "Friend": 0,
        "InspectMenu": 3
      }
    },
    "AvatarItemType": {
      "name": "AvatarItemType",
      "items": {
        "Asset": 1,
        "Bundle": 2
      }
    },
    "AvatarPromptResult": {
      "name": "AvatarPromptResult",
      "items": {
        "Failed": 3,
        "PermissionDenied": 2,
        "Success": 1
      }
    },
    "Axis": {
      "name": "Axis",
      "items": {
        "X": 0,
        "Y": 1,
        "Z": 2
      }
    },
    "BinType": {
      "name": "BinType",
      "items": {
        "Clone": 3,
        "GameTool": 1,
        "Grab": 2,
        "Hammer": 4,
        "Script": 0
      }
    },
    "BodyPart": {
      "name": "BodyPart",
      "items": {
        "Head": 0,
        "LeftArm": 2,
        "LeftLeg": 4,
        "RightArm": 3,
        "RightLeg": 5,
        "Torso": 1
      }
    },
    "BodyPartR15": {
      "name": "BodyPartR15",
      "items": {
        "Head": 0,
        "LeftFoot": 3,
        "LeftHand": 9,
        "LeftLowerArm": 10,
        "LeftLowerLeg": 4,
        "LeftUpperArm": 11,
        "LeftUpperLeg": 5,
        "LowerTorso": 2,
        "RightFoot": 6,
        "RightHand": 12,
        "RightLowerArm": 13,
        "RightLowerLeg": 7,
        "RightUpperArm": 14,
        "RightUpperLeg": 8,
        "RootPart": 15,
        "Unknown": 17,
        "UpperTorso": 1
      }
    },
    "BorderMode": {
      "name": "BorderMode",
      "items": {
        "Inset": 2,
        "Middle": 1,
        "Outline": 0
      }
    },
    "BreakReason": {
      "name": "BreakReason",
      "items": {
        "Error": 1,
        "Other": 0,
        "SpecialBreakpoint": 2,
        "UserBreakpoint": 3
      }
    },
    "BreakpointRemoveReason": {
      "name": "BreakpointRemoveReason",
      "items": {
        "Requested": 0,
        "ScriptChanged": 1,
        "ScriptRemoved": 2
      }
    },
    "BulkMoveMode": {
      "name": "BulkMoveMode",
      "items": {
        "FireAllEvents": 0,
        "FireCFrameChanged": 1
      }
    },
    "BundleType": {
      "name": "BundleType",
      "items": {
        "Animations": 2,
        "BodyParts": 1,
        "Shoes": 3
      }
    },
    "Button": {
      "name": "Button",
      "items": {
        "Dismount": 8,
        "Jump": 32
      }
    },
    "ButtonStyle": {
      "name": "ButtonStyle",
      "items": {
        "Custom": 0,
        "RobloxButton": 2,
        "RobloxButtonDefault": 1,
        "RobloxRoundButton": 3,
        "RobloxRoundDefaultButton": 4,
        "RobloxRoundDropdownButton": 5
      }
    },
    "CageType": {
      "name": "CageType",
      "items": {
        "Inner": 0,
        "Outer": 1
      }
    },
    "CameraMode": {
      "name": "CameraMode",
      "items": {
        "Classic": 0,
        "LockFirstPerson": 1
      }
    },
    "CameraPanMode": {
      "name": "CameraPanMode",
      "items": {
        "Classic": 0,
        "EdgeBump": 1
      }
    },
    "CameraType": {
      "name": "CameraType",
      "items": {
        "Attach": 1,
        "Custom": 5,
        "Fixed": 0,
        "Follow": 4,
        "Orbital": 7,
        "Scriptable": 6,
        "Track": 3,
        "Watch": 2
      }
    },
    "CatalogCategoryFilter": {
      "name": "CatalogCategoryFilter",
      "items": {
        "Collectibles": 3,
        "CommunityCreations": 4,
        "Featured": 2,
        "None": 1,
        "Premium": 5,
        "Recommended": 6
      }
    },
    "CatalogSortType": {
      "name": "CatalogSortType",
      "items": {
        "MostFavorited": 5,
        "PriceHighToLow": 2,
        "PriceLowToHigh": 3,
        "RecentlyUpdated": 4,
        "Relevance": 1
      }
    },
    "CellBlock": {
      "name": "CellBlock",
      "items": {
        "CornerWedge": 2,
        "HorizontalWedge": 4,
        "InverseCornerWedge": 3,
        "Solid": 0,
        "VerticalWedge": 1
      }
    },
    "CellMaterial": {
      "name": "CellMaterial",
      "items": {
        "Aluminum": 7,
        "Asphalt": 5,
        "BluePlastic": 16,
        "Brick": 3,
        "Cement": 14,
        "CinderBlock": 12,
        "Empty": 0,
        "Gold": 8,
        "Granite": 4,
        "Grass": 1,
        "Gravel": 11,
        "Iron": 6,
        "MossyStone": 13,
        "RedPlastic": 15,
        "Sand": 2,
        "Water": 17,
        "WoodLog": 10,
        "WoodPlank": 9
      }
    },
    "CellOrientation": {
      "name": "CellOrientation",
      "items": {
        "NegX": 3,
        "NegZ": 0,
        "X": 1,
        "Z": 2
      }
    },
    "CenterDialogType": {
      "name": "CenterDialogType",
      "items": {
        "ModalDialog": 3,
        "PlayerInitiatedDialog": 2,
        "QuitDialog": 4,
        "UnsolicitedDialog": 1
      }
    },
    "ChatCallbackType": {
      "name": "ChatCallbackType",
      "items": {
        "OnClientFormattingMessage": 3,
        "OnClientSendingMessage": 2,
        "OnCreatingChatWindow": 1,
        "OnServerReceivingMessage": 17
      }
    },
    "ChatColor": {
      "name": "ChatColor",
      "items": {
        "Blue": 0,
        "Green": 1,
        "Red": 2,
        "White": 3
      }
    },
    "ChatMode": {
      "name": "ChatMode",
      "items": {
        "Menu": 0,
        "TextAndMenu": 1
      }
    },
    "ChatPrivacyMode": {
      "name": "ChatPrivacyMode",
      "items": {
        "AllUsers": 0,
        "Friends": 2,
        "NoOne": 1
      }
    },
    "ChatStyle": {
      "name": "ChatStyle",
      "items": {
        "Bubble": 1,
        "Classic": 0,
        "ClassicAndBubble": 2
      }
    },
    "ChatVersion": {
      "name": "ChatVersion",
      "items": {
        "LegacyChatService": 0,
        "TextChatService": 1
      }
    },
    "ClientAnimatorThrottlingMode": {
      "name": "ClientAnimatorThrottlingMode",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "CollisionFidelity": {
      "name": "CollisionFidelity",
      "items": {
        "Box": 2,
        "Default": 0,
        "Hull": 1,
        "PreciseConvexDecomposition": 3
      }
    },
    "CommandPermission": {
      "name": "CommandPermission",
      "items": {
        "LocalUser": 1,
        "Plugin": 0
      }
    },
    "ComputerCameraMovementMode": {
      "name": "ComputerCameraMovementMode",
      "items": {
        "CameraToggle": 4,
        "Classic": 1,
        "Default": 0,
        "Follow": 2,
        "Orbital": 3
      }
    },
    "ComputerMovementMode": {
      "name": "ComputerMovementMode",
      "items": {
        "ClickToMove": 2,
        "Default": 0,
        "KeyboardMouse": 1
      }
    },
    "ConnectionError": {
      "name": "ConnectionError",
      "items": {
        "DisconnectBadhash": 257,
        "DisconnectBlockedIP": 282,
        "DisconnectBySecurityPolicy": 281,
        "DisconnectClientFailure": 284,
        "DisconnectClientRequest": 285,
        "DisconnectCloudEditKick": 270,
        "DisconnectConnectionLost": 277,
        "DisconnectDevMaintenance": 274,
        "DisconnectDuplicatePlayer": 264,
        "DisconnectDuplicateTicket": 265,
        "DisconnectErrors": 256,
        "DisconnectEvicted": 273,
        "DisconnectHashTimeout": 269,
        "DisconnectIdle": 278,
        "DisconnectIllegalTeleport": 263,
        "DisconnectLuaKick": 267,
        "DisconnectModeratedGame": 287,
        "DisconnectNewSecurityKeyMismatch": 272,
        "DisconnectOnRemoteSysStats": 268,
        "DisconnectOutOfMemory": 286,
        "DisconnectOutOfMemoryExitContinue": 288,
        "DisconnectPlayerless": 271,
        "DisconnectProtocolMismatch": 259,
        "DisconnectRaknetErrors": 279,
        "DisconnectReceivePacketError": 260,
        "DisconnectReceivePacketStreamError": 261,
        "DisconnectRejoin": 276,
        "DisconnectRobloxMaintenance": 275,
        "DisconnectSecurityKeyMismatch": 258,
        "DisconnectSendPacketError": 262,
        "DisconnectTimeout": 266,
        "DisconnectWrongVersion": 280,
        "OK": 0,
        "PlacelaunchCustomMessage": 610,
        "PlacelaunchDisabled": 515,
        "PlacelaunchError": 516,
        "PlacelaunchErrors": 512,
        "PlacelaunchFlooded": 525,
        "PlacelaunchGameEnded": 517,
        "PlacelaunchGameFull": 518,
        "PlacelaunchHashException": 527,
        "PlacelaunchHashExpired": 526,
        "PlacelaunchHttpError": 529,
        "PlacelaunchOtherError": 611,
        "PlacelaunchPartyCannotFit": 528,
        "PlacelaunchRestricted": 523,
        "PlacelaunchUnauthorized": 524,
        "PlacelaunchUserLeft": 522,
        "TeleportErrors": 768,
        "TeleportFailure": 769,
        "TeleportFlooded": 774,
        "TeleportGameEnded": 771,
        "TeleportGameFull": 772,
        "TeleportGameNotFound": 770,
        "TeleportIsTeleporting": 775,
        "TeleportUnauthorized": 773
      }
    },
    "ConnectionState": {
      "name": "ConnectionState",
      "items": {
        "Connected": 0,
        "Disconnected": 1
      }
    },
    "ContextActionPriority": {
      "name": "ContextActionPriority",
      "items": {
        "Default": 2000,
        "High": 3000,
        "Low": 1000,
        "Medium": 2000
      }
    },
    "ContextActionResult": {
      "name": "ContextActionResult",
      "items": {
        "Pass": 1,
        "Sink": 0
      }
    },
    "ControlMode": {
      "name": "ControlMode",
      "items": {
        "Classic": 0,
        "MouseLockSwitch": 1
      }
    },
    "CoreGuiType": {
      "name": "CoreGuiType",
      "items": {
        "All": 4,
        "Backpack": 2,
        "Chat": 3,
        "EmotesMenu": 5,
        "Health": 1,
        "PlayerList": 0
      }
    },
    "CreateOutfitFailure": {
      "name": "CreateOutfitFailure",
      "items": {
        "InvalidName": 1,
        "Other": 3,
        "OutfitLimitReached": 2
      }
    },
    "CreatorType": {
      "name": "CreatorType",
      "items": {
        "Group": 1,
        "User": 0
      }
    },
    "CurrencyType": {
      "name": "CurrencyType",
      "items": {
        "Default": 0,
        "Robux": 1,
        "Tix": 2
      }
    },
    "CustomCameraMode": {
      "name": "CustomCameraMode",
      "items": {
        "Classic": 1,
        "Default": 0,
        "Follow": 2
      }
    },
    "DataStoreRequestType": {
      "name": "DataStoreRequestType",
      "items": {
        "GetAsync": 0,
        "GetSortedAsync": 3,
        "OnUpdate": 5,
        "SetIncrementAsync": 1,
        "SetIncrementSortedAsync": 4,
        "UpdateAsync": 2
      }
    },
    "DebuggerEndReason": {
      "name": "DebuggerEndReason",
      "items": {
        "ClientRequest": 0,
        "ConfigurationFailed": 6,
        "Disconnected": 3,
        "InvalidHost": 2,
        "RpcError": 7,
        "ServerProtocolMismatch": 5,
        "ServerShutdown": 4,
        "Timeout": 1
      }
    },
    "DebuggerExceptionBreakMode": {
      "name": "DebuggerExceptionBreakMode",
      "items": {
        "Always": 2,
        "Never": 0,
        "Unhandled": 1
      }
    },
    "DebuggerFrameType": {
      "name": "DebuggerFrameType",
      "items": {
        "C": 0,
        "Lua": 1
      }
    },
    "DebuggerPauseReason": {
      "name": "DebuggerPauseReason",
      "items": {
        "Breakpoint": 2,
        "Entrypoint": 5,
        "Exception": 3,
        "Requested": 1,
        "SingleStep": 4,
        "Unknown": 0
      }
    },
    "DebuggerStatus": {
      "name": "DebuggerStatus",
      "items": {
        "ConnectionClosed": 8,
        "ConnectionLost": 2,
        "InternalError": 4,
        "InvalidArgument": 7,
        "InvalidResponse": 3,
        "InvalidState": 5,
        "RpcError": 6,
        "Success": 0,
        "Timeout": 1
      }
    },
    "DevCameraOcclusionMode": {
      "name": "DevCameraOcclusionMode",
      "items": {
        "Invisicam": 1,
        "Zoom": 0
      }
    },
    "DevComputerCameraMovementMode": {
      "name": "DevComputerCameraMovementMode",
      "items": {
        "CameraToggle": 4,
        "Classic": 1,
        "Follow": 2,
        "Orbital": 3,
        "UserChoice": 0
      }
    },
    "DevComputerMovementMode": {
      "name": "DevComputerMovementMode",
      "items": {
        "ClickToMove": 2,
        "KeyboardMouse": 1,
        "Scriptable": 3,
        "UserChoice": 0
      }
    },
    "DevTouchCameraMovementMode": {
      "name": "DevTouchCameraMovementMode",
      "items": {
        "Classic": 1,
        "Follow": 2,
        "Orbital": 3,
        "UserChoice": 0
      }
    },
    "DevTouchMovementMode": {
      "name": "DevTouchMovementMode",
      "items": {
        "ClickToMove": 4,
        "DPad": 2,
        "DynamicThumbstick": 6,
        "Scriptable": 5,
        "Thumbpad": 3,
        "Thumbstick": 1,
        "UserChoice": 0
      }
    },
    "DeveloperMemoryTag": {
      "name": "DeveloperMemoryTag",
      "items": {
        "Animation": 22,
        "GeometryCSG": 24,
        "GraphicsMeshParts": 10,
        "GraphicsParticles": 11,
        "GraphicsParts": 12,
        "GraphicsSolidModels": 8,
        "GraphicsSpatialHash": 13,
        "GraphicsTerrain": 14,
        "GraphicsTexture": 15,
        "GraphicsTextureCharacter": 16,
        "Gui": 21,
        "HttpCache": 1,
        "Instances": 2,
        "Internal": 0,
        "LuaHeap": 4,
        "Navigation": 23,
        "PhysicsCollision": 6,
        "PhysicsParts": 7,
        "Script": 5,
        "Signals": 3,
        "Sounds": 17,
        "StreamingSounds": 18,
        "TerrainVoxels": 19
      }
    },
    "DeviceType": {
      "name": "DeviceType",
      "items": {
        "Desktop": 1,
        "Phone": 3,
        "Tablet": 2,
        "Unknown": 0
      }
    },
    "DialogBehaviorType": {
      "name": "DialogBehaviorType",
      "items": {
        "MultiplePlayers": 1,
        "SinglePlayer": 0
      }
    },
    "DialogPurpose": {
      "name": "DialogPurpose",
      "items": {
        "Help": 1,
        "Quest": 0,
        "Shop": 2
      }
    },
    "DialogTone": {
      "name": "DialogTone",
      "items": {
        "Enemy": 2,
        "Friendly": 1,
        "Neutral": 0
      }
    },
    "DominantAxis": {
      "name": "DominantAxis",
      "items": {
        "Height": 1,
        "Width": 0
      }
    },
    "DraftStatusCode": {
      "name": "DraftStatusCode",
      "items": {
        "DraftCommitted": 3,
        "DraftOutdated": 1,
        "OK": 0,
        "ScriptRemoved": 2
      }
    },
    "DraggerCoordinateSpace": {
      "name": "DraggerCoordinateSpace",
      "items": {
        "Object": 0,
        "World": 1
      }
    },
    "DraggerMovementMode": {
      "name": "DraggerMovementMode",
      "items": {
        "Geometric": 0,
        "Physical": 1
      }
    },
    "EasingDirection": {
      "name": "EasingDirection",
      "items": {
        "In": 0,
        "InOut": 2,
        "Out": 1
      }
    },
    "EasingStyle": {
      "name": "EasingStyle",
      "items": {
        "Back": 2,
        "Bounce": 6,
        "Circular": 9,
        "Cubic": 10,
        "Elastic": 7,
        "Exponential": 8,
        "Linear": 0,
        "Quad": 3,
        "Quart": 4,
        "Quint": 5,
        "Sine": 1
      }
    },
    "ElasticBehavior": {
      "name": "ElasticBehavior",
      "items": {
        "Always": 1,
        "Never": 2,
        "WhenScrollable": 0
      }
    },
    "EnviromentalPhysicsThrottle": {
      "name": "EnviromentalPhysicsThrottle",
      "items": {
        "Always": 2,
        "DefaultAuto": 0,
        "Disabled": 1,
        "Skip16": 6,
        "Skip2": 3,
        "Skip4": 4,
        "Skip8": 5
      }
    },
    "ExplosionType": {
      "name": "ExplosionType",
      "items": {
        "Craters": 1,
        "NoCraters": 0
      }
    },
    "FieldOfViewMode": {
      "name": "FieldOfViewMode",
      "items": {
        "Diagonal": 1,
        "MaxAxis": 2,
        "Vertical": 0
      }
    },
    "FillDirection": {
      "name": "FillDirection",
      "items": {
        "Horizontal": 0,
        "Vertical": 1
      }
    },
    "FilterResult": {
      "name": "FilterResult",
      "items": {
        "Accepted": 0,
        "Rejected": 1
      }
    },
    "Font": {
      "name": "Font",
      "items": {
        "AmaticSC": 21,
        "Antique": 15,
        "Arcade": 13,
        "Arial": 1,
        "ArialBold": 2,
        "Bangers": 22,
        "Bodoni": 7,
        "Cartoon": 9,
        "Code": 10,
        "Creepster": 23,
        "DenkOne": 24,
        "Fantasy": 14,
        "Fondamento": 25,
        "FredokaOne": 26,
        "Garamond": 8,
        "Gotham": 17,
        "GothamBlack": 20,
        "GothamBold": 19,
        "GothamMedium": 18,
        "GrenzeGotisch": 27,
        "Highway": 11,
        "IndieFlower": 28,
        "JosefinSans": 29,
        "Jura": 30,
        "Kalam": 31,
        "Legacy": 0,
        "LuckiestGuy": 32,
        "Merriweather": 33,
        "Michroma": 34,
        "Nunito": 35,
        "Oswald": 36,
        "PatrickHand": 37,
        "PermanentMarker": 38,
        "Roboto": 39,
        "RobotoCondensed": 40,
        "RobotoMono": 41,
        "Sarpanch": 42,
        "SciFi": 12,
        "SourceSans": 3,
        "SourceSansBold": 4,
        "SourceSansItalic": 6,
        "SourceSansLight": 5,
        "SourceSansSemibold": 16,
        "SpecialElite": 43,
        "TitilliumWeb": 44,
        "Ubuntu": 45,
        "Unknown": 100
      }
    },
    "FontSize": {
      "name": "FontSize",
      "items": {
        "Size10": 2,
        "Size11": 3,
        "Size12": 4,
        "Size14": 5,
        "Size18": 6,
        "Size24": 7,
        "Size28": 10,
        "Size32": 11,
        "Size36": 8,
        "Size42": 12,
        "Size48": 9,
        "Size60": 13,
        "Size8": 0,
        "Size9": 1,
        "Size96": 14
      }
    },
    "FontStyle": {
      "name": "FontStyle",
      "items": {
        "Italic": 1,
        "Normal": 0
      }
    },
    "FontWeight": {
      "name": "FontWeight",
      "items": {
        "Bold": 700,
        "ExtraBold": 800,
        "ExtraLight": 200,
        "Heavy": 900,
        "Light": 300,
        "Medium": 500,
        "Regular": 400,
        "SemiBold": 600,
        "Thin": 100
      }
    },
    "FormFactor": {
      "name": "FormFactor",
      "items": {
        "Brick": 1,
        "Custom": 3,
        "Plate": 2,
        "Symmetric": 0
      }
    },
    "FrameStyle": {
      "name": "FrameStyle",
      "items": {
        "ChatBlue": 1,
        "ChatGreen": 4,
        "ChatRed": 5,
        "Custom": 0,
        "DropShadow": 6,
        "RobloxRound": 3,
        "RobloxSquare": 2
      }
    },
    "FramerateManagerMode": {
      "name": "FramerateManagerMode",
      "items": {
        "Automatic": 0,
        "Off": 2,
        "On": 1
      }
    },
    "FriendRequestEvent": {
      "name": "FriendRequestEvent",
      "items": {
        "Accept": 2,
        "Deny": 3,
        "Issue": 0,
        "Revoke": 1
      }
    },
    "FriendStatus": {
      "name": "FriendStatus",
      "items": {
        "Friend": 2,
        "FriendRequestReceived": 4,
        "FriendRequestSent": 3,
        "NotFriend": 1,
        "Unknown": 0
      }
    },
    "FunctionalTestResult": {
      "name": "FunctionalTestResult",
      "items": {
        "Error": 2,
        "Passed": 0,
        "Warning": 1
      }
    },
    "GameAvatarType": {
      "name": "GameAvatarType",
      "items": {
        "PlayerChoice": 2,
        "R15": 1,
        "R6": 0
      }
    },
    "GearGenreSetting": {
      "name": "GearGenreSetting",
      "items": {
        "AllGenres": 0,
        "MatchingGenreOnly": 1
      }
    },
    "GearType": {
      "name": "GearType",
      "items": {
        "BuildingTools": 7,
        "Explosives": 2,
        "MeleeWeapons": 0,
        "MusicalInstruments": 5,
        "NavigationEnhancers": 4,
        "PowerUps": 3,
        "RangedWeapons": 1,
        "SocialItems": 6,
        "Transport": 8
      }
    },
    "Genre": {
      "name": "Genre",
      "items": {
        "Adventure": 7,
        "All": 0,
        "Fantasy": 2,
        "Funny": 9,
        "Ninja": 4,
        "Pirate": 6,
        "Scary": 5,
        "SciFi": 3,
        "SkatePark": 12,
        "Sports": 8,
        "TownAndCity": 1,
        "Tutorial": 13,
        "War": 11,
        "WildWest": 10
      }
    },
    "GraphicsMode": {
      "name": "GraphicsMode",
      "items": {
        "Automatic": 1,
        "Direct3D11": 2,
        "Metal": 5,
        "NoGraphics": 7,
        "OpenGL": 4,
        "Vulkan": 6
      }
    },
    "HandlesStyle": {
      "name": "HandlesStyle",
      "items": {
        "Movement": 1,
        "Resize": 0
      }
    },
    "HighlightDepthMode": {
      "name": "HighlightDepthMode",
      "items": {
        "AlwaysOnTop": 0,
        "Occluded": 1
      }
    },
    "HorizontalAlignment": {
      "name": "HorizontalAlignment",
      "items": {
        "Center": 0,
        "Left": 1,
        "Right": 2
      }
    },
    "HoverAnimateSpeed": {
      "name": "HoverAnimateSpeed",
      "items": {
        "Fast": 3,
        "Medium": 2,
        "Slow": 1,
        "VeryFast": 4,
        "VerySlow": 0
      }
    },
    "HttpCachePolicy": {
      "name": "HttpCachePolicy",
      "items": {
        "DataOnly": 2,
        "Default": 3,
        "Full": 1,
        "InternalRedirectRefresh": 4,
        "None": 0
      }
    },
    "HttpContentType": {
      "name": "HttpContentType",
      "items": {
        "ApplicationJson": 0,
        "ApplicationUrlEncoded": 2,
        "ApplicationXml": 1,
        "TextPlain": 3,
        "TextXml": 4
      }
    },
    "HttpError": {
      "name": "HttpError",
      "items": {
        "Aborted": 9,
        "ConnectFail": 3,
        "DnsResolve": 2,
        "InvalidRedirect": 7,
        "InvalidUrl": 1,
        "NetFail": 8,
        "OK": 0,
        "OutOfMemory": 4,
        "SslConnectFail": 10,
        "SslVerificationFail": 11,
        "TimedOut": 5,
        "TooManyRedirects": 6,
        "Unknown": 12
      }
    },
    "HttpRequestType": {
      "name": "HttpRequestType",
      "items": {
        "Analytics": 23,
        "Avatar": 16,
        "Chat": 15,
        "Default": 0,
        "Localization": 25,
        "MarketplaceService": 2,
        "Players": 7
      }
    },
    "HumanoidCollisionType": {
      "name": "HumanoidCollisionType",
      "items": {
        "InnerBox": 1,
        "OuterBox": 0
      }
    },
    "HumanoidDisplayDistanceType": {
      "name": "HumanoidDisplayDistanceType",
      "items": {
        "None": 2,
        "Subject": 1,
        "Viewer": 0
      }
    },
    "HumanoidHealthDisplayType": {
      "name": "HumanoidHealthDisplayType",
      "items": {
        "AlwaysOff": 2,
        "AlwaysOn": 1,
        "DisplayWhenDamaged": 0
      }
    },
    "HumanoidOnlySetCollisionsOnStateChange": {
      "name": "HumanoidOnlySetCollisionsOnStateChange",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "HumanoidRigType": {
      "name": "HumanoidRigType",
      "items": {
        "R15": 1,
        "R6": 0
      }
    },
    "HumanoidStateType": {
      "name": "HumanoidStateType",
      "items": {
        "Climbing": 12,
        "Dead": 15,
        "FallingDown": 0,
        "Flying": 6,
        "Freefall": 5,
        "GettingUp": 2,
        "Jumping": 3,
        "Landed": 7,
        "None": 18,
        "Physics": 16,
        "PlatformStanding": 14,
        "Ragdoll": 1,
        "Running": 8,
        "RunningNoPhysics": 10,
        "Seated": 13,
        "StrafingNoPhysics": 11,
        "Swimming": 4
      }
    },
    "IKCollisionsMode": {
      "name": "IKCollisionsMode",
      "items": {
        "IncludeContactedMechanisms": 2,
        "NoCollisions": 0,
        "OtherMechanismsAnchored": 1
      }
    },
    "IXPLoadingStatus": {
      "name": "IXPLoadingStatus",
      "items": {
        "ErrorConnection": 5,
        "ErrorInvalidUser": 4,
        "ErrorJsonParse": 6,
        "ErrorTimedOut": 7,
        "Initialized": 2,
        "None": 0,
        "Pending": 1,
        "ShutOff": 3
      }
    },
    "InOut": {
      "name": "InOut",
      "items": {
        "Center": 2,
        "Edge": 0,
        "Inset": 1
      }
    },
    "InfoType": {
      "name": "InfoType",
      "items": {
        "Asset": 0,
        "Bundle": 4,
        "GamePass": 2,
        "Product": 1,
        "Subscription": 3
      }
    },
    "InitialDockState": {
      "name": "InitialDockState",
      "items": {
        "Bottom": 1,
        "Float": 4,
        "Left": 2,
        "Right": 3,
        "Top": 0
      }
    },
    "InputType": {
      "name": "InputType",
      "items": {
        "Constant": 12,
        "NoInput": 0,
        "Sin": 13
      }
    },
    "InterpolationThrottlingMode": {
      "name": "InterpolationThrottlingMode",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "JointCreationMode": {
      "name": "JointCreationMode",
      "items": {
        "All": 0,
        "None": 2,
        "Surface": 1
      }
    },
    "KeyCode": {
      "name": "KeyCode",
      "items": {
        "A": 97,
        "Ampersand": 38,
        "Asterisk": 42,
        "At": 64,
        "B": 98,
        "BackSlash": 92,
        "Backquote": 96,
        "Backspace": 8,
        "Break": 318,
        "ButtonA": 1002,
        "ButtonB": 1003,
        "ButtonL1": 1005,
        "ButtonL2": 1007,
        "ButtonL3": 1009,
        "ButtonR1": 1004,
        "ButtonR2": 1006,
        "ButtonR3": 1008,
        "ButtonSelect": 1011,
        "ButtonStart": 1010,
        "ButtonX": 1000,
        "ButtonY": 1001,
        "C": 99,
        "CapsLock": 301,
        "Caret": 94,
        "Clear": 12,
        "Colon": 58,
        "Comma": 44,
        "Compose": 314,
        "D": 100,
        "DPadDown": 1015,
        "DPadLeft": 1012,
        "DPadRight": 1013,
        "DPadUp": 1014,
        "Delete": 127,
        "Dollar": 36,
        "Down": 274,
        "E": 101,
        "Eight": 56,
        "End": 279,
        "Equals": 61,
        "Escape": 27,
        "Euro": 321,
        "F": 102,
        "F1": 282,
        "F10": 291,
        "F11": 292,
        "F12": 293,
        "F13": 294,
        "F14": 295,
        "F15": 296,
        "F2": 283,
        "F3": 284,
        "F4": 285,
        "F5": 286,
        "F6": 287,
        "F7": 288,
        "F8": 289,
        "F9": 290,
        "Five": 53,
        "Four": 52,
        "G": 103,
        "GreaterThan": 62,
        "H": 104,
        "Hash": 35,
        "Help": 315,
        "Home": 278,
        "I": 105,
        "Insert": 277,
        "J": 106,
        "K": 107,
        "KeypadDivide": 267,
        "KeypadEight": 264,
        "KeypadEnter": 271,
        "KeypadEquals": 272,
        "KeypadFive": 261,
        "KeypadFour": 260,
        "KeypadMinus": 269,
        "KeypadMultiply": 268,
        "KeypadNine": 265,
        "KeypadOne": 257,
        "KeypadPeriod": 266,
        "KeypadPlus": 270,
        "KeypadSeven": 263,
        "KeypadSix": 262,
        "KeypadThree": 259,
        "KeypadTwo": 258,
        "KeypadZero": 256,
        "L": 108,
        "Left": 276,
        "LeftAlt": 308,
        "LeftBracket": 91,
        "LeftControl": 306,
        "LeftCurly": 123,
        "LeftMeta": 310,
        "LeftParenthesis": 40,
        "LeftShift": 304,
        "LeftSuper": 311,
        "LessThan": 60,
        "M": 109,
        "Menu": 319,
        "Minus": 45,
        "Mode": 313,
        "N": 110,
        "Nine": 57,
        "NumLock": 300,
        "O": 111,
        "One": 49,
        "P": 112,
        "PageDown": 281,
        "PageUp": 280,
        "Pause": 19,
        "Percent": 37,
        "Period": 46,
        "Pipe": 124,
        "Plus": 43,
        "Power": 320,
        "Print": 316,
        "Q": 113,
        "Question": 63,
        "Quote": 39,
        "QuotedDouble": 34,
        "R": 114,
        "Return": 13,
        "Right": 275,
        "RightAlt": 307,
        "RightBracket": 93,
        "RightControl": 305,
        "RightCurly": 125,
        "RightMeta": 309,
        "RightParenthesis": 41,
        "RightShift": 303,
        "RightSuper": 312,
        "S": 115,
        "ScrollLock": 302,
        "Semicolon": 59,
        "Seven": 55,
        "Six": 54,
        "Slash": 47,
        "Space": 32,
        "SysReq": 317,
        "T": 116,
        "Tab": 9,
        "Three": 51,
        "Thumbstick1": 1016,
        "Thumbstick2": 1017,
        "Tilde": 126,
        "Two": 50,
        "U": 117,
        "Underscore": 95,
        "Undo": 322,
        "Unknown": 0,
        "Up": 273,
        "V": 118,
        "W": 119,
        "World0": 160,
        "World1": 161,
        "World10": 170,
        "World11": 171,
        "World12": 172,
        "World13": 173,
        "World14": 174,
        "World15": 175,
        "World16": 176,
        "World17": 177,
        "World18": 178,
        "World19": 179,
        "World2": 162,
        "World20": 180,
        "World21": 181,
        "World22": 182,
        "World23": 183,
        "World24": 184,
        "World25": 185,
        "World26": 186,
        "World27": 187,
        "World28": 188,
        "World29": 189,
        "World3": 163,
        "World30": 190,
        "World31": 191,
        "World32": 192,
        "World33": 193,
        "World34": 194,
        "World35": 195,
        "World36": 196,
        "World37": 197,
        "World38": 198,
        "World39": 199,
        "World4": 164,
        "World40": 200,
        "World41": 201,
        "World42": 202,
        "World43": 203,
        "World44": 204,
        "World45": 205,
        "World46": 206,
        "World47": 207,
        "World48": 208,
        "World49": 209,
        "World5": 165,
        "World50": 210,
        "World51": 211,
        "World52": 212,
        "World53": 213,
        "World54": 214,
        "World55": 215,
        "World56": 216,
        "World57": 217,
        "World58": 218,
        "World59": 219,
        "World6": 166,
        "World60": 220,
        "World61": 221,
        "World62": 222,
        "World63": 223,
        "World64": 224,
        "World65": 225,
        "World66": 226,
        "World67": 227,
        "World68": 228,
        "World69": 229,
        "World7": 167,
        "World70": 230,
        "World71": 231,
        "World72": 232,
        "World73": 233,
        "World74": 234,
        "World75": 235,
        "World76": 236,
        "World77": 237,
        "World78": 238,
        "World79": 239,
        "World8": 168,
        "World80": 240,
        "World81": 241,
        "World82": 242,
        "World83": 243,
        "World84": 244,
        "World85": 245,
        "World86": 246,
        "World87": 247,
        "World88": 248,
        "World89": 249,
        "World9": 169,
        "World90": 250,
        "World91": 251,
        "World92": 252,
        "World93": 253,
        "World94": 254,
        "World95": 255,
        "X": 120,
        "Y": 121,
        "Z": 122,
        "Zero": 48
      }
    },
    "KeyInterpolationMode": {
      "name": "KeyInterpolationMode",
      "items": {
        "Constant": 0,
        "Cubic": 2,
        "Linear": 1
      }
    },
    "KeywordFilterType": {
      "name": "KeywordFilterType",
      "items": {
        "Exclude": 1,
        "Include": 0
      }
    },
    "LSPMethodType": {
      "name": "LSPMethodType",
      "items": {
        "CancelRequest": 3,
        "Completion": 15,
        "Declaration": 16,
        "DocumentSymbols": 17,
        "Initialize": 1,
        "Initialized": 2,
        "Roblox_findColor3": 27,
        "Roblox_findExecutablePosition": 26,
        "Roblox_patchSnippetData": 28,
        "Roblox_registerSyntaxCategories": 22,
        "Roblox_signalQuiescence": 23,
        "Roblox_suggestExtraSelections": 25,
        "Roblox_syntaxHighlight": 24,
        "ShutdownRequest": 14,
        "TextDocument_didChange": 5,
        "TextDocument_didClose": 6,
        "TextDocument_didOpen": 4,
        "TextDocument_foldingRange": 7,
        "TextDocument_formatting": 9,
        "TextDocument_hover": 11,
        "TextDocument_onTypeFormatting": 8,
        "TextDocument_publishDiagnostics": 19,
        "TextDocument_rangeFormatting": 10,
        "TextDocument_signatureHelp": 12,
        "Window_showMessage": 20,
        "Window_showMessageRequest": 21,
        "Workspace_DidChangeConfiguration": 13
      }
    },
    "Language": {
      "name": "Language",
      "items": {
        "Default": 0
      }
    },
    "LeftRight": {
      "name": "LeftRight",
      "items": {
        "Center": 1,
        "Left": 0,
        "Right": 2
      }
    },
    "LevelOfDetailSetting": {
      "name": "LevelOfDetailSetting",
      "items": {
        "High": 2,
        "Low": 0,
        "Medium": 1
      }
    },
    "Limb": {
      "name": "Limb",
      "items": {
        "Head": 0,
        "LeftArm": 2,
        "LeftLeg": 4,
        "RightArm": 3,
        "RightLeg": 5,
        "Torso": 1,
        "Unknown": 6
      }
    },
    "LineJoinMode": {
      "name": "LineJoinMode",
      "items": {
        "Bevel": 1,
        "Miter": 2,
        "Round": 0
      }
    },
    "ListDisplayMode": {
      "name": "ListDisplayMode",
      "items": {
        "Horizontal": 0,
        "Vertical": 1
      }
    },
    "ListenerType": {
      "name": "ListenerType",
      "items": {
        "CFrame": 1,
        "Camera": 0,
        "ObjectCFrame": 3,
        "ObjectPosition": 2
      }
    },
    "LoadCharacterLayeredClothing": {
      "name": "LoadCharacterLayeredClothing",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "Material": {
      "name": "Material",
      "items": {
        "Air": 1792,
        "Asphalt": 1376,
        "Basalt": 788,
        "Brick": 848,
        "Cobblestone": 880,
        "Concrete": 816,
        "CorrodedMetal": 1040,
        "CrackedLava": 804,
        "DiamondPlate": 1056,
        "Fabric": 1312,
        "Foil": 1072,
        "ForceField": 1584,
        "Glacier": 1552,
        "Glass": 1568,
        "Granite": 832,
        "Grass": 1280,
        "Ground": 1360,
        "Ice": 1536,
        "LeafyGrass": 1284,
        "Limestone": 820,
        "Marble": 784,
        "Metal": 1088,
        "Mud": 1344,
        "Neon": 288,
        "Pavement": 836,
        "Pebble": 864,
        "Plastic": 256,
        "Rock": 896,
        "Salt": 1392,
        "Sand": 1296,
        "Sandstone": 912,
        "Slate": 800,
        "SmoothPlastic": 272,
        "Snow": 1328,
        "Water": 2048,
        "Wood": 512,
        "WoodPlanks": 528
      }
    },
    "MaterialPattern": {
      "name": "MaterialPattern",
      "items": {
        "Organic": 1,
        "Regular": 0
      }
    },
    "MembershipType": {
      "name": "MembershipType",
      "items": {
        "BuildersClub": 1,
        "None": 0,
        "OutrageousBuildersClub": 3,
        "Premium": 4,
        "TurboBuildersClub": 2
      }
    },
    "MeshPartDetailLevel": {
      "name": "MeshPartDetailLevel",
      "items": {
        "DistanceBased": 0,
        "Level01": 1,
        "Level02": 2,
        "Level03": 3,
        "Level04": 4
      }
    },
    "MeshPartHeadsAndAccessories": {
      "name": "MeshPartHeadsAndAccessories",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "MeshScaleUnit": {
      "name": "MeshScaleUnit",
      "items": {
        "CM": 2,
        "Foot": 4,
        "Inch": 5,
        "MM": 3,
        "Meter": 1,
        "Stud": 0
      }
    },
    "MeshType": {
      "name": "MeshType",
      "items": {
        "Brick": 6,
        "CornerWedge": 11,
        "Cylinder": 4,
        "FileMesh": 5,
        "Head": 0,
        "ParallelRamp": 9,
        "Prism": 7,
        "Pyramid": 8,
        "RightAngleRamp": 10,
        "Sphere": 3,
        "Torso": 1,
        "Wedge": 2
      }
    },
    "MessageType": {
      "name": "MessageType",
      "items": {
        "MessageError": 3,
        "MessageInfo": 1,
        "MessageOutput": 0,
        "MessageWarning": 2
      }
    },
    "ModelLevelOfDetail": {
      "name": "ModelLevelOfDetail",
      "items": {
        "Automatic": 0,
        "Disabled": 2,
        "StreamingMesh": 1
      }
    },
    "ModifierKey": {
      "name": "ModifierKey",
      "items": {
        "Alt": 2,
        "Ctrl": 1,
        "Meta": 3,
        "Shift": 0
      }
    },
    "MouseBehavior": {
      "name": "MouseBehavior",
      "items": {
        "Default": 0,
        "LockCenter": 1,
        "LockCurrentPosition": 2
      }
    },
    "MoveState": {
      "name": "MoveState",
      "items": {
        "AirFree": 4,
        "Coasting": 1,
        "Pushing": 2,
        "Stopped": 0,
        "Stopping": 3
      }
    },
    "NameOcclusion": {
      "name": "NameOcclusion",
      "items": {
        "EnemyOcclusion": 1,
        "NoOcclusion": 0,
        "OccludeAll": 2
      }
    },
    "NetworkOwnership": {
      "name": "NetworkOwnership",
      "items": {
        "Automatic": 0,
        "Manual": 1,
        "OnContact": 2
      }
    },
    "NewAnimationRuntimeSetting": {
      "name": "NewAnimationRuntimeSetting",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "NormalId": {
      "name": "NormalId",
      "items": {
        "Back": 2,
        "Bottom": 4,
        "Front": 5,
        "Left": 3,
        "Right": 0,
        "Top": 1
      }
    },
    "OrientationAlignmentMode": {
      "name": "OrientationAlignmentMode",
      "items": {
        "OneAttachment": 0,
        "TwoAttachment": 1
      }
    },
    "OutfitSource": {
      "name": "OutfitSource",
      "items": {
        "All": 1,
        "Created": 2,
        "Purchased": 3
      }
    },
    "OutputLayoutMode": {
      "name": "OutputLayoutMode",
      "items": {
        "Horizontal": 0,
        "Vertical": 1
      }
    },
    "OverrideMouseIconBehavior": {
      "name": "OverrideMouseIconBehavior",
      "items": {
        "ForceHide": 2,
        "ForceShow": 1,
        "None": 0
      }
    },
    "PackagePermission": {
      "name": "PackagePermission",
      "items": {
        "Edit": 4,
        "NoAccess": 1,
        "None": 0,
        "Own": 5,
        "Revoked": 2,
        "UseView": 3
      }
    },
    "PartType": {
      "name": "PartType",
      "items": {
        "Ball": 0,
        "Block": 1,
        "Cylinder": 2
      }
    },
    "ParticleEmitterShape": {
      "name": "ParticleEmitterShape",
      "items": {
        "Box": 0,
        "Cylinder": 2,
        "Disc": 3,
        "Sphere": 1
      }
    },
    "ParticleEmitterShapeInOut": {
      "name": "ParticleEmitterShapeInOut",
      "items": {
        "InAndOut": 2,
        "Inward": 1,
        "Outward": 0
      }
    },
    "ParticleEmitterShapeStyle": {
      "name": "ParticleEmitterShapeStyle",
      "items": {
        "Surface": 1,
        "Volume": 0
      }
    },
    "ParticleFlipbookLayout": {
      "name": "ParticleFlipbookLayout",
      "items": {
        "EightByEight": 3,
        "FourByFour": 2,
        "None": 0,
        "TwoByTwo": 1
      }
    },
    "ParticleFlipbookMode": {
      "name": "ParticleFlipbookMode",
      "items": {
        "Loop": 0,
        "OneShot": 1,
        "PingPong": 2,
        "Random": 3
      }
    },
    "ParticleOrientation": {
      "name": "ParticleOrientation",
      "items": {
        "FacingCamera": 0,
        "FacingCameraWorldUp": 1,
        "VelocityParallel": 2,
        "VelocityPerpendicular": 3
      }
    },
    "PathStatus": {
      "name": "PathStatus",
      "items": {
        "ClosestNoPath": 1,
        "ClosestOutOfRange": 2,
        "FailFinishNotEmpty": 4,
        "FailStartNotEmpty": 3,
        "NoPath": 5,
        "Success": 0
      }
    },
    "PathWaypointAction": {
      "name": "PathWaypointAction",
      "items": {
        "Custom": 2,
        "Jump": 1,
        "Walk": 0
      }
    },
    "PermissionLevelShown": {
      "name": "PermissionLevelShown",
      "items": {
        "Game": 0,
        "Roblox": 4,
        "RobloxGame": 1,
        "RobloxScript": 2,
        "Studio": 3
      }
    },
    "PhysicsInertiaAndVolumeFix": {
      "name": "PhysicsInertiaAndVolumeFix",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "PhysicsSimulationRate": {
      "name": "PhysicsSimulationRate",
      "items": {
        "Fixed120Hz": 1,
        "Fixed240Hz": 0,
        "Fixed60Hz": 2
      }
    },
    "PhysicsSteppingMethod": {
      "name": "PhysicsSteppingMethod",
      "items": {
        "Adaptive": 2,
        "Default": 0,
        "Fixed": 1
      }
    },
    "Platform": {
      "name": "Platform",
      "items": {
        "Android": 3,
        "AndroidTV": 11,
        "BeOS": 17,
        "Chromecast": 12,
        "DOS": 16,
        "IOS": 2,
        "Linux": 13,
        "NX": 9,
        "None": 19,
        "OSX": 1,
        "Ouya": 10,
        "PS3": 6,
        "PS4": 5,
        "SteamOS": 14,
        "UWP": 18,
        "WebOS": 15,
        "WiiU": 8,
        "Windows": 0,
        "XBox360": 7,
        "XBoxOne": 4
      }
    },
    "PlaybackState": {
      "name": "PlaybackState",
      "items": {
        "Begin": 0,
        "Cancelled": 5,
        "Completed": 4,
        "Delayed": 1,
        "Paused": 3,
        "Playing": 2
      }
    },
    "PlayerActions": {
      "name": "PlayerActions",
      "items": {
        "CharacterBackward": 1,
        "CharacterForward": 0,
        "CharacterJump": 4,
        "CharacterLeft": 2,
        "CharacterRight": 3
      }
    },
    "PlayerChatType": {
      "name": "PlayerChatType",
      "items": {
        "All": 0,
        "Team": 1,
        "Whisper": 2
      }
    },
    "PoseEasingDirection": {
      "name": "PoseEasingDirection",
      "items": {
        "In": 0,
        "InOut": 2,
        "Out": 1
      }
    },
    "PoseEasingStyle": {
      "name": "PoseEasingStyle",
      "items": {
        "Bounce": 4,
        "Constant": 1,
        "Cubic": 3,
        "Elastic": 2,
        "Linear": 0
      }
    },
    "PositionAlignmentMode": {
      "name": "PositionAlignmentMode",
      "items": {
        "OneAttachment": 0,
        "TwoAttachment": 1
      }
    },
    "PrivilegeType": {
      "name": "PrivilegeType",
      "items": {
        "Admin": 240,
        "Banned": 0,
        "Member": 128,
        "Owner": 255,
        "Visitor": 10
      }
    },
    "ProductLocationRestriction": {
      "name": "ProductLocationRestriction",
      "items": {
        "AllGames": 2,
        "AllowedGames": 1,
        "AvatarShop": 0
      }
    },
    "ProductPurchaseDecision": {
      "name": "ProductPurchaseDecision",
      "items": {
        "NotProcessedYet": 0,
        "PurchaseGranted": 1
      }
    },
    "PropertyStatus": {
      "name": "PropertyStatus",
      "items": {
        "Error": 2,
        "Ok": 0,
        "Warning": 1
      }
    },
    "ProximityPromptExclusivity": {
      "name": "ProximityPromptExclusivity",
      "items": {
        "AlwaysShow": 2,
        "OneGlobally": 1,
        "OnePerButton": 0
      }
    },
    "ProximityPromptInputType": {
      "name": "ProximityPromptInputType",
      "items": {
        "Gamepad": 1,
        "Keyboard": 0,
        "Touch": 2
      }
    },
    "ProximityPromptStyle": {
      "name": "ProximityPromptStyle",
      "items": {
        "Custom": 1,
        "Default": 0
      }
    },
    "QualityLevel": {
      "name": "QualityLevel",
      "items": {
        "Automatic": 0,
        "Level01": 1,
        "Level02": 2,
        "Level03": 3,
        "Level04": 4,
        "Level05": 5,
        "Level06": 6,
        "Level07": 7,
        "Level08": 8,
        "Level09": 9,
        "Level10": 10,
        "Level11": 11,
        "Level12": 12,
        "Level13": 13,
        "Level14": 14,
        "Level15": 15,
        "Level16": 16,
        "Level17": 17,
        "Level18": 18,
        "Level19": 19,
        "Level20": 20,
        "Level21": 21
      }
    },
    "R15CollisionType": {
      "name": "R15CollisionType",
      "items": {
        "InnerBox": 1,
        "OuterBox": 0
      }
    },
    "RaycastFilterType": {
      "name": "RaycastFilterType",
      "items": {
        "Blacklist": 0,
        "Whitelist": 1
      }
    },
    "RenderFidelity": {
      "name": "RenderFidelity",
      "items": {
        "Automatic": 0,
        "Performance": 2,
        "Precise": 1
      }
    },
    "RenderPriority": {
      "name": "RenderPriority",
      "items": {
        "Camera": 200,
        "Character": 300,
        "First": 0,
        "Input": 100,
        "Last": 2000
      }
    },
    "RenderingTestComparisonMethod": {
      "name": "RenderingTestComparisonMethod",
      "items": {
        "diff": 1,
        "psnr": 0
      }
    },
    "ReplicateInstanceDestroySetting": {
      "name": "ReplicateInstanceDestroySetting",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "ResamplerMode": {
      "name": "ResamplerMode",
      "items": {
        "Default": 0,
        "Pixelated": 1
      }
    },
    "ReturnKeyType": {
      "name": "ReturnKeyType",
      "items": {
        "Default": 0,
        "Done": 1,
        "Go": 2,
        "Next": 3,
        "Search": 4,
        "Send": 5
      }
    },
    "ReverbType": {
      "name": "ReverbType",
      "items": {
        "Alley": 15,
        "Arena": 10,
        "Auditorium": 7,
        "Bathroom": 4,
        "CarpettedHallway": 12,
        "Cave": 9,
        "City": 17,
        "ConcertHall": 8,
        "Forest": 16,
        "GenericReverb": 1,
        "Hallway": 13,
        "Hangar": 11,
        "LivingRoom": 5,
        "Mountains": 18,
        "NoReverb": 0,
        "PaddedCell": 2,
        "ParkingLot": 21,
        "Plain": 20,
        "Quarry": 19,
        "Room": 3,
        "SewerPipe": 22,
        "StoneCorridor": 14,
        "StoneRoom": 6,
        "UnderWater": 23
      }
    },
    "RibbonTool": {
      "name": "RibbonTool",
      "items": {
        "ColorPicker": 5,
        "Group": 7,
        "MaterialPicker": 6,
        "Move": 3,
        "None": 9,
        "Rotate": 2,
        "Scale": 1,
        "Select": 0,
        "Transform": 4,
        "Ungroup": 8
      }
    },
    "RigType": {
      "name": "RigType",
      "items": {
        "Custom": 3,
        "None": 4,
        "R15": 0,
        "Rthro": 1,
        "RthroNarrow": 2
      }
    },
    "RollOffMode": {
      "name": "RollOffMode",
      "items": {
        "Inverse": 0,
        "InverseTapered": 3,
        "Linear": 1,
        "LinearSquare": 2
      }
    },
    "RotationOrder": {
      "name": "RotationOrder",
      "items": {
        "XYZ": 0,
        "XZY": 1,
        "YXZ": 3,
        "YZX": 2,
        "ZXY": 4,
        "ZYX": 5
      }
    },
    "RotationType": {
      "name": "RotationType",
      "items": {
        "CameraRelative": 1,
        "MovementRelative": 0
      }
    },
    "RuntimeUndoBehavior": {
      "name": "RuntimeUndoBehavior",
      "items": {
        "Aggregate": 0,
        "Hybrid": 2,
        "Snapshot": 1
      }
    },
    "SaveFilter": {
      "name": "SaveFilter",
      "items": {
        "SaveAll": 2,
        "SaveGame": 1,
        "SaveWorld": 0
      }
    },
    "SavedQualitySetting": {
      "name": "SavedQualitySetting",
      "items": {
        "Automatic": 0,
        "QualityLevel1": 1,
        "QualityLevel10": 10,
        "QualityLevel2": 2,
        "QualityLevel3": 3,
        "QualityLevel4": 4,
        "QualityLevel5": 5,
        "QualityLevel6": 6,
        "QualityLevel7": 7,
        "QualityLevel8": 8,
        "QualityLevel9": 9
      }
    },
    "ScaleType": {
      "name": "ScaleType",
      "items": {
        "Crop": 4,
        "Fit": 3,
        "Slice": 1,
        "Stretch": 0,
        "Tile": 2
      }
    },
    "ScreenOrientation": {
      "name": "ScreenOrientation",
      "items": {
        "LandscapeLeft": 0,
        "LandscapeRight": 1,
        "LandscapeSensor": 2,
        "Portrait": 3,
        "Sensor": 4
      }
    },
    "ScrollBarInset": {
      "name": "ScrollBarInset",
      "items": {
        "Always": 2,
        "None": 0,
        "ScrollBar": 1
      }
    },
    "ScrollingDirection": {
      "name": "ScrollingDirection",
      "items": {
        "X": 1,
        "XY": 4,
        "Y": 2
      }
    },
    "SelectionBehavior": {
      "name": "SelectionBehavior",
      "items": {
        "Escape": 0,
        "Stop": 1
      }
    },
    "ServerAudioBehavior": {
      "name": "ServerAudioBehavior",
      "items": {
        "Enabled": 0,
        "Muted": 1,
        "OnlineGame": 2
      }
    },
    "SignalBehavior": {
      "name": "SignalBehavior",
      "items": {
        "AncestryDeferred": 3,
        "Default": 0,
        "Deferred": 2,
        "Immediate": 1
      }
    },
    "SizeConstraint": {
      "name": "SizeConstraint",
      "items": {
        "RelativeXX": 1,
        "RelativeXY": 0,
        "RelativeYY": 2
      }
    },
    "SortDirection": {
      "name": "SortDirection",
      "items": {
        "Ascending": 0,
        "Descending": 1
      }
    },
    "SortOrder": {
      "name": "SortOrder",
      "items": {
        "Custom": 1,
        "LayoutOrder": 2,
        "Name": 0
      }
    },
    "SpecialKey": {
      "name": "SpecialKey",
      "items": {
        "ChatHotkey": 5,
        "End": 2,
        "Home": 1,
        "Insert": 0,
        "PageDown": 4,
        "PageUp": 3
      }
    },
    "StartCorner": {
      "name": "StartCorner",
      "items": {
        "BottomLeft": 2,
        "BottomRight": 3,
        "TopLeft": 0,
        "TopRight": 1
      }
    },
    "Status": {
      "name": "Status",
      "items": {
        "Confusion": 1,
        "Poison": 0
      }
    },
    "StreamOutBehavior": {
      "name": "StreamOutBehavior",
      "items": {
        "Default": 0,
        "LowMemory": 1,
        "Opportunistic": 2
      }
    },
    "StreamingPauseMode": {
      "name": "StreamingPauseMode",
      "items": {
        "ClientPhysicsPause": 2,
        "Default": 0,
        "Disabled": 1
      }
    },
    "StudioCloseMode": {
      "name": "StudioCloseMode",
      "items": {
        "CloseDoc": 2,
        "CloseStudio": 1,
        "None": 0
      }
    },
    "StudioDataModelType": {
      "name": "StudioDataModelType",
      "items": {
        "Edit": 0,
        "None": 4,
        "PlayClient": 1,
        "PlayServer": 2,
        "Standalone": 3
      }
    },
    "StudioScriptEditorColorCategories": {
      "name": "StudioScriptEditorColorCategories",
      "items": {
        "ActiveLine": 25,
        "Background": 17,
        "Bool": 10,
        "Bracket": 29,
        "Builtin": 6,
        "Comment": 4,
        "DebuggerCurrentLine": 26,
        "DebuggerErrorLine": 27,
        "Default": 0,
        "DocViewCodeBackground": 38,
        "Error": 23,
        "FindSelectionBackground": 20,
        "Function": 11,
        "FunctionName": 15,
        "Keyword": 5,
        "Local": 12,
        "LuauKeyword": 14,
        "MatchingWordBackground": 21,
        "MenuBackground": 33,
        "MenuBorder": 37,
        "MenuPrimaryText": 30,
        "MenuScrollbarBackground": 35,
        "MenuScrollbarHandle": 36,
        "MenuSecondaryText": 31,
        "MenuSelectedBackground": 34,
        "MenuSelectedText": 32,
        "Method": 7,
        "Nil": 9,
        "Number": 2,
        "Operator": 1,
        "Property": 8,
        "Ruler": 28,
        "SelectionBackground": 19,
        "SelectionText": 18,
        "Self": 13,
        "String": 3,
        "TODO": 16,
        "Warning": 22,
        "Whitespace": 24
      }
    },
    "StudioScriptEditorColorPresets": {
      "name": "StudioScriptEditorColorPresets",
      "items": {
        "Custom": 3,
        "Extra1": 1,
        "Extra2": 2,
        "RobloxDefault": 0
      }
    },
    "StudioStyleGuideColor": {
      "name": "StudioStyleGuideColor",
      "items": {
        "AttributeCog": 117,
        "Border": 31,
        "BrightText": 40,
        "Button": 17,
        "ButtonBorder": 89,
        "ButtonText": 90,
        "CategoryItem": 24,
        "ChatIncomingBgColor": 83,
        "ChatIncomingTextColor": 84,
        "ChatModeratedMessageColor": 87,
        "ChatOutgoingBgColor": 85,
        "ChatOutgoingTextColor": 86,
        "CheckedFieldBackground": 92,
        "CheckedFieldBorder": 93,
        "CheckedFieldIndicator": 94,
        "ColorPickerFrame": 29,
        "CurrentMarker": 30,
        "Dark": 35,
        "DebuggerCurrentLine": 65,
        "DebuggerErrorLine": 66,
        "DialogButton": 98,
        "DialogButtonBorder": 100,
        "DialogButtonText": 99,
        "DialogMainButton": 101,
        "DialogMainButtonText": 102,
        "DiffFilePathBackground": 81,
        "DiffFilePathBorder": 82,
        "DiffFilePathText": 67,
        "DiffLineNum": 76,
        "DiffLineNumAdditionBackground": 79,
        "DiffLineNumDeletionBackground": 80,
        "DiffLineNumNoChangeBackground": 78,
        "DiffLineNumSeparatorBackground": 77,
        "DiffTextAddition": 70,
        "DiffTextAdditionBackground": 74,
        "DiffTextDeletion": 71,
        "DiffTextDeletionBackground": 75,
        "DiffTextHunkInfo": 68,
        "DiffTextNoChange": 69,
        "DiffTextNoChangeBackground": 73,
        "DiffTextSeparatorBackground": 72,
        "DimmedText": 41,
        "DocViewCodeBackground": 64,
        "DropShadow": 32,
        "Dropdown": 2,
        "EmulatorBar": 27,
        "EmulatorDropDown": 28,
        "ErrorText": 44,
        "FilterButtonAccent": 12,
        "FilterButtonBorder": 13,
        "FilterButtonBorderAlt": 14,
        "FilterButtonChecked": 11,
        "FilterButtonDefault": 9,
        "FilterButtonHover": 10,
        "GameSettingsTableItem": 25,
        "GameSettingsTooltip": 26,
        "HeaderSection": 95,
        "InfoBarWarningBackground": 103,
        "InfoBarWarningText": 104,
        "InfoText": 45,
        "InputFieldBackground": 21,
        "InputFieldBorder": 91,
        "Item": 22,
        "Light": 34,
        "LinkText": 42,
        "MainBackground": 0,
        "MainButton": 18,
        "MainText": 37,
        "Mid": 36,
        "Midlight": 96,
        "Notification": 4,
        "RibbonButton": 19,
        "RibbonTab": 15,
        "RibbonTabTopBar": 16,
        "ScriptBackground": 48,
        "ScriptBool": 109,
        "ScriptBracket": 116,
        "ScriptBuiltInFunction": 59,
        "ScriptComment": 57,
        "ScriptEditorCurrentLine": 105,
        "ScriptError": 61,
        "ScriptFindSelectionBackground": 52,
        "ScriptFunction": 110,
        "ScriptFunctionName": 114,
        "ScriptKeyword": 58,
        "ScriptLocal": 111,
        "ScriptLuauKeyword": 113,
        "ScriptMatchingWordSelectionBackground": 53,
        "ScriptMethod": 106,
        "ScriptNil": 108,
        "ScriptNumber": 55,
        "ScriptOperator": 54,
        "ScriptProperty": 107,
        "ScriptRuler": 63,
        "ScriptSelectionBackground": 51,
        "ScriptSelectionText": 50,
        "ScriptSelf": 112,
        "ScriptSideWidget": 47,
        "ScriptString": 56,
        "ScriptText": 49,
        "ScriptTodo": 115,
        "ScriptWarning": 60,
        "ScriptWhitespace": 62,
        "ScrollBar": 5,
        "ScrollBarBackground": 6,
        "SensitiveText": 46,
        "Separator": 88,
        "Shadow": 33,
        "StatusBar": 97,
        "SubText": 38,
        "Tab": 8,
        "TabBar": 7,
        "TableItem": 23,
        "Titlebar": 1,
        "TitlebarText": 39,
        "Tooltip": 3,
        "ViewPortBackground": 20,
        "WarningText": 43
      }
    },
    "StudioStyleGuideModifier": {
      "name": "StudioStyleGuideModifier",
      "items": {
        "Default": 0,
        "Disabled": 3,
        "Hover": 4,
        "Pressed": 2,
        "Selected": 1
      }
    },
    "Style": {
      "name": "Style",
      "items": {
        "AlternatingSupports": 0,
        "BridgeStyleSupports": 1,
        "NoSupports": 2
      }
    },
    "SurfaceConstraint": {
      "name": "SurfaceConstraint",
      "items": {
        "Hinge": 1,
        "Motor": 3,
        "None": 0,
        "SteppingMotor": 2
      }
    },
    "SurfaceGuiSizingMode": {
      "name": "SurfaceGuiSizingMode",
      "items": {
        "FixedSize": 0,
        "PixelsPerStud": 1
      }
    },
    "SurfaceType": {
      "name": "SurfaceType",
      "items": {
        "Glue": 1,
        "Hinge": 6,
        "Inlet": 4,
        "Motor": 7,
        "Smooth": 0,
        "SmoothNoOutlines": 10,
        "SteppingMotor": 8,
        "Studs": 3,
        "Universal": 5,
        "Weld": 2
      }
    },
    "SwipeDirection": {
      "name": "SwipeDirection",
      "items": {
        "Down": 3,
        "Left": 1,
        "None": 4,
        "Right": 0,
        "Up": 2
      }
    },
    "TableMajorAxis": {
      "name": "TableMajorAxis",
      "items": {
        "ColumnMajor": 1,
        "RowMajor": 0
      }
    },
    "Technology": {
      "name": "Technology",
      "items": {
        "Compatibility": 2,
        "Future": 4,
        "Legacy": 0,
        "ShadowMap": 3,
        "Voxel": 1
      }
    },
    "TeleportMethod": {
      "name": "TeleportMethod",
      "items": {
        "TeleportPartyAsync": 3,
        "TeleportToPlaceInstance": 1,
        "TeleportToPrivateServer": 2,
        "TeleportToSpawnByName": 0,
        "TeleportUnknown": 4
      }
    },
    "TeleportResult": {
      "name": "TeleportResult",
      "items": {
        "Failure": 1,
        "Flooded": 6,
        "GameEnded": 3,
        "GameFull": 4,
        "GameNotFound": 2,
        "IsTeleporting": 7,
        "Success": 0,
        "Unauthorized": 5
      }
    },
    "TeleportState": {
      "name": "TeleportState",
      "items": {
        "Failed": 3,
        "InProgress": 4,
        "RequestedFromServer": 0,
        "Started": 1,
        "WaitingForServer": 2
      }
    },
    "TeleportType": {
      "name": "TeleportType",
      "items": {
        "ToInstance": 1,
        "ToPlace": 0,
        "ToReservedServer": 2
      }
    },
    "TerrainAcquisitionMethod": {
      "name": "TerrainAcquisitionMethod",
      "items": {
        "Convert": 5,
        "EditAddTool": 6,
        "EditReplaceTool": 8,
        "EditSeaLevelTool": 7,
        "Generate": 3,
        "Import": 4,
        "Legacy": 1,
        "None": 0,
        "Other": 11,
        "RegionFillTool": 9,
        "RegionPasteTool": 10,
        "Template": 2
      }
    },
    "TerrainFace": {
      "name": "TerrainFace",
      "items": {
        "Bottom": 2,
        "Side": 1,
        "Top": 0
      }
    },
    "TextChatMessageStatus": {
      "name": "TextChatMessageStatus",
      "items": {
        "Floodchecked": 5,
        "InvalidPrivacySettings": 6,
        "InvalidTextChannelPermissions": 7,
        "MessageTooLong": 8,
        "Sending": 3,
        "Success": 2,
        "TextFilterFailed": 4,
        "Unknown": 1
      }
    },
    "TextFilterContext": {
      "name": "TextFilterContext",
      "items": {
        "PrivateChat": 2,
        "PublicChat": 1
      }
    },
    "TextInputType": {
      "name": "TextInputType",
      "items": {
        "Default": 0,
        "Email": 3,
        "NoSuggestions": 1,
        "Number": 2,
        "OneTimePassword": 8,
        "Password": 5,
        "PasswordShown": 6,
        "Phone": 4,
        "Username": 7
      }
    },
    "TextTruncate": {
      "name": "TextTruncate",
      "items": {
        "AtEnd": 1,
        "None": 0
      }
    },
    "TextXAlignment": {
      "name": "TextXAlignment",
      "items": {
        "Center": 2,
        "Left": 0,
        "Right": 1
      }
    },
    "TextYAlignment": {
      "name": "TextYAlignment",
      "items": {
        "Bottom": 2,
        "Center": 1,
        "Top": 0
      }
    },
    "TextureMode": {
      "name": "TextureMode",
      "items": {
        "Static": 2,
        "Stretch": 0,
        "Wrap": 1
      }
    },
    "TextureQueryType": {
      "name": "TextureQueryType",
      "items": {
        "Humanoid": 2,
        "HumanoidOrphaned": 3,
        "NonHumanoid": 0,
        "NonHumanoidOrphaned": 1
      }
    },
    "ThreadPoolConfig": {
      "name": "ThreadPoolConfig",
      "items": {
        "Auto": 0,
        "PerCore1": 101,
        "PerCore2": 102,
        "PerCore3": 103,
        "PerCore4": 104,
        "Threads1": 1,
        "Threads16": 16,
        "Threads2": 2,
        "Threads3": 3,
        "Threads4": 4,
        "Threads8": 8
      }
    },
    "ThrottlingPriority": {
      "name": "ThrottlingPriority",
      "items": {
        "Default": 0,
        "ElevatedOnServer": 1,
        "Extreme": 2
      }
    },
    "ThumbnailSize": {
      "name": "ThumbnailSize",
      "items": {
        "Size100x100": 4,
        "Size150x150": 5,
        "Size180x180": 1,
        "Size352x352": 6,
        "Size420x420": 2,
        "Size48x48": 0,
        "Size60x60": 3
      }
    },
    "ThumbnailType": {
      "name": "ThumbnailType",
      "items": {
        "AvatarBust": 1,
        "AvatarThumbnail": 2,
        "HeadShot": 0
      }
    },
    "TickCountSampleMethod": {
      "name": "TickCountSampleMethod",
      "items": {
        "Benchmark": 1,
        "Fast": 0,
        "Precise": 2
      }
    },
    "TopBottom": {
      "name": "TopBottom",
      "items": {
        "Bottom": 2,
        "Center": 1,
        "Top": 0
      }
    },
    "TouchCameraMovementMode": {
      "name": "TouchCameraMovementMode",
      "items": {
        "Classic": 1,
        "Default": 0,
        "Follow": 2,
        "Orbital": 3
      }
    },
    "TouchMovementMode": {
      "name": "TouchMovementMode",
      "items": {
        "ClickToMove": 4,
        "DPad": 2,
        "Default": 0,
        "DynamicThumbstick": 5,
        "Thumbpad": 3,
        "Thumbstick": 1
      }
    },
    "TriStateBoolean": {
      "name": "TriStateBoolean",
      "items": {
        "False": 2,
        "True": 1,
        "Unknown": 0
      }
    },
    "TweenStatus": {
      "name": "TweenStatus",
      "items": {
        "Canceled": 0,
        "Completed": 1
      }
    },
    "UITheme": {
      "name": "UITheme",
      "items": {
        "Dark": 1,
        "Light": 0
      }
    },
    "UiMessageType": {
      "name": "UiMessageType",
      "items": {
        "UiMessageError": 0,
        "UiMessageInfo": 1
      }
    },
    "UsageContext": {
      "name": "UsageContext",
      "items": {
        "Default": 0,
        "Preview": 1
      }
    },
    "UserCFrame": {
      "name": "UserCFrame",
      "items": {
        "Head": 0,
        "LeftHand": 1,
        "RightHand": 2
      }
    },
    "UserInputState": {
      "name": "UserInputState",
      "items": {
        "Begin": 0,
        "Cancel": 3,
        "Change": 1,
        "End": 2,
        "None": 4
      }
    },
    "UserInputType": {
      "name": "UserInputType",
      "items": {
        "Accelerometer": 10,
        "Focus": 9,
        "Gamepad1": 12,
        "Gamepad2": 13,
        "Gamepad3": 14,
        "Gamepad4": 15,
        "Gamepad5": 16,
        "Gamepad6": 17,
        "Gamepad7": 18,
        "Gamepad8": 19,
        "Gyro": 11,
        "InputMethod": 21,
        "Keyboard": 8,
        "MouseButton1": 0,
        "MouseButton2": 1,
        "MouseButton3": 2,
        "MouseMovement": 4,
        "MouseWheel": 3,
        "None": 22,
        "TextInput": 20,
        "Touch": 7
      }
    },
    "VRTouchpad": {
      "name": "VRTouchpad",
      "items": {
        "Left": 0,
        "Right": 1
      }
    },
    "VRTouchpadMode": {
      "name": "VRTouchpadMode",
      "items": {
        "ABXY": 2,
        "Touch": 0,
        "VirtualThumbstick": 1
      }
    },
    "VelocityConstraintMode": {
      "name": "VelocityConstraintMode",
      "items": {
        "Line": 0,
        "Plane": 1,
        "Vector": 2
      }
    },
    "VerticalAlignment": {
      "name": "VerticalAlignment",
      "items": {
        "Bottom": 2,
        "Center": 0,
        "Top": 1
      }
    },
    "VerticalScrollBarPosition": {
      "name": "VerticalScrollBarPosition",
      "items": {
        "Left": 1,
        "Right": 0
      }
    },
    "VibrationMotor": {
      "name": "VibrationMotor",
      "items": {
        "Large": 0,
        "LeftHand": 4,
        "LeftTrigger": 2,
        "RightHand": 5,
        "RightTrigger": 3,
        "Small": 1
      }
    },
    "VirtualCursorMode": {
      "name": "VirtualCursorMode",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "VirtualInputMode": {
      "name": "VirtualInputMode",
      "items": {
        "None": 0,
        "Playing": 2,
        "Recording": 1
      }
    },
    "VoiceChatState": {
      "name": "VoiceChatState",
      "items": {
        "Ended": 5,
        "Failed": 6,
        "Idle": 0,
        "Joined": 3,
        "Joining": 1,
        "JoiningRetry": 2,
        "Leaving": 4
      }
    },
    "WaterDirection": {
      "name": "WaterDirection",
      "items": {
        "NegX": 0,
        "NegY": 2,
        "NegZ": 4,
        "X": 1,
        "Y": 3,
        "Z": 5
      }
    },
    "WaterForce": {
      "name": "WaterForce",
      "items": {
        "Max": 4,
        "Medium": 2,
        "None": 0,
        "Small": 1,
        "Strong": 3
      }
    },
    "WrapLayerAutoSkin": {
      "name": "WrapLayerAutoSkin",
      "items": {
        "Disabled": 0,
        "EnabledOverride": 2,
        "EnabledPreserve": 1
      }
    },
    "WrapLayerDebugMode": {
      "name": "WrapLayerDebugMode",
      "items": {
        "BoundCage": 1,
        "BoundCageAndLinks": 3,
        "HSRInner": 10,
        "HSRInnerReverse": 11,
        "HSROuter": 9,
        "HSROuterDetail": 8,
        "LayerCage": 2,
        "None": 0,
        "OuterCage": 6,
        "Rbf": 5,
        "Reference": 4,
        "ReferenceMeshAfterMorph": 7
      }
    },
    "WrapTargetDebugMode": {
      "name": "WrapTargetDebugMode",
      "items": {
        "None": 0,
        "OuterCageDetail": 8,
        "Rbf": 7,
        "TargetCageCompressed": 2,
        "TargetCageInterface": 3,
        "TargetCageOriginal": 1,
        "TargetLayerCageCompressed": 5,
        "TargetLayerCageOriginal": 4,
        "TargetLayerInterface": 6
      }
    },
    "ZIndexBehavior": {
      "name": "ZIndexBehavior",
      "items": {
        "Global": 0,
        "Sibling": 1
      }
    }
  }
}]]

print("Decoded string!!!!")
return HttpService:JSONDecode(json_string)]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f7a</UniqueId>
						</Properties>
						<Item class="ModuleScript" referent="RBXda19c439a7d74094a58edf241836ccf8">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">EncodedValue</string>
								<string name="ScriptGuid">{b670ab2c-6941-4fff-a620-e8fad9f36732}</string>
								<ProtectedString name="Source"><![CDATA[local base64 = require(script.Parent.base64)

local function identity(...)
	return ...
end

local function unpackDecoder(f)
	return function(value)
		return f(unpack(value))
	end
end

local function serializeFloat(value)
	-- TODO: Figure out a better way to serialize infinity and NaN, neither of
	-- which fit into JSON.
	if value == math.huge or value == -math.huge then
		return 999999999 * math.sign(value)
	end

	return value
end

local ALL_AXES = {"X", "Y", "Z"}
local ALL_FACES = {"Right", "Top", "Back", "Left", "Bottom", "Front"}

local EncodedValue = {}

local types
types = {
	Attributes = {
		fromPod = function(pod)
			local output = {}

			for key, value in pairs(pod) do
				local ok, result = EncodedValue.decode(value)

				if ok then
					output[key] = result
				else
					local warning = ("Could not decode attribute value of type %q: %s"):format(typeof(value), tostring(result))
					warn(warning)
				end
			end

			return output
		end,
		toPod = function(roblox)
			local output = {}

			for key, value in pairs(roblox) do
				local ok, result = EncodedValue.encodeNaive(value)

				if ok then
					output[key] = result
				else
					local warning = ("Could not encode attribute value of type %q: %s"):format(typeof(value), tostring(result))
					warn(warning)
				end
			end

			return output
		end,
	},

	Axes = {
		fromPod = function(pod)
			local axes = {}

			for index, axisName in ipairs(pod) do
				axes[index] = Enum.Axis[axisName]
			end

			return Axes.new(unpack(axes))
		end,

		toPod = function(roblox)
			local json = {}

			for _, axis in ipairs(ALL_AXES) do
				if roblox[axis] then
					table.insert(json, axis)
				end
			end

			return json
		end,
	},

	BinaryString = {
		fromPod = base64.decode,
		toPod = base64.encode,
	},

	Bool = {
		fromPod = identity,
		toPod = identity,
	},

	BrickColor = {
		fromPod = function(pod)
			return BrickColor.new(pod)
		end,

		toPod = function(roblox)
			return roblox.Number
		end,
	},

	CFrame = {
		fromPod = function(pod)
			local pos = pod.position
			local orient = pod.orientation

			return CFrame.new(
				pos[1], pos[2], pos[3],
				orient[1][1], orient[1][2], orient[1][3],
				orient[2][1], orient[2][2], orient[2][3],
				orient[3][1], orient[3][2], orient[3][3]
			)
		end,

		toPod = function(roblox)
			local x, y, z,
				r00, r01, r02,
				r10, r11, r12,
				r20, r21, r22 = roblox:GetComponents()

			return {
				position = {x, y, z},
				orientation = {
					{r00, r01, r02},
					{r10, r11, r12},
					{r20, r21, r22},
				},
			}
		end,
	},

	Color3 = {
		fromPod = unpackDecoder(Color3.new),

		toPod = function(roblox)
			return {roblox.r, roblox.g, roblox.b}
		end,
	},

	Color3uint8 = {
		fromPod = unpackDecoder(Color3.fromRGB),

		toPod = function(roblox)
			return {
				math.round(roblox.R * 255),
				math.round(roblox.G * 255),
				math.round(roblox.B * 255),
			}
		end,
	},

	ColorSequence = {
		fromPod = function(pod)
			local keypoints = {}

			for index, keypoint in ipairs(pod.keypoints) do
				keypoints[index] = ColorSequenceKeypoint.new(
					keypoint.time,
					types.Color3.fromPod(keypoint.color)
				)
			end

			return ColorSequence.new(keypoints)
		end,

		toPod = function(roblox)
			local keypoints = {}

			for index, keypoint in ipairs(roblox.Keypoints) do
				keypoints[index] = {
					time = keypoint.Time,
					color = types.Color3.toPod(keypoint.Value),
				}
			end

			return {
				keypoints = keypoints,
			}
		end,
	},

	Content = {
		fromPod = identity,
		toPod = identity,
	},

	Enum = {
		fromPod = identity,

		toPod = function(roblox)
			-- FIXME: More robust handling of enums
			if typeof(roblox) == "number" then
				return roblox
			else
				return roblox.Value
			end
		end,
	},

	Faces = {
		fromPod = function(pod)
			local faces = {}

			for index, faceName in ipairs(pod) do
				faces[index] = Enum.NormalId[faceName]
			end

			return Faces.new(unpack(faces))
		end,

		toPod = function(roblox)
			local pod = {}

			for _, face in ipairs(ALL_FACES) do
				if roblox[face] then
					table.insert(pod, face)
				end
			end

			return pod
		end,
	},

	Float32 = {
		fromPod = identity,
		toPod = serializeFloat,
	},

	Float64 = {
		fromPod = identity,
		toPod = serializeFloat,
	},

	Int32 = {
		fromPod = identity,
		toPod = identity,
	},

	Int64 = {
		fromPod = identity,
		toPod = identity,
	},

	NumberRange = {
		fromPod = unpackDecoder(NumberRange.new),

		toPod = function(roblox)
			return {roblox.Min, roblox.Max}
		end,
	},

	NumberSequence = {
		fromPod = function(pod)
			local keypoints = {}

			for index, keypoint in ipairs(pod.keypoints) do
				keypoints[index] = NumberSequenceKeypoint.new(
					keypoint.time,
					keypoint.value,
					keypoint.envelope
				)
			end

			return NumberSequence.new(keypoints)
		end,

		toPod = function(roblox)
			local keypoints = {}

			for index, keypoint in ipairs(roblox.Keypoints) do
				keypoints[index] = {
					time = keypoint.Time,
					value = keypoint.Value,
					envelope = keypoint.Envelope,
				}
			end

			return {
				keypoints = keypoints,
			}
		end,
	},

	PhysicalProperties = {
		fromPod = function(pod)
			if pod == "Default" then
				return nil
			else
				return PhysicalProperties.new(
					pod.density,
					pod.friction,
					pod.elasticity,
					pod.frictionWeight,
					pod.elasticityWeight
				)
			end
		end,

		toPod = function(roblox)
			if roblox == nil then
				return "Default"
			else
				return {
					density = roblox.Density,
					friction = roblox.Friction,
					elasticity = roblox.Elasticity,
					frictionWeight = roblox.FrictionWeight,
					elasticityWeight = roblox.ElasticityWeight,
				}
			end
		end,
	},

	Ray = {
		fromPod = function(pod)
			return Ray.new(
				types.Vector3.fromPod(pod.origin),
				types.Vector3.fromPod(pod.direction)
			)
		end,

		toPod = function(roblox)
			return {
				origin = types.Vector3.toPod(roblox.Origin),
				direction = types.Vector3.toPod(roblox.Direction),
			}
		end,
	},

	Rect = {
		fromPod = function(pod)
			return Rect.new(
				types.Vector2.fromPod(pod[1]),
				types.Vector2.fromPod(pod[2])
			)
		end,

		toPod = function(roblox)
			return {
				types.Vector2.toPod(roblox.Min),
				types.Vector2.toPod(roblox.Max),
			}
		end,
	},

	Ref = {
		fromPod = function(_pod)
			error("Ref cannot be decoded on its own")
		end,

		toPod = function(_roblox)
			error("Ref can not be encoded on its own")
		end,
	},

	Region3 = {
		fromPod = function(pod)
			error("Region3 is not implemented")
		end,

		toPod = function(roblox)
			error("Region3 is not implemented")
		end,
	},

	Region3int16 = {
		fromPod = function(pod)
			return Region3int16.new(
				types.Vector3int16.fromPod(pod[1]),
				types.Vector3int16.fromPod(pod[2])
			)
		end,

		toPod = function(roblox)
			return {
				types.Vector3int16.toPod(roblox.Min),
				types.Vector3int16.toPod(roblox.Max),
			}
		end,
	},

	SharedString = {
		fromPod = function(pod)
			error("SharedString is not supported")
		end,

		toPod = function(roblox)
			error("SharedString is not supported")
		end,
	},

	String = {
		fromPod = identity,
		toPod = identity,
	},

	UDim = {
		fromPod = unpackDecoder(UDim.new),

		toPod = function(roblox)
			return {roblox.Scale, roblox.Offset}
		end,
	},

	UDim2 = {
		fromPod = function(pod)
			return UDim2.new(
				types.UDim.fromPod(pod[1]),
				types.UDim.fromPod(pod[2])
			)
		end,

		toPod = function(roblox)
			return {
				types.UDim.toPod(roblox.X),
				types.UDim.toPod(roblox.Y),
			}
		end,
	},

	Tags = {
		fromPod = identity,
		toPod = identity,
	},

	Vector2 = {
		fromPod = unpackDecoder(Vector2.new),

		toPod = function(roblox)
			return {
				serializeFloat(roblox.X),
				serializeFloat(roblox.Y),
			}
		end,
	},

	Vector2int16 = {
		fromPod = unpackDecoder(Vector2int16.new),

		toPod = function(roblox)
			return {roblox.X, roblox.Y}
		end,
	},

	Vector3 = {
		fromPod = unpackDecoder(Vector3.new),

		toPod = function(roblox)
			return {
				serializeFloat(roblox.X),
				serializeFloat(roblox.Y),
				serializeFloat(roblox.Z),
			}
		end,
	},

	Vector3int16 = {
		fromPod = unpackDecoder(Vector3int16.new),

		toPod = function(roblox)
			return {roblox.X, roblox.Y, roblox.Z}
		end,
	},
}

function EncodedValue.decode(encodedValue)
	local ty, value = next(encodedValue)

	local typeImpl = types[ty]
	if typeImpl == nil then
		return false, "Couldn't decode value " .. tostring(ty)
	end

	return true, typeImpl.fromPod(value)
end

function EncodedValue.encode(rbxValue, propertyType)
	assert(propertyType ~= nil, "Property type descriptor is required")

	local typeImpl = types[propertyType]
	if typeImpl == nil then
		return false, ("Missing encoder for property type %q"):format(propertyType)
	end

	return true, {
		[propertyType] = typeImpl.toPod(rbxValue),
	}
end

local propertyTypeRenames = {
	number = "Float64",
	boolean = "Bool",
	string = "String",
}

function EncodedValue.encodeNaive(rbxValue)
	local propertyType = typeof(rbxValue)
	if propertyTypeRenames[propertyType] ~= nil then
		propertyType = propertyTypeRenames[propertyType]
	end

	return EncodedValue.encode(rbxValue, propertyType)
end

return EncodedValue
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f7b</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX42734f2ed68a42eaaacf9d13eac908a1">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">EncodedValue.spec</string>
								<string name="ScriptGuid">{8b71aa75-6df5-49f8-ba48-4df58214c1c9}</string>
								<ProtectedString name="Source"><![CDATA[return function()
	local HttpService = game:GetService("HttpService")
	
	local EncodedValue = require(script.Parent.EncodedValue)
	local allValues = require(script.Parent.allValues)

	local function deepEq(a, b)
		if typeof(a) ~= typeof(b) then
			return false
		end

		local ty = typeof(a)

		if ty == "table" then
			local visited = {}
			
			for key, valueA in pairs(a) do
				visited[key] = true
				
				if not deepEq(valueA, b[key]) then
					return false
				end
			end

			for key, valueB in pairs(b) do
				if visited[key] then
					continue
				end

				if not deepEq(valueB, a[key]) then
					return false
				end
			end

			return true
		else
			return a == b
		end
	end

	local extraAssertions = {
		CFrame = function(value)
			expect(value).to.equal(CFrame.new(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
		end,
	}

	for testName, testEntry in pairs(allValues) do
		it("round trip " .. testName, function()
			local ok, decoded = EncodedValue.decode(testEntry.value)
			assert(ok, decoded)

			if extraAssertions[testName] ~= nil then
				extraAssertions[testName](decoded)
			end

			local ok, encoded = EncodedValue.encode(decoded, testEntry.ty)
			assert(ok, encoded)

			if not deepEq(encoded, testEntry.value) then
				local expected = HttpService:JSONEncode(testEntry.value)
				local actual = HttpService:JSONEncode(encoded)

				local message = string.format(
					"Round-trip results did not match.\nExpected:\n%s\nActual:\n%s",
					expected, actual
				)

				error(message)
			end
		end)
	end
end
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f7c</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX4b2cc5fa58234827afd3a5252f6b6719">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Error</string>
								<string name="ScriptGuid">{09420648-515a-4bcf-b7e2-cd19b83f75ee}</string>
								<ProtectedString name="Source"><![CDATA[local Error = {}
Error.__index = Error

Error.Kind = {
	UnknownProperty = "UnknownProperty",
	PropertyNotReadable = "PropertyNotReadable",
	PropertyNotWritable = "PropertyNotWritable",
	Roblox = "Roblox",
}

setmetatable(Error.Kind, {
	__index = function(_, key)
		error(("%q is not a valid member of Error.Kind"):format(tostring(key)), 2)
	end,
})

function Error.new(kind, extra)
	return setmetatable({
		kind = kind,
		extra = extra,
	}, Error)
end

function Error:__tostring()
	return ("Error(%s: %s)"):format(self.kind, tostring(self.extra))
end

return Error]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f7d</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX13594f88aad241848344f5a21e7e2e04">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">PropertyDescriptor</string>
								<string name="ScriptGuid">{c660e001-573a-4b18-b24a-175ec7225fba}</string>
								<ProtectedString name="Source"><![CDATA[local Error = require(script.Parent.Error)
local customProperties = require(script.Parent.customProperties)

-- A wrapper around a property descriptor from the reflection database with some
-- extra convenience methods.
--
-- The aim of this API is to facilitate looking up a property once, then reading
-- from it or writing to it multiple times. It's also useful when a consumer
-- wants to check additional constraints on the property before trying to use
-- it, like scriptability.
local PropertyDescriptor = {}
PropertyDescriptor.__index = PropertyDescriptor

local function get(container, key)
	return container[key]
end

local function set(container, key, value)
	container[key] = value
end

function PropertyDescriptor.fromRaw(data, className, propertyName)
	local key, value = next(data.DataType)

	return setmetatable({
		-- The meanings of the key and value in DataType differ when the type of
		-- the property is Enum. When the property is of type Enum, the key is
		-- the name of the type:
		--
		-- { Enum = "<name of enum>" }
		--
		-- When the property is not of type Enum, the value is the name of the
		-- type:
		--
		-- { Value = "<data type>" }
		dataType = key == "Enum" and key or value,

		scriptability = data.Scriptability,
		className = className,
		name = propertyName,
	}, PropertyDescriptor)
end

function PropertyDescriptor:read(instance)
	if self.scriptability == "ReadWrite" or self.scriptability == "Read" then
		local success, value = xpcall(get, debug.traceback, instance, self.name)

		if success then
			return success, value
		else
			return false, Error.new(Error.Kind.Roblox, value)
		end
	end

	if self.scriptability == "Custom" then
		local interface = customProperties[self.className][self.name]

		return interface.read(instance, self.name)
	end

	if self.scriptability == "None" or self.scriptability == "Write" then
		local fullName = ("%s.%s"):format(instance.className, self.name)

		return false, Error.new(Error.Kind.PropertyNotReadable, fullName)
	end

	error(("Internal error: unexpected value of 'scriptability': %s"):format(tostring(self.scriptability)), 2)
end

function PropertyDescriptor:write(instance, value)
	if self.scriptability == "ReadWrite" or self.scriptability == "Write" then
		local success, err = xpcall(set, debug.traceback, instance, self.name, value)

		if success then
			return success
		else
			return false, Error.new(Error.Kind.Roblox, err)
		end
	end

	if self.scriptability == "Custom" then
		local interface = customProperties[self.className][self.name]

		return interface.write(instance, self.name, value)
	end

	if self.scriptability == "None" or self.scriptability == "Read" then
		local fullName = ("%s.%s"):format(instance.className, self.name)

		return false, Error.new(Error.Kind.PropertyNotWritable, fullName)
	end
end

return PropertyDescriptor
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f7e</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX9cc8a375b5d34618bdc7c20487922af1">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">allValues</string>
								<string name="ScriptGuid">{86cad66a-c429-4fe0-993b-049dd90e539f}</string>
								<ProtectedString name="Source"><![CDATA[return {
	Attributes = {
		ty = "Attributes",
		value = {
			Attributes = {
				TestBool = {
					Bool = true,
				},
				TestBrickColor = {
					BrickColor = 24,
				},
				TestColor3 = {
					Color3 = {1, 0.5, 0},
				},
				TestNumber = {
					Float64 = 1337,
				},
				TestRect = {
					Rect = {{1, 2}, {3, 4}},
				},
				TestString = {
					String = "Test",
				},
				TestUDim = {
					UDim = {1, 2},
				},
				TestUDim2 = {
					UDim2 = {{1, 2}, {3, 4}},
				},
				TestVector2 = {
					Vector2 = {1, 2},
				},
				TestVector3 = {
					Vector3 = {1, 2, 3},
				},
			},
		},
	},
	Axes = {
		ty = "Axes",
		value = {
			Axes = {"X", "Y", "Z"},
		},
	},
	BinaryString = {
		ty = "BinaryString",
		value = {
			BinaryString = "SGVsbG8h",
		},
	},
	Bool = {
		ty = "Bool",
		value = {
			Bool = true,
		},
	},
	BrickColor = {
		ty = "BrickColor",
		value = {
			BrickColor = 1004,
		},
	},
	CFrame = {
		ty = "CFrame",
		value = {
			CFrame = {
				orientation = {{4, 5, 6}, {7, 8, 9}, {10, 11, 12}},
				position = {1, 2, 3},
			},
		},
	},
	Color3 = {
		ty = "Color3",
		value = {
			Color3 = {1, 2, 3},
		},
	},
	Color3uint8 = {
		ty = "Color3uint8",
		value = {
			Color3uint8 = {0, 128, 255},
		},
	},
	ColorSequence = {
		ty = "ColorSequence",
		value = {
			ColorSequence = {
				keypoints = {{
					color = {1, 1, 0.5},
					time = 0,
				}, {
					color = {0, 0, 0},
					time = 1,
				}},
			},
		},
	},
	Content = {
		ty = "Content",
		value = {
			Content = "rbxassetid://12345",
		},
	},
	Enum = {
		ty = "Enum",
		value = {
			Enum = 1234,
		},
	},
	Faces = {
		ty = "Faces",
		value = {
			Faces = {"Right", "Top", "Back", "Left", "Bottom", "Front"},
		},
	},
	Float32 = {
		ty = "Float32",
		value = {
			Float32 = 15,
		},
	},
	Float64 = {
		ty = "Float64",
		value = {
			Float64 = 15123,
		},
	},
	Int32 = {
		ty = "Int32",
		value = {
			Int32 = 6014,
		},
	},
	Int64 = {
		ty = "Int64",
		value = {
			Int64 = 23491023,
		},
	},
	NumberRange = {
		ty = "NumberRange",
		value = {
			NumberRange = {-36, 94},
		},
	},
	NumberSequence = {
		ty = "NumberSequence",
		value = {
			NumberSequence = {
				keypoints = {{
					envelope = 2,
					time = 0,
					value = 5,
				}, {
					envelope = 0,
					time = 1,
					value = 22,
				}},
			},
		},
	},
	["PhysicalProperties-Custom"] = {
		ty = "PhysicalProperties",
		value = {
			PhysicalProperties = {
				density = 0.5,
				elasticity = 0,
				elasticityWeight = 25,
				friction = 1,
				frictionWeight = 50,
			},
		},
	},
	["PhysicalProperties-Default"] = {
		ty = "PhysicalProperties",
		value = {
			PhysicalProperties = "Default",
		},
	},
	Ray = {
		ty = "Ray",
		value = {
			Ray = {
				direction = {4, 5, 6},
				origin = {1, 2, 3},
			},
		},
	},
	Rect = {
		ty = "Rect",
		value = {
			Rect = {{0, 5}, {10, 15}},
		},
	},
	Region3int16 = {
		ty = "Region3int16",
		value = {
			Region3int16 = {{-10, -5, 0}, {5, 10, 15}},
		},
	},
	String = {
		ty = "String",
		value = {
			String = "Hello, world!",
		},
	},
	Tags = {
		ty = "Tags",
		value = {
			Tags = {"foo", "con'fusion?!", "bar"},
		},
	},
	UDim = {
		ty = "UDim",
		value = {
			UDim = {1, 32},
		},
	},
	UDim2 = {
		ty = "UDim2",
		value = {
			UDim2 = {{-1, 100}, {1, -100}},
		},
	},
	Vector2 = {
		ty = "Vector2",
		value = {
			Vector2 = {-50, 50},
		},
	},
	Vector2int16 = {
		ty = "Vector2int16",
		value = {
			Vector2int16 = {-300, 300},
		},
	},
	Vector3 = {
		ty = "Vector3",
		value = {
			Vector3 = {-300, 0, 1500},
		},
	},
	Vector3int16 = {
		ty = "Vector3int16",
		value = {
			Vector3int16 = {60, 37, -450},
		},
	},
}]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f7f</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX49ea3431f8dd459284adb14c407574ad">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">base64</string>
								<string name="ScriptGuid">{dd033df7-6072-4c7a-bb69-40b6fb2dd430}</string>
								<ProtectedString name="Source"><![CDATA[-- Thanks to Tiffany352 for this base64 implementation!

local floor = math.floor
local char = string.char

local function encodeBase64(str)
	local out = {}
	local nOut = 0
	local alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
	local strLen = #str

	-- 3 octets become 4 hextets
	for i = 1, strLen - 2, 3 do
		local b1, b2, b3 = str:byte(i, i + 3)
		local word = b3 + b2 * 256 + b1 * 256 * 256

		local h4 = word % 64 + 1
		word = floor(word / 64)
		local h3 = word % 64 + 1
		word = floor(word / 64)
		local h2 = word % 64 + 1
		word = floor(word / 64)
		local h1 = word % 64 + 1

		out[nOut + 1] = alphabet:sub(h1, h1)
		out[nOut + 2] = alphabet:sub(h2, h2)
		out[nOut + 3] = alphabet:sub(h3, h3)
		out[nOut + 4] = alphabet:sub(h4, h4)
		nOut = nOut + 4
	end

	local remainder = strLen % 3

	if remainder == 2 then
		-- 16 input bits -> 3 hextets (2 full, 1 partial)
		local b1, b2 = str:byte(-2, -1)
		-- partial is 4 bits long, leaving 2 bits of zero padding ->
		-- offset = 4
		local word = b2 * 4 + b1 * 4 * 256

		local h3 = word % 64 + 1
		word = floor(word / 64)
		local h2 = word % 64 + 1
		word = floor(word / 64)
		local h1 = word % 64 + 1

		out[nOut + 1] = alphabet:sub(h1, h1)
		out[nOut + 2] = alphabet:sub(h2, h2)
		out[nOut + 3] = alphabet:sub(h3, h3)
		out[nOut + 4] = "="
	elseif remainder == 1 then
		-- 8 input bits -> 2 hextets (2 full, 1 partial)
		local b1 = str:byte(-1, -1)
		-- partial is 2 bits long, leaving 4 bits of zero padding ->
		-- offset = 16
		local word = b1 * 16

		local h2 = word % 64 + 1
		word = floor(word / 64)
		local h1 = word % 64 + 1

		out[nOut + 1] = alphabet:sub(h1, h1)
		out[nOut + 2] = alphabet:sub(h2, h2)
		out[nOut + 3] = "="
		out[nOut + 4] = "="
	end
	-- if the remainder is 0, then no work is needed

	return table.concat(out, "")
end

local function decodeBase64(str)
	local out = {}
	local nOut = 0
	local alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
	local strLen = #str
	local acc = 0
	local nAcc = 0

	local alphabetLut = {}
	for i = 1, #alphabet do
		alphabetLut[alphabet:sub(i, i)] = i - 1
	end

	-- 4 hextets become 3 octets
	for i = 1, strLen do
		local ch = str:sub(i, i)
		local byte = alphabetLut[ch]
		if byte then
			acc = acc * 64 + byte
			nAcc = nAcc + 1
		end

		if nAcc == 4 then
			local b3 = acc % 256
			acc = floor(acc / 256)
			local b2 = acc % 256
			acc = floor(acc / 256)
			local b1 = acc % 256

			out[nOut + 1] = char(b1)
			out[nOut + 2] = char(b2)
			out[nOut + 3] = char(b3)
			nOut = nOut + 3
			nAcc = 0
			acc = 0
		end
	end

	if nAcc == 3 then
		-- 3 hextets -> 16 bit output
		acc = acc * 64
		acc = floor(acc / 256)
		local b2 = acc % 256
		acc = floor(acc / 256)
		local b1 = acc % 256

		out[nOut + 1] = char(b1)
		out[nOut + 2] = char(b2)
	elseif nAcc == 2 then
		-- 2 hextets -> 8 bit output
		acc = acc * 64
		acc = floor(acc / 256)
		acc = acc * 64
		acc = floor(acc / 256)
		local b1 = acc % 256

		out[nOut + 1] = char(b1)
	elseif nAcc == 1 then
		error("Base64 has invalid length")
	end

	return table.concat(out, "")
end

return {
	decode = decodeBase64,
	encode = encodeBase64,
}]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f80</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXc6a5b9a0c8094c3ca13bf34d5434699d">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">base64.spec</string>
								<string name="ScriptGuid">{2feb3967-076b-4dfb-9a88-5fe2aa3fe22d}</string>
								<ProtectedString name="Source"><![CDATA[return function()
	local base64 = require(script.Parent.base64)

	it("should encode and decode", function()
		local function try(str, expected)
			local encoded = base64.encode(str)
			expect(encoded).to.equal(expected)
			expect(base64.decode(encoded)).to.equal(str)
		end

		try("Man", "TWFu")
		try("Ma", "TWE=")
		try("M", "TQ==")
		try("ManM", "TWFuTQ==")
		try(
			[[Man is distinguished, not only by his reason, but by this ]]..
			[[singular passion from other animals, which is a lust of the ]]..
			[[mind, that by a perseverance of delight in the continued and ]]..
			[[indefatigable generation of knowledge, exceeds the short ]]..
			[[vehemence of any carnal pleasure.]],
			[[TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sI]]..
			[[GJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYW]]..
			[[xzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJ]]..
			[[zZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRl]]..
			[[ZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZ]]..
			[[SBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=]]
		)
	end)
end]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f81</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX26959d78558745d68b8c515ccd468439">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">customProperties</string>
								<string name="ScriptGuid">{53c0dce4-437b-4ac1-82c0-8daf1b9d558b}</string>
								<ProtectedString name="Source"><![CDATA[local CollectionService = game:GetService("CollectionService")

-- Defines how to read and write properties that aren't directly scriptable.
--
-- The reflection database refers to these as having scriptability = "Custom"
return {
	Instance = {
		Attributes = {
			read = function(instance)
				return true, instance:GetAttributes()
			end,
			write = function(instance, _, value)
				local existing = instance:GetAttributes()

				for key, attr in pairs(value) do
					instance:SetAttribute(key, attr)
				end

				for key in pairs(existing) do
					if value[key] == nil then
						instance:SetAttribute(key, nil)
					end
				end

				return true
			end,
		},
		Tags = {
			read = function(instance)
				return true, CollectionService:GetTags(instance)
			end,
			write = function(instance, _, value)
				local existingTags = CollectionService:GetTags(instance)

				local unseenTags = {}
				for _, tag in ipairs(existingTags) do
					unseenTags[tag] = true
				end

				for _, tag in ipairs(value) do
					unseenTags[tag] = nil
					CollectionService:AddTag(instance, tag)
				end

				for tag in pairs(unseenTags) do
					CollectionService:RemoveTag(instance, tag)
				end

				return true
			end,
		},
	},
	LocalizationTable = {
		Contents = {
			read = function(instance, key)
				return true, instance:GetContents()
			end,
			write = function(instance, key, value)
				instance:SetContents(value)
				return true
			end,
		},
	},
}
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f82</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX4371f341f3e24911a5a03624a043b072">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">init.spec</string>
								<string name="ScriptGuid">{074cc8f8-5ddc-41d2-b901-e5220a3c23e5}</string>
								<ProtectedString name="Source"><![CDATA[return function()
	local RbxDom = require(script.Parent)

	it("should load", function()
		expect(RbxDom).to.be.ok()
	end)
end]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001b1f84</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXa7b83c6a50554694b1a0c9e504ff93ff">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">database</string>
								<string name="ScriptGuid">{d314e177-95d9-4630-a000-2c65010328f5}</string>
								<ProtectedString name="Source"></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e001fee0e</UniqueId>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="Script" referent="RBXbd25b9cb68d74835be00bbd816ab735e">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Plugin</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{a1b0e74e-9924-467d-98f9-3b828a42457f}</string>
						<ProtectedString name="Source"><![CDATA[if not plugin then
	return
end

local Rojo = script:FindFirstAncestor("Rojo")
local Packages = Rojo.Packages

local Log = require(Packages.Log)
local Roact = require(Packages.Roact)

local Settings = require(script.Settings)
local Config = require(script.Config)
local App = require(script.App)

Log.setLogLevelThunk(function()
	return Log.Level[Settings:get("logLevel")] or Log.Level.Info
end)

local app = Roact.createElement(App, {
	plugin = plugin
})
local tree = Roact.mount(app, game:GetService("CoreGui"), "Rojo UI")

plugin.Unloading:Connect(function()
	Roact.unmount(tree)
end)

if Config.isDevBuild then
	local TestEZ = require(script.Parent.TestEZ)

	require(script.runTests)(TestEZ)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8d5</UniqueId>
					</Properties>
					<Item class="ModuleScript" referent="RBXe5750f5fcc7a4c4b9ac6941368559c32">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">ApiContext</string>
							<string name="ScriptGuid">{8c12c73f-061e-4365-8e5c-b048b1d5d6f7}</string>
							<ProtectedString name="Source"><![CDATA[local Packages = script.Parent.Parent.Packages
local Http = require(Packages.Http)
local Log = require(Packages.Log)
local Promise = require(Packages.Promise)

local Config = require(script.Parent.Config)
local Types = require(script.Parent.Types)
local Version = require(script.Parent.Version)

local validateApiInfo = Types.ifEnabled(Types.ApiInfoResponse)
local validateApiRead = Types.ifEnabled(Types.ApiReadResponse)
local validateApiSubscribe = Types.ifEnabled(Types.ApiSubscribeResponse)

--[[
	Returns a promise that will never resolve nor reject.
]]
local function hangingPromise()
	return Promise.new(function() end)
end

local function rejectFailedRequests(response)
	if response.code >= 400 then
		local message = string.format("HTTP %s:\n%s", tostring(response.code), response.body)

		return Promise.reject(message)
	end

	return response
end

local function rejectWrongProtocolVersion(infoResponseBody)
	if infoResponseBody.protocolVersion ~= Config.protocolVersion then
		local message = (
			"Found a Rojo dev server, but it's using a different protocol version, and is incompatible." ..
			"\nMake sure you have matching versions of both the Rojo plugin and server!" ..
			"\n\nYour client is version %s, with protocol version %s. It expects server version %s." ..
			"\nYour server is version %s, with protocol version %s." ..
			"\n\nGo to https://github.com/rojo-rbx/rojo for more details."
		):format(
			Version.display(Config.version), Config.protocolVersion,
			Config.expectedServerVersionString,
			infoResponseBody.serverVersion, infoResponseBody.protocolVersion
		)

		return Promise.reject(message)
	end

	return Promise.resolve(infoResponseBody)
end

local function rejectWrongPlaceId(infoResponseBody)
	if infoResponseBody.expectedPlaceIds ~= nil then
		local foundId = false

		for _, id in ipairs(infoResponseBody.expectedPlaceIds) do
			if id == game.PlaceId then
				foundId = true
				break
			end
		end

		if not foundId then
			local idList = {}
			for _, id in ipairs(infoResponseBody.expectedPlaceIds) do
				table.insert(idList, "- " .. tostring(id))
			end

			local message = (
				"Found a Rojo server, but its project is set to only be used with a specific list of places." ..
				"\nYour place ID is %s, but needs to be one of these:" ..
				"\n%s" ..
				"\n\nTo change this list, edit 'servePlaceIds' in your .project.json file."
			):format(
				tostring(game.PlaceId),
				table.concat(idList, "\n")
			)

			return Promise.reject(message)
		end
	end

	return Promise.resolve(infoResponseBody)
end

local ApiContext = {}
ApiContext.__index = ApiContext

function ApiContext.new(baseUrl)
	assert(type(baseUrl) == "string", "baseUrl must be a string")

	local self = {
		__baseUrl = baseUrl,
		__sessionId = nil,
		__messageCursor = -1,
		__connected = true,
	}

	return setmetatable(self, ApiContext)
end

function ApiContext:__fmtDebug(output)
	output:writeLine("ApiContext {{")
	output:indent()

	output:writeLine("Connected: {}", self.__connected)
	output:writeLine("Base URL: {}", self.__baseUrl)
	output:writeLine("Session ID: {}", self.__sessionId)
	output:writeLine("Message Cursor: {}", self.__messageCursor)

	output:unindent()
	output:write("}")
end

function ApiContext:disconnect()
	self.__connected = false
end

function ApiContext:setMessageCursor(index)
	self.__messageCursor = index
end

function ApiContext:connect()
	local url = ("%s/api/rojo"):format(self.__baseUrl)

	return Http.get(url)
		:andThen(rejectFailedRequests)
		:andThen(Http.Response.json)
		:andThen(rejectWrongProtocolVersion)
		:andThen(function(body)
			assert(validateApiInfo(body))

			return body
		end)
		:andThen(rejectWrongPlaceId)
		:andThen(function(body)
			self.__sessionId = body.sessionId

			return body
		end)
end

function ApiContext:read(ids)
	local url = ("%s/api/read/%s"):format(self.__baseUrl, table.concat(ids, ","))

	return Http.get(url)
		:andThen(rejectFailedRequests)
		:andThen(Http.Response.json)
		:andThen(function(body)
			if body.sessionId ~= self.__sessionId then
				return Promise.reject("Server changed ID")
			end

			assert(validateApiRead(body))

			return body
		end)
end

function ApiContext:write(patch)
	local url = ("%s/api/write"):format(self.__baseUrl)

	local updated = {}
	for _, update in ipairs(patch.updated) do
		local fixedUpdate = {
			id = update.id,
			changedName = update.changedName,
		}

		if next(update.changedProperties) ~= nil then
			fixedUpdate.changedProperties = update.changedProperties
		end

		table.insert(updated, fixedUpdate)
	end

	-- Only add the 'added' field if the table is non-empty, or else Roblox's
	-- JSON implementation will turn the table into an array instead of an
	-- object, causing API validation to fail.
	local added
	if next(patch.added) ~= nil then
		added = patch.added
	end

	local body = {
		sessionId = self.__sessionId,
		removed = patch.removed,
		updated = updated,
		added = added,
	}

	body = Http.jsonEncode(body)

	return Http.post(url, body)
		:andThen(rejectFailedRequests)
		:andThen(Http.Response.json)
		:andThen(function(body)
			Log.info("Write response: {:?}", body)

			return body
		end)
end

function ApiContext:retrieveMessages()
	local url = ("%s/api/subscribe/%s"):format(self.__baseUrl, self.__messageCursor)

	local function sendRequest()
		return Http.get(url)
			:catch(function(err)
				if err.type == Http.Error.Kind.Timeout then
					if self.__connected then
						return sendRequest()
					else
						return hangingPromise()
					end
				end

				return Promise.reject(err)
			end)
	end

	return sendRequest()
		:andThen(rejectFailedRequests)
		:andThen(Http.Response.json)
		:andThen(function(body)
			if body.sessionId ~= self.__sessionId then
				return Promise.reject("Server changed ID")
			end

			assert(validateApiSubscribe(body))

			self:setMessageCursor(body.messageCursor)

			return body.messages
		end)
end

function ApiContext:open(id)
	local url = ("%s/api/open/%s"):format(self.__baseUrl, id)

	return Http.post(url, "")
		:andThen(rejectFailedRequests)
		:andThen(Http.Response.json)
		:andThen(function(body)
			if body.sessionId ~= self.__sessionId then
				return Promise.reject("Server changed ID")
			end

			return nil
		end)
end

return ApiContext
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8d6</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX7a1fa071b98f4240a1ad99f52cb3a91a">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">App</string>
							<string name="ScriptGuid">{8f3b68aa-9234-4d9c-a8e6-2b2b94ce7f38}</string>
							<ProtectedString name="Source"><![CDATA[local Players = game:GetService("Players")
local ServerStorage = game:GetService("ServerStorage")

local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)
local Log = require(Packages.Log)

local Assets = require(Plugin.Assets)
local Version = require(Plugin.Version)
local Config = require(Plugin.Config)
local Settings = require(Plugin.Settings)
local strict = require(Plugin.strict)
local Dictionary = require(Plugin.Dictionary)
local ServeSession = require(Plugin.ServeSession)
local ApiContext = require(Plugin.ApiContext)
local preloadAssets = require(Plugin.preloadAssets)
local soundPlayer = require(Plugin.soundPlayer)
local Theme = require(script.Theme)

local Page = require(script.Page)
local Notifications = require(script.Notifications)
local StudioPluginAction = require(script.Components.Studio.StudioPluginAction)
local StudioToolbar = require(script.Components.Studio.StudioToolbar)
local StudioToggleButton = require(script.Components.Studio.StudioToggleButton)
local StudioPluginGui = require(script.Components.Studio.StudioPluginGui)
local StudioPluginContext = require(script.Components.Studio.StudioPluginContext)
local StatusPages = require(script.StatusPages)

local AppStatus = strict("AppStatus", {
	NotConnected = "NotConnected",
	Settings = "Settings",
	Connecting = "Connecting",
	Connected = "Connected",
	Error = "Error",
})

local e = Roact.createElement

local App = Roact.Component:extend("App")

function App:init()
	preloadAssets()

	self.host, self.setHost = Roact.createBinding("")
	self.port, self.setPort = Roact.createBinding("")
	self.patchInfo, self.setPatchInfo = Roact.createBinding({
		changes = 0,
		timestamp = os.time(),
	})

	self:setState({
		appStatus = AppStatus.NotConnected,
		guiEnabled = false,
		notifications = {},
		toolbarIcon = Assets.Images.PluginButton,
	})
end

function App:addNotification(text: string, timeout: number?)
	if not Settings:get("showNotifications") then
		return
	end

	local notifications = table.clone(self.state.notifications)
	table.insert(notifications, {
		text = text,
		timestamp = DateTime.now().UnixTimestampMillis,
		timeout = timeout or 3,
	})

	self:setState({
		notifications = notifications,
	})
end

function App:closeNotification(index: number)
	local notifications = table.clone(self.state.notifications)
	table.remove(notifications, index)

	self:setState({
		notifications = notifications,
	})
end

function App:getHostAndPort()
	local host = self.host:getValue()
	local port = self.port:getValue()

	local host = if #host > 0 then host else Config.defaultHost
	local port = if #port > 0 then port else Config.defaultPort

	return host, port
end

function App:claimSyncLock()
	if #Players:GetPlayers() == 0 then
		Log.trace("Skipping sync lock because this isn't in Team Create")
		return true
	end

	local lock = ServerStorage:FindFirstChild("__Rojo_SessionLock")
	if not lock then
		lock = Instance.new("ObjectValue")
		lock.Name = "__Rojo_SessionLock"
		lock.Archivable = false
		lock.Value = Players.LocalPlayer
		lock.Parent = ServerStorage
		Log.trace("Created and claimed sync lock")
		return true
	end

	if lock.Value and lock.Value ~= Players.LocalPlayer and lock.Value.Parent then
		Log.trace("Found existing sync lock owned by {}", lock.Value)
		return false, lock.Value
	end

	lock.Value = Players.LocalPlayer
	Log.trace("Claimed existing sync lock")
	return true
end

function App:releaseSyncLock()
	local lock = ServerStorage:FindFirstChild("__Rojo_SessionLock")
	if not lock then
		Log.trace("No sync lock found, assumed released")
		return
	end

	if lock.Value == Players.LocalPlayer then
		lock.Value = nil
		Log.trace("Released sync lock")
		return
	end

	Log.trace("Could not relase sync lock because it is owned by {}", lock.Value)
end

function App:startSession()
	local claimedLock, priorOwner = self:claimSyncLock()
	if not claimedLock then
		local msg = string.format("Could not sync because user '%s' is already syncing", tostring(priorOwner))

		Log.warn(msg)
		self:addNotification(msg, 10)
		self:setState({
			appStatus = AppStatus.Error,
			errorMessage = msg,
			toolbarIcon = Assets.Images.PluginButtonWarning,
		})

		return
	end

	local host, port = self:getHostAndPort()

	local sessionOptions = {
		openScriptsExternally = Settings:get("openScriptsExternally"),
		twoWaySync = Settings:get("twoWaySync"),
	}

	local baseUrl = ("http://%s:%s"):format(host, port)
	local apiContext = ApiContext.new(baseUrl)

	local serveSession = ServeSession.new({
		apiContext = apiContext,
		openScriptsExternally = sessionOptions.openScriptsExternally,
		twoWaySync = sessionOptions.twoWaySync,
	})

	serveSession:onPatchApplied(function(patch, unapplied)
		local now = os.time()
		local changes = 0

		for _, set in patch do
			for _ in set do
				changes += 1
			end
		end
		for _, set in unapplied do
			for _ in set do
				changes -= 1
			end
		end

		if changes == 0 then return end

		local old = self.patchInfo:getValue()
		if now - old.timestamp < 2 then
			changes += old.changes
		end

		self.setPatchInfo({
			changes = changes,
			timestamp = now,
		})
	end)

	serveSession:onStatusChanged(function(status, details)
		if status == ServeSession.Status.Connecting then
			self:setState({
				appStatus = AppStatus.Connecting,
				toolbarIcon = Assets.Images.PluginButton,
			})
			self:addNotification("Connecting to session...")
		elseif status == ServeSession.Status.Connected then
			local address = ("%s:%s"):format(host, port)
			self:setState({
				appStatus = AppStatus.Connected,
				projectName = details,
				address = address,
				toolbarIcon = Assets.Images.PluginButtonConnected,
			})
			self:addNotification(string.format("Connected to session '%s' at %s.", details, address), 5)
		elseif status == ServeSession.Status.Disconnected then
			self.serveSession = nil
			self:releaseSyncLock()

			-- Details being present indicates that this
			-- disconnection was from an error.
			if details ~= nil then
				Log.warn("Disconnected from an error: {}", details)

				self:setState({
					appStatus = AppStatus.Error,
					errorMessage = tostring(details),
					toolbarIcon = Assets.Images.PluginButtonWarning,
				})
				self:addNotification(tostring(details), 10)
			else
				self:setState({
					appStatus = AppStatus.NotConnected,
					toolbarIcon = Assets.Images.PluginButton,
				})
				self:addNotification("Disconnected from session.")
			end
		end
	end)

	serveSession:start()

	self.serveSession = serveSession

	task.defer(function()
		while self.serveSession == serveSession do
			-- Trigger rerender to update timestamp text
			local patchInfo = table.clone(self.patchInfo:getValue())
			self.setPatchInfo(patchInfo)
			local elapsed = os.time() - patchInfo.timestamp
			task.wait(elapsed < 60 and 1 or elapsed/5)
		end
	end)
end

function App:endSession()
	if self.serveSession == nil then
		return
	end

	Log.trace("Disconnecting session")

	self.serveSession:stop()
	self.serveSession = nil
	self:setState({
		appStatus = AppStatus.NotConnected,
	})

	Log.trace("Session terminated by user")
end

function App:render()
	local pluginName = "Rojo " .. Version.display(Config.version)

	local function createPageElement(appStatus, additionalProps)
		additionalProps = additionalProps or {}

		local props = Dictionary.merge(additionalProps, {
			component = StatusPages[appStatus],
			active = self.state.appStatus == appStatus,
		})

		return e(Page, props)
	end

	return e(StudioPluginContext.Provider, {
		value = self.props.plugin,
	}, {
		e(Theme.StudioProvider, nil, {
			gui = e(StudioPluginGui, {
				id = pluginName,
				title = pluginName,
				active = self.state.guiEnabled,

				initDockState = Enum.InitialDockState.Right,
				initEnabled = false,
				overridePreviousState = false,
				floatingSize = Vector2.new(300, 200),
				minimumSize = Vector2.new(300, 120),

				zIndexBehavior = Enum.ZIndexBehavior.Sibling,

				onInitialState = function(initialState)
					self:setState({
						guiEnabled = initialState,
					})
				end,

				onClose = function()
					self:setState({
						guiEnabled = false,
					})
				end,
			}, {
				NotConnectedPage = createPageElement(AppStatus.NotConnected, {
					host = self.host,
					onHostChange = self.setHost,
					port = self.port,
					onPortChange = self.setPort,

					onConnect = function()
						self:startSession()
					end,

					onNavigateSettings = function()
						self:setState({
							appStatus = AppStatus.Settings,
						})
					end,
				}),

				Connecting = createPageElement(AppStatus.Connecting),

				Connected = createPageElement(AppStatus.Connected, {
					projectName = self.state.projectName,
					address = self.state.address,
					patchInfo = self.patchInfo,

					onDisconnect = function()
						self:endSession()
					end,
				}),

				Settings = createPageElement(AppStatus.Settings, {
					onBack = function()
						self:setState({
							appStatus = AppStatus.NotConnected,
						})
					end,
				}),

				Error = createPageElement(AppStatus.Error, {
					errorMessage = self.state.errorMessage,

					onClose = function()
						self:setState({
							appStatus = AppStatus.NotConnected,
							toolbarIcon = Assets.Images.PluginButton,
						})
					end,
				}),

				Background = Theme.with(function(theme)
					return e("Frame", {
						Size = UDim2.new(1, 0, 1, 0),
						BackgroundColor3 = theme.BackgroundColor,
						ZIndex = 0,
						BorderSizePixel = 0,
					})
				end),
			}),

			RojoNotifications = e("ScreenGui", {}, {
				layout = e("UIListLayout", {
					SortOrder = Enum.SortOrder.LayoutOrder,
					HorizontalAlignment = Enum.HorizontalAlignment.Right,
					VerticalAlignment = Enum.VerticalAlignment.Bottom,
					Padding = UDim.new(0, 5),
				}),
				padding = e("UIPadding", {
					PaddingTop = UDim.new(0, 5);
					PaddingBottom = UDim.new(0, 5);
					PaddingLeft = UDim.new(0, 5);
					PaddingRight = UDim.new(0, 5);
				}),
				notifs = e(Notifications, {
					soundPlayer = self.props.soundPlayer,
					notifications = self.state.notifications,
					onClose = function(index)
						self:closeNotification(index)
					end,
				}),
			}),

			toggleAction = e(StudioPluginAction, {
				name = "RojoConnection",
				title = "Rojo: Connect/Disconnect",
				description = "Toggles the server for a Rojo sync session",
				icon = Assets.Images.PluginButton,
				bindable = true,
				onTriggered = function()
					if self.serveSession == nil or self.serveSession:getStatus() == ServeSession.Status.NotStarted then
						self:startSession()
					elseif self.serveSession ~= nil and self.serveSession:getStatus() == ServeSession.Status.Connected then
						self:endSession()
					end
				end,
			}),

			connectAction = e(StudioPluginAction, {
				name = "RojoConnect",
				title = "Rojo: Connect",
				description = "Connects the server for a Rojo sync session",
				icon = Assets.Images.PluginButton,
				bindable = true,
				onTriggered = function()
					if self.serveSession == nil or self.serveSession:getStatus() == ServeSession.Status.NotStarted then
						self:startSession()
					end
				end,
			}),

			disconnectAction = e(StudioPluginAction, {
				name = "RojoDisconnect",
				title = "Rojo: Disconnect",
				description = "Disconnects the server for a Rojo sync session",
				icon = Assets.Images.PluginButton,
				bindable = true,
				onTriggered = function()
					if self.serveSession ~= nil and self.serveSession:getStatus() == ServeSession.Status.Connected then
						self:endSession()
					end
				end,
			}),

			toolbar = e(StudioToolbar, {
				name = pluginName,
			}, {
				button = e(StudioToggleButton, {
					name = "Rojo",
					tooltip = "Show or hide the Rojo panel",
					icon = self.state.toolbarIcon,
					active = self.state.guiEnabled,
					enabled = true,
					onClick = function()
						self:setState(function(state)
							return {
								guiEnabled = not state.guiEnabled,
							}
						end)
					end,
				})
			}),
		}),
	})
end

return function(props)
	local mergedProps = Dictionary.merge(props, {
		soundPlayer = soundPlayer.new(Settings),
	})

	return e(App, mergedProps)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8d7</UniqueId>
						</Properties>
						<Item class="Folder" referent="RBX6f1189a7abf24d3c9c6ca6fc781ce46c">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<string name="Name">Components</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8d8</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBXfaddab3139094681a51e8ec09aa6553d">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">BorderedContainer</string>
									<string name="ScriptGuid">{f7a4d229-b305-478d-841b-2caf17c90edb}</string>
									<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Theme = require(Plugin.App.Theme)
local Assets = require(Plugin.Assets)

local SlicedImage = require(script.Parent.SlicedImage)

local e = Roact.createElement

local function BorderedContainer(props)
	return Theme.with(function(theme)
		return e(SlicedImage, {
			slice = Assets.Slices.RoundedBackground,
			color = theme.BorderedContainer.BackgroundColor,
			transparency = props.transparency,

			size = props.size,
			position = props.position,
			anchorPoint = props.anchorPoint,
			layoutOrder = props.layoutOrder,
		}, {
			Content = e("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
				BackgroundTransparency = 1,
			}, props[Roact.Children]),

			Border = e(SlicedImage, {
				slice = Assets.Slices.RoundedBorder,
				color = theme.BorderedContainer.BorderColor,
				transparency = props.transparency,

				size = UDim2.new(1, 0, 1, 0),
			}),
		})
	end)
end

return BorderedContainer
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8d9</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBXc8ec4665b2fa4102bd32a77951e7ec6e">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Checkbox</string>
									<string name="ScriptGuid">{83b0779e-882f-41d3-879e-8bc05f90d75d}</string>
									<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)
local Flipper = require(Packages.Flipper)

local Assets = require(Plugin.Assets)
local Theme = require(Plugin.App.Theme)
local bindingUtil = require(Plugin.App.bindingUtil)

local SlicedImage = require(script.Parent.SlicedImage)

local e = Roact.createElement

local Checkbox = Roact.Component:extend("Checkbox")

function Checkbox:init()
	self.motor = Flipper.SingleMotor.new(self.props.active and 1 or 0)
	self.binding = bindingUtil.fromMotor(self.motor)
end

function Checkbox:didUpdate(lastProps)
	if lastProps.active ~= self.props.active then
		self.motor:setGoal(
			Flipper.Spring.new(self.props.active and 1 or 0, {
				frequency = 6,
				dampingRatio = 1.1,
			})
		)
	end
end

function Checkbox:render()
	return Theme.with(function(theme)
		theme = theme.Checkbox

		local activeTransparency = Roact.joinBindings({
			self.binding:map(function(value)
				return 1 - value
			end),
			self.props.transparency,
		}):map(bindingUtil.blendAlpha)

		return e("ImageButton", {
			Size = UDim2.new(0, 28, 0, 28),
			Position = self.props.position,
			AnchorPoint = self.props.anchorPoint,
			LayoutOrder = self.props.layoutOrder,
			ZIndex = self.props.zIndex,
			BackgroundTransparency = 1,

			[Roact.Event.Activated] = self.props.onClick,
		}, {
			Active = e(SlicedImage, {
				slice = Assets.Slices.RoundedBackground,
				color = theme.Active.BackgroundColor,
				transparency = activeTransparency,
				size = UDim2.new(1, 0, 1, 0),
				zIndex = 2,
			}, {
				Icon = e("ImageLabel", {
					Image = Assets.Images.Checkbox.Active,
					ImageColor3 = theme.Active.IconColor,
					ImageTransparency = activeTransparency,

					Size = UDim2.new(0, 16, 0, 16),
					Position = UDim2.new(0.5, 0, 0.5, 0),
					AnchorPoint = Vector2.new(0.5, 0.5),

					BackgroundTransparency = 1,
				}),
			}),

			Inactive = e(SlicedImage, {
				slice = Assets.Slices.RoundedBorder,
				color = theme.Inactive.BorderColor,
				transparency = self.props.transparency,
				size = UDim2.new(1, 0, 1, 0),
			}, {
				Icon = e("ImageLabel", {
					Image = Assets.Images.Checkbox.Inactive,
					ImageColor3 = theme.Inactive.IconColor,
					ImageTransparency = self.props.transparency,

					Size = UDim2.new(0, 16, 0, 16),
					Position = UDim2.new(0.5, 0, 0.5, 0),
					AnchorPoint = Vector2.new(0.5, 0.5),

					BackgroundTransparency = 1,
				}),
			}),
		})
	end)
end

return Checkbox
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8da</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX8228a77883384b4cbca73aae22fabca5">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Dropdown</string>
									<string name="ScriptGuid">{536788f4-d16a-4ff3-810f-db3d89e1bca5}</string>
									<ProtectedString name="Source"><![CDATA[local TextService = game:GetService("TextService")

local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)
local Flipper = require(Packages.Flipper)

local Assets = require(Plugin.Assets)
local Theme = require(Plugin.App.Theme)
local bindingUtil = require(Plugin.App.bindingUtil)

local SlicedImage = require(script.Parent.SlicedImage)
local ScrollingFrame = require(script.Parent.ScrollingFrame)

local e = Roact.createElement

local Dropdown = Roact.Component:extend("Dropdown")

function Dropdown:init()
	self.openMotor = Flipper.SingleMotor.new(0)
	self.openBinding = bindingUtil.fromMotor(self.openMotor)

	self.contentSize, self.setContentSize = Roact.createBinding(Vector2.new(0, 0))

	self:setState({
		open = false,
	})
end

function Dropdown:didUpdate()
	self.openMotor:setGoal(
		Flipper.Spring.new(self.state.open and 1 or 0, {
			frequency = 6,
			dampingRatio = 1.1,
		})
	)
end

function Dropdown:render()
	return Theme.with(function(theme)
		theme = theme.Dropdown

		local optionButtons = {}
		local width = -1
		for i, option in self.props.options do
			local text = tostring(option or "")
			local textSize = TextService:GetTextSize(
				text, 15, Enum.Font.GothamMedium,
				Vector2.new(math.huge, 20)
			)
			if textSize.X > width then
				width = textSize.X
			end

			optionButtons[text] = e("TextButton", {
				Text = text,
				LayoutOrder = i,
				Size = UDim2.new(1, 0, 0, 24),
				BackgroundColor3 = theme.BackgroundColor,
				TextTransparency = self.props.transparency,
				BackgroundTransparency = self.props.transparency,
				BorderSizePixel = 0,
				TextColor3 = theme.TextColor,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextSize = 15,
				Font = Enum.Font.GothamMedium,

				[Roact.Event.Activated] = function()
					self:setState({
						open = false,
					})
					self.props.onClick(option)
				end,
			}, {
				Padding = e("UIPadding", {
					PaddingLeft = UDim.new(0, 6),
				}),
			})
		end

		return e("ImageButton", {
			Size = UDim2.new(0, width+50, 0, 28),
			Position = self.props.position,
			AnchorPoint = self.props.anchorPoint,
			LayoutOrder = self.props.layoutOrder,
			ZIndex = self.props.zIndex,
			BackgroundTransparency = 1,

			[Roact.Event.Activated] = function()
				self:setState({
					open = not self.state.open,
				})
			end,
		}, {
			Border = e(SlicedImage, {
				slice = Assets.Slices.RoundedBorder,
				color = theme.BorderColor,
				transparency = self.props.transparency,
				size = UDim2.new(1, 0, 1, 0),
			}, {
				DropArrow = e("ImageLabel", {
					Image = Assets.Images.Dropdown.Arrow,
					ImageColor3 = self.openBinding:map(function(a)
						return theme.Closed.IconColor:Lerp(theme.Open.IconColor, a)
					end),
					ImageTransparency = self.props.transparency,

					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(1, -6, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5),
					Rotation = self.openBinding:map(function(a)
						return a * 180
					end),

					BackgroundTransparency = 1,
				}),
				Active = e("TextLabel", {
					Size = UDim2.new(1, -30, 1, 0),
					Position = UDim2.new(0, 6, 0, 0),
					BackgroundTransparency = 1,
					Text = self.props.active,
					Font = Enum.Font.GothamMedium,
					TextSize = 15,
					TextColor3 = theme.TextColor,
					TextXAlignment = Enum.TextXAlignment.Left,
					TextTransparency = self.props.transparency,
				}),
			}),
			Options = if self.state.open then e(SlicedImage, {
				slice = Assets.Slices.RoundedBackground,
				color = theme.BackgroundColor,
				position = UDim2.new(1, 0, 1, 3),
				size = self.openBinding:map(function(a)
					return UDim2.new(1, 0, a*math.min(3, #self.props.options), 0)
				end),
				anchorPoint = Vector2.new(1, 0),
			}, {
				Border = e(SlicedImage, {
					slice = Assets.Slices.RoundedBorder,
					color = theme.BorderColor,
					transparency = self.props.transparency,
					size = UDim2.new(1, 0, 1, 0),
				}),
				ScrollingFrame = e(ScrollingFrame, {
					size = UDim2.new(1, -4, 1, -4),
					position = UDim2.new(0, 2, 0, 2),
					transparency = self.props.transparency,
					contentSize = self.contentSize,
				}, {
					Layout = e("UIListLayout", {
						VerticalAlignment = Enum.VerticalAlignment.Top,
						FillDirection = Enum.FillDirection.Vertical,
						SortOrder = Enum.SortOrder.LayoutOrder,
						Padding = UDim.new(0, 0),

						[Roact.Change.AbsoluteContentSize] = function(object)
							self.setContentSize(object.AbsoluteContentSize)
						end,
					}),
					Roact.createFragment(optionButtons),
				}),
			}) else nil,
		})
	end)
end

return Dropdown
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8db</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX3469533ddc2549b8b21e1dadff861d9f">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Header</string>
									<string name="ScriptGuid">{4bd493da-e567-49fa-8193-6b3151cfdae4}</string>
									<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Theme = require(Plugin.App.Theme)
local Assets = require(Plugin.Assets)
local Config = require(Plugin.Config)
local Version = require(Plugin.Version)

local e = Roact.createElement

local function Header(props)
	return Theme.with(function(theme)
		return e("Frame", {
			Size = UDim2.new(1, 0, 0, 32),
			LayoutOrder = props.layoutOrder,
			BackgroundTransparency = 1,
		}, {
			Logo = e("ImageLabel", {
				Image = Assets.Images.Logo,
				ImageColor3 = theme.Header.LogoColor,
				ImageTransparency = props.transparency,

				Size = UDim2.new(0, 60, 0, 27),

				LayoutOrder = 1,
				BackgroundTransparency = 1,
			}),

			Version = e("TextLabel", {
				Text = Version.display(Config.version),
				Font = Enum.Font.Gotham,
				TextSize = 14,
				TextColor3 = theme.Header.VersionColor,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextTransparency = props.transparency,

				Size = UDim2.new(1, 0, 0, 14),

				LayoutOrder = 2,
				BackgroundTransparency = 1,
			}),

			Layout = e("UIListLayout", {
				VerticalAlignment = Enum.VerticalAlignment.Center,
				FillDirection = Enum.FillDirection.Horizontal,
				SortOrder = Enum.SortOrder.LayoutOrder,
				Padding = UDim.new(0, 15),
			}),
		})
	end)
end

return Header
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8dc</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBXf43deabb0b8947c99cdde859d2a8b3e6">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">IconButton</string>
									<string name="ScriptGuid">{17ed481a-c12c-470f-ab60-c46091d0c515}</string>
									<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)
local Flipper = require(Packages.Flipper)

local Assets = require(Plugin.Assets)
local bindingUtil = require(Plugin.App.bindingUtil)

local HOVER_SPRING_PROPS = {
	frequency = 5,
	dampingRatio = 1.1,
}

local e = Roact.createElement

local IconButton = Roact.Component:extend("IconButton")

function IconButton:init()
	self.motor = Flipper.SingleMotor.new(0)
	self.binding = bindingUtil.fromMotor(self.motor)
end

function IconButton:render()
	local iconSize = self.props.iconSize

	return e("ImageButton", {
		Size = UDim2.new(0, iconSize * 1.5, 0, iconSize * 1.5),
		Position = self.props.position,
		AnchorPoint = self.props.anchorPoint,

		Visible = self.props.visible,
		LayoutOrder = self.props.layoutOrder,
		ZIndex = self.props.zIndex,
		BackgroundTransparency = 1,

		[Roact.Event.Activated] = self.props.onClick,

		[Roact.Event.MouseEnter] = function()
			self.motor:setGoal(
				Flipper.Spring.new(1, HOVER_SPRING_PROPS)
			)
		end,

		[Roact.Event.MouseLeave] = function()
			self.motor:setGoal(
				Flipper.Spring.new(0, HOVER_SPRING_PROPS)
			)
		end,
	}, {
		Icon = e("ImageLabel", {
			Image = self.props.icon,
			ImageColor3 = self.props.color,
			ImageTransparency = self.props.transparency,

			Size = UDim2.new(0, iconSize, 0, iconSize),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),

			BackgroundTransparency = 1,
		}),

		HoverCircle = e("ImageLabel", {
			Image = Assets.Images.Circles[128],
			ImageColor3 = self.props.color,
			ImageTransparency = Roact.joinBindings({
				hover = self.binding,
				transparency = self.props.transparency,
			}):map(function(values)
				return bindingUtil.blendAlpha({ 0.85, 1 - values.hover, values.transparency })
			end),

			Size = UDim2.new(1, 0, 1, 0),

			BackgroundTransparency = 1,
		}),
	})
end

return IconButton
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8dd</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX86f29b7932f24350b0841260c9921315">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">ScrollingFrame</string>
									<string name="ScriptGuid">{a7a51476-2075-47e3-abca-767733240d25}</string>
									<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Assets = require(Plugin.Assets)
local Theme = require(Plugin.App.Theme)
local bindingUtil = require(Plugin.App.bindingUtil)

local e = Roact.createElement

local function ScrollingFrame(props)
	return Theme.with(function(theme)
		return e("ScrollingFrame", {
			ScrollBarThickness = 9,
			ScrollBarImageColor3 = theme.ScrollBarColor,
			ScrollBarImageTransparency = props.transparency:map(function(value)
				return bindingUtil.blendAlpha({ 0.65, value })
			end),
			TopImage = Assets.Images.ScrollBar.Top,
			MidImage = Assets.Images.ScrollBar.Middle,
			BottomImage = Assets.Images.ScrollBar.Bottom,

			ElasticBehavior = Enum.ElasticBehavior.Always,
			ScrollingDirection = Enum.ScrollingDirection.Y,

			Size = props.size,
			Position = props.position,
			AnchorPoint = props.anchorPoint,
			CanvasSize = props.contentSize:map(function(value)
				return UDim2.new(0, 0, 0, value.Y)
			end),

			BorderSizePixel = 0,
			BackgroundTransparency = 1,

			[Roact.Change.AbsoluteSize] = props[Roact.Change.AbsoluteSize]
		}, props[Roact.Children])
	end)
end

return ScrollingFrame
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8de</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX0df28cbc2d2d4276a8dd8d96d7ed920a">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">SlicedImage</string>
									<string name="ScriptGuid">{0462b19b-e83f-48f4-a186-3bd8c6ed0769}</string>
									<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local e = Roact.createElement

local function SlicedImage(props)
	local slice = props.slice

	return e("ImageLabel", {
		Image = slice.Image,
		ImageColor3 = props.color,
		ImageTransparency = props.transparency,

		ScaleType = Enum.ScaleType.Slice,
		SliceCenter = slice.Center,
		SliceScale = slice.Scale,

		Size = props.size,
		Position = props.position,
		AnchorPoint = props.anchorPoint,

		ZIndex = props.zIndex,
		LayoutOrder = props.layoutOrder,
		BackgroundTransparency = 1,
	}, props[Roact.Children])
end

return SlicedImage
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8df</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBXe4e04ad22f39426bbc3ed05e699b7a5a">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Spinner</string>
									<string name="ScriptGuid">{d1e50d00-5c97-4b31-a8d2-5779cb981b0c}</string>
									<ProtectedString name="Source"><![CDATA[local RunService = game:GetService("RunService")

local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Theme = require(Plugin.App.Theme)
local Assets = require(Plugin.Assets)

local ROTATIONS_PER_SECOND = 1.75

local e = Roact.createElement

local Spinner = Roact.PureComponent:extend("Spinner")

function Spinner:init()
	self.rotation, self.setRotation = Roact.createBinding(0)
end

function Spinner:render()
	return Theme.with(function(theme)
		return e("ImageLabel", {
			Image = Assets.Images.Spinner.Background,
			ImageColor3 = theme.Spinner.BackgroundColor,
			ImageTransparency = self.props.transparency,

			Size = UDim2.new(0, 24, 0, 24),
			Position = self.props.position,
			AnchorPoint = self.props.anchorPoint,

			LayoutOrder = self.props.layoutOrder,
			BackgroundTransparency = 1,
		}, {
			Foreground = e("ImageLabel", {
				Image = Assets.Images.Spinner.Foreground,
				ImageColor3 = theme.Spinner.ForegroundColor,
				ImageTransparency = self.props.transparency,

				Size = UDim2.new(1, 0, 1, 0),
				Rotation = self.rotation:map(function(value)
					return value * 360
				end),

				BackgroundTransparency = 1,
			}),
		})
	end)
end

function Spinner:didMount()
	self.stepper = RunService.RenderStepped:Connect(function(deltaTime)
		local rotation = self.rotation:getValue()

		rotation = rotation + deltaTime * ROTATIONS_PER_SECOND
		rotation = rotation % 1

		self.setRotation(rotation)
	end)
end

function Spinner:willUnmount()
	self.stepper:Disconnect()
end

return Spinner
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8e0</UniqueId>
								</Properties>
							</Item>
							<Item class="Folder" referent="RBX503be46de54b4efbadeecce31469ca22">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<string name="Name">Studio</string>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8e1</UniqueId>
								</Properties>
								<Item class="ModuleScript" referent="RBXe73f34f428b44d9d9a9f5b571dd04748">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">StudioPluginAction</string>
										<string name="ScriptGuid">{aba837c4-9947-497b-b052-112125f87640}</string>
										<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Dictionary = require(Plugin.Dictionary)

local StudioPluginContext = require(script.Parent.StudioPluginContext)

local e = Roact.createElement

local StudioPluginAction  = Roact.Component:extend("StudioPluginAction")

function StudioPluginAction:init()
	self.pluginAction = self.props.plugin:CreatePluginAction(
		self.props.name, self.props.title, self.props.description, self.props.icon, self.props.bindable
	)

	self.pluginAction.Triggered:Connect(self.props.onTriggered)
end

function StudioPluginAction:render()
	return nil
end

function StudioPluginAction:willUnmount()
	self.pluginAction:Destroy()
end

local function StudioPluginActionWrapper(props)
	return e(StudioPluginContext.Consumer, {
		render = function(plugin)
			return e(StudioPluginAction, Dictionary.merge(props, {
				plugin = plugin,
			}))
		end,
	})
end

return StudioPluginActionWrapper
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8e2</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX9ce33e8c5d7546da9822fb77c24e7781">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">StudioPluginContext</string>
										<string name="ScriptGuid">{d59f7b36-42ac-453f-bd3c-371dd5c0bd1e}</string>
										<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local StudioPluginContext = Roact.createContext(nil)

return StudioPluginContext
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8e3</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX8eb3e1f1d71e4a7b95ced06c90398f42">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">StudioPluginGui</string>
										<string name="ScriptGuid">{9d304bf1-bb58-4688-a91f-eb6c59e8bb9e}</string>
										<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Dictionary = require(Plugin.Dictionary)

local StudioPluginContext = require(script.Parent.StudioPluginContext)

local e = Roact.createElement

local StudioPluginGui = Roact.PureComponent:extend("StudioPluginGui")

StudioPluginGui.defaultProps = {
	initDockState = Enum.InitialDockState.Right,
	active = false,
	overridePreviousState = false,
	floatingSize = Vector2.new(0, 0),
	minimumSize = Vector2.new(0, 0),
	zIndexBehavior = Enum.ZIndexBehavior.Sibling,
}

function StudioPluginGui:init()
	local floatingSize = self.props.floatingSize
	local minimumSize = self.props.minimumSize

	local dockWidgetPluginGuiInfo = DockWidgetPluginGuiInfo.new(
		self.props.initDockState,
		self.props.active,
		self.props.overridePreviousState,
		floatingSize.X, floatingSize.Y,
		minimumSize.X, minimumSize.Y
	)

	local pluginGui = self.props.plugin:CreateDockWidgetPluginGui(self.props.id, dockWidgetPluginGuiInfo)

	pluginGui.Name = self.props.id
	pluginGui.Title = self.props.title
	pluginGui.ZIndexBehavior = self.props.zIndexBehavior

	if self.props.onInitialState then
		self.props.onInitialState(pluginGui.Enabled)
	end

	pluginGui:BindToClose(function()
		if self.props.onClose then
			self.props.onClose()
		else
			pluginGui.Enabled = false
		end
	end)

	self.pluginGui = pluginGui
end

function StudioPluginGui:render()
	return e(Roact.Portal, {
		target = self.pluginGui,
	}, self.props[Roact.Children])
end

function StudioPluginGui:didUpdate(lastProps)
	if self.props.active ~= lastProps.active then
		-- This is intentionally in didUpdate to make sure the initial active state
		-- (if the PluginGui is open initially) is preserved.
		self.pluginGui.Enabled = self.props.active
	end
end

function StudioPluginGui:willUnmount()
	self.pluginGui:Destroy()
end

local function StudioPluginGuiWrapper(props)
	return e(StudioPluginContext.Consumer, {
		render = function(plugin)
			return e(StudioPluginGui, Dictionary.merge(props, {
				plugin = plugin,
			}))
		end,
	})
end

return StudioPluginGuiWrapper
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8e4</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX3e39443528da4adda3180b546310bbea">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">StudioToggleButton</string>
										<string name="ScriptGuid">{bd6536e2-87b6-4b5b-94b6-79782f8b1bfc}</string>
										<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Dictionary = require(Plugin.Dictionary)

local StudioToolbarContext = require(script.Parent.StudioToolbarContext)

local e = Roact.createElement

local StudioToggleButton = Roact.Component:extend("StudioToggleButton")

StudioToggleButton.defaultProps = {
	enabled = true,
	active = false,
}

function StudioToggleButton:init()
	local button = self.props.toolbar:CreateButton(
		self.props.name,
		self.props.tooltip,
		self.props.icon,
		self.props.text
	)

	button.Click:Connect(function()
		if self.props.onClick then
			self.props.onClick()
		end
	end)

	button.ClickableWhenViewportHidden = true

	self.button = button
end

function StudioToggleButton:render()
	return nil
end

function StudioToggleButton:didUpdate(lastProps)
	if self.props.enabled ~= lastProps.enabled then
		self.button.Enabled = self.props.enabled
	end

	if self.props.icon ~= lastProps.icon then
		self.button.Icon = self.props.icon
	end

	if self.props.active ~= lastProps.active then
		self.button:SetActive(self.props.active)
	end
end

function StudioToggleButton:willUnmount()
	self.button:Destroy()
end

local function StudioToggleButtonWrapper(props)
	return e(StudioToolbarContext.Consumer, {
		render = function(toolbar)
			return e(StudioToggleButton, Dictionary.merge(props, {
				toolbar = toolbar,
			}))
		end,
	})
end

return StudioToggleButtonWrapper
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8e5</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXeb857c2487074a18a2b0695820324479">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">StudioToolbar</string>
										<string name="ScriptGuid">{ab8a2176-6a80-44da-a0a4-c4e19b56e947}</string>
										<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Dictionary = require(Plugin.Dictionary)

local StudioToolbarContext = require(script.Parent.StudioToolbarContext)
local StudioPluginContext = require(script.Parent.StudioPluginContext)

local e = Roact.createElement

local StudioToolbar = Roact.Component:extend("StudioToolbar")

function StudioToolbar:init()
	self.toolbar = self.props.plugin:CreateToolbar(self.props.name)
end

function StudioToolbar:render()
	return e(StudioToolbarContext.Provider, {
		value = self.toolbar,
	}, self.props[Roact.Children])
end

function StudioToolbar:didUpdate(lastProps)
	if self.props.name ~= lastProps.name then
		self.toolbar.Name = self.props.name
	end
end

function StudioToolbar:willUnmount()
	self.toolbar:Destroy()
end

local function StudioToolbarWrapper(props)
	return e(StudioPluginContext.Consumer, {
		render = function(plugin)
			return e(StudioToolbar, Dictionary.merge(props, {
				plugin = plugin,
			}))
		end,
	})
end

return StudioToolbarWrapper
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8e6</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX6c3b1bb9f8ce4a408a9fedf91b92cb38">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">StudioToolbarContext</string>
										<string name="ScriptGuid">{e3fa4985-518f-485e-8a76-a571574700d6}</string>
										<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local StudioToolbarContext = Roact.createContext(nil)

return StudioToolbarContext
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8e7</UniqueId>
									</Properties>
								</Item>
							</Item>
							<Item class="ModuleScript" referent="RBXf945d3e989814cee8f46fdb1f20b0b5d">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">TextButton</string>
									<string name="ScriptGuid">{aa87c246-e528-44d4-a5fb-43275edcebe7}</string>
									<ProtectedString name="Source"><![CDATA[local TextService = game:GetService("TextService")

local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)
local Flipper = require(Packages.Flipper)

local Theme = require(Plugin.App.Theme)
local Assets = require(Plugin.Assets)
local bindingUtil = require(Plugin.App.bindingUtil)

local SlicedImage = require(script.Parent.SlicedImage)
local TouchRipple = require(script.Parent.TouchRipple)

local SPRING_PROPS = {
	frequency = 5,
	dampingRatio = 1,
}

local e = Roact.createElement

local TextButton = Roact.Component:extend("TextButton")

function TextButton:init()
	self.motor = Flipper.GroupMotor.new({
		hover = 0,
		enabled = self.props.enabled and 1 or 0,
	})
	self.binding = bindingUtil.fromMotor(self.motor)
end

function TextButton:didUpdate(lastProps)
	if lastProps.enabled ~= self.props.enabled then
		self.motor:setGoal({
			enabled = Flipper.Spring.new(self.props.enabled and 1 or 0),
		})
	end
end

function TextButton:render()
	return Theme.with(function(theme)
		local textSize = TextService:GetTextSize(
			self.props.text, 18, Enum.Font.GothamSemibold,
			Vector2.new(math.huge, math.huge)
		)

		local style = self.props.style

		theme = theme.Button[style]

		local bindingHover = bindingUtil.deriveProperty(self.binding, "hover")
		local bindingEnabled = bindingUtil.deriveProperty(self.binding, "enabled")

		return e("ImageButton", {
			Size = UDim2.new(0, 15 + textSize.X + 15, 0, 34),
			Position = self.props.position,
			AnchorPoint = self.props.anchorPoint,

			LayoutOrder = self.props.layoutOrder,
			BackgroundTransparency = 1,

			[Roact.Event.Activated] = self.props.onClick,

			[Roact.Event.MouseEnter] = function()
				self.motor:setGoal({
					hover = Flipper.Spring.new(1, SPRING_PROPS),
				})
			end,

			[Roact.Event.MouseLeave] = function()
				self.motor:setGoal({
					hover = Flipper.Spring.new(0, SPRING_PROPS),
				})
			end,
		}, {
			TouchRipple = e(TouchRipple, {
				color = theme.ActionFillColor,
				transparency = self.props.transparency:map(function(value)
					return bindingUtil.blendAlpha({ theme.ActionFillTransparency, value })
				end),
				zIndex = 2,
			}),

			Text = e("TextLabel", {
				Text = self.props.text,
				Font = Enum.Font.GothamSemibold,
				TextSize = 18,
				TextColor3 = bindingUtil.mapLerp(bindingEnabled, theme.Enabled.TextColor, theme.Disabled.TextColor),
				TextTransparency = self.props.transparency,

				Size = UDim2.new(1, 0, 1, 0),

				BackgroundTransparency = 1,
			}),

			Border = style == "Bordered" and e(SlicedImage, {
				slice = Assets.Slices.RoundedBorder,
				color = bindingUtil.mapLerp(bindingEnabled, theme.Enabled.BorderColor, theme.Disabled.BorderColor),
				transparency = self.props.transparency,

				size = UDim2.new(1, 0, 1, 0),

				zIndex = 0,
			}),

			HoverOverlay = e(SlicedImage, {
				slice = Assets.Slices.RoundedBackground,
				color = theme.ActionFillColor,
				transparency = Roact.joinBindings({
					hover = bindingHover:map(function(value)
						return 1 - value
					end),
					transparency = self.props.transparency,
				}):map(function(values)
					return bindingUtil.blendAlpha({ theme.ActionFillTransparency, values.hover, values.transparency })
				end),

				size = UDim2.new(1, 0, 1, 0),

				zIndex = -1,
			}),

			Background = style == "Solid" and e(SlicedImage, {
				slice = Assets.Slices.RoundedBackground,
				color = bindingUtil.mapLerp(bindingEnabled, theme.Enabled.BackgroundColor, theme.Disabled.BackgroundColor),
				transparency = self.props.transparency,

				size = UDim2.new(1, 0, 1, 0),

				zIndex = -2,
			}),
		})
	end)
end

return TextButton
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8e8</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX1a05b9256bee47f18bb0cbba860a7772">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">TouchRipple</string>
									<string name="ScriptGuid">{c00d42c9-35f2-4629-a89b-608b7529a0c3}</string>
									<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)
local Flipper = require(Packages.Flipper)

local Assets = require(Plugin.Assets)
local bindingUtil = require(Plugin.App.bindingUtil)

local EXPAND_SPRING = {
	frequency = 7,
	dampingRatio = 2,
}

local TouchRipple = Roact.Component:extend("TouchRipple")

function TouchRipple:init()
	self.ref = Roact.createRef()

	self.motor = Flipper.GroupMotor.new({
		scale = 0,
		opacity = 0,
	})
	self.binding = bindingUtil.fromMotor(self.motor)

	self.position, self.setPosition = Roact.createBinding(
		Vector2.new(0, 0)
	)
end

function TouchRipple:reset()
	self.motor:setGoal({
		scale = Flipper.Instant.new(0),
		opacity = Flipper.Instant.new(0),
	})

	-- Forces motor to update
	self.motor:step(0)
end

function TouchRipple:calculateRadius(position)
	local container = self.ref.current

	if container then
		local corner = Vector2.new(
			math.floor((1 - position.X) + 0.5),
			math.floor((1 - position.Y) + 0.5)
		)

		local size = container.AbsoluteSize
		local ratio = size / math.min(size.X, size.Y)

		return ((corner * ratio) - (position * ratio)).Magnitude
	else
		return 0
	end
end

function TouchRipple:render()
	local scale = bindingUtil.deriveProperty(self.binding, "scale")
	local transparency = bindingUtil.deriveProperty(self.binding, "opacity"):map(function(value)
		return 1 - value
	end)

	transparency = Roact.joinBindings({
		transparency,
		self.props.transparency,
	}):map(bindingUtil.blendAlpha)

	return Roact.createElement("Frame", {
		ClipsDescendants = true,
		Size = UDim2.new(1, 0, 1, 0),
		ZIndex = self.props.zIndex,
		BackgroundTransparency = 1,

		[Roact.Ref] = self.ref,

		[Roact.Event.InputBegan] = function(object, input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				self:reset()

				local position = Vector2.new(input.Position.X, input.Position.Y)
				local relativePosition = (position - object.AbsolutePosition) / object.AbsoluteSize

				self.setPosition(relativePosition)

				self.motor:setGoal({
					scale = Flipper.Spring.new(1, EXPAND_SPRING),
					opacity = Flipper.Spring.new(1, EXPAND_SPRING),
				})

				input:GetPropertyChangedSignal("UserInputState"):Connect(function()
					local userInputState = input.UserInputState

					if
						userInputState == Enum.UserInputState.Cancel
						or userInputState == Enum.UserInputState.End
					then
						self.motor:setGoal({
							opacity = Flipper.Spring.new(0, {
								frequency = 5,
								dampingRatio = 1,
							}),
						})
					end
				end)
			end
		end,
	}, {
		Circle = Roact.createElement("ImageLabel", {
			Image = Assets.Images.Circles[500],
			ImageColor3 = self.props.color,
			ImageTransparency = transparency,

			Size = Roact.joinBindings({
				scale = scale,
				position = self.position,
			}):map(function(values)
				local targetSize = self:calculateRadius(values.position) * 2
				local currentSize = targetSize * values.scale

				local container = self.ref.current

				if container then
					local containerSize = container.AbsoluteSize
					local containerAspect = containerSize.X / containerSize.Y

					return UDim2.new(
						currentSize / math.max(containerAspect, 1), 0,
						currentSize * math.min(containerAspect, 1), 0
					)
				end
			end),

			Position = self.position:map(function(value)
				return UDim2.new(value.X, 0, value.Y, 0)
			end),
			AnchorPoint = Vector2.new(0.5, 0.5),

			BackgroundTransparency = 1,
		}),
	})
end

return TouchRipple
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8e9</UniqueId>
								</Properties>
							</Item>
						</Item>
						<Item class="ModuleScript" referent="RBX3d587e3c7e324dda8ce95c745577f1f6">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Notifications</string>
								<string name="ScriptGuid">{d29a8fea-887e-4f18-8eb5-182278ef4038}</string>
								<ProtectedString name="Source"><![CDATA[local TextService = game:GetService("TextService")
local StudioService = game:GetService("StudioService")

local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)
local Flipper = require(Packages.Flipper)

local bindingUtil = require(script.Parent.bindingUtil)

local Theme = require(Plugin.App.Theme)
local Assets = require(Plugin.Assets)

local BorderedContainer = require(Plugin.App.Components.BorderedContainer)

local baseClock = DateTime.now().UnixTimestampMillis

local e = Roact.createElement

local Notification = Roact.Component:extend("Notification")

function Notification:init()
	self.motor = Flipper.SingleMotor.new(0)
	self.binding = bindingUtil.fromMotor(self.motor)

	self.lifetime = self.props.timeout

	self.motor:onStep(function(value)
		if value <= 0 then
			if self.props.onClose then
				self.props.onClose()
			end
		end
	end)
end

function Notification:dismiss()
	self.motor:setGoal(
		Flipper.Spring.new(0, {
			frequency = 5,
			dampingRatio = 1,
		})
	)
end

function Notification:didMount()
	self.motor:setGoal(
		Flipper.Spring.new(1, {
			frequency = 3,
			dampingRatio = 1,
		})
	)

	self.props.soundPlayer:play(Assets.Sounds.Notification)

	self.timeout = task.spawn(function()
		local clock = os.clock()
		local seen = false
		while task.wait(1/10) do
			local now = os.clock()
			local dt = now - clock
			clock = now

			if not seen then
				seen = StudioService.ActiveScript == nil
			end

			if not seen then
				-- Don't run down timer before being viewed
				continue
			end

			self.lifetime -= dt
			if self.lifetime <= 0 then
				self:dismiss()
				break
			end
		end
	end)
end

function Notification:willUnmount()
	task.cancel(self.timeout)
end

function Notification:render()
	local time = DateTime.fromUnixTimestampMillis(self.props.timestamp)

	local textBounds = TextService:GetTextSize(
		self.props.text,
		15,
		Enum.Font.GothamSemibold,
		Vector2.new(350, 700)
	)

	local transparency = self.binding:map(function(value)
		return 1 - value
	end)

	local size = self.binding:map(function(value)
		return UDim2.fromOffset(
			(35+40+textBounds.X)*value,
			math.max(14+20+textBounds.Y, 32+20)
		)
	end)

	return Theme.with(function(theme)
		return e("TextButton", {
			BackgroundTransparency = 1,
			Size = size,
			LayoutOrder = self.props.layoutOrder,
			Text = "",
			ClipsDescendants = true,

			[Roact.Event.Activated] = function()
				self:dismiss()
			end,
		}, {
			e(BorderedContainer, {
				transparency = transparency,
				size = UDim2.new(1, 0, 1, 0),
			}, {
				TextContainer = e("Frame", {
					Size = UDim2.new(0, 35+textBounds.X, 1, -20),
					Position = UDim2.new(0, 0, 0, 10),
					BackgroundTransparency = 1
				}, {
					Logo = e("ImageLabel", {
						ImageTransparency = transparency,
						Image = Assets.Images.PluginButton,
						BackgroundTransparency = 1,
						Size = UDim2.new(0, 32, 0, 32),
						Position = UDim2.new(0, 0, 0.5, 0),
						AnchorPoint = Vector2.new(0, 0.5),
					}),
					Info = e("TextLabel", {
						Text = self.props.text,
						Font = Enum.Font.GothamSemibold,
						TextSize = 15,
						TextColor3 = theme.Notification.InfoColor,
						TextTransparency = transparency,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextWrapped = true,

						Size = UDim2.new(0, textBounds.X, 0, textBounds.Y),
						Position = UDim2.fromOffset(35, 0),

						LayoutOrder = 1,
						BackgroundTransparency = 1,
					}),
					Time = e("TextLabel", {
						Text = time:FormatLocalTime("LTS", "en-us"),
						Font = Enum.Font.Code,
						TextSize = 12,
						TextColor3 = theme.Notification.InfoColor,
						TextTransparency = transparency,
						TextXAlignment = Enum.TextXAlignment.Left,

						Size = UDim2.new(1, -35, 0, 14),
						Position = UDim2.new(0, 35, 1, -14),

						LayoutOrder = 1,
						BackgroundTransparency = 1,
					}),
				}),

				Padding = e("UIPadding", {
					PaddingLeft = UDim.new(0, 17),
					PaddingRight = UDim.new(0, 15),
				}),
			})
		})
	end)
end

local Notifications = Roact.Component:extend("Notifications")

function Notifications:render()
	local notifs = {}

	for index, notif in ipairs(self.props.notifications) do
		notifs[notif] = e(Notification, {
			soundPlayer = self.props.soundPlayer,
			text = notif.text,
			timestamp = notif.timestamp,
			timeout = notif.timeout,
			layoutOrder = (notif.timestamp - baseClock),
			onClose = function()
				self.props.onClose(index)
			end,
		})
	end

	return Roact.createFragment(notifs)
end

return Notifications
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ea</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX5cf2f2811ee44b71bd7373d560574f4a">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Page</string>
								<string name="ScriptGuid">{b9a6c4de-462d-425c-8d84-239bb7f75902}</string>
								<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)
local Flipper = require(Packages.Flipper)

local Dictionary = require(Plugin.Dictionary)

local bindingUtil = require(script.Parent.bindingUtil)

local e = Roact.createElement

local Page = Roact.Component:extend("Page")

function Page:init()
	self:setState({
		rendered = self.props.active
	})

	self.motor = Flipper.SingleMotor.new(self.props.active and 1 or 0)
	self.binding = bindingUtil.fromMotor(self.motor)

	self.motor:onStep(function(value)
		local rendered = value > 0

		self:setState(function(state)
			if state.rendered ~= rendered then
				return {
					rendered = rendered,
				}
			end
		end)
	end)
end

function Page:render()
	if not self.state.rendered then
		return nil
	end

	local transparency = self.binding:map(function(value)
		return 1 - value
	end)

	return e("Frame", {
		Position = transparency:map(function(value)
			value = self.props.active and value or -value
			return UDim2.new(0, value * 30, 0, 0)
		end),
		Size = UDim2.new(1, 0, 1, 0),
		BackgroundTransparency = 1,
	}, {
		Component = e(self.props.component, Dictionary.merge(self.props, {
			transparency = transparency,
		}))
	})
end

function Page:didUpdate(lastProps)
	if self.props.active ~= lastProps.active then
		self.motor:setGoal(
			Flipper.Spring.new(self.props.active and 1 or 0, {
				frequency = 6,
				dampingRatio = 1,
			})
		)
	end
end

return Page
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8eb</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX6f7a5575f8fc469897679dc16598af50">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">StatusPages</string>
								<string name="ScriptGuid">{84a9847d-543f-4175-9a3d-0b27b87538b9}</string>
								<ProtectedString name="Source"><![CDATA[return {
	NotConnected = require(script.NotConnected),
	Settings = require(script.Settings),
	Connecting = require(script.Connecting),
	Connected = require(script.Connected),
	Error = require(script.Error),
}]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ec</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBX678315a61ee445bbb9a6013d772b8ef8">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Connected</string>
									<string name="ScriptGuid">{83b2c50e-6354-43a0-87b0-3331e18d77e2}</string>
									<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Theme = require(Plugin.App.Theme)
local Assets = require(Plugin.Assets)

local Header = require(Plugin.App.Components.Header)
local IconButton = require(Plugin.App.Components.IconButton)
local BorderedContainer = require(Plugin.App.Components.BorderedContainer)

local e = Roact.createElement

local AGE_UNITS = { {31556909, "year"}, {2629743, "month"}, {604800, "week"}, {86400, "day"}, {3600, "hour"}, {60, "minute"}, }
function timeSinceText(elapsed: number): string
	if elapsed < 3 then
		return "just now"
	end

	local ageText = string.format("%d seconds ago", elapsed)

	for _,UnitData in ipairs(AGE_UNITS) do
		local UnitSeconds, UnitName = UnitData[1], UnitData[2]
		if elapsed > UnitSeconds then
			local c = math.floor(elapsed/UnitSeconds)
			ageText = string.format("%d %s%s ago", c, UnitName, c>1 and "s" or "")
			break
		end
	end

	return ageText
end

local function ConnectionDetails(props)
	return Theme.with(function(theme)
		return e(BorderedContainer, {
			transparency = props.transparency,
			size = UDim2.new(1, 0, 0, 70),
			layoutOrder = props.layoutOrder,
		}, {
			TextContainer = e("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
				BackgroundTransparency = 1
			}, {
				ProjectName = e("TextLabel", {
					Text = props.projectName,
					Font = Enum.Font.GothamBold,
					TextSize = 20,
					TextColor3 = theme.ConnectionDetails.ProjectNameColor,
					TextTransparency = props.transparency,
					TextXAlignment = Enum.TextXAlignment.Left,

					Size = UDim2.new(1, 0, 0, 20),

					LayoutOrder = 1,
					BackgroundTransparency = 1,
				}),

				Address = e("TextLabel", {
					Text = props.address,
					Font = Enum.Font.Code,
					TextSize = 15,
					TextColor3 = theme.ConnectionDetails.AddressColor,
					TextTransparency = props.transparency,
					TextXAlignment = Enum.TextXAlignment.Left,

					Size = UDim2.new(1, 0, 0, 15),

					LayoutOrder = 2,
					BackgroundTransparency = 1,
				}),

				Layout = e("UIListLayout", {
					VerticalAlignment = Enum.VerticalAlignment.Center,
					FillDirection = Enum.FillDirection.Vertical,
					SortOrder = Enum.SortOrder.LayoutOrder,
					Padding = UDim.new(0, 6),
				}),
			}),

			Disconnect = e(IconButton, {
				icon = Assets.Images.Icons.Close,
				iconSize = 24,
				color = theme.ConnectionDetails.DisconnectColor,
				transparency = props.transparency,

				position = UDim2.new(1, 0, 0.5, 0),
				anchorPoint = Vector2.new(1, 0.5),

				onClick = props.onDisconnect,
			}),

			Padding = e("UIPadding", {
				PaddingLeft = UDim.new(0, 17),
				PaddingRight = UDim.new(0, 15),
			}),
		})
	end)
end

local ConnectedPage = Roact.Component:extend("ConnectedPage")

function ConnectedPage:render()
	return Theme.with(function(theme)
		return Roact.createFragment({
			Header = e(Header, {
				transparency = self.props.transparency,
				layoutOrder = 1,
			}),

			ConnectionDetails = e(ConnectionDetails, {
				projectName = self.state.projectName,
				address = self.state.address,
				transparency = self.props.transparency,
				layoutOrder = 2,

				onDisconnect = self.props.onDisconnect,
			}),

			Info = e("TextLabel", {
				Text = self.props.patchInfo:map(function(info)
					return string.format(
						"<i>Synced %d change%s %s</i>",
						info.changes,
						info.changes == 1 and "" or "s",
						timeSinceText(os.time() - info.timestamp)
					)
				end),
				Font = Enum.Font.Gotham,
				TextSize = 14,
				TextWrapped = true,
				RichText = true,
				TextColor3 = theme.Header.VersionColor,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextYAlignment = Enum.TextYAlignment.Top,
				TextTransparency = self.props.transparency,

				Size = UDim2.new(1, 0, 0, 28),

				LayoutOrder = 3,
				BackgroundTransparency = 1,
			}),

			Layout = e("UIListLayout", {
				VerticalAlignment = Enum.VerticalAlignment.Center,
				FillDirection = Enum.FillDirection.Vertical,
				SortOrder = Enum.SortOrder.LayoutOrder,
				Padding = UDim.new(0, 10),
			}),

			Padding = e("UIPadding", {
				PaddingLeft = UDim.new(0, 20),
				PaddingRight = UDim.new(0, 20),
			}),
		})
	end)
end

function ConnectedPage.getDerivedStateFromProps(props)
	-- If projectName or address ever get removed from props, make sure we still have
	-- the properties! The component still needs to have its data for it to be properly
	-- animated out without the labels changing.

	return {
		projectName = props.projectName,
		address = props.address,
	}
end

return ConnectedPage
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ed</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX6957f908713e4390bd5f1f9138577796">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Connecting</string>
									<string name="ScriptGuid">{3e31dd1c-87e5-46c5-9d61-1e5921d7930e}</string>
									<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Spinner = require(Plugin.App.Components.Spinner)

local e = Roact.createElement

local ConnectingPage = Roact.Component:extend("ConnectingPage")

function ConnectingPage:render()
	return e(Spinner, {
		position = UDim2.new(0.5, 0, 0.5, 0),
		anchorPoint = Vector2.new(0.5, 0.5),
		transparency = self.props.transparency,
	})
end

return ConnectingPage
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ee</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX698ee4b4e0914393b0a6b7daf492c40c">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Error</string>
									<string name="ScriptGuid">{eb44bb42-833b-4026-8588-de67d33c5fe1}</string>
									<ProtectedString name="Source"><![CDATA[local TextService = game:GetService("TextService")

local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Theme = require(Plugin.App.Theme)

local TextButton = require(Plugin.App.Components.TextButton)
local BorderedContainer = require(Plugin.App.Components.BorderedContainer)
local ScrollingFrame = require(Plugin.App.Components.ScrollingFrame)

local e = Roact.createElement

local ERROR_PADDING = Vector2.new(13, 10)

local Error = Roact.Component:extend("Error")

function Error:init()
	self.contentSize, self.setContentSize = Roact.createBinding(Vector2.new(0, 0))
end

function Error:render()
	return e(BorderedContainer, {
		size = Roact.joinBindings({
			containerSize = self.props.containerSize,
			contentSize = self.contentSize,
		}):map(function(values)
			local maximumSize = values.containerSize
			maximumSize -= Vector2.new(14, 14) * 2 -- Page padding
			maximumSize -= Vector2.new(0, 34 + 10) -- Buttons and spacing

			local outerSize = values.contentSize + ERROR_PADDING * 2

			return UDim2.new(1, 0, 0, math.min(outerSize.Y, maximumSize.Y))
		end),
		transparency = self.props.transparency,
	}, {
		ScrollingFrame = e(ScrollingFrame, {
			size = UDim2.new(1, 0, 1, 0),
			contentSize = self.contentSize:map(function(value)
				return value + ERROR_PADDING * 2
			end),
			transparency = self.props.transparency,

			[Roact.Change.AbsoluteSize] = function(object)
				local containerSize = object.AbsoluteSize - ERROR_PADDING * 2

				local textBounds = TextService:GetTextSize(
					self.props.errorMessage, 16, Enum.Font.Code,
					Vector2.new(containerSize.X, math.huge)
				)

				self.setContentSize(Vector2.new(containerSize.X, textBounds.Y))
			end,
		}, {
			ErrorMessage = Theme.with(function(theme)
				return e("TextBox", {
					[Roact.Event.InputBegan] = function(rbx, input)
						if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
						rbx.SelectionStart = 0
						rbx.CursorPosition = #rbx.Text+1
					end,


					Text = self.props.errorMessage,
					TextEditable = false,
					Font = Enum.Font.Code,
					TextSize = 16,
					TextColor3 = theme.ErrorColor,
					TextXAlignment = Enum.TextXAlignment.Left,
					TextYAlignment = Enum.TextYAlignment.Top,
					TextTransparency = self.props.transparency,
					TextWrapped = true,
					ClearTextOnFocus = false,
					BackgroundTransparency = 1,
					Size = UDim2.new(1, 0, 1, 0),
				})
			end),

			Padding = e("UIPadding", {
				PaddingLeft = UDim.new(0, ERROR_PADDING.X),
				PaddingRight = UDim.new(0, ERROR_PADDING.X),
				PaddingTop = UDim.new(0, ERROR_PADDING.Y),
				PaddingBottom = UDim.new(0, ERROR_PADDING.Y),
			}),
		}),
	})
end

local ErrorPage = Roact.Component:extend("ErrorPage")

function ErrorPage:init()
	self.containerSize, self.setContainerSize = Roact.createBinding(Vector2.new(0, 0))
end

function ErrorPage:render()
	return Roact.createElement("Frame", {
		Size = UDim2.new(1, 0, 1, 0),
		BackgroundTransparency = 1,

		[Roact.Change.AbsoluteSize] = function(object)
			self.setContainerSize(object.AbsoluteSize)
		end,
	}, {
		Error = e(Error, {
			errorMessage = self.state.errorMessage,
			containerSize = self.containerSize,
			transparency = self.props.transparency,
			layoutOrder = 1,
		}),

		Buttons = e("Frame", {
			Size = UDim2.new(1, 0, 0, 35),
			LayoutOrder = 2,
			BackgroundTransparency = 1,
		}, {
			Close = e(TextButton, {
				text = "Okay",
				style = "Bordered",
				transparency = self.props.transparency,
				layoutOrder = 1,
				onClick = self.props.onClose,
			}),

			Layout = e("UIListLayout", {
				HorizontalAlignment = Enum.HorizontalAlignment.Right,
				FillDirection = Enum.FillDirection.Horizontal,
				SortOrder = Enum.SortOrder.LayoutOrder,
			}),
		}),

		Layout = e("UIListLayout", {
			VerticalAlignment = Enum.VerticalAlignment.Center,
			FillDirection = Enum.FillDirection.Vertical,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0, 10),
		}),

		Padding = e("UIPadding", {
			PaddingLeft = UDim.new(0, 14),
			PaddingRight = UDim.new(0, 14),
			PaddingTop = UDim.new(0, 14),
			PaddingBottom = UDim.new(0, 14),
		}),
	})
end

function ErrorPage.getDerivedStateFromProps(props)
	-- If errorMessage ever gets removed from props, make sure we still have the
	-- property! The component still needs to have its data for it to be properly
	-- animated out without the labels changing.

	return {
		errorMessage = props.errorMessage,
	}
end

return ErrorPage
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ef</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX50d07b9060f149b0b859c6494437ef5b">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">NotConnected</string>
									<string name="ScriptGuid">{f84f8748-c8d0-4705-ba0d-ffee7d17abc5}</string>
									<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Config = require(Plugin.Config)

local Theme = require(Plugin.App.Theme)
local BorderedContainer = require(Plugin.App.Components.BorderedContainer)
local TextButton = require(Plugin.App.Components.TextButton)
local Header = require(Plugin.App.Components.Header)

local PORT_WIDTH = 74
local DIVIDER_WIDTH = 1
local HOST_OFFSET = 12

local e = Roact.createElement

local function AddressEntry(props)
	return Theme.with(function(theme)
		return e(BorderedContainer, {
			transparency = props.transparency,
			size = UDim2.new(1, 0, 0, 36),
			layoutOrder = props.layoutOrder,
		}, {
			Host = e("TextBox", {
				Text = props.host or "",
				Font = Enum.Font.Code,
				TextSize = 18,
				TextColor3 = theme.AddressEntry.TextColor,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextTransparency = props.transparency,
				PlaceholderText = Config.defaultHost,
				PlaceholderColor3 = theme.AddressEntry.PlaceholderColor,
				ClearTextOnFocus = false,

				Size = UDim2.new(1, -(HOST_OFFSET + DIVIDER_WIDTH + PORT_WIDTH), 1, 0),
				Position = UDim2.new(0, HOST_OFFSET, 0, 0),

				ClipsDescendants = true,
				BackgroundTransparency = 1,

				[Roact.Change.Text] = function(object)
					if props.onHostChange ~= nil then
						props.onHostChange(object.Text)
					end
				end
			}),

			Port = e("TextBox", {
				Text = props.port or "",
				Font = Enum.Font.Code,
				TextSize = 18,
				TextColor3 = theme.AddressEntry.TextColor,
				TextTransparency = props.transparency,
				PlaceholderText = Config.defaultPort,
				PlaceholderColor3 = theme.AddressEntry.PlaceholderColor,
				ClearTextOnFocus = false,

				Size = UDim2.new(0, PORT_WIDTH, 1, 0),
				Position = UDim2.new(1, 0, 0, 0),
				AnchorPoint = Vector2.new(1, 0),

				ClipsDescendants = true,
				BackgroundTransparency = 1,

				[Roact.Change.Text] = function(object)
					local text = object.Text
					text = text:gsub("%D", "")
					object.Text = text

					if props.onPortChange ~= nil then
						props.onPortChange(text)
					end
				end,
			}, {
				Divider = e("Frame", {
					BackgroundColor3 = theme.BorderedContainer.BorderColor,
					BackgroundTransparency = props.transparency,
					Size = UDim2.new(0, DIVIDER_WIDTH, 1, 0),
					AnchorPoint = Vector2.new(1, 0),
					BorderSizePixel = 0,
				}),
			}),
		})
	end)
end

local NotConnectedPage = Roact.Component:extend("NotConnectedPage")

function NotConnectedPage:render()
	return Roact.createFragment({
		Header = e(Header, {
			transparency = self.props.transparency,
			layoutOrder = 1,
		}),

		AddressEntry = e(AddressEntry, {
			host = self.props.host,
			port = self.props.port,
			onHostChange = self.props.onHostChange,
			onPortChange = self.props.onPortChange,
			transparency = self.props.transparency,
			layoutOrder = 2,
		}),

		Buttons = e("Frame", {
			Size = UDim2.new(1, 0, 0, 34),
			LayoutOrder = 3,
			BackgroundTransparency = 1,
		}, {
			Settings = e(TextButton, {
				text = "Settings",
				style = "Bordered",
				transparency = self.props.transparency,
				layoutOrder = 1,
				onClick = self.props.onNavigateSettings,
			}),

			Connect = e(TextButton, {
				text = "Connect",
				style = "Solid",
				transparency = self.props.transparency,
				layoutOrder = 2,
				onClick = self.props.onConnect,
			}),

			Layout = e("UIListLayout", {
				HorizontalAlignment = Enum.HorizontalAlignment.Right,
				FillDirection = Enum.FillDirection.Horizontal,
				SortOrder = Enum.SortOrder.LayoutOrder,
				Padding = UDim.new(0, 10),
			}),
		}),

		Layout = e("UIListLayout", {
			HorizontalAlignment = Enum.HorizontalAlignment.Center,
			VerticalAlignment = Enum.VerticalAlignment.Center,
			FillDirection = Enum.FillDirection.Vertical,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0, 10),
		}),

		Padding = e("UIPadding", {
			PaddingLeft = UDim.new(0, 20),
			PaddingRight = UDim.new(0, 20),
		}),
	})
end

return NotConnectedPage
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8f0</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX1174871e49c645e79e5345ffd1a677b9">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Settings</string>
									<string name="ScriptGuid">{2fe7263f-0e3c-43a3-8c7c-5d507a93f7f6}</string>
									<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)
local Log = require(Packages.Log)

local Assets = require(Plugin.Assets)
local Settings = require(Plugin.Settings)
local Theme = require(Plugin.App.Theme)

local IconButton = require(Plugin.App.Components.IconButton)
local ScrollingFrame = require(Plugin.App.Components.ScrollingFrame)
local Setting = require(script.Setting)

local e = Roact.createElement

local function invertTbl(tbl)
	local new = {}
	for key, value in tbl do
		new[value] = key
	end
	return new
end

local invertedLevels = invertTbl(Log.Level)

local function Navbar(props)
	return Theme.with(function(theme)
		theme = theme.Settings.Navbar

		return e("Frame", {
			Size = UDim2.new(1, 0, 0, 46),
			LayoutOrder = props.layoutOrder,
			BackgroundTransparency = 1,
		}, {
			Back = e(IconButton, {
				icon = Assets.Images.Icons.Back,
				iconSize = 24,
				color = theme.BackButtonColor,
				transparency = props.transparency,

				position = UDim2.new(0, 0, 0.5, 0),
				anchorPoint = Vector2.new(0, 0.5),

				onClick = props.onBack,
			}),

			Text = e("TextLabel", {
				Text = "Settings",
				Font = Enum.Font.Gotham,
				TextSize = 18,
				TextColor3 = theme.TextColor,
				TextTransparency = props.transparency,

				Size = UDim2.new(1, 0, 1, 0),

				BackgroundTransparency = 1,
			})
		})
	end)
end

local SettingsPage = Roact.Component:extend("SettingsPage")

function SettingsPage:init()
	self.contentSize, self.setContentSize = Roact.createBinding(Vector2.new(0, 0))
end

function SettingsPage:render()
	return Theme.with(function(theme)
		theme = theme.Settings

		return e(ScrollingFrame, {
			size = UDim2.new(1, 0, 1, 0),
			contentSize = self.contentSize,
			transparency = self.props.transparency,
		}, {
			Navbar = e(Navbar, {
				onBack = self.props.onBack,
				transparency = self.props.transparency,
				layoutOrder = 0,
			}),

			OpenScriptsExternally = e(Setting, {
				id = "openScriptsExternally",
				name = "Open Scripts Externally",
				description = "Attempt to open scripts in an external editor",
				transparency = self.props.transparency,
				layoutOrder = 1,
			}),

			ShowNotifications = e(Setting, {
				id = "showNotifications",
				name = "Show Notifications",
				description = "Popup notifications in viewport",
				transparency = self.props.transparency,
				layoutOrder = 2,
			}),

			PlaySounds = e(Setting, {
				id = "playSounds",
				name = "Play Sounds",
				description = "Toggle sound effects",
				transparency = self.props.transparency,
				layoutOrder = 3,
			}),

			TwoWaySync = e(Setting, {
				id = "twoWaySync",
				name = "Two-Way Sync",
				description = "EXPERIMENTAL! Editing files in Studio will sync them into the filesystem",
				transparency = self.props.transparency,
				layoutOrder = 4,
			}),

			LogLevel = e(Setting, {
				id = "logLevel",
				name = "Log Level",
				description = "Plugin output verbosity level",
				transparency = self.props.transparency,
				layoutOrder = 5,

				options = invertedLevels,
				showReset = Settings:getBinding("logLevel"):map(function(value)
					return value ~= "Info"
				end),
				onReset = function()
					Settings:set("logLevel", "Info")
				end,
			}),

			TypecheckingEnabled = e(Setting, {
				id = "typecheckingEnabled",
				name = "Typechecking",
				description = "Toggle typechecking on the API surface",
				transparency = self.props.transparency,
				layoutOrder = 6,
			}),

			Layout = e("UIListLayout", {
				FillDirection = Enum.FillDirection.Vertical,
				SortOrder = Enum.SortOrder.LayoutOrder,

				[Roact.Change.AbsoluteContentSize] = function(object)
					self.setContentSize(object.AbsoluteContentSize)
				end,
			}),

			Padding = e("UIPadding", {
				PaddingLeft = UDim.new(0, 20),
				PaddingRight = UDim.new(0, 20),
			}),
		})
	end)
end

return SettingsPage
]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8f1</UniqueId>
								</Properties>
								<Item class="ModuleScript" referent="RBX0e11c4f7055d48509706c700ad45c11a">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Setting</string>
										<string name="ScriptGuid">{a29f277a-624a-4145-886d-0dbb19f8abec}</string>
										<ProtectedString name="Source"><![CDATA[local TextService = game:GetService("TextService")

local Rojo = script:FindFirstAncestor("Rojo")
local Plugin = Rojo.Plugin
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)

local Settings = require(Plugin.Settings)
local Assets = require(Plugin.Assets)
local Theme = require(Plugin.App.Theme)

local Checkbox = require(Plugin.App.Components.Checkbox)
local Dropdown = require(Plugin.App.Components.Dropdown)
local IconButton = require(Plugin.App.Components.IconButton)

local e = Roact.createElement

local DIVIDER_FADE_SIZE = 0.1

local function getTextBounds(text, textSize, font, lineHeight, bounds)
	local textBounds = TextService:GetTextSize(text, textSize, font, bounds)

	local lineCount = textBounds.Y / textSize
	local lineHeightAbsolute = textSize * lineHeight

	return Vector2.new(textBounds.X, lineHeightAbsolute * lineCount - (lineHeightAbsolute - textSize))
end

local Setting = Roact.Component:extend("Setting")

function Setting:init()
	self.contentSize, self.setContentSize = Roact.createBinding(Vector2.new(0, 0))
	self.containerSize, self.setContainerSize = Roact.createBinding(Vector2.new(0, 0))

	self:setState({
		setting = Settings:get(self.props.id),
	})

	self.changedCleanup = Settings:onChanged(self.props.id, function(value)
		self:setState({
			setting = value,
		})
	end)
end

function Setting:willUnmount()
	self.changedCleanup()
end

function Setting:render()
	return Theme.with(function(theme)
		theme = theme.Settings

		return e("Frame", {
			Size = self.contentSize:map(function(value)
				return UDim2.new(1, 0, 0, 20 + value.Y + 20)
			end),
			LayoutOrder = self.props.layoutOrder,
			ZIndex = -self.props.layoutOrder,
			BackgroundTransparency = 1,

			[Roact.Change.AbsoluteSize] = function(object)
				self.setContainerSize(object.AbsoluteSize)
			end,
		}, {
			Input = if self.props.options ~= nil then
				e(Dropdown, {
					options = self.props.options,
					active = self.state.setting,
					transparency = self.props.transparency,
					position = UDim2.new(1, 0, 0.5, 0),
					anchorPoint = Vector2.new(1, 0.5),
					onClick = function(option)
						Settings:set(self.props.id, option)
					end,
				})
			else
				e(Checkbox, {
					active = self.state.setting,
					transparency = self.props.transparency,
					position = UDim2.new(1, 0, 0.5, 0),
					anchorPoint = Vector2.new(1, 0.5),
					onClick = function()
						local currentValue = Settings:get(self.props.id)
						Settings:set(self.props.id, not currentValue)
					end,
				}),

			Reset = if self.props.onReset then e(IconButton, {
				icon = Assets.Images.Icons.Reset,
				iconSize = 24,
				color = theme.BackButtonColor,
				transparency = self.props.transparency,
				visible = self.props.showReset,

				position = UDim2.new(1, -32 - (self.props.options ~= nil and 120 or 40), 0.5, 0),
				anchorPoint = Vector2.new(0, 0.5),

				onClick = self.props.onReset,
			}) else nil,

			Text = e("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
				BackgroundTransparency = 1,
			}, {
				Name = e("TextLabel", {
					Text = self.props.name,
					Font = Enum.Font.GothamBold,
					TextSize = 17,
					TextColor3 = theme.Setting.NameColor,
					TextXAlignment = Enum.TextXAlignment.Left,
					TextTransparency = self.props.transparency,

					Size = UDim2.new(1, 0, 0, 17),

					LayoutOrder = 1,
					BackgroundTransparency = 1,
				}),

				Description = e("TextLabel", {
					Text = self.props.description,
					Font = Enum.Font.Gotham,
					LineHeight = 1.2,
					TextSize = 14,
					TextColor3 = theme.Setting.DescriptionColor,
					TextXAlignment = Enum.TextXAlignment.Left,
					TextTransparency = self.props.transparency,
					TextWrapped = true,

					Size = self.containerSize:map(function(value)
						local offset = (self.props.onReset and 34 or 0) + (self.props.options ~= nil and 120 or 40)
						local textBounds = getTextBounds(
							self.props.description, 14, Enum.Font.Gotham, 1.2,
							Vector2.new(value.X - offset, math.huge)
						)
						return UDim2.new(1, -offset, 0, textBounds.Y)
					end),

					LayoutOrder = 2,
					BackgroundTransparency = 1,
				}),

				Layout = e("UIListLayout", {
					VerticalAlignment = Enum.VerticalAlignment.Center,
					FillDirection = Enum.FillDirection.Vertical,
					SortOrder = Enum.SortOrder.LayoutOrder,
					Padding = UDim.new(0, 6),

					[Roact.Change.AbsoluteContentSize] = function(object)
						self.setContentSize(object.AbsoluteContentSize)
					end,
				}),

				Padding = e("UIPadding", {
					PaddingTop = UDim.new(0, 20),
					PaddingBottom = UDim.new(0, 20),
				}),
			}),

			Divider = e("Frame", {
				BackgroundColor3 = theme.DividerColor,
				BackgroundTransparency = self.props.transparency,
				Size = UDim2.new(1, 0, 0, 1),
				BorderSizePixel = 0,
			}, {
				Gradient = e("UIGradient", {
					Transparency = NumberSequence.new({
						NumberSequenceKeypoint.new(0, 1),
						NumberSequenceKeypoint.new(DIVIDER_FADE_SIZE, 0),
						NumberSequenceKeypoint.new(1 - DIVIDER_FADE_SIZE, 0),
						NumberSequenceKeypoint.new(1, 1),
					}),
				}),
			}),
		})
	end)
end

return Setting
]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8f2</UniqueId>
									</Properties>
								</Item>
							</Item>
						</Item>
						<Item class="ModuleScript" referent="RBXfdc5af0785f5493eb33460a2ac72678c">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Theme</string>
								<string name="ScriptGuid">{c455649c-6499-4f45-8c16-a9f080328234}</string>
								<ProtectedString name="Source"><![CDATA[--[[
	Theming system taking advantage of Roact's new context API.
	Doesn't use colors provided by Studio and instead just branches on theme
	name. This isn't exactly best practice.
]]

-- Studio does not exist outside Roblox Studio, so we'll lazily initialize it
-- when possible.
local _Studio
local function getStudio()
	if _Studio == nil then
		_Studio = settings():GetService("Studio")
	end

	return _Studio
end

local Rojo = script:FindFirstAncestor("Rojo")
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)
local Log = require(Packages.Log)

local strict = require(script.Parent.Parent.strict)

-- Copying hex colors back and forth from design programs is faster
local function hexColor(decimal)
	local red = bit32.band(bit32.rshift(decimal, 16), 2^8 - 1)
	local green = bit32.band(bit32.rshift(decimal, 8), 2^8 - 1)
	local blue = bit32.band(decimal, 2^8 - 1)

	return Color3.fromRGB(red, green, blue)
end

local BRAND_COLOR = hexColor(0xE13835)

local lightTheme = strict("LightTheme", {
	BackgroundColor = hexColor(0xFFFFFF),
	Button = {
		Solid = {
			ActionFillColor = hexColor(0xFFFFFF),
			ActionFillTransparency = 0.8,
			Enabled = {
				TextColor = hexColor(0xFFFFFF),
				BackgroundColor = BRAND_COLOR,
			},
			Disabled = {
				TextColor = hexColor(0xFFFFFF),
				BackgroundColor = BRAND_COLOR,
			},
		},
		Bordered = {
			ActionFillColor = hexColor(0x000000),
			ActionFillTransparency = 0.9,
			Enabled = {
				TextColor = hexColor(0x393939),
				BorderColor = hexColor(0xACACAC),
			},
			Disabled = {
				TextColor = hexColor(0x393939),
				BorderColor = hexColor(0xACACAC),
			},
		},
	},
	Checkbox = {
		Active = {
			IconColor = hexColor(0xFFFFFF),
			BackgroundColor = BRAND_COLOR,
		},
		Inactive = {
			IconColor = hexColor(0xEEEEEE),
			BorderColor = hexColor(0xAFAFAF),
		},
	},
	Dropdown = {
		TextColor = hexColor(0x00000),
		BorderColor = hexColor(0xAFAFAF),
		BackgroundColor = hexColor(0xEEEEEE),
		Open = {
			IconColor = BRAND_COLOR,
		},
		Closed = {
			IconColor = hexColor(0xEEEEEE),
		},
	},
	AddressEntry = {
		TextColor = hexColor(0x000000),
		PlaceholderColor = hexColor(0x8C8C8C)
	},
	BorderedContainer = {
		BorderColor = hexColor(0xCBCBCB),
		BackgroundColor = hexColor(0xEEEEEE),
	},
	Spinner = {
		ForegroundColor = BRAND_COLOR,
		BackgroundColor = hexColor(0xEEEEEE),
	},
	ConnectionDetails = {
		ProjectNameColor = hexColor(0x00000),
		AddressColor = hexColor(0x00000),
		DisconnectColor = BRAND_COLOR,
	},
	Settings = {
		DividerColor = hexColor(0xCBCBCB),
		Navbar = {
			BackButtonColor = hexColor(0x000000),
			TextColor = hexColor(0x000000),
		},
		Setting = {
			NameColor = hexColor(0x000000),
			DescriptionColor = hexColor(0x5F5F5F),
		},
	},
	Header = {
		LogoColor = BRAND_COLOR,
		VersionColor = hexColor(0x727272),
	},
	Notification = {
		InfoColor = hexColor(0x00000),
		CloseColor = BRAND_COLOR,
	},
	ErrorColor = hexColor(0x000000),
	ScrollBarColor = hexColor(0x000000),
})

local darkTheme = strict("DarkTheme", {
	BackgroundColor = hexColor(0x2E2E2E),
	Button = {
		Solid = {
			ActionFillColor = hexColor(0xFFFFFF),
			ActionFillTransparency = 0.8,
			Enabled = {
				TextColor = hexColor(0xFFFFFF),
				BackgroundColor = BRAND_COLOR,
			},
			Disabled = {
				TextColor = hexColor(0xFFFFFF),
				BackgroundColor = BRAND_COLOR,
			},
		},
		Bordered = {
			ActionFillColor = hexColor(0xFFFFFF),
			ActionFillTransparency = 0.9,
			Enabled = {
				TextColor = hexColor(0xDBDBDB),
				BorderColor = hexColor(0x535353),
			},
			Disabled = {
				TextColor = hexColor(0xDBDBDB),
				BorderColor = hexColor(0x535353),
			},
		},
	},
	Checkbox = {
		Active = {
			IconColor = hexColor(0xFFFFFF),
			BackgroundColor = BRAND_COLOR,
		},
		Inactive = {
			IconColor = hexColor(0x484848),
			BorderColor = hexColor(0x5A5A5A),
		},
	},
	Dropdown = {
		TextColor = hexColor(0xFFFFFF),
		BorderColor = hexColor(0x5A5A5A),
		BackgroundColor = hexColor(0x2B2B2B),
		Open = {
			IconColor = BRAND_COLOR,
		},
		Closed = {
			IconColor = hexColor(0x484848),
		},
	},
	AddressEntry = {
		TextColor = hexColor(0xFFFFFF),
		PlaceholderColor = hexColor(0x8B8B8B)
	},
	BorderedContainer = {
		BorderColor = hexColor(0x535353),
		BackgroundColor = hexColor(0x2B2B2B),
	},
	Spinner = {
		ForegroundColor = BRAND_COLOR,
		BackgroundColor = hexColor(0x2B2B2B),
	},
	ConnectionDetails = {
		ProjectNameColor = hexColor(0xFFFFFF),
		AddressColor = hexColor(0xFFFFFF),
		DisconnectColor = hexColor(0xFFFFFF),
	},
	Settings = {
		DividerColor = hexColor(0x535353),
		Navbar = {
			BackButtonColor = hexColor(0xFFFFFF),
			TextColor = hexColor(0xFFFFFF),
		},
		Setting = {
			NameColor = hexColor(0xFFFFFF),
			DescriptionColor = hexColor(0xD3D3D3),
		},
	},
	Header = {
		LogoColor = BRAND_COLOR,
		VersionColor = hexColor(0xD3D3D3)
	},
	Notification = {
		InfoColor = hexColor(0xFFFFFF),
		CloseColor = hexColor(0xFFFFFF),
	},
	ErrorColor = hexColor(0xFFFFFF),
	ScrollBarColor = hexColor(0xFFFFFF),
})

local Context = Roact.createContext(lightTheme)

local StudioProvider = Roact.Component:extend("StudioProvider")

-- Pull the current theme from Roblox Studio and update state with it.
function StudioProvider:updateTheme()
	local studioTheme = getStudio().Theme

	if studioTheme.Name == "Light" then
		self:setState({
			theme = lightTheme,
		})
	elseif studioTheme.Name == "Dark" then
		self:setState({
			theme = darkTheme,
		})
	else
		Log.warn("Unexpected theme '{}'' -- falling back to light theme!", studioTheme.Name)

		self:setState({
			theme = lightTheme,
		})
	end
end

function StudioProvider:init()
	self:updateTheme()
end

function StudioProvider:render()
	return Roact.createElement(Context.Provider, {
		value = self.state.theme,
	}, self.props[Roact.Children])
end

function StudioProvider:didMount()
	self.connection = getStudio().ThemeChanged:Connect(function()
		self:updateTheme()
	end)
end

function StudioProvider:willUnmount()
	self.connection:Disconnect()
end

local function with(callback)
	return Roact.createElement(Context.Consumer, {
		render = callback,
	})
end

return {
	StudioProvider = StudioProvider,
	Consumer = Context.Consumer,
	with = with,
}
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8f3</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXe3a7a815e1c54973ad9c7b38ba7eeaec">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">bindingUtil</string>
								<string name="ScriptGuid">{d63f2f9a-d843-4b9b-a4d2-0895a747966e}</string>
								<ProtectedString name="Source"><![CDATA[local Rojo = script:FindFirstAncestor("Rojo")
local Packages = Rojo.Packages

local Roact = require(Packages.Roact)
local Log = require(Packages.Log)

local LERP_DATA_TYPES = {
	Color3 = true,
	UDim = true,
	UDim2 = true,
	Vector2 = true,
	Vector3 = true,
}

local function fromMotor(motor)
	local motorBinding, setMotorBinding = Roact.createBinding(motor:getValue())
	motor:onStep(setMotorBinding)
	return motorBinding
end

local function mapLerp(binding, value1, value2)
	local valueType = typeof(value1)
	if valueType ~= typeof(value2) then
		Log.error("Type mismatch between values ({}, {}})", valueType, typeof(value2))
	end

	return binding:map(function(position)
		if valueType == "number" then
			return value1 - (value2 - value1) * position
		elseif LERP_DATA_TYPES[valueType] then
			return value1:lerp(value2, position)
		else
			Log.error("Unable to interpolate type {}", valueType)
		end
	end)
end

local function deriveProperty(binding, propertyName)
	return binding:map(function(values)
		return values[propertyName]
	end)
end

local function blendAlpha(alphaValues)
	local alpha = 0

	for _, value in pairs(alphaValues) do
		alpha = alpha + (1 - alpha) * value
	end

	return alpha
end

return {
	fromMotor = fromMotor,
	mapLerp = mapLerp,
	deriveProperty = deriveProperty,
	blendAlpha = blendAlpha,
}
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8f4</UniqueId>
							</Properties>
						</Item>
					</Item>
					<Item class="ModuleScript" referent="RBX8cb3d44ae3574e2599c431707e178667">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Assets</string>
							<string name="ScriptGuid">{5e08c25f-347a-467a-afbc-1945f0f1185b}</string>
							<ProtectedString name="Source"><![CDATA[local strict = require(script.Parent.strict)

local Assets = {
	Sprites = {},
	Slices = {
		RoundedBackground = {
			Image = "rbxassetid://5981360418",
			Center = Rect.new(10, 10, 10, 10),
			Scale = 0.5,
		},

		RoundedBorder = {
			Image = "rbxassetid://5981360137",
			Center = Rect.new(10, 10, 10, 10),
			Scale = 0.5,
		},
	},
	Images = {
		Logo = "rbxassetid://5990772764",
		PluginButton = "rbxassetid://3405341609",
		PluginButtonConnected = "rbxassetid://9529783993",
		PluginButtonWarning = "rbxassetid://9529784530",
		Icons = {
			Close = "rbxassetid://6012985953",
			Back = "rbxassetid://6017213752",
			Reset = "rbxassetid://10142422327",
		},
		Checkbox = {
			Active = "rbxassetid://6016251644",
			Inactive = "rbxassetid://6016251963",
		},
		Dropdown = {
			Arrow = "rbxassetid://10131770538",
		},
		Spinner = {
			Foreground = "rbxassetid://3222731032",
			Background = "rbxassetid://3222730627",
		},
		ScrollBar = {
			Top = "rbxassetid://6017290134",
			Middle = "rbxassetid://6017289904",
			Bottom = "rbxassetid://6017289712",
		},
		Circles = {
			[16] = "rbxassetid://3056541177",
			[32] = "rbxassetid://3088713341",
			[64] = "rbxassetid://4918677124",
			[128] = "rbxassetid://2600845734",
			[500] = "rbxassetid://2609138523"
		},
	},
	Sounds = {
		Notification = "rbxassetid://203785492",
	},
	StartSession = "",
	SessionActive = "",
	Configure = "",
}

local function guardForTypos(name, map)
	strict(name, map)

	for key, child in pairs(map) do
		if type(child) == "table" then
			guardForTypos(("%s.%s"):format(name, key), child)
		end
	end
end

guardForTypos("Assets", Assets)

return Assets
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8f5</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX25d5f6e657904fb999d3ea9121b62116">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">ChangeBatcher</string>
							<string name="ScriptGuid">{2340041b-80dc-4f91-97b9-4e9ed09d0cb2}</string>
							<ProtectedString name="Source"><![CDATA[--[[
	The ChangeBatcher is responsible for collecting and dispatching changes made
	to tracked instances during two-way sync.
]]

local RunService = game:GetService("RunService")

local PatchSet = require(script.Parent.PatchSet)

local createPatchSet = require(script.createPatchSet)

local ChangeBatcher = {}
ChangeBatcher.__index = ChangeBatcher

local BATCH_INTERVAL = 0.2

function ChangeBatcher.new(instanceMap, onChangesFlushed)
	local self

	local renderSteppedConnection = RunService.RenderStepped:Connect(function(dt)
		self:__cycle(dt)
	end)

	self = setmetatable({
		__accumulator = 0,
		__renderSteppedConnection = renderSteppedConnection,
		__instanceMap = instanceMap,
		__onChangesFlushed = onChangesFlushed,
		__pendingPropertyChanges = {},
	}, ChangeBatcher)

	return self
end

function ChangeBatcher:stop()
	self.__renderSteppedConnection:Disconnect()
	self.__pendingPropertyChanges = {}
end

function ChangeBatcher:add(instance, propertyName)
	local properties = self.__pendingPropertyChanges[instance]

	if not properties then
		properties = {}
		self.__pendingPropertyChanges[instance] = properties
	end

	properties[propertyName] = true
end

function ChangeBatcher:__cycle(dt)
	self.__accumulator += dt

	if self.__accumulator >= BATCH_INTERVAL then
		self.__accumulator -= BATCH_INTERVAL

		local patch = self:__flush()

		if patch then
			self.__onChangesFlushed(patch)
		end
	end

	self.__instanceMap:unpauseAllInstances()
end

function ChangeBatcher:__flush()
	if next(self.__pendingPropertyChanges) == nil then
		return nil
	end

	local patch = createPatchSet(self.__instanceMap, self.__pendingPropertyChanges)

	if PatchSet.isEmpty(patch) then
		return nil
	end

	return patch
end

return ChangeBatcher
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8f6</UniqueId>
						</Properties>
						<Item class="ModuleScript" referent="RBX98910acba25840a2953d2de538759a92">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">createPatchSet</string>
								<string name="ScriptGuid">{70ea9606-e0b0-4f60-bb8c-afe9c59c490f}</string>
								<ProtectedString name="Source"><![CDATA[--[[
	Take an InstanceMap and a dictionary mapping instances to sets of property
	names. Populate a patch with the encoded values of all the given properties
	on all the given instances (or, if any changes set Parent to nil, removals
	of instances) and return the patch.
]]

local Packages = script.Parent.Parent.Parent.Packages
local Log = require(Packages.Log)

local PatchSet = require(script.Parent.Parent.PatchSet)

local encodePatchUpdate = require(script.Parent.encodePatchUpdate)

return function(instanceMap, propertyChanges)
	local patch = PatchSet.newEmpty()

	for instance, properties in pairs(propertyChanges) do
		local instanceId = instanceMap.fromInstances[instance]

		if instanceId == nil then
			Log.warn("Ignoring change for instance {:?} as it is unknown to Rojo", instance)
			continue
		end

		if properties.Parent then
			if instance.Parent == nil then
				table.insert(patch.removed, instanceId)
			else
				Log.warn("Cannot sync non-nil Parent property changes yet")
			end
		else
			local update = encodePatchUpdate(instance, instanceId, properties)
			table.insert(patch.updated, update)
		end

		propertyChanges[instance] = nil
	end

	return patch
end
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8f7</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX45c3547471134acf9433676f16938e6e">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">createPatchSet.spec</string>
								<string name="ScriptGuid">{c66b9b05-ac87-4de8-9f38-05dfbce57697}</string>
								<ProtectedString name="Source"><![CDATA[return function()
	local PatchSet = require(script.Parent.Parent.PatchSet)
	local InstanceMap = require(script.Parent.Parent.InstanceMap)

	local createPatchSet = require(script.Parent.createPatchSet)

	it("should return a patch", function()
		local patch = createPatchSet(InstanceMap.new(), {})

		assert(PatchSet.validate(patch))
	end)

	it("should contain updates for every instance with property changes", function()
		local instanceMap = InstanceMap.new()

		local part1 = Instance.new("Part")
		instanceMap:insert("PART_1", part1)

		local part2 = Instance.new("Part")
		instanceMap:insert("PART_2", part2)

		local changes = {
			[part1] = {
				Position = true,
				Size = true,
				Color = true,
			},
			[part2] = {
				CFrame = true,
				Velocity = true,
				Transparency = true,
			},
		}

		local patch = createPatchSet(instanceMap, changes)

		expect(#patch.updated).to.equal(2)
	end)

	it("should not contain any updates for removed instances", function()
		local instanceMap = InstanceMap.new()

		local part1 = Instance.new("Part")
		instanceMap:insert("PART_1", part1)

		local changes = {
			[part1] = {
				Parent = true,
				Position = true,
				Size = true,
			},
		}

		local patch = createPatchSet(instanceMap, changes)

		expect(#patch.removed).to.equal(1)
		expect(#patch.updated).to.equal(0)
	end)

	it("should remove instances from the property change table", function()
		local instanceMap = InstanceMap.new()

		local part1 = Instance.new("Part")
		instanceMap:insert("PART_1", part1)

		local changes = {
			[part1] = {},
		}

		createPatchSet(instanceMap, changes)

		expect(next(changes)).to.equal(nil)
	end)
end
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8f8</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXa544f1561ec44afd8819e168da3e1c1d">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">encodePatchUpdate</string>
								<string name="ScriptGuid">{c67fa747-307b-43e7-a129-580c246a8677}</string>
								<ProtectedString name="Source"><![CDATA[local Packages = script.Parent.Parent.Parent.Packages
local Log = require(Packages.Log)
local RbxDom = require(Packages.RbxDom)

local encodeProperty = require(script.Parent.encodeProperty)

return function(instance, instanceId, properties)
	local update = {
		id = instanceId,
		changedProperties = {},
	}

	for propertyName in pairs(properties) do
		if propertyName == "Name" then
			update.changedName = instance.Name
		else
			local descriptor = RbxDom.findCanonicalPropertyDescriptor(instance.ClassName, propertyName)

			if not descriptor then
				Log.debug("Could not sync back property {:?}.{}", instance, propertyName)
				continue
			end

			local encodeSuccess, encodeResult = encodeProperty(instance, propertyName, descriptor)

			if not encodeSuccess then
				Log.debug("Could not sync back property {:?}.{}: {}", instance, propertyName, encodeResult)
				continue
			end

			update.changedProperties[propertyName] = encodeResult
		end
	end

	if next(update.changedProperties) == nil and update.changedName == nil then
		return nil
	end

	return update
end
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8f9</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXa68d77674e454b1ba2cf42e50d13dc87">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">encodePatchUpdate.spec</string>
								<string name="ScriptGuid">{bf1d21f8-24c5-4df8-843c-fe0ec1649e03}</string>
								<ProtectedString name="Source"><![CDATA[return function()
	local encodePatchUpdate = require(script.Parent.encodePatchUpdate)

	it("should return an update when there are property changes", function()
		local part = Instance.new("Part")
		local properties = {
			CFrame = true,
			Color = true,
		}
		local update = encodePatchUpdate(part, "PART", properties)

		expect(update.id).to.equal("PART")
		expect(update.changedProperties.CFrame).to.be.ok()
		expect(update.changedProperties.Color).to.be.ok()
	end)

	it("should return nil when there are no property changes", function()
		local part = Instance.new("Part")
		local properties = {
			NonExistentProperty = true,
		}
		local update = encodePatchUpdate(part, "PART", properties)

		expect(update).to.equal(nil)
	end)

	it("should set changedName in the update when the instance's Name changes", function()
		local part = Instance.new("Part")
		local properties = {
			Name = true,
		}

		part.Name = "We'reGettingToTheCoolPart"

		local update = encodePatchUpdate(part, "PART", properties)

		expect(update.changedName).to.equal("We'reGettingToTheCoolPart")
	end)

	it("should correctly encode property values", function()
		local part = Instance.new("Part")
		local properties = {
			Position = true,
			Color = true,
		}

		part.Position = Vector3.new(0, 100, 0)
		part.Color = Color3.new(0.8, 0.2, 0.9)

		local update = encodePatchUpdate(part, "PART", properties)
		local position = update.changedProperties.Position
		local color = update.changedProperties.Color

		expect(position.Vector3[1]).to.equal(0)
		expect(position.Vector3[2]).to.equal(100)
		expect(position.Vector3[3]).to.equal(0)

		expect(color.Color3[1]).to.be.near(0.8, 0.01)
		expect(color.Color3[2]).to.be.near(0.2, 0.01)
		expect(color.Color3[3]).to.be.near(0.9, 0.01)
	end)
end
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8fa</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX8567754df39a41a9a1c0c9e9312d31ef">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">encodeProperty</string>
								<string name="ScriptGuid">{21c25307-83fe-45da-a45d-0f4ac15e7afc}</string>
								<ProtectedString name="Source"><![CDATA[local Packages = script.Parent.Parent.Parent.Packages
local Log = require(Packages.Log)
local RbxDom = require(Packages.RbxDom)

return function(instance, propertyName, propertyDescriptor)
	local readSuccess, readResult = propertyDescriptor:read(instance)

	if not readSuccess then
		Log.warn("Could not sync back property {:?}.{}: {}", instance, propertyName, readResult)
		return false, nil
	end

	local dataType = propertyDescriptor.dataType
	local encodeSuccess, encodeResult = RbxDom.EncodedValue.encode(readResult, dataType)

	if not encodeSuccess then
		Log.warn("Could not sync back property {:?}.{}: {}", instance, propertyName, encodeResult)
		return false, nil
	end

	return true, encodeResult
end
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8fb</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX26d1f8e7875e4a47841b4da9ecf85ce0">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">init.spec</string>
								<string name="ScriptGuid">{5362160b-da9d-4f3e-a04a-27a6ec772954}</string>
								<ProtectedString name="Source"><![CDATA[return function()
	local ChangeBatcher = require(script.Parent)
	local InstanceMap = require(script.Parent.Parent.InstanceMap)
	local PatchSet = require(script.Parent.Parent.PatchSet)

	local noop = function() end

	describe("new", function()
		it("should create a new ChangeBatcher", function()
			local instanceMap = InstanceMap.new()
			local changeBatcher = ChangeBatcher.new(instanceMap, noop)

			expect(changeBatcher.__pendingPropertyChanges).to.be.a("table")
			expect(next(changeBatcher.__pendingPropertyChanges)).to.equal(nil)
			expect(changeBatcher.__onChangesFlushed).to.equal(noop)
			expect(changeBatcher.__instanceMap).to.equal(instanceMap)
			expect(typeof(changeBatcher.__renderSteppedConnection)).to.equal("RBXScriptConnection")
		end)
	end)

	describe("stop", function()
		it("should disconnect the RenderStepped connection", function()
			local changeBatcher = ChangeBatcher.new(InstanceMap.new(), noop)

			changeBatcher:stop()

			expect(changeBatcher.__renderSteppedConnection.Connected).to.equal(false)
		end)
	end)

	describe("add", function()
		it("should add property changes to be considered for the current batch", function()
			local instanceMap = InstanceMap.new()
			local changeBatcher = ChangeBatcher.new(instanceMap, noop)
			local part = Instance.new("Part")

			instanceMap:insert("PART", part)
			changeBatcher:add(part, "Name")

			local properties = changeBatcher.__pendingPropertyChanges[part]

			expect(properties).to.be.a("table")
			expect(properties.Name).to.be.ok()

			changeBatcher:add(part, "Position")
			expect(properties.Position).to.be.ok()
		end)
	end)

	describe("__cycle", function()
		it("should immediately unpause any paused instances after each cycle", function()
			local instanceMap = InstanceMap.new()
			local changeBatcher = ChangeBatcher.new(instanceMap, noop)
			local part = Instance.new("Part")

			instanceMap.pausedUpdateInstances[part] = true

			changeBatcher:__cycle(0)

			expect(instanceMap.pausedUpdateInstances[part]).to.equal(nil)
		end)
	end)

	describe("__flush", function()
		it("should return nil when there are no changes to process", function()
			local changeBatcher = ChangeBatcher.new(InstanceMap.new(), noop)
			expect(changeBatcher:__flush()).to.equal(nil)
		end)

		it("should return a patch when there are changes to process and the resulting patch is non-empty", function()
			local instanceMap = InstanceMap.new()
			local changeBatcher = ChangeBatcher.new(instanceMap, noop)
			local part = Instance.new("Part")

			instanceMap:insert("PART", part)

			changeBatcher.__pendingPropertyChanges[part] = {
				Position = true,
				Name = true,
			}

			local patch = changeBatcher:__flush()

			assert(PatchSet.validate(patch))
		end)

		it("should return nil when there are changes to process and the resulting patch is empty", function()
			local instanceMap = InstanceMap.new()
			local changeBatcher = ChangeBatcher.new(instanceMap, noop)
			local part = Instance.new("Part")

			instanceMap:insert("PART", part)

			changeBatcher.__pendingPropertyChanges[part] = {
				NonExistentProperty = true,
			}

			expect(changeBatcher:__flush()).to.equal(nil)
		end)
	end)
end
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8fc</UniqueId>
							</Properties>
						</Item>
					</Item>
					<Item class="ModuleScript" referent="RBXc0451067210c4d7e961434d13d4639ca">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Config</string>
							<string name="ScriptGuid">{8a9b95db-33a4-40cc-b71b-c702d76f2f68}</string>
							<ProtectedString name="Source"><![CDATA[local strict = require(script.Parent.strict)

local isDevBuild = script.Parent.Parent:FindFirstChild("ROJO_DEV_BUILD") ~= nil

return strict("Config", {
	isDevBuild = isDevBuild,
	codename = "Epiphany",
	version = {7, 2, 1},
	expectedServerVersionString = "7.2 or newer",
	protocolVersion = 4,
	defaultHost = "localhost",
	defaultPort = 34872,
})]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8fd</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX556e837f47a44454ab0a4ec0cf19e291">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Dictionary</string>
							<string name="ScriptGuid">{fba12a20-3694-42cb-80ab-3ad7979d8fbb}</string>
							<ProtectedString name="Source"><![CDATA[--[[
	This is a placeholder module waiting for Cryo to become available.
]]

local None = newproxy(true)
getmetatable(None).__tostring = function()
	return "None"
end

local function merge(...)
	local output = {}

	for i = 1, select("#", ...) do
		local source = select(i, ...)

		if source ~= nil then
			for key, value in pairs(source) do
				if value == None then
					output[key] = nil
				else
					output[key] = value
				end
			end
		end
	end

	return output
end

return {
	None = None,
	merge = merge,
}]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8fe</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX94959c806d0c4de8be7ae928cac4c779">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">InstanceMap</string>
							<string name="ScriptGuid">{8a5c7c4c-3ff9-4fd6-9b13-7afb4bb8b5cd}</string>
							<ProtectedString name="Source"><![CDATA[local RunService = game:GetService("RunService")

local Packages = script.Parent.Parent.Packages
local Log = require(Packages.Log)

--[[
	A bidirectional map between instance IDs and Roblox instances. It lets us
	keep track of every instance we know about.

	TODO: Track ancestry to catch when stuff moves?
]]
local InstanceMap = {}
InstanceMap.__index = InstanceMap

function InstanceMap.new(onInstanceChanged)
	local self = {
		-- A map from IDs to instances.
		fromIds = {},

		-- A map from instances to IDs.
		fromInstances = {},

		-- A set of all instances that updates should be paused for. This set
		-- should generally be empty, and will be filled by pauseInstance
		-- temporarily.
		pausedUpdateInstances = {},

		-- A map from instances to a signal or list of signals connected to it.
		instancesToSignal = {},

		-- Callback that's invoked whenever an instance is changed and it was
		-- not paused.
		onInstanceChanged = onInstanceChanged,
	}

	return setmetatable(self, InstanceMap)
end

function InstanceMap:size()
	local size = 0

	for _ in pairs(self.fromIds) do
		size = size + 1
	end

	return size
end

--[[
	Disconnect all connections and release all instance references.
]]
function InstanceMap:stop()
	-- I think this is safe.
	for instance in pairs(self.fromInstances) do
		self:removeInstance(instance)
	end
end

function InstanceMap:__fmtDebug(output)
	output:writeLine("InstanceMap {{")
	output:indent()

	-- Collect all of the entries in the InstanceMap and sort them by their
	-- label, which helps make our output deterministic.
	local entries = {}
	for id, instance in pairs(self.fromIds) do
		local label = string.format("%s (%s)", instance:GetFullName(), instance.ClassName)

		table.insert(entries, {id, label})
	end

	table.sort(entries, function(a, b)
		return a[2] < b[2]
	end)

	for _, entry in ipairs(entries) do
		output:writeLine("{}: {}", entry[1], entry[2])
	end

	output:unindent()
	output:write("}")
end

function InstanceMap:insert(id, instance)
	self:removeId(id)
	self:removeInstance(instance)

	self.fromIds[id] = instance
	self.fromInstances[instance] = id
	self:__connectSignals(instance)
end

function InstanceMap:removeId(id)
	local instance = self.fromIds[id]

	if instance ~= nil then
		self:__disconnectSignals(instance)
		self.fromIds[id] = nil
		self.fromInstances[instance] = nil
	end
end

function InstanceMap:removeInstance(instance)
	local id = self.fromInstances[instance]
	self:__disconnectSignals(instance)

	if id ~= nil then
		self.fromInstances[instance] = nil
		self.fromIds[id] = nil
	end
end

function InstanceMap:destroyInstance(instance)
	local id = self.fromInstances[instance]

	if id ~= nil then
		self:removeId(id)
	end

	for _, descendantInstance in ipairs(instance:GetDescendants()) do
		self:removeInstance(descendantInstance)
	end

	instance:Destroy()
end

function InstanceMap:destroyId(id)
	local instance = self.fromIds[id]
	self:removeId(id)

	if instance ~= nil then
		for _, descendantInstance in ipairs(instance:GetDescendants()) do
			self:removeInstance(descendantInstance)
		end

		instance:Destroy()
	end
end

--[[
	Pause updates for an instance.
]]
function InstanceMap:pauseInstance(instance)
	local id = self.fromInstances[instance]

	-- If we don't know about this instance, ignore it.
	if id == nil then
		return
	end

	self.pausedUpdateInstances[instance] = true
end

--[[
	Unpause updates for an instance.
]]
function InstanceMap:unpauseInstance(instance)
	self.pausedUpdateInstances[instance] = nil
end

--[[
	Unpause updates for all instances.
]]
function InstanceMap:unpauseAllInstances()
	table.clear(self.pausedUpdateInstances)
end

function InstanceMap:__connectSignals(instance)
	-- ValueBase instances have an overriden version of the Changed signal that
	-- only detects changes to their Value property.
	--
	-- We can instead connect listener to each individual property that we care
	-- about on those objects (Name and Value) to emulate the same idea.
	if instance:IsA("ValueBase") then
		local signals = {
			instance:GetPropertyChangedSignal("Name"):Connect(function()
				self:__maybeFireInstanceChanged(instance, "Name")
			end),

			instance:GetPropertyChangedSignal("Value"):Connect(function()
				self:__maybeFireInstanceChanged(instance, "Value")
			end),

			instance:GetPropertyChangedSignal("Parent"):Connect(function()
				self:__maybeFireInstanceChanged(instance, "Parent")
			end),
		}

		self.instancesToSignal[instance] = signals
	else
		self.instancesToSignal[instance] = instance.Changed:Connect(function(propertyName)
			self:__maybeFireInstanceChanged(instance, propertyName)
		end)
	end
end

function InstanceMap:__maybeFireInstanceChanged(instance, propertyName)
	Log.trace("{}.{} changed", instance:GetFullName(), propertyName)

	if self.pausedUpdateInstances[instance] then
		return
	end

	if self.onInstanceChanged == nil then
		return
	end

	if RunService:IsRunning() then
		-- We probably don't want to pick up property changes to save to the
		-- filesystem in a running game.
		return
	end

	self.onInstanceChanged(instance, propertyName)
end

function InstanceMap:__disconnectSignals(instance)
	local signals = self.instancesToSignal[instance]

	if signals ~= nil then
		-- In most cases, we only have a single signal, so we avoid keeping
		-- around the extra table. ValueBase objects force us to use multiple
		-- signals to emulate the Instance.Changed event, however.
		if typeof(signals) == "table" then
			for _, signal in ipairs(signals) do
				signal:Disconnect()
			end
		else
			signals:Disconnect()
		end

		self.instancesToSignal[instance] = nil
	end
end

return InstanceMap
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e8ff</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXa55461e353cb4d20b8c8c35d254171c9">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">PatchSet</string>
							<string name="ScriptGuid">{7f7ba925-5a3f-4f52-b0d7-c551b046fe05}</string>
							<ProtectedString name="Source"><![CDATA[--[[
	Methods to operate on either a patch created by the hydrate method, or a
	patch returned from the API.
]]

local Packages = script.Parent.Parent.Packages
local t = require(Packages.t)

local Types = require(script.Parent.Types)

local PatchSet = {}

PatchSet.validate = t.interface({
	removed = t.array(t.union(Types.RbxId, t.Instance)),
	added = t.map(Types.RbxId, Types.ApiInstance),
	updated = t.array(Types.ApiInstanceUpdate),
})

--[[
	Create a new, empty PatchSet.
]]
function PatchSet.newEmpty()
	return {
		removed = {},
		added = {},
		updated = {},
	}
end

--[[
	Tells whether the given PatchSet is empty.
]]
function PatchSet.isEmpty(patchSet)
	return next(patchSet.removed) == nil and
		next(patchSet.added) == nil and
		next(patchSet.updated) == nil
end

--[[
	Tells whether the given PatchSet has any remove operations.
]]
function PatchSet.hasRemoves(patchSet)
	return next(patchSet.removed) ~= nil
end

--[[
	Tells whether the given PatchSet has any add operations.
]]
function PatchSet.hasAdditions(patchSet)
	return next(patchSet.added) ~= nil
end

--[[
	Tells whether the given PatchSet has any update operations.
]]
function PatchSet.hasUpdates(patchSet)
	return next(patchSet.updated) ~= nil
end

--[[
	Merge multiple PatchSet objects into the given PatchSet.
]]
function PatchSet.assign(target, ...)
	for i = 1, select("#", ...) do
		local sourcePatch = select(i, ...)

		for _, removed in ipairs(sourcePatch.removed) do
			table.insert(target.removed, removed)
		end

		for id, added in pairs(sourcePatch.added) do
			target.added[id] = added
		end

		for _, update in ipairs(sourcePatch.updated) do
			table.insert(target.updated, update)
		end
	end

	return target
end

--[[
	Create a list of human-readable statements summarizing the contents of this
	patch, intended to be displayed to users.
]]
function PatchSet.humanSummary(instanceMap, patchSet)
	local statements = {}

	for _, idOrInstance in ipairs(patchSet.removed) do
		local instance, id

		if type(idOrInstance) == "string" then
			id = idOrInstance
			instance = instanceMap.fromIds[id]
		else
			instance = idOrInstance
			id = instanceMap.fromInstances[instance]
		end

		if instance ~= nil then
			table.insert(statements, string.format("- Delete instance %s", instance:GetFullName()))
		else
			table.insert(statements, string.format("- Delete instance with ID %s", id))
		end
	end

	local additionsMentioned = {}

	local function addAllDescendents(virtualInstance)
		additionsMentioned[virtualInstance.Id] = true

		for _, childId in ipairs(virtualInstance.Children) do
			addAllDescendents(patchSet.added[childId])
		end
	end

	for id, addition in pairs(patchSet.added) do
		if additionsMentioned[id] then
			continue
		end

		local virtualInstance = addition
		while true do
			if virtualInstance.Parent == nil then
				break
			end

			local virtualParent = patchSet.added[virtualInstance.Parent]
			if virtualParent == nil then
				break
			end

			virtualInstance = virtualParent
		end

		local parentDisplayName = "nil (how strange!)"
		if virtualInstance.Parent ~= nil then
			local parent = instanceMap.fromIds[virtualInstance.Parent]
			if parent ~= nil then
				parentDisplayName = parent:GetFullName()
			end
		end

		table.insert(statements, string.format(
			"- Add instance %q (ClassName %q) to %s",
			virtualInstance.Name, virtualInstance.ClassName, parentDisplayName))
	end

	for _, update in ipairs(patchSet.updated) do
		local updatedProperties = {}

		if update.changedMetadata ~= nil then
			table.insert(updatedProperties, "Rojo's Metadata")
		end

		if update.changedName ~= nil then
			table.insert(updatedProperties, "Name")
		end

		if update.changedClassName ~= nil then
			table.insert(updatedProperties, "ClassName")
		end

		for name in pairs(update.changedProperties) do
			table.insert(updatedProperties, name)
		end

		local instance = instanceMap.fromIds[update.id]
		local displayName
		if instance ~= nil then
			displayName = instance:GetFullName()
		else
			displayName = "[unknown instance]"
		end

		table.insert(statements, string.format(
			"- Update properties on %s: %s",
			displayName, table.concat(updatedProperties, ",")))
	end

	return table.concat(statements, "\n")
end

return PatchSet
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e900</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX892046ad6599481c9db738670ef7babd">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">strict</string>
							<string name="ScriptGuid">{8651e455-5f9e-45f9-b9c1-5a3145d7c740}</string>
							<ProtectedString name="Source"><![CDATA[local function strictInner(name, target)
	assert(type(name) == "string", "Argument #1 to `strict` must be a string or the table to modify")
	assert(type(target) == "table", "Argument #2 to `strict` must be nil or the table to modify")

	setmetatable(target, {
		__index = function(_, key)
			error(("%q is not a valid member of strict table %q"):format(tostring(key), name), 2)
		end,

		__newindex = function()
			error(("Strict table %q is read-only"):format(name), 2)
		end,
	})

	return target
end

return function(nameOrTarget, target)
	if type(nameOrTarget) == "string" then
		return strictInner(nameOrTarget, target)
	else
		return strictInner("<unnamed table>", target)
	end
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e91a</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX37db203b86ab403c8ef587458223a7d1">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">ServeSession</string>
							<string name="ScriptGuid">{12caacce-aba4-4e8f-9b82-30e7b846c5ac}</string>
							<ProtectedString name="Source"><![CDATA[local StudioService = game:GetService("StudioService")
local RunService = game:GetService("RunService")

local Packages = script.Parent.Parent.Packages
local Log = require(Packages.Log)
local Fmt = require(Packages.Fmt)
local t = require(Packages.t)

local ChangeBatcher = require(script.Parent.ChangeBatcher)
local InstanceMap = require(script.Parent.InstanceMap)
local PatchSet = require(script.Parent.PatchSet)
local Reconciler = require(script.Parent.Reconciler)
local strict = require(script.Parent.strict)

local Status = strict("Session.Status", {
	NotStarted = "NotStarted",
	Connecting = "Connecting",
	Connected = "Connected",
	Disconnected = "Disconnected",
})

local function debugPatch(patch)
	return Fmt.debugify(patch, function(patch, output)
		output:writeLine("Patch {{")
		output:indent()

		for removed in ipairs(patch.removed) do
			output:writeLine("Remove ID {}", removed)
		end

		for id, added in pairs(patch.added) do
			output:writeLine("Add ID {} {:#?}", id, added)
		end

		for _, updated in ipairs(patch.updated) do
			output:writeLine("Update ID {} {:#?}", updated.id, updated)
		end

		output:unindent()
		output:write("}")
	end)
end

local ServeSession = {}
ServeSession.__index = ServeSession

ServeSession.Status = Status

local validateServeOptions = t.strictInterface({
	apiContext = t.table,
	openScriptsExternally = t.boolean,
	twoWaySync = t.boolean,
})

function ServeSession.new(options)
	assert(validateServeOptions(options))

	-- Declare self ahead of time to capture it in a closure
	local self
	local function onInstanceChanged(instance, propertyName)
		if not self.__twoWaySync then
			return
		end

		self.__changeBatcher:add(instance, propertyName)
	end

	local function onChangesFlushed(patch)
		self.__apiContext:write(patch)
	end

	local instanceMap = InstanceMap.new(onInstanceChanged)
	local changeBatcher = ChangeBatcher.new(instanceMap, onChangesFlushed)
	local reconciler = Reconciler.new(instanceMap)

	local connections = {}

	local connection = StudioService
		:GetPropertyChangedSignal("ActiveScript")
		:Connect(function()
			local activeScript = StudioService.ActiveScript

			if activeScript ~= nil then
				self:__onActiveScriptChanged(activeScript)
			end
		end)
	table.insert(connections, connection)

	self = {
		__status = Status.NotStarted,
		__apiContext = options.apiContext,
		__openScriptsExternally = options.openScriptsExternally,
		__twoWaySync = options.twoWaySync,
		__reconciler = reconciler,
		__instanceMap = instanceMap,
		__changeBatcher = changeBatcher,
		__statusChangedCallback = nil,
		__patchAppliedCallback = nil,
		__connections = connections,
	}

	setmetatable(self, ServeSession)

	return self
end

function ServeSession:__fmtDebug(output)
	output:writeLine("ServeSession {{")
	output:indent()

	output:writeLine("API Context: {:#?}", self.__apiContext)
	output:writeLine("Instances: {:#?}", self.__instanceMap)

	output:unindent()
	output:write("}")
end

function ServeSession:getStatus()
	return self.__status
end

function ServeSession:onStatusChanged(callback)
	self.__statusChangedCallback = callback
end

function ServeSession:onPatchApplied(callback)
	self.__patchAppliedCallback = callback
end

function ServeSession:start()
	self:__setStatus(Status.Connecting)

	self.__apiContext:connect()
		:andThen(function(serverInfo)
			self:__setStatus(Status.Connected, serverInfo.projectName)
			self:__applyGameAndPlaceId(serverInfo)

			local rootInstanceId = serverInfo.rootInstanceId

			return self:__initialSync(rootInstanceId)
				:andThen(function()
					return self:__mainSyncLoop()
				end)
		end)
		:catch(function(err)
			if self.__status ~= Status.Disconnected then
				self:__stopInternal(err)
			end
		end)
end

function ServeSession:stop()
	self:__stopInternal()
end

function ServeSession:__applyGameAndPlaceId(serverInfo)
	if serverInfo.gameId ~= nil then
		game:SetUniverseId(serverInfo.gameId)
	end

	if serverInfo.placeId ~= nil then
		game:SetPlaceId(serverInfo.placeId)
	end
end

function ServeSession:__onActiveScriptChanged(activeScript)
	if not self.__openScriptsExternally then
		Log.trace("Not opening script {} because feature not enabled.", activeScript)

		return
	end

	if self.__status ~= Status.Connected then
		Log.trace("Not opening script {} because session is not connected.", activeScript)

		return
	end

	local scriptId = self.__instanceMap.fromInstances[activeScript]
	if scriptId == nil then
		Log.trace("Not opening script {} because it is not known by Rojo.", activeScript)

		return
	end

	Log.debug("Trying to open script {} externally...", activeScript)

	-- Force-close the script inside Studio... with a small delay in the middle
	-- to prevent Studio from crashing.
	spawn(function()
		local existingParent = activeScript.Parent
		activeScript.Parent = nil

		for i = 1, 3 do
			RunService.Heartbeat:Wait()
		end

		activeScript.Parent = existingParent
	end)

	-- Notify the Rojo server to open this script
	self.__apiContext:open(scriptId)
end

function ServeSession:__initialSync(rootInstanceId)
	return self.__apiContext:read({ rootInstanceId })
		:andThen(function(readResponseBody)
			-- Tell the API Context that we're up-to-date with the version of
			-- the tree defined in this response.
			self.__apiContext:setMessageCursor(readResponseBody.messageCursor)

			-- For any instances that line up with the Rojo server's view, start
			-- tracking them in the reconciler.
			Log.trace("Matching existing Roblox instances to Rojo IDs")
			self.__reconciler:hydrate(readResponseBody.instances, rootInstanceId, game)

			-- Calculate the initial patch to apply to the DataModel to catch us
			-- up to what Rojo thinks the place should look like.
			Log.trace("Computing changes that plugin needs to make to catch up to server...")
			local success, catchUpPatch = self.__reconciler:diff(
				readResponseBody.instances,
				rootInstanceId,
				game
			)

			if not success then
				Log.error("Could not compute a diff to catch up to the Rojo server: {:#?}", catchUpPatch)
			end

			Log.trace("Computed hydration patch: {:#?}", debugPatch(catchUpPatch))

			-- TODO: Prompt user to notify them of this patch, since it's
			-- effectively a conflict between the Rojo server and the client. In
			-- the future, we'll ask which changes the user wants to keep.

			local unappliedPatch = self.__reconciler:applyPatch(catchUpPatch)

			if not PatchSet.isEmpty(unappliedPatch) then
				Log.warn("Could not apply all changes requested by the Rojo server:\n{}",
					PatchSet.humanSummary(self.__instanceMap, unappliedPatch))
			end

			if self.__patchAppliedCallback then
				pcall(self.__patchAppliedCallback, catchUpPatch, unappliedPatch)
			end
		end)
end

function ServeSession:__mainSyncLoop()
	return self.__apiContext:retrieveMessages()
		:andThen(function(messages)
			for _, message in ipairs(messages) do
				local unappliedPatch = self.__reconciler:applyPatch(message)

				if not PatchSet.isEmpty(unappliedPatch) then
					Log.warn("Could not apply all changes requested by the Rojo server:\n{}",
						PatchSet.humanSummary(self.__instanceMap, unappliedPatch))
				end

				if self.__patchAppliedCallback then
					pcall(self.__patchAppliedCallback, message, unappliedPatch)
				end
			end

			if self.__status ~= Status.Disconnected then
				return self:__mainSyncLoop()
			end
		end)
end

function ServeSession:__stopInternal(err)
	self:__setStatus(Status.Disconnected, err)
	self.__apiContext:disconnect()
	self.__instanceMap:stop()
	self.__changeBatcher:stop()

	for _, connection in ipairs(self.__connections) do
		connection:Disconnect()
	end
	self.__connections = {}
end

function ServeSession:__setStatus(status, detail)
	self.__status = status

	if self.__statusChangedCallback ~= nil then
		self.__statusChangedCallback(status, detail)
	end
end

return ServeSession
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e90e</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXe751fe8de1d74ad3bd0722276493e31e">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Settings</string>
							<string name="ScriptGuid">{9f75f7d3-212f-4434-89a7-97daab58eb68}</string>
							<ProtectedString name="Source"><![CDATA[--[[
	Persistent plugin settings.
]]

local plugin = plugin or script:FindFirstAncestorWhichIsA("Plugin")
local Rojo = script:FindFirstAncestor("Rojo")
local Packages = Rojo.Packages

local Log = require(Packages.Log)
local Roact = require(Packages.Roact)

local defaultSettings = {
	openScriptsExternally = false,
	twoWaySync = false,
	showNotifications = true,
	playSounds = true,
	typecheckingEnabled = false,
	logLevel = "Info",
}

local Settings = {}

Settings._values = table.clone(defaultSettings)
Settings._updateListeners = {}
Settings._bindings = {}

if plugin then
	for name, defaultValue in pairs(Settings._values) do
		local savedValue = plugin:GetSetting("Rojo_" .. name)

		if savedValue == nil then
			-- plugin:SetSetting hits disc instead of memory, so it can be slow. Spawn so we don't hang.
			task.spawn(plugin.SetSetting, plugin, "Rojo_" .. name, defaultValue)
			Settings._values[name] = defaultValue
		else
			Settings._values[name] = savedValue
		end
	end
	Log.trace("Loaded settings from plugin store")
end

function Settings:get(name)
	if defaultSettings[name] == nil then
		error("Invalid setings name " .. tostring(name), 2)
	end

	return self._values[name]
end

function Settings:set(name, value)
	self._values[name] = value
	if self._bindings[name] then
		self._bindings[name].set(value)
	end

	if plugin then
		-- plugin:SetSetting hits disc instead of memory, so it can be slow. Spawn so we don't hang.
		task.spawn(plugin.SetSetting, plugin, "Rojo_" .. name, value)
	end

	if self._updateListeners[name] then
		for callback in pairs(self._updateListeners[name]) do
			task.spawn(callback, value)
		end
	end

	Log.trace(string.format("Set setting '%s' to '%s'", name, tostring(value)))
end

function Settings:onChanged(name, callback)
	local listeners = self._updateListeners[name]
	if listeners == nil then
		listeners = {}
		self._updateListeners[name] = listeners
	end
	listeners[callback] = true

	Log.trace(string.format("Added listener for setting '%s' changes", name))

	return function()
		listeners[callback] = nil
		Log.trace(string.format("Removed listener for setting '%s' changes", name))
	end
end

function Settings:getBinding(name)
	local cached = self._bindings[name]
	if cached then
		return cached.bind
	end

	local bind, set = Roact.createBinding(self._values[name])
	self._bindings[name] = {
		bind = bind,
		set = set,
	}

	Log.trace(string.format("Created binding for setting '%s'", name))

	return bind
end

return Settings
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e90f</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX304872adaf1c4612a5a73b76dca6624b">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Types</string>
							<string name="ScriptGuid">{9378e8cf-3430-403e-bf0e-47bfa10c7fce}</string>
							<ProtectedString name="Source"><![CDATA[local Packages = script.Parent.Parent.Packages
local t = require(Packages.t)
local Settings = require(script.Parent.Settings)
local strict = require(script.Parent.strict)

local RbxId = t.string

local ApiValue = t.keys(t.string)

local ApiInstanceMetadata = t.interface({
	ignoreUnknownInstances = t.optional(t.boolean),
})

local ApiInstance = t.interface({
	Id = RbxId,
	Parent = t.optional(RbxId),
	Name = t.string,
	ClassName = t.string,
	Properties = t.map(t.string, ApiValue),
	Metadata = t.optional(ApiInstanceMetadata),
	Children = t.array(RbxId),
})

local ApiInstanceUpdate = t.interface({
	id = RbxId,
	changedName = t.optional(t.string),
	changedClassName = t.optional(t.string),
	changedProperties = t.map(t.string, ApiValue),
	changedMetadata = t.optional(ApiInstanceMetadata),
})

local ApiSubscribeMessage = t.interface({
	removed = t.array(RbxId),
	added = t.map(RbxId, ApiInstance),
	updated = t.array(ApiInstanceUpdate),
})

local ApiInfoResponse = t.interface({
	sessionId = t.string,
	serverVersion = t.string,
	protocolVersion = t.number,
	expectedPlaceIds = t.optional(t.array(t.number)),
	rootInstanceId = RbxId,
})

local ApiReadResponse = t.interface({
	sessionId = t.string,
	messageCursor = t.number,
	instances = t.map(RbxId, ApiInstance),
})

local ApiSubscribeResponse = t.interface({
	sessionId = t.string,
	messageCursor = t.number,
	messages = t.array(ApiSubscribeMessage),
})

local ApiError = t.interface({
	kind = t.union(
		t.literal("NotFound"),
		t.literal("BadRequest"),
		t.literal("InternalError")
	),
	details = t.string,
})

local function ifEnabled(innerCheck)
	return function(...)
		if Settings:get("typecheckingEnabled") then
			return innerCheck(...)
		else
			return true
		end
	end
end

return strict("Types", {
	ifEnabled = ifEnabled,

	ApiInfoResponse = ApiInfoResponse,
	ApiReadResponse = ApiReadResponse,
	ApiSubscribeResponse = ApiSubscribeResponse,
	ApiError = ApiError,

	ApiInstance = ApiInstance,
	ApiInstanceUpdate = ApiInstanceUpdate,
	ApiInstanceMetadata = ApiInstanceMetadata,
	ApiSubscribeMessage = ApiSubscribeMessage,
	ApiValue = ApiValue,
	RbxId = RbxId,

	-- Deprecated aliases during transition
	VirtualInstance = ApiInstance,
	VirtualMetadata = ApiInstanceMetadata,
	VirtualValue = ApiValue,
})
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e910</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX307b5c2b21f04285a015a39610d0f742">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Version</string>
							<string name="ScriptGuid">{ebcf797a-a2a8-4d03-ae1a-50aa6e883da3}</string>
							<ProtectedString name="Source"><![CDATA[local function compare(a, b)
	if a > b then
		return 1
	elseif a < b then
		return -1
	end

	return 0
end

local Version = {}

--[[
	Compares two versions of the form {major, minor, revision}.

	If a is newer than b, 1.
	If a is older than b, -1.
	If a and b are the same, 0.
]]
function Version.compare(a, b)
	local major = compare(a[1], b[1])
	local minor = compare(a[2] or 0, b[2] or 0)
	local revision = compare(a[3] or 0, b[3] or 0)

	if major ~= 0 then
		return major
	end

	if minor ~= 0 then
		return minor
	end

	return revision
end

function Version.display(version)
	local output = ("%d.%d.%d"):format(version[1], version[2], version[3])

	if version[4] ~= nil then
		output = output .. version[4]
	end

	return output
end

return Version]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e911</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXc329fef0ee3641b599b2bc89a739398a">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Version.spec</string>
							<string name="ScriptGuid">{2c176b27-f332-4a5b-b715-6d99e97ca580}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local Version = require(script.Parent.Version)

	it("should compare equal versions", function()
		expect(Version.compare({1, 2, 3}, {1, 2, 3})).to.equal(0)
		expect(Version.compare({0, 4, 0}, {0, 4})).to.equal(0)
		expect(Version.compare({0, 0, 123}, {0, 0, 123})).to.equal(0)
		expect(Version.compare({26}, {26})).to.equal(0)
		expect(Version.compare({26, 42}, {26, 42})).to.equal(0)
		expect(Version.compare({1, 0, 0}, {1})).to.equal(0)
	end)

	it("should compare newer, older versions", function()
		expect(Version.compare({1}, {0})).to.equal(1)
		expect(Version.compare({1, 1}, {1, 0})).to.equal(1)
	end)

	it("should compare different major versions", function()
		expect(Version.compare({1, 3, 2}, {2, 2, 1})).to.equal(-1)
		expect(Version.compare({1, 2}, {2, 1})).to.equal(-1)
		expect(Version.compare({1}, {2})).to.equal(-1)
	end)

	it("should compare different minor versions", function()
		expect(Version.compare({1, 2, 3}, {1, 3, 2})).to.equal(-1)
		expect(Version.compare({50, 1}, {50, 2})).to.equal(-1)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e912</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX17ae11a177964549a9be1f0513494e3f">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">coco</string>
							<string name="ScriptGuid">{f6683b2b-701d-4660-89eb-f66af0e7ae87}</string>
							<ProtectedString name="Source"><![CDATA[-- from app/init.lua

local serveSession = ServeSession.new({
	apiContext = apiContext,
	openScriptsExternally = sessionOptions.openScriptsExternally,
	twoWaySync = sessionOptions.twoWaySync,
})

serveSession:onPatchApplied(function(patch, unapplied)
	local now = os.time()
	local changes = 0

	for _, set in patch do
		for _ in set do
			changes += 1
		end
	end
	for _, set in unapplied do
		for _ in set do
			changes -= 1
		end
	end

	if changes == 0 then return end

	local old = self.patchInfo:getValue()
	if now - old.timestamp < 2 then
		changes += old.changes
	end

	self.setPatchInfo({
		changes = changes,
		timestamp = now,
	})
end)

--ServeSession.lua contains most of the logic
--Unlike the Plugin, we don't care about when things update,
--rather we are alright just taking a snapshot and serializing it.

-- check ServeSession:__initialSync
-- not sure what root instance ID is, but it's ready with __apiContext:write
-- Reconciler is important, it contains diffs between what we have and what we want
-- applyPatch seems to be what does the actual patching
-- hydrate is just a tree walk over the virtual dom and the actual game, we may
-- not need that at first.

-- diff is where the big logic happens, we would call that between an empty
-- instance map and the root of the level, returns a patch

-- so, get instance ID,
-- calculate the diff between an empty instance map and the root of the level,
-- apply the patch to the empty instance map.
-- later can apply hydration in case we want to re-sync.
-- reify handles constructing a real dom from the virtual dom.

-- API context contains information about the server, such as the server's
-- rootInstanceid. We'll also want this to communicate with our server.
-- rootInstanceId comes from the Rojo server.

--api.rs contains roto_instance_id
-- from referent.rs, the root ID is a random number whic is generated by the server.

-- Plan:

-- 1. Use the reconcilier to calculate the diff between the game and empty
-- calculate a patch
-- Use the ApiContext:write type methods to serialize the diff.
-- print out the serialized diff]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e913</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX0a6d3d18ab1c44e99eeabc15fdd46e60">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">createSignal</string>
							<string name="ScriptGuid">{3f630dda-d84c-4db3-8a98-de49845b885a}</string>
							<ProtectedString name="Source"><![CDATA[--[[
	Create a new signal that can be connected to, disconnected from, and fired.

	Usage:

		local signal = createSignal()
		local disconnect = signal:connect(function(...)
			print("fired:", ...)
		end)

		signal:fire("a", "b", "c")
		disconnect()

	Avoids mutating listeners list directly to prevent iterator invalidation if
	a listener is disconnected while the signal is firing.
]]
local function createSignal()
	local listeners = {}

	local function connect(newListener)
		local nextListeners = {}
		for listener in pairs(listeners) do
			nextListeners[listener] = true
		end

		nextListeners[newListener] = true
		listeners = nextListeners

		return function()
			local nextListeners = {}
			for listener in pairs(listeners) do
				if listener ~= newListener then
					nextListeners[listener] = true
				end
			end

			listeners = nextListeners
		end
	end

	local function fire(...)
		for listener in pairs(listeners) do
			listener(...)
		end
	end

	return {
		connect = connect,
		fire = fire,
	}
end

return createSignal]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e914</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX20cef2c6ddf24ae59139ef611948fe73">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">init.spec</string>
							<string name="ScriptGuid">{ba7f92ae-c0c7-4960-991d-a838d7ee8590}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	it("should load all submodules", function()
		local function loadRecursive(container)
			if container:IsA("ModuleScript") and not container.Name:find("%.spec$") then
				local success, err = pcall(require, container)
				if not success then
					error(string.format("Failed to load '%s': %s", container.Name, err))
				end
			end

			for _, child in ipairs(container:GetChildren()) do
				loadRecursive(child)
			end
		end

		loadRecursive(script.Parent)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e915</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXaefb86b38d5d4477ad6f1293c7234b83">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">invariant</string>
							<string name="ScriptGuid">{08fdffcd-a8a5-4e12-9742-7d1f7cae6d17}</string>
							<ProtectedString name="Source"><![CDATA[
local Packages = script.Parent.Parent.Packages
local Fmt = require(Packages.Fmt)

local Config = require(script.Parent.Config)

local invariant

if Config.isDevBuild then
	function invariant(message, ...)
		message = Fmt.fmt(message, ...)

		error("Invariant violation: " .. message, 2)
	end
else
	function invariant(message, ...)
		message = Fmt.fmt(message, ...)

		local fullMessage = string.format(
			"Rojo detected an invariant violation within itself:\n" ..
			"%s\n\n" ..
			"This is a bug in Rojo. Please file an issue:\n" ..
			"https://github.com/rojo-rbx/rojo/issues",
			message
		)

		error(fullMessage, 2)
	end
end

return invariant
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e916</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX78be372f797842b7a333783af969eb65">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">preloadAssets</string>
							<string name="ScriptGuid">{253bca0c-4062-4637-aa83-333d1c15e994}</string>
							<ProtectedString name="Source"><![CDATA[local ContentProvider = game:GetService("ContentProvider")

local Packages = script.Parent.Parent.Packages
local Log = require(Packages.Log)

local Assets = require(script.Parent.Assets)

local gatherAssetUrlsRecursive
function gatherAssetUrlsRecursive(currentTable, currentUrls)
	currentUrls = currentUrls or {}

	for _, value in pairs(currentTable) do
		if typeof(value) == "string" then
			table.insert(currentUrls, value)
		elseif typeof(value) == "table" then
			gatherAssetUrlsRecursive(value)
		end
	end

	return currentUrls
end

local function preloadAssets()
	local contentUrls = gatherAssetUrlsRecursive(Assets)

	Log.trace("Preloading assets: {:?}", contentUrls)

	coroutine.wrap(function()
		ContentProvider:PreloadAsync(contentUrls)
	end)()
end

return preloadAssets
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e917</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX1b2eeb0f099c40c786f4a564a691dfe1">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">runTests</string>
							<string name="ScriptGuid">{f729bafa-23f9-41a4-aad9-11ced28255b7}</string>
							<ProtectedString name="Source"><![CDATA[return function(TestEZ)
	local Rojo = script.Parent.Parent
	local Packages = Rojo.Packages

	TestEZ.TestBootstrap:run({ Rojo.Plugin, Packages.Http, Packages.Log, Packages.RbxDom })
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e918</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX83401acab2a540cd937a4e05d511c4b9">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">soundPlayer</string>
							<string name="ScriptGuid">{9fee023b-20ac-49b9-88b1-0140603567ad}</string>
							<ProtectedString name="Source"><![CDATA[-- Sounds only play in Edit mode when parented to a plugin widget, for some reason
local plugin = plugin or script:FindFirstAncestorWhichIsA("Plugin")
local widget = nil
if plugin then
	widget = plugin:CreateDockWidgetPluginGui("Rojo_soundPlayer", DockWidgetPluginGuiInfo.new(
		Enum.InitialDockState.Float,
		false, true,
		10, 10,
		10, 10
	))
	widget.Name = "Rojo_soundPlayer"
	widget.Title = "Rojo Sound Player"
end

local SoundPlayer = {}
SoundPlayer.__index = SoundPlayer

function SoundPlayer.new(settings)
	return setmetatable({
		settings = settings,
	}, SoundPlayer)
end

function SoundPlayer:play(soundId)
	if self.settings and self.settings:get("playSounds") == false then return end

	local sound = Instance.new("Sound")
	sound.SoundId = soundId
	sound.Parent = widget

	sound.Ended:Connect(function()
		sound:Destroy()
	end)

	sound:Play()
end

return SoundPlayer
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e919</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX1a6d209172e641bfa691cb7e7c25b0bd">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Reconciler</string>
							<string name="ScriptGuid">{d23a5d1d-6237-4424-836b-3bda9085d3ba}</string>
							<ProtectedString name="Source"><![CDATA[--[[
	This module defines the meat of the Rojo plugin and how it manages tracking
	and mutating the Roblox DOM.
]]

local applyPatch = require(script.applyPatch)
local hydrate = require(script.hydrate)
local diff = require(script.diff)

local Reconciler = {}
Reconciler.__index = Reconciler

function Reconciler.new(instanceMap)
	local self = {
		-- Tracks all of the instances known by the reconciler by ID.
		__instanceMap = instanceMap,
	}

	return setmetatable(self, Reconciler)
end

function Reconciler:applyPatch(patch)
	return applyPatch(self.__instanceMap, patch)
end

function Reconciler:hydrate(virtualInstances, rootId, rootInstance)
	return hydrate(self.__instanceMap, virtualInstances, rootId, rootInstance)
end

function Reconciler:diff(virtualInstances, rootId)
	return diff(self.__instanceMap, virtualInstances, rootId)
end

return Reconciler]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e901</UniqueId>
						</Properties>
						<Item class="ModuleScript" referent="RBX8bfa6b8e05e14bbd928e07d89e3a6619">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Error</string>
								<string name="ScriptGuid">{bddc91c3-5512-4d91-9e95-3d1da5cc499c}</string>
								<ProtectedString name="Source"><![CDATA[--[[
	Defines the errors that can be returned by the reconciler.
]]

local Packages = script.Parent.Parent.Parent.Packages
local Fmt = require(Packages.Fmt)

local Error = {}

local function makeVariant(name)
	Error[name] = setmetatable({}, {
		__tostring = function()
			return "Error." .. name
		end,
	})
end

makeVariant("CannotCreateInstance")
makeVariant("CannotDecodeValue")
makeVariant("LackingPropertyPermissions")
makeVariant("OtherPropertyError")
makeVariant("RefDidNotExist")
makeVariant("UnknownProperty")
makeVariant("UnreadableProperty")
makeVariant("UnwritableProperty")

function Error.new(kind, details)
	return setmetatable({
		kind = kind,
		details = details,
	}, Error)
end

function Error:__tostring()
	return Fmt.fmt("Error({}): {:#?}", self.kind, self.details)
end

return Error
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e902</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX64ebe3a9beb14e04b2f74cbe09a075e1">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">applyPatch</string>
								<string name="ScriptGuid">{871c636d-abaa-4f80-a4a4-661acf9b519a}</string>
								<ProtectedString name="Source"><![CDATA[--[[
	Apply a patch to the DOM. Returns any portions of the patch that weren't
	possible to apply.

	Patches can come from the server or be generated by the client.
]]

local Packages = script.Parent.Parent.Parent.Packages
local Log = require(Packages.Log)

local PatchSet = require(script.Parent.Parent.PatchSet)
local Types = require(script.Parent.Parent.Types)
local invariant = require(script.Parent.Parent.invariant)

local decodeValue = require(script.Parent.decodeValue)
local reify = require(script.Parent.reify)
local setProperty = require(script.Parent.setProperty)

local function applyPatch(instanceMap, patch)
	-- Tracks any portions of the patch that could not be applied to the DOM.
	local unappliedPatch = PatchSet.newEmpty()

	for _, removedIdOrInstance in ipairs(patch.removed) do
		if Types.RbxId(removedIdOrInstance) then
			instanceMap:destroyId(removedIdOrInstance)
		else
			instanceMap:destroyInstance(removedIdOrInstance)
		end
	end

	for id, virtualInstance in pairs(patch.added) do
		if instanceMap.fromIds[id] ~= nil then
			-- This instance already exists. We might've already added it in a
			-- previous iteration of this loop, or maybe this patch was not
			-- supposed to list this instance.
			--
			-- It's probably fine, right?
			continue
		end

		-- Find the first ancestor of this instance that is marked for an
		-- addition.
		--
		-- This helps us make sure we only reify each instance once, and we
		-- start from the top.
		while patch.added[virtualInstance.Parent] ~= nil do
			id = virtualInstance.Parent
			virtualInstance = patch.added[id]
		end

		local parentInstance = instanceMap.fromIds[virtualInstance.Parent]

		if parentInstance == nil then
			-- This would be peculiar. If you create an instance with no
			-- parent, were you supposed to create it at all?
			invariant(
				"Cannot add an instance from a patch that has no parent.\nInstance {} with parent {}.\nState: {:#?}",
				id,
				virtualInstance.Parent,
				instanceMap
			)
		end

		local failedToReify = reify(instanceMap, patch.added, id, parentInstance)

		if not PatchSet.isEmpty(failedToReify) then
			Log.debug("Failed to reify as part of applying a patch: {:#?}", failedToReify)
			PatchSet.assign(unappliedPatch, failedToReify)
		end
	end

	for _, update in ipairs(patch.updated) do
		local instance = instanceMap.fromIds[update.id]

		if instance == nil then
			-- We can't update an instance that doesn't exist.
			table.insert(unappliedPatch.updated, update)
			continue
		end

		-- Pause updates on this instance to avoid picking up our changes when
		-- two-way sync is enabled.
		instanceMap:pauseInstance(instance)

		-- Track any part of this update that could not be applied.
		local unappliedUpdate = {
			id = update.id,
			changedProperties = {},
		}
		local partiallyApplied = false

		-- If the instance's className changed, we have a bumpy ride ahead while
		-- we recreate this instance and move all of its children into the new
		-- version atomically...ish.
		if update.changedClassName ~= nil then
			-- If the instance's name also changed, we'll do it here, since this
			-- branch will skip the rest of the loop iteration.
			local newName = update.changedName or instance.Name

			-- TODO: When changing between instances that have similar sets of
			-- properties, like between an ImageLabel and an ImageButton, we
			-- should preserve all of the properties that are shared between the
			-- two classes unless they're changed as part of this patch. This is
			-- similar to how "class changer" Studio plugins work.
			--
			-- For now, we'll only apply properties that are mentioned in this
			-- update. Patches with changedClassName set only occur in specific
			-- circumstances, usually between Folder and ModuleScript instances.
			-- While this may result in some issues, like not preserving the
			-- "Archived" property, a robust solution is sufficiently
			-- complicated that we're pushing it off for now.
			local newProperties = update.changedProperties

			-- If the instance's ClassName changed, we'll kick into reify to
			-- create this instance. We'll handle moving all of children between
			-- the instances after the new one is created.
			local mockVirtualInstance = {
				Id = update.id,
				Name = newName,
				ClassName = update.changedClassName,
				Properties = newProperties,
				Children = {},
			}

			local mockAdded = {
				[update.id] = mockVirtualInstance,
			}

			local failedToReify = reify(instanceMap, mockAdded, update.id, instance.Parent)

			local newInstance = instanceMap.fromIds[update.id]

			-- Some parts of reify may have failed, but this is not necessarily
			-- critical. If the instance wasn't recreated or has the wrong Name,
			-- we'll consider our attempt a failure.
			if instance == newInstance or newInstance.Name ~= newName then
				table.insert(unappliedPatch.updated, update)
				continue
			end

			-- Here are the non-critical failures. We know that the instance
			-- succeeded in creating and that assigning Name did not fail, but
			-- other property assignments might've failed.
			if not PatchSet.isEmpty(failedToReify) then
				PatchSet.assign(unappliedPatch, failedToReify)
			end

			-- Watch out, this is the scary part! Move all of the children of
			-- instance into newInstance.
			--
			-- TODO: If this fails part way through, should we move everything
			-- back? For now, we assume that moving things will not fail.
			for _, child in ipairs(instance:GetChildren()) do
				child.Parent = newInstance
			end

			-- See you later, original instance.
			--
			-- TODO: Can this fail? Some kinds of instance may not appreciate
			-- being destroyed, like services.
			instance:Destroy()

			-- This completes your rebuilding a plane mid-flight safety
			-- instruction. Please sit back, relax, and enjoy your flight.
			continue
		end

		if update.changedName ~= nil then
			instance.Name = update.changedName
		end

		if update.changedMetadata ~= nil then
			-- TODO: Support changing metadata. This will become necessary when
			-- Rojo persistently tracks metadata for each instance in order to
			-- remove extra instances.
			unappliedUpdate.changedMetadata = update.changedMetadata
			partiallyApplied = true
		end

		if update.changedProperties ~= nil then
			for propertyName, propertyValue in pairs(update.changedProperties) do
				local ok, decodedValue = decodeValue(propertyValue, instanceMap)
				if not ok then
					unappliedUpdate.changedProperties[propertyName] = propertyValue
					partiallyApplied = true
					continue
				end

				local ok = setProperty(instance, propertyName, decodedValue)
				if not ok then
					unappliedUpdate.changedProperties[propertyName] = propertyValue
					partiallyApplied = true
				end
			end
		end

		if partiallyApplied then
			table.insert(unappliedPatch.updated, unappliedUpdate)
		end
	end

	return unappliedPatch
end

return applyPatch
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e903</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXb54c1d504ebb4ab887c09dc694a934a0">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">applyPatch.spec</string>
								<string name="ScriptGuid">{3a443298-6365-4b09-a566-521c8ecf4542}</string>
								<ProtectedString name="Source"><![CDATA[return function()
	local applyPatch = require(script.Parent.applyPatch)

	local InstanceMap = require(script.Parent.Parent.InstanceMap)
	local PatchSet = require(script.Parent.Parent.PatchSet)

	local dummy = Instance.new("Folder")
	local function wasDestroyed(instance)
		-- If an instance was destroyed, its parent property is locked.
		local ok = pcall(function()
			local oldParent = instance.Parent
			instance.Parent = dummy
			instance.Parent = oldParent
		end)

		return not ok
	end

	it("should return an empty patch if given an empty patch", function()
		local patch = applyPatch(InstanceMap.new(), PatchSet.newEmpty())
		assert(PatchSet.isEmpty(patch), "expected remaining patch to be empty")
	end)

	it("should destroy instances listed for remove", function()
		local root = Instance.new("Folder")

		local child = Instance.new("Folder")
		child.Name = "Child"
		child.Parent = root

		local instanceMap = InstanceMap.new()
		instanceMap:insert("ROOT", root)
		instanceMap:insert("CHILD", child)

		local patch = PatchSet.newEmpty()
		table.insert(patch.removed, child)

		local unapplied = applyPatch(instanceMap, patch)
		assert(PatchSet.isEmpty(unapplied), "expected remaining patch to be empty")

		assert(not wasDestroyed(root), "expected root to be left alone")
		assert(wasDestroyed(child), "expected child to be destroyed")

		instanceMap:stop()
	end)

	it("should destroy IDs listed for remove", function()
		local root = Instance.new("Folder")

		local child = Instance.new("Folder")
		child.Name = "Child"
		child.Parent = root

		local instanceMap = InstanceMap.new()
		instanceMap:insert("ROOT", root)
		instanceMap:insert("CHILD", child)

		local patch = PatchSet.newEmpty()
		table.insert(patch.removed, "CHILD")

		local unapplied = applyPatch(instanceMap, patch)
		assert(PatchSet.isEmpty(unapplied), "expected remaining patch to be empty")
		expect(instanceMap:size()).to.equal(1)

		assert(not wasDestroyed(root), "expected root to be left alone")
		assert(wasDestroyed(child), "expected child to be destroyed")

		instanceMap:stop()
	end)

	it("should add instances to the DOM", function()
		-- Many of the details of this functionality are instead covered by
		-- tests on reify, not here.

		local root = Instance.new("Folder")

		local instanceMap = InstanceMap.new()
		instanceMap:insert("ROOT", root)

		local patch = PatchSet.newEmpty()
		patch.added["CHILD"] = {
			Id = "CHILD",
			ClassName = "Model",
			Name = "Child",
			Parent = "ROOT",
			Children = {"GRANDCHILD"},
			Properties = {},
		}

		patch.added["GRANDCHILD"]  = {
			Id = "GRANDCHILD",
			ClassName = "Part",
			Name = "Grandchild",
			Parent = "CHILD",
			Children = {},
			Properties = {},
		}

		local unapplied = applyPatch(instanceMap, patch)
		assert(PatchSet.isEmpty(unapplied), "expected remaining patch to be empty")
		expect(instanceMap:size()).to.equal(3)

		local child = root:FindFirstChild("Child")
		expect(child).to.be.ok()
		expect(child.ClassName).to.equal("Model")
		expect(child).to.equal(instanceMap.fromIds["CHILD"])

		local grandchild = child:FindFirstChild("Grandchild")
		expect(grandchild).to.be.ok()
		expect(grandchild.ClassName).to.equal("Part")
		expect(grandchild).to.equal(instanceMap.fromIds["GRANDCHILD"])
	end)

	it("should return unapplied additions when instances cannot be created", function()
		local root = Instance.new("Folder")

		local instanceMap = InstanceMap.new()
		instanceMap:insert("ROOT", root)

		local patch = PatchSet.newEmpty()
		patch.added["OOPSIE"] = {
			Id = "OOPSIE",
			-- Hopefully Roblox never makes an instance with this ClassName.
			ClassName = "UH OH",
			Name = "FUBAR",
			Parent = "ROOT",
			Children = {},
			Properties = {},
		}

		local unapplied = applyPatch(instanceMap, patch)
		expect(unapplied.added["OOPSIE"]).to.equal(patch.added["OOPSIE"])
		expect(instanceMap:size()).to.equal(1)
		expect(#root:GetChildren()).to.equal(0)
	end)

	it("should apply property changes to instances", function()
		local value = Instance.new("StringValue")
		value.Value = "HELLO"

		local instanceMap = InstanceMap.new()
		instanceMap:insert("VALUE", value)

		local patch = PatchSet.newEmpty()
		table.insert(patch.updated, {
			id = "VALUE",
			changedProperties = {
				Value = {
					String = "WORLD",
				},
			},
		})

		local unapplied = applyPatch(instanceMap, patch)
		assert(PatchSet.isEmpty(unapplied), "expected remaining patch to be empty")
		expect(value.Value).to.equal("WORLD")
	end)

	it("should recreate instances when changedClassName is set, preserving children", function()
		local root = Instance.new("Folder")
		root.Name = "Initial Root Name"

		local child = Instance.new("Folder")
		child.Name = "Child"
		child.Parent = root

		local instanceMap = InstanceMap.new()
		instanceMap:insert("ROOT", root)
		instanceMap:insert("CHILD", child)

		local patch = PatchSet.newEmpty()
		table.insert(patch.updated, {
			id = "ROOT",
			changedName = "Updated Root Name",
			changedClassName = "StringValue",
			changedProperties = {
				Value = {
					String = "I am Root",
				},
			},
		})

		local unapplied = applyPatch(instanceMap, patch)
		assert(PatchSet.isEmpty(unapplied), "expected remaining patch to be empty")

		local newRoot = instanceMap.fromIds["ROOT"]
		assert(newRoot ~= root, "expected instance to be recreated")
		expect(newRoot.ClassName).to.equal("StringValue")
		expect(newRoot.Name).to.equal("Updated Root Name")
		expect(newRoot.Value).to.equal("I am Root")

		local newChild = newRoot:FindFirstChild("Child")
		assert(newChild ~= nil, "expected child to be present")
		assert(newChild == child, "expected child to be preserved")
	end)
end]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e904</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX5c274fe63cad46ddb3d473d11ff2d5b2">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">decodeValue</string>
								<string name="ScriptGuid">{80236a01-bfbf-43c0-bc4d-3c5df3a3ae3c}</string>
								<ProtectedString name="Source"><![CDATA[--[[
	Transforms a value encoded by rbx_dom_weak on the server side into a value
	usable by Rojo's reconciler, potentially using RbxDom.
]]

local Packages = script.Parent.Parent.Parent.Packages
local RbxDom = require(Packages.RbxDom)
local Error = require(script.Parent.Error)

local function decodeValue(encodedValue, instanceMap)
	local ty, value = next(encodedValue)

	-- Refs are represented as IDs in the same space that Rojo's protocol uses.
	if ty == "Ref" then
		if value == "00000000000000000000000000000000" then
			return true, nil
		end

		local instance = instanceMap.fromIds[value]

		if instance ~= nil then
			return true, instance
		else
			return false, Error.new(Error.RefDidNotExist, {
				encodedValue = encodedValue,
			})
		end
	end

	local ok, decodedValue = RbxDom.EncodedValue.decode(encodedValue)

	if not ok then
		return false, Error.new(Error.CannotDecodeValue, {
			encodedValue = encodedValue,
			innerError = decodedValue,
		})
	end

	return true, decodedValue
end

return decodeValue
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e905</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXfb36198ea3544044ade21938a4e7d422">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">diff</string>
								<string name="ScriptGuid">{31a3f6b4-6479-4e03-90c1-f86d76f50e07}</string>
								<ProtectedString name="Source"><![CDATA[--[[
	Defines the process for diffing a virtual DOM and the real DOM to compute a
	patch that can be later applied.
]]

local Packages = script.Parent.Parent.Parent.Packages
local Log = require(Packages.Log)

local invariant = require(script.Parent.Parent.invariant)
local getProperty = require(script.Parent.getProperty)
local Error = require(script.Parent.Error)
local decodeValue = require(script.Parent.decodeValue)

local function isEmpty(table)
	return next(table) == nil
end

local function shouldDeleteUnknownInstances(virtualInstance)
	if virtualInstance.Metadata ~= nil then
		return not virtualInstance.Metadata.ignoreUnknownInstances
	else
		return true
	end
end

local function diff(instanceMap, virtualInstances, rootId)
	local patch = {
		removed = {},
		added = {},
		updated = {},
	}

	-- Add a virtual instance and all of its descendants to the patch, marked as
	-- being added.
	local function markIdAdded(id)
		local virtualInstance = virtualInstances[id]
		patch.added[id] = virtualInstance

		for _, childId in ipairs(virtualInstance.Children) do
			markIdAdded(childId)
		end
	end

	-- Internal recursive kernel for diffing an instance with the given ID.
	local function diffInternal(id)
		local virtualInstance = virtualInstances[id]
		local instance = instanceMap.fromIds[id]

		if virtualInstance == nil then
			invariant("Cannot diff an instance not present in virtualInstances\nID: {}", id)
		end

		if instance == nil then
			invariant("Cannot diff an instance not present in InstanceMap\nID: {}", id)
		end

		local changedClassName = nil
		if virtualInstance.ClassName ~= instance.ClassName then
			changedClassName = virtualInstance.ClassName
		end

		local changedName = nil
		if virtualInstance.Name ~= instance.Name then
			changedName = virtualInstance.Name
		end

		local changedProperties = {}
		for propertyName, virtualValue in pairs(virtualInstance.Properties) do
			local ok, existingValueOrErr = getProperty(instance, propertyName)

			if ok then
				local existingValue = existingValueOrErr
				local ok, decodedValue = decodeValue(virtualValue, instanceMap)

				if ok then
					if existingValue ~= decodedValue then
						changedProperties[propertyName] = virtualValue
					end
				else
					local propertyType = next(virtualValue)
					Log.warn(
						"Failed to decode property {}.{}. Encoded property was: {:#?}",
						virtualInstance.ClassName,
						propertyName,
						virtualValue
					)
				end
			else
				local err = existingValueOrErr

				if err.kind == Error.UnknownProperty then
					Log.trace("Skipping unknown property {}.{}", err.details.className, err.details.propertyName)
				elseif err.kind == Error.UnreadableProperty then
					Log.trace("Skipping unreadable property {}.{}", err.details.className, err.details.propertyName)
				else
					return false, err
				end
			end
		end

		if changedName ~= nil or changedClassName ~= nil or not isEmpty(changedProperties) then
			table.insert(patch.updated, {
				id = id,
				changedName = changedName,
				changedClassName = changedClassName,
				changedProperties = changedProperties,
				changedMetadata = nil,
			})
		end

		-- Traverse the list of children in the DOM. Any instance that has no
		-- corresponding virtual instance should be removed. Any instance that
		-- does have a corresponding virtual instance is recursively diffed.
		for _, childInstance in ipairs(instance:GetChildren()) do
			local childId = instanceMap.fromInstances[childInstance]

			if childId == nil then
				-- pcall to avoid security permission errors
				local success, skip = pcall(function()
					-- We don't remove instances that aren't going to be saved anyway,
					-- such as the Rojo session lock value.
					return childInstance.Archivable == false
				end)
				if success and skip then
					continue
				end

				-- This is an existing instance not present in the virtual DOM.
				-- We can mark it for deletion unless the user has asked us not
				-- to delete unknown stuff.
				if shouldDeleteUnknownInstances(virtualInstance) then
					table.insert(patch.removed, childInstance)
				end
			else
				local ok, err = diffInternal(childId)

				if not ok then
					return false, err
				end
			end
		end

		-- Traverse the list of children in the virtual DOM. Any virtual
		-- instance that has no corresponding real instance should be created.
		for _, childId in ipairs(virtualInstance.Children) do
			local childInstance = instanceMap.fromIds[childId]

			if childInstance == nil then
				-- This instance is present in the virtual DOM, but doesn't
				-- exist in the real DOM.
				markIdAdded(childId)
			end
		end

		return true
	end

	local ok, err = diffInternal(rootId)

	if not ok then
		return false, err
	end

	return true, patch
end

return diff
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e906</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX60d0aee3654747c29aad952c8f491308">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">diff.spec</string>
								<string name="ScriptGuid">{58d0316d-e171-4229-902d-1c8836b35cbd}</string>
								<ProtectedString name="Source"><![CDATA[return function()
	local Packages = script.Parent.Parent.Parent.Packages
	local Log = require(Packages.Log)

	local InstanceMap = require(script.Parent.Parent.InstanceMap)
	local PatchSet = require(script.Parent.Parent.PatchSet)

	local diff = require(script.Parent.diff)

	local function isEmpty(table)
		return next(table) == nil, "Table was not empty"
	end

	local function size(dict)
		local len = 0

		for _ in pairs(dict) do
			len = len + 1
		end

		return len
	end

	it("should generate an empty patch for empty instances", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Some Name",
				Properties = {},
				Children = {},
			},
		}

		local rootInstance = Instance.new("Folder")
		rootInstance.Name = "Some Name"
		knownInstances:insert("ROOT", rootInstance)

		local ok, patch = diff(knownInstances, virtualInstances, "ROOT")

		assert(ok, tostring(patch))

		assert(isEmpty(patch.removed))
		assert(isEmpty(patch.added))
		assert(isEmpty(patch.updated))
	end)

	it("should generate a patch with a changed name", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Some Name",
				Properties = {},
				Children = {},
			},
		}

		local rootInstance = Instance.new("Folder")
		knownInstances:insert("ROOT", rootInstance)

		local ok, patch = diff(knownInstances, virtualInstances, "ROOT")

		assert(ok, tostring(patch))

		assert(isEmpty(patch.removed))
		assert(isEmpty(patch.added))
		expect(#patch.updated).to.equal(1)

		local update = patch.updated[1]
		expect(update.id).to.equal("ROOT")
		expect(update.changedName).to.equal("Some Name")
		assert(isEmpty(update.changedProperties))
	end)

	it("should generate a patch with a changed property", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "StringValue",
				Name = "Value",
				Properties = {
					Value = {
						String = "Hello, world!",
					},
				},
				Children = {},
			},
		}

		local rootInstance = Instance.new("StringValue")
		rootInstance.Value = "Initial Value"
		knownInstances:insert("ROOT", rootInstance)

		local ok, patch = diff(knownInstances, virtualInstances, "ROOT")

		assert(ok, tostring(patch))

		assert(isEmpty(patch.removed))
		assert(isEmpty(patch.added))
		expect(#patch.updated).to.equal(1)

		local update = patch.updated[1]
		expect(update.id).to.equal("ROOT")
		expect(update.changedName).to.equal(nil)
		expect(size(update.changedProperties)).to.equal(1)

		local patchProperty = update.changedProperties["Value"]
		expect(patchProperty).to.be.a("table")
		local ty, value = next(patchProperty)
		expect(ty).to.equal("String")
		expect(value).to.equal("Hello, world!")
	end)

	it("should generate an empty patch if no properties changed", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "StringValue",
				Name = "Value",
				Properties = {
					Value = {
						String = "Hello, world!",
					},
				},
				Children = {},
			},
		}

		local rootInstance = Instance.new("StringValue")
		rootInstance.Value = "Hello, world!"
		knownInstances:insert("ROOT", rootInstance)

		local ok, patch = diff(knownInstances, virtualInstances, "ROOT")

		assert(ok, tostring(patch))
		assert(PatchSet.isEmpty(patch), "expected empty patch")
	end)

	it("should ignore unknown properties", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Folder",
				Properties = {
					FAKE_PROPERTY = {
						String = "Hello, world!",
					},
				},
				Children = {},
			},
		}

		local rootInstance = Instance.new("Folder")
		knownInstances:insert("ROOT", rootInstance)

		local ok, patch = diff(knownInstances, virtualInstances, "ROOT")

		assert(ok, tostring(patch))

		assert(isEmpty(patch.removed))
		assert(isEmpty(patch.added))
		assert(isEmpty(patch.updated))
	end)

	--[[
		Because rbx_dom_lua resolves non-canonical properties to their canonical
		variants, this test does not work as intended.

		Instead, heat_xml is diffed with Heat, the canonical property variant,
		and a patch trying to assign to heat_xml is generated. This is
		incorrect, but will require more invasive changes to fix later.
	]]
	itFIXME("should ignore unreadable properties", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "Fire",
				Name = "Fire",
				Properties = {
					-- heat_xml is a serialization-only property that is not
					-- exposed to Lua.
					heat_xml = {
						Float32 = 5,
					},
				},
				Children = {},
			},
		}

		local rootInstance = Instance.new("Fire")
		knownInstances:insert("ROOT", rootInstance)

		local ok, patch = diff(knownInstances, virtualInstances, "ROOT")

		Log.warn("{:#?}", patch)

		assert(ok, tostring(patch))

		assert(isEmpty(patch.removed))
		assert(isEmpty(patch.added))
		assert(isEmpty(patch.updated))
	end)

	it("should generate a patch removing unknown children by default", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Folder",
				Properties = {},
				Children = {},
			},
		}

		local rootInstance = Instance.new("Folder")
		local unknownChild = Instance.new("Folder")
		unknownChild.Parent = rootInstance
		knownInstances:insert("ROOT", rootInstance)

		local ok, patch = diff(knownInstances, virtualInstances, "ROOT")

		assert(ok, tostring(patch))

		assert(isEmpty(patch.added))
		assert(isEmpty(patch.updated))
		expect(#patch.removed).to.equal(1)
		expect(patch.removed[1]).to.equal(unknownChild)
	end)

	it("should generate an empty patch if unknown children should be ignored", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Folder",
				Properties = {},
				Children = {},
				Metadata = {
					ignoreUnknownInstances = true,
				},
			},
		}

		local rootInstance = Instance.new("Folder")
		local unknownChild = Instance.new("Folder")
		unknownChild.Parent = rootInstance
		knownInstances:insert("ROOT", rootInstance)

		local ok, patch = diff(knownInstances, virtualInstances, "ROOT")

		assert(ok, tostring(patch))

		assert(isEmpty(patch.added))
		assert(isEmpty(patch.updated))
		assert(isEmpty(patch.removed))
	end)

	it("should generate a patch with an added child", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Folder",
				Properties = {},
				Children = {"CHILD"},
			},

			CHILD = {
				ClassName = "Folder",
				Name = "Child",
				Properties = {},
				Children = {},
			},
		}

		local rootInstance = Instance.new("Folder")
		knownInstances:insert("ROOT", rootInstance)

		local ok, patch = diff(knownInstances, virtualInstances, "ROOT")

		assert(ok, tostring(patch))

		assert(isEmpty(patch.updated))
		assert(isEmpty(patch.removed))
		expect(size(patch.added)).to.equal(1)
		expect(patch.added["CHILD"]).to.equal(virtualInstances["CHILD"])
	end)
end
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e907</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX917e34b94717404995fc20b23fd770e7">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">getProperty</string>
								<string name="ScriptGuid">{b056a1e8-51f6-4c5c-a4e7-13c17de86d3b}</string>
								<ProtectedString name="Source"><![CDATA[--[[
	Attempts to read a property from the given instance.
]]

local Packages = script.Parent.Parent.Parent.Packages
local RbxDom = require(Packages.RbxDom)
local Error = require(script.Parent.Error)

local function getProperty(instance, propertyName)
	local descriptor = RbxDom.findCanonicalPropertyDescriptor(instance.ClassName, propertyName)

	-- We can skip unknown properties; they're not likely reflected to Lua.
	--
	-- A good example of a property like this is `Model.ModelInPrimary`, which
	-- is serialized but not reflected to Lua.
	if descriptor == nil then
		return false, Error.new(Error.UnknownProperty, {
			className = instance.ClassName,
			propertyName = propertyName,
		})
	end

	if descriptor.scriptability == "None" or descriptor.scriptability == "Write" then
		return false, Error.new(Error.UnreadableProperty, {
			className = instance.ClassName,
			propertyName = propertyName,
		})
	end

	local success, valueOrErr = descriptor:read(instance)

	if not success then
		local err = valueOrErr

		-- If we don't have permission to read a property, we can chalk that up
		-- to our database being out of date and the engine being right.
		if err.kind == RbxDom.Error.Kind.Roblox and err.extra:find("lacking permission") then
			return false, Error.new(Error.LackingPropertyPermissions, {
				className = instance.ClassName,
				propertyName = propertyName,
			})
		end

		if err.kind == RbxDom.Error.Kind.Roblox and err.extra:find("is not a valid member of") then
			return false, Error.new(Error.UnknownProperty, {
				className = instance.ClassName,
				propertyName = propertyName,
			})
		end

		return false, Error.new(Error.OtherPropertyError, {
			className = instance.ClassName,
			propertyName = propertyName,
		})
	end

	return true, valueOrErr
end

return getProperty
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e908</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX84e64191df4c417e908429aa17270950">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">hydrate</string>
								<string name="ScriptGuid">{42dfd1a0-909d-44e3-9cb7-06b176cbe1b9}</string>
								<ProtectedString name="Source"><![CDATA[--[[
	Defines the process of "hydration" -- matching up a virtual DOM with
	concrete instances and assigning them IDs.
]]

local invariant = require(script.Parent.Parent.invariant)

local function hydrate(instanceMap, virtualInstances, rootId, rootInstance)
	local virtualInstance = virtualInstances[rootId]

	if virtualInstance == nil then
		invariant("Cannot hydrate an instance not present in virtualInstances\nID: {}", rootId)
	end

	instanceMap:insert(rootId, rootInstance)

	local existingChildren = rootInstance:GetChildren()

	-- For each existing child, we'll track whether it's been paired with an
	-- instance that the Rojo server knows about.
	local isExistingChildVisited = {}
	for i = 1, #existingChildren do
		isExistingChildVisited[i] = false
	end

	for _, childId in ipairs(virtualInstance.Children) do
		local virtualChild = virtualInstances[childId]

		for childIndex, childInstance in ipairs(existingChildren) do
			if not isExistingChildVisited[childIndex] then
				-- We guard accessing Name and ClassName in order to avoid
				-- tripping over children of DataModel that Rojo won't have
				-- permissions to access at all.
				local ok, name, className = pcall(function()
					return childInstance.Name, childInstance.ClassName
				end)

				-- This rule is very conservative and could be loosened in the
				-- future, or more heuristics could be introduced.
				if ok and name == virtualChild.Name and className == virtualChild.ClassName then
					isExistingChildVisited[childIndex] = true
					hydrate(instanceMap, virtualInstances, childId, childInstance)
					break
				end
			end
		end
	end
end

return hydrate]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e909</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX6c07c9422f5246688b15311162495566">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">hydrate.spec</string>
								<string name="ScriptGuid">{3dcfb68e-2dfd-449b-9459-c81f62ba9850}</string>
								<ProtectedString name="Source"><![CDATA[return function()
	local hydrate = require(script.Parent.hydrate)

	local InstanceMap = require(script.Parent.Parent.InstanceMap)

	it("should match the root instance no matter what", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "Model",
				Name = "Foo",
				Properties = {},
				Children = {},
			},
		}

		local rootInstance = Instance.new("Folder")

		hydrate(knownInstances, virtualInstances, "ROOT", rootInstance)

		expect(knownInstances:size()).to.equal(1)
		expect(knownInstances.fromIds["ROOT"]).to.equal(rootInstance)
	end)

	it("should not match children with mismatched ClassName", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Root",
				Properties = {},
				Children = {},
			},

			CHILD = {
				ClassName = "Folder",
				Name = "Child",
				Properties = {},
				Children = {},
			},
		}

		local rootInstance = Instance.new("Folder")

		-- ClassName of this instance is intentionally different
		local child = Instance.new("Model")
		child.Name = "Child"
		child.Parent = rootInstance

		hydrate(knownInstances, virtualInstances, "ROOT", rootInstance)

		expect(knownInstances:size()).to.equal(1)
		expect(knownInstances.fromIds["ROOT"]).to.equal(rootInstance)
	end)

	it("should not match children with mismatched Name", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Root",
				Properties = {},
				Children = {},
			},

			CHILD = {
				ClassName = "Folder",
				Name = "Child",
				Properties = {},
				Children = {},
			},
		}

		local rootInstance = Instance.new("Folder")

		-- Name of this instance is intentionally different
		local child = Instance.new("Folder")
		child.Name = "Not Child"
		child.Parent = rootInstance

		hydrate(knownInstances, virtualInstances, "ROOT", rootInstance)

		expect(knownInstances:size()).to.equal(1)
		expect(knownInstances.fromIds["ROOT"]).to.equal(rootInstance)
	end)

	it("should pair instances with matching Name and ClassName", function()
		local knownInstances = InstanceMap.new()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Root",
				Properties = {},
				Children = {"CHILD1", "CHILD2"},
			},

			CHILD1 = {
				ClassName = "Folder",
				Name = "Child 1",
				Properties = {},
				Children = {},
			},

			CHILD2 = {
				ClassName = "Model",
				Name = "Child 2",
				Properties = {},
				Children = {},
			},
		}

		local rootInstance = Instance.new("Folder")

		local child1 = Instance.new("Folder")
		child1.Name = "Child 1"
		child1.Parent = rootInstance

		local child2 = Instance.new("Model")
		child2.Name = "Child 2"
		child2.Parent = rootInstance

		hydrate(knownInstances, virtualInstances, "ROOT", rootInstance)

		expect(knownInstances:size()).to.equal(3)
		expect(knownInstances.fromIds["ROOT"]).to.equal(rootInstance)
		expect(knownInstances.fromIds["CHILD1"]).to.equal(child1)
		expect(knownInstances.fromIds["CHILD2"]).to.equal(child2)
	end)
end]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e90a</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX8124d99f94454522b0926df5d2c2a35e">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">reify</string>
								<string name="ScriptGuid">{9a3d79c6-977b-4d8f-b655-1a2e066d931a}</string>
								<ProtectedString name="Source"><![CDATA[--[[
	"Reifies" a virtual DOM, constructing a real DOM with the same shape.
]]

local invariant = require(script.Parent.Parent.invariant)
local PatchSet = require(script.Parent.Parent.PatchSet)
local setProperty = require(script.Parent.setProperty)
local decodeValue = require(script.Parent.decodeValue)

local reifyInner, applyDeferredRefs

local function reify(instanceMap, virtualInstances, rootId, parentInstance)
	-- Create an empty patch that will be populated with any parts of this reify
	-- that could not happen, like instances that couldn't be created and
	-- properties that could not be assigned.
	local unappliedPatch = PatchSet.newEmpty()

	-- Contains a list of all of the ref properties that we'll need to assign
	-- after all instances are created. We apply refs in a second pass, after
	-- we create as many instances as we can, so that we ensure that referents
	-- can be mapped to instances correctly.
	local deferredRefs = {}

	reifyInner(instanceMap, virtualInstances, rootId, parentInstance, unappliedPatch, deferredRefs)
	applyDeferredRefs(instanceMap, deferredRefs, unappliedPatch)

	return unappliedPatch
end

--[[
	Add the given ID and all of its descendants in virtualInstances to the given
	PatchSet, marked for addition.
]]
local function addAllToPatch(patchSet, virtualInstances, id)
	local virtualInstance = virtualInstances[id]
	patchSet.added[id] = virtualInstance

	for _, childId in ipairs(virtualInstance.Children) do
		addAllToPatch(patchSet, virtualInstances, childId)
	end
end

--[[
	Inner function that defines the core routine.
]]
function reifyInner(instanceMap, virtualInstances, id, parentInstance, unappliedPatch, deferredRefs)
	local virtualInstance = virtualInstances[id]

	if virtualInstance == nil then
		invariant("Cannot reify an instance not present in virtualInstances\nID: {}", id)
	end

	-- Instance.new can fail if we're passing in something that can't be
	-- created, like a service, something enabled with a feature flag, or
	-- something that requires higher security than we have.
	local ok, instance = pcall(Instance.new, virtualInstance.ClassName)

	if not ok then
		addAllToPatch(unappliedPatch, virtualInstances, id)
		return
	end

	-- TODO: Can this fail? Previous versions of Rojo guarded against this, but
	-- the reason why was uncertain.
	instance.Name = virtualInstance.Name

	-- Track all of the properties that we've failed to assign to this instance.
	local unappliedProperties = {}

	for propertyName, virtualValue in pairs(virtualInstance.Properties) do
		-- Because refs may refer to instances that we haven't constructed yet,
		-- we defer applying any ref properties until all instances are created.
		if next(virtualValue) == "Ref" then
			table.insert(deferredRefs, {
				id = id,
				instance = instance,
				propertyName = propertyName,
				virtualValue = virtualValue,
			})
			continue
		end

		local ok, value = decodeValue(virtualValue, instanceMap)
		if not ok then
			unappliedProperties[propertyName] = virtualValue
			continue
		end

		local ok = setProperty(instance, propertyName, value)
		if not ok then
			unappliedProperties[propertyName] = virtualValue
		end
	end

	-- If there were any properties that we failed to assign, push this into our
	-- unapplied patch as an update that would need to be applied.
	if next(unappliedProperties) ~= nil then
		table.insert(unappliedPatch.updated, {
			id = id,
			changedProperties = unappliedProperties,
		})
	end

	for _, childId in ipairs(virtualInstance.Children) do
		reifyInner(instanceMap, virtualInstances, childId, instance, unappliedPatch, deferredRefs)
	end

	instance.Parent = parentInstance
	instanceMap:insert(id, instance)
end

function applyDeferredRefs(instanceMap, deferredRefs, unappliedPatch)
	local function markFailed(id, propertyName, virtualValue)
		-- If there is already an updated entry in the unapplied patch for this
		-- ref, use the existing one. This could match other parts of the
		-- instance that failed to be created, or even just other refs that
		-- failed to apply.
		--
		-- This is important for instances like selectable GUI objects, which
		-- have many similar referent properties.
		for _, existingUpdate in ipairs(unappliedPatch.updated) do
			if existingUpdate.id == id then
				existingUpdate.changedProperties[propertyName] = virtualValue
				return
			end
		end

		-- We didn't find an existing entry that matched, so push a new entry
		-- into our unapplied patch.
		table.insert(unappliedPatch.updated, {
			id = id,
			changedProperties = {
				[propertyName] = virtualValue,
			},
		})
	end

	for _, entry in ipairs(deferredRefs) do
		local _, refId = next(entry.virtualValue)

		if refId == nil then
			continue
		end

		local targetInstance = instanceMap.fromIds[refId]
		if targetInstance == nil then
			markFailed(entry.id, entry.propertyName, entry.virtualValue)
			continue
		end

		local ok = setProperty(entry.instance, entry.propertyName, targetInstance)
		if not ok then
			markFailed(entry.id, entry.propertyName, entry.virtualValue)
		end
	end
end

return reify
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e90b</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXbae5de7ac86441649fb68ef0056d788d">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">reify.spec</string>
								<string name="ScriptGuid">{ef89188d-c003-452e-ac5b-9f56f07e1e37}</string>
								<ProtectedString name="Source"><![CDATA[return function()
	local reify = require(script.Parent.reify)

	local PatchSet = require(script.Parent.Parent.PatchSet)
	local InstanceMap = require(script.Parent.Parent.InstanceMap)
	local Error = require(script.Parent.Error)

	local function isEmpty(table)
		return next(table) == nil, "Table was not empty"
	end

	local function size(dict)
		local len = 0

		for _ in pairs(dict) do
			len = len + 1
		end

		return len
	end

	it("should throw when given a bogus ID", function()
		expect(function()
			reify(InstanceMap.new(), {}, "Hi, mom!", game)
		end).to.throw()
	end)

	it("should return an error when given bogus class names", function()
		local virtualInstances = {
			ROOT = {
				ClassName = "Balogna",
				Name = "Food",
				Properties = {},
				Children = {},
			},
		}

		local instanceMap = InstanceMap.new()
		local unappliedPatch = reify(instanceMap, virtualInstances, "ROOT", nil)

		assert(instanceMap:size() == 0, "expected instanceMap to be empty")

		expect(size(unappliedPatch.added)).to.equal(1)
		expect(unappliedPatch.added["ROOT"]).to.equal(virtualInstances["ROOT"])

		assert(isEmpty(unappliedPatch.removed), "expected no removes")
		assert(isEmpty(unappliedPatch.updated), "expected no updates")
	end)

	it("should assign name and properties", function()
		local virtualInstances = {
			ROOT = {
				ClassName = "StringValue",
				Name = "Spaghetti",
				Properties = {
					Value = {
						String = "Hello, world!",
					},
				},
				Children = {},
			},
		}

		local instanceMap = InstanceMap.new()
		local unappliedPatch = reify(instanceMap, virtualInstances, "ROOT")

		assert(PatchSet.isEmpty(unappliedPatch), "expected remaining patch to be empty")

		local instance = instanceMap.fromIds["ROOT"]
		expect(instance.ClassName).to.equal("StringValue")
		expect(instance.Name).to.equal("Spaghetti")
		expect(instance.Value).to.equal("Hello, world!")

		expect(instanceMap:size()).to.equal(1)
	end)

	it("should construct children", function()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Parent",
				Properties = {},
				Children = {"CHILD"},
			},

			CHILD = {
				ClassName = "Folder",
				Name = "Child",
				Properties = {},
				Children = {},
			},
		}

		local instanceMap = InstanceMap.new()
		local unappliedPatch = reify(instanceMap, virtualInstances, "ROOT")

		assert(PatchSet.isEmpty(unappliedPatch), "expected remaining patch to be empty")

		local instance = instanceMap.fromIds["ROOT"]
		expect(instance.ClassName).to.equal("Folder")
		expect(instance.Name).to.equal("Parent")

		local child = instance.Child
		expect(child.ClassName).to.equal("Folder")

		expect(instanceMap:size()).to.equal(2)
	end)

	it("should still construct parents if children fail", function()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Parent",
				Properties = {},
				Children = {"CHILD"},
			},

			CHILD = {
				ClassName = "this ain't an Instance",
				Name = "Child",
				Properties = {},
				Children = {},
			},
		}

		local instanceMap = InstanceMap.new()
		local unappliedPatch = reify(instanceMap, virtualInstances, "ROOT")

		expect(size(unappliedPatch.added)).to.equal(1)
		expect(unappliedPatch.added["CHILD"]).to.equal(virtualInstances["CHILD"])
		assert(isEmpty(unappliedPatch.updated), "expected no updates")
		assert(isEmpty(unappliedPatch.removed), "expected no removes")

		local instance = instanceMap.fromIds["ROOT"]
		expect(instance.ClassName).to.equal("Folder")
		expect(instance.Name).to.equal("Parent")

		expect(#instance:GetChildren()).to.equal(0)
		expect(instanceMap:size()).to.equal(1)
	end)

	it("should fail gracefully when setting erroneous properties", function()
		local virtualInstances = {
			ROOT = {
				ClassName = "StringValue",
				Name = "Root",
				Properties = {
					Value = {
						Type = "Vector3",
						Value = {1, 2, 3},
					},
				},
				Children = {},
			},
		}

		local instanceMap = InstanceMap.new()
		local unappliedPatch = reify(instanceMap, virtualInstances, "ROOT")

		local instance = instanceMap.fromIds["ROOT"]
		expect(instance.ClassName).to.equal("StringValue")
		expect(instance.Name).to.equal("Root")

		assert(isEmpty(unappliedPatch.added), "expected no additions")
		expect(#unappliedPatch.updated).to.equal(1)
		assert(isEmpty(unappliedPatch.removed), "expected no removes")

		local update = unappliedPatch.updated[1]
		expect(update.id).to.equal("ROOT")
		expect(size(update.changedProperties)).to.equal(1)

		local property = update.changedProperties["Value"]
		expect(property).to.equal(virtualInstances["ROOT"].Properties.Value)
	end)

	-- This is the simplest ref case: ensure that setting a ref property that
	-- points to an instance that was previously created as part of the same
	-- reify operation works.
	it("should apply properties containing refs to ancestors", function()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Root",
				Properties = {},
				Children = {"CHILD"},
			},

			CHILD = {
				ClassName = "ObjectValue",
				Name = "Child",
				Properties = {
					Value = {
						Ref = "ROOT",
					},
				},
				Children = {},
			},
		}

		local instanceMap = InstanceMap.new()
		local unappliedPatch = reify(instanceMap, virtualInstances, "ROOT")

		assert(PatchSet.isEmpty(unappliedPatch), "expected remaining patch to be empty")

		local root = instanceMap.fromIds["ROOT"]
		local child = instanceMap.fromIds["CHILD"]
		expect(child.Value).to.equal(root)
	end)

	-- This is another simple case: apply a ref property that points to an
	-- existing instance. In this test, that instance was created before the
	-- reify operation started and is present in instanceMap.
	it("should apply properties containing refs to previously-existing instances", function()
		local virtualInstances = {
			ROOT = {
				ClassName = "ObjectValue",
				Name = "Root",
				Properties = {
					Value = {
						Ref = "EXISTING",
					},
				},
				Children = {},
			},
		}

		local instanceMap = InstanceMap.new()

		local existing = Instance.new("Folder")
		existing.Name = "Existing"
		instanceMap:insert("EXISTING", existing)

		local unappliedPatch = reify(instanceMap, virtualInstances, "ROOT")

		assert(PatchSet.isEmpty(unappliedPatch), "expected remaining patch to be empty")

		local root = instanceMap.fromIds["ROOT"]
		expect(root.Value).to.equal(existing)
	end)

	-- This is a tricky ref case: CHILD_A points to CHILD_B, but is constructed
	-- first. Deferred ref application is required to implement this case
	-- correctly.
	it("should apply properties containing refs to later siblings correctly", function()
		local virtualInstances = {
			ROOT = {
				ClassName = "Folder",
				Name = "Root",
				Properties = {},
				Children = {"CHILD_A", "CHILD_B"},
			},

			CHILD_A = {
				ClassName = "ObjectValue",
				Name = "Child A",
				Properties = {
					Value = {
						Ref = "CHILD_B",
					},
				},
				Children = {},
			},

			CHILD_B = {
				ClassName = "Folder",
				Name = "Child B",
				Properties = {},
				Children = {},
			},
		}

		local instanceMap = InstanceMap.new()
		local unappliedPatch = reify(instanceMap, virtualInstances, "ROOT")

		assert(PatchSet.isEmpty(unappliedPatch), "expected remaining patch to be empty")

		local childA = instanceMap.fromIds["CHILD_A"]
		local childB = instanceMap.fromIds["CHILD_B"]
		expect(childA.Value).to.equal(childB)
	end)

	-- This is the classic case that calls for deferred ref application. In this
	-- test, the root instance has a ref property that refers to its child. The
	-- root is definitely constructed first.
	--
	-- This is distinct from the sibling case in that the child will be
	-- constructed as part of a recursive call before the parent has totally
	-- finished. Given deferred refs, this should not fail, but it is a good
	-- case to test.
	it("should apply properties containing refs to later children correctly", function()
		local virtualInstances = {
			ROOT = {
				ClassName = "ObjectValue",
				Name = "Root",
				Properties = {
					Value = {
						Ref = "CHILD",
					},
				},
				Children = {"CHILD"},
			},

			CHILD = {
				ClassName = "Folder",
				Name = "Child",
				Properties = {},
				Children = {},
			},
		}

		local instanceMap = InstanceMap.new()
		local unappliedPatch = reify(instanceMap, virtualInstances, "ROOT")

		assert(PatchSet.isEmpty(unappliedPatch), "expected remaining patch to be empty")

		local root = instanceMap.fromIds["ROOT"]
		local child = instanceMap.fromIds["CHILD"]
		expect(root.Value).to.equal(child)
	end)

	it("should return a partial patch when applying invalid refs", function()
		local virtualInstances = {
			ROOT = {
				ClassName = "ObjectValue",
				Name = "Root",
				Properties = {
					Value = {
						Type = "Ref",
						Value = "SORRY",
					},
				},
				Children = {},
			},
		}

		local instanceMap = InstanceMap.new()
		local unappliedPatch = reify(instanceMap, virtualInstances, "ROOT")

		assert(not PatchSet.hasRemoves(unappliedPatch), "expected no removes")
		assert(not PatchSet.hasAdditions(unappliedPatch), "expected no additions")
		expect(#unappliedPatch.updated).to.equal(1)

		local update = unappliedPatch.updated[1]
		expect(update.id).to.equal("ROOT")
		expect(update.changedProperties.Value).to.equal(virtualInstances["ROOT"].Properties.Value)
	end)
end
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e90c</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX265f15f20d5b4da09c53819fa2883496">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">setProperty</string>
								<string name="ScriptGuid">{cf6dcb67-84d6-4538-b9a0-e1d28a1ffb9c}</string>
								<ProtectedString name="Source"><![CDATA[--[[
	Attempts to set a property on the given instance.
]]

local Packages = script.Parent.Parent.Parent.Packages
local Log = require(Packages.Log)
local RbxDom = require(Packages.RbxDom)
local Error = require(script.Parent.Error)

local function setProperty(instance, propertyName, value)
	local descriptor = RbxDom.findCanonicalPropertyDescriptor(instance.ClassName, propertyName)

	-- We can skip unknown properties; they're not likely reflected to Lua.
	--
	-- A good example of a property like this is `Model.ModelInPrimary`, which
	-- is serialized but not reflected to Lua.
	if descriptor == nil then
		Log.trace("Skipping unknown property {}.{}", instance.ClassName, propertyName)

		return true
	end

	if descriptor.scriptability == "None" or descriptor.scriptability == "Read" then
		return false, Error.new(Error.UnwritableProperty, {
			className = instance.ClassName,
			propertyName = propertyName,
		})
	end

	local ok, err = descriptor:write(instance, value)

	if not ok then
		if err.kind == RbxDom.Error.Kind.Roblox and err.extra:find("lacking permission") then
			return false, Error.new(Error.LackingPropertyPermissions, {
				className = instance.ClassName,
				propertyName = propertyName,
			})
		end

		return false, Error.new(Error.OtherPropertyError, {
			className = instance.ClassName,
			propertyName = propertyName,
		})
	end

	return true
end

return setProperty
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e90d</UniqueId>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="ModuleScript" referent="RBXef343b9c759f4ef39dd49a20303aa4e7">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">RbxDom</string>
						<string name="ScriptGuid">{f7e9dbda-156c-4f0c-9ecb-ab1c37975976}</string>
						<ProtectedString name="Source"><![CDATA[local database = require(script.database)
local Error = require(script.Error)
local PropertyDescriptor = require(script.PropertyDescriptor)

local function findCanonicalPropertyDescriptor(className, propertyName)
	local currentClassName = className

	repeat
		local currentClass = database.Classes[currentClassName]

		if currentClass == nil then
			return currentClass
		end

		local propertyData = currentClass.Properties[propertyName]
		if propertyData ~= nil then
			local canonicalData = propertyData.Kind.Canonical
			if canonicalData ~= nil then
				return PropertyDescriptor.fromRaw(propertyData, currentClassName, propertyName)
			end

			local aliasData = propertyData.Kind.Alias
			if aliasData ~= nil then
				return PropertyDescriptor.fromRaw(
					currentClass.Properties[aliasData.AliasFor],
					currentClassName,
					aliasData.AliasFor)
			end

			return nil
		end

		currentClassName = currentClass.Superclass
	until currentClassName == nil

	return nil
end

local function readProperty(instance, propertyName)
	local descriptor = findCanonicalPropertyDescriptor(instance.ClassName, propertyName)

	if descriptor == nil then
		local fullName = ("%s.%s"):format(instance.className, propertyName)

		return false, Error.new(Error.Kind.UnknownProperty, fullName)
	end

	return descriptor:read(instance)
end

local function writeProperty(instance, propertyName, value)
	local descriptor = findCanonicalPropertyDescriptor(instance.ClassName, propertyName)

	if descriptor == nil then
		local fullName = ("%s.%s"):format(instance.className, propertyName)

		return false, Error.new(Error.Kind.UnknownProperty, fullName)
	end

	return descriptor:write(instance, value)
end

return {
	readProperty = readProperty,
	writeProperty = writeProperty,
	findCanonicalPropertyDescriptor = findCanonicalPropertyDescriptor,
	Error = Error,
	EncodedValue = require(script.EncodedValue),
}
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e91b</UniqueId>
					</Properties>
					<Item class="ModuleScript" referent="RBXc6f487506a4e48328cac9befa4d01627">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">EncodedValue</string>
							<string name="ScriptGuid">{7ec9369e-145f-4ffe-b026-d3918f80a2e9}</string>
							<ProtectedString name="Source"><![CDATA[local base64 = require(script.Parent.base64)

local function identity(...)
	return ...
end

local function unpackDecoder(f)
	return function(value)
		return f(unpack(value))
	end
end

local function serializeFloat(value)
	-- TODO: Figure out a better way to serialize infinity and NaN, neither of
	-- which fit into JSON.
	if value == math.huge or value == -math.huge then
		return 999999999 * math.sign(value)
	end

	return value
end

local ALL_AXES = {"X", "Y", "Z"}
local ALL_FACES = {"Right", "Top", "Back", "Left", "Bottom", "Front"}

local EncodedValue = {}

local types
types = {
	Attributes = {
		fromPod = function(pod)
			local output = {}

			for key, value in pairs(pod) do
				local ok, result = EncodedValue.decode(value)

				if ok then
					output[key] = result
				else
					local warning = ("Could not decode attribute value of type %q: %s"):format(typeof(value), tostring(result))
					warn(warning)
				end
			end

			return output
		end,
		toPod = function(roblox)
			local output = {}

			for key, value in pairs(roblox) do
				local ok, result = EncodedValue.encodeNaive(value)

				if ok then
					output[key] = result
				else
					local warning = ("Could not encode attribute value of type %q: %s"):format(typeof(value), tostring(result))
					warn(warning)
				end
			end

			return output
		end,
	},

	Axes = {
		fromPod = function(pod)
			local axes = {}

			for index, axisName in ipairs(pod) do
				axes[index] = Enum.Axis[axisName]
			end

			return Axes.new(unpack(axes))
		end,

		toPod = function(roblox)
			local json = {}

			for _, axis in ipairs(ALL_AXES) do
				if roblox[axis] then
					table.insert(json, axis)
				end
			end

			return json
		end,
	},

	BinaryString = {
		fromPod = base64.decode,
		toPod = base64.encode,
	},

	Bool = {
		fromPod = identity,
		toPod = identity,
	},

	BrickColor = {
		fromPod = function(pod)
			return BrickColor.new(pod)
		end,

		toPod = function(roblox)
			return roblox.Number
		end,
	},

	CFrame = {
		fromPod = function(pod)
			local pos = pod.position
			local orient = pod.orientation

			return CFrame.new(
				pos[1], pos[2], pos[3],
				orient[1][1], orient[1][2], orient[1][3],
				orient[2][1], orient[2][2], orient[2][3],
				orient[3][1], orient[3][2], orient[3][3]
			)
		end,

		toPod = function(roblox)
			local x, y, z,
				r00, r01, r02,
				r10, r11, r12,
				r20, r21, r22 = roblox:GetComponents()

			return {
				position = {x, y, z},
				orientation = {
					{r00, r01, r02},
					{r10, r11, r12},
					{r20, r21, r22},
				},
			}
		end,
	},

	Color3 = {
		fromPod = unpackDecoder(Color3.new),

		toPod = function(roblox)
			return {roblox.r, roblox.g, roblox.b}
		end,
	},

	Color3uint8 = {
		fromPod = unpackDecoder(Color3.fromRGB),

		toPod = function(roblox)
			return {
				math.round(roblox.R * 255),
				math.round(roblox.G * 255),
				math.round(roblox.B * 255),
			}
		end,
	},

	ColorSequence = {
		fromPod = function(pod)
			local keypoints = {}

			for index, keypoint in ipairs(pod.keypoints) do
				keypoints[index] = ColorSequenceKeypoint.new(
					keypoint.time,
					types.Color3.fromPod(keypoint.color)
				)
			end

			return ColorSequence.new(keypoints)
		end,

		toPod = function(roblox)
			local keypoints = {}

			for index, keypoint in ipairs(roblox.Keypoints) do
				keypoints[index] = {
					time = keypoint.Time,
					color = types.Color3.toPod(keypoint.Value),
				}
			end

			return {
				keypoints = keypoints,
			}
		end,
	},

	Content = {
		fromPod = identity,
		toPod = identity,
	},

	Enum = {
		fromPod = identity,

		toPod = function(roblox)
			-- FIXME: More robust handling of enums
			if typeof(roblox) == "number" then
				return roblox
			else
				return roblox.Value
			end
		end,
	},

	Faces = {
		fromPod = function(pod)
			local faces = {}

			for index, faceName in ipairs(pod) do
				faces[index] = Enum.NormalId[faceName]
			end

			return Faces.new(unpack(faces))
		end,

		toPod = function(roblox)
			local pod = {}

			for _, face in ipairs(ALL_FACES) do
				if roblox[face] then
					table.insert(pod, face)
				end
			end

			return pod
		end,
	},

	Float32 = {
		fromPod = identity,
		toPod = serializeFloat,
	},

	Float64 = {
		fromPod = identity,
		toPod = serializeFloat,
	},

	Int32 = {
		fromPod = identity,
		toPod = identity,
	},

	Int64 = {
		fromPod = identity,
		toPod = identity,
	},

	NumberRange = {
		fromPod = unpackDecoder(NumberRange.new),

		toPod = function(roblox)
			return {roblox.Min, roblox.Max}
		end,
	},

	NumberSequence = {
		fromPod = function(pod)
			local keypoints = {}

			for index, keypoint in ipairs(pod.keypoints) do
				keypoints[index] = NumberSequenceKeypoint.new(
					keypoint.time,
					keypoint.value,
					keypoint.envelope
				)
			end

			return NumberSequence.new(keypoints)
		end,

		toPod = function(roblox)
			local keypoints = {}

			for index, keypoint in ipairs(roblox.Keypoints) do
				keypoints[index] = {
					time = keypoint.Time,
					value = keypoint.Value,
					envelope = keypoint.Envelope,
				}
			end

			return {
				keypoints = keypoints,
			}
		end,
	},

	PhysicalProperties = {
		fromPod = function(pod)
			if pod == "Default" then
				return nil
			else
				return PhysicalProperties.new(
					pod.density,
					pod.friction,
					pod.elasticity,
					pod.frictionWeight,
					pod.elasticityWeight
				)
			end
		end,

		toPod = function(roblox)
			if roblox == nil then
				return "Default"
			else
				return {
					density = roblox.Density,
					friction = roblox.Friction,
					elasticity = roblox.Elasticity,
					frictionWeight = roblox.FrictionWeight,
					elasticityWeight = roblox.ElasticityWeight,
				}
			end
		end,
	},

	Ray = {
		fromPod = function(pod)
			return Ray.new(
				types.Vector3.fromPod(pod.origin),
				types.Vector3.fromPod(pod.direction)
			)
		end,

		toPod = function(roblox)
			return {
				origin = types.Vector3.toPod(roblox.Origin),
				direction = types.Vector3.toPod(roblox.Direction),
			}
		end,
	},

	Rect = {
		fromPod = function(pod)
			return Rect.new(
				types.Vector2.fromPod(pod[1]),
				types.Vector2.fromPod(pod[2])
			)
		end,

		toPod = function(roblox)
			return {
				types.Vector2.toPod(roblox.Min),
				types.Vector2.toPod(roblox.Max),
			}
		end,
	},

	Ref = {
		fromPod = function(_pod)
			error("Ref cannot be decoded on its own")
		end,

		toPod = function(_roblox)
			error("Ref can not be encoded on its own")
		end,
	},

	Region3 = {
		fromPod = function(pod)
			error("Region3 is not implemented")
		end,

		toPod = function(roblox)
			error("Region3 is not implemented")
		end,
	},

	Region3int16 = {
		fromPod = function(pod)
			return Region3int16.new(
				types.Vector3int16.fromPod(pod[1]),
				types.Vector3int16.fromPod(pod[2])
			)
		end,

		toPod = function(roblox)
			return {
				types.Vector3int16.toPod(roblox.Min),
				types.Vector3int16.toPod(roblox.Max),
			}
		end,
	},

	SharedString = {
		fromPod = function(pod)
			error("SharedString is not supported")
		end,

		toPod = function(roblox)
			error("SharedString is not supported")
		end,
	},

	String = {
		fromPod = identity,
		toPod = identity,
	},

	UDim = {
		fromPod = unpackDecoder(UDim.new),

		toPod = function(roblox)
			return {roblox.Scale, roblox.Offset}
		end,
	},

	UDim2 = {
		fromPod = function(pod)
			return UDim2.new(
				types.UDim.fromPod(pod[1]),
				types.UDim.fromPod(pod[2])
			)
		end,

		toPod = function(roblox)
			return {
				types.UDim.toPod(roblox.X),
				types.UDim.toPod(roblox.Y),
			}
		end,
	},

	Tags = {
		fromPod = identity,
		toPod = identity,
	},

	Vector2 = {
		fromPod = unpackDecoder(Vector2.new),

		toPod = function(roblox)
			return {
				serializeFloat(roblox.X),
				serializeFloat(roblox.Y),
			}
		end,
	},

	Vector2int16 = {
		fromPod = unpackDecoder(Vector2int16.new),

		toPod = function(roblox)
			return {roblox.X, roblox.Y}
		end,
	},

	Vector3 = {
		fromPod = unpackDecoder(Vector3.new),

		toPod = function(roblox)
			return {
				serializeFloat(roblox.X),
				serializeFloat(roblox.Y),
				serializeFloat(roblox.Z),
			}
		end,
	},

	Vector3int16 = {
		fromPod = unpackDecoder(Vector3int16.new),

		toPod = function(roblox)
			return {roblox.X, roblox.Y, roblox.Z}
		end,
	},
}

function EncodedValue.decode(encodedValue)
	local ty, value = next(encodedValue)

	local typeImpl = types[ty]
	if typeImpl == nil then
		return false, "Couldn't decode value " .. tostring(ty)
	end

	return true, typeImpl.fromPod(value)
end

function EncodedValue.encode(rbxValue, propertyType)
	assert(propertyType ~= nil, "Property type descriptor is required")

	local typeImpl = types[propertyType]
	if typeImpl == nil then
		return false, ("Missing encoder for property type %q"):format(propertyType)
	end

	return true, {
		[propertyType] = typeImpl.toPod(rbxValue),
	}
end

local propertyTypeRenames = {
	number = "Float64",
	boolean = "Bool",
	string = "String",
}

function EncodedValue.encodeNaive(rbxValue)
	local propertyType = typeof(rbxValue)
	if propertyTypeRenames[propertyType] ~= nil then
		propertyType = propertyTypeRenames[propertyType]
	end

	return EncodedValue.encode(rbxValue, propertyType)
end

return EncodedValue
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e91c</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX963aca22d4f740acad03078f23f961ab">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">EncodedValue.spec</string>
							<string name="ScriptGuid">{14c77747-4bb6-4960-b346-529e8d796bbe}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local HttpService = game:GetService("HttpService")
	
	local EncodedValue = require(script.Parent.EncodedValue)
	local allValues = require(script.Parent.allValues)

	local function deepEq(a, b)
		if typeof(a) ~= typeof(b) then
			return false
		end

		local ty = typeof(a)

		if ty == "table" then
			local visited = {}
			
			for key, valueA in pairs(a) do
				visited[key] = true
				
				if not deepEq(valueA, b[key]) then
					return false
				end
			end

			for key, valueB in pairs(b) do
				if visited[key] then
					continue
				end

				if not deepEq(valueB, a[key]) then
					return false
				end
			end

			return true
		else
			return a == b
		end
	end

	local extraAssertions = {
		CFrame = function(value)
			expect(value).to.equal(CFrame.new(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
		end,
	}

	for testName, testEntry in pairs(allValues) do
		it("round trip " .. testName, function()
			local ok, decoded = EncodedValue.decode(testEntry.value)
			assert(ok, decoded)

			if extraAssertions[testName] ~= nil then
				extraAssertions[testName](decoded)
			end

			local ok, encoded = EncodedValue.encode(decoded, testEntry.ty)
			assert(ok, encoded)

			if not deepEq(encoded, testEntry.value) then
				local expected = HttpService:JSONEncode(testEntry.value)
				local actual = HttpService:JSONEncode(encoded)

				local message = string.format(
					"Round-trip results did not match.\nExpected:\n%s\nActual:\n%s",
					expected, actual
				)

				error(message)
			end
		end)
	end
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e91d</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX48e0423927194173a4cd24a3e483db3c">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Error</string>
							<string name="ScriptGuid">{b41e9313-f9a6-4841-9349-b1ff75106985}</string>
							<ProtectedString name="Source"><![CDATA[local Error = {}
Error.__index = Error

Error.Kind = {
	UnknownProperty = "UnknownProperty",
	PropertyNotReadable = "PropertyNotReadable",
	PropertyNotWritable = "PropertyNotWritable",
	Roblox = "Roblox",
}

setmetatable(Error.Kind, {
	__index = function(_, key)
		error(("%q is not a valid member of Error.Kind"):format(tostring(key)), 2)
	end,
})

function Error.new(kind, extra)
	return setmetatable({
		kind = kind,
		extra = extra,
	}, Error)
end

function Error:__tostring()
	return ("Error(%s: %s)"):format(self.kind, tostring(self.extra))
end

return Error]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e91e</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX857ee4029cc946da86829ca2583be63a">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">PropertyDescriptor</string>
							<string name="ScriptGuid">{2d4a0e99-492f-4b67-81bf-acf8edc53035}</string>
							<ProtectedString name="Source"><![CDATA[local Error = require(script.Parent.Error)
local customProperties = require(script.Parent.customProperties)

-- A wrapper around a property descriptor from the reflection database with some
-- extra convenience methods.
--
-- The aim of this API is to facilitate looking up a property once, then reading
-- from it or writing to it multiple times. It's also useful when a consumer
-- wants to check additional constraints on the property before trying to use
-- it, like scriptability.
local PropertyDescriptor = {}
PropertyDescriptor.__index = PropertyDescriptor

local function get(container, key)
	return container[key]
end

local function set(container, key, value)
	container[key] = value
end

function PropertyDescriptor.fromRaw(data, className, propertyName)
	local key, value = next(data.DataType)

	return setmetatable({
		-- The meanings of the key and value in DataType differ when the type of
		-- the property is Enum. When the property is of type Enum, the key is
		-- the name of the type:
		--
		-- { Enum = "<name of enum>" }
		--
		-- When the property is not of type Enum, the value is the name of the
		-- type:
		--
		-- { Value = "<data type>" }
		dataType = key == "Enum" and key or value,

		scriptability = data.Scriptability,
		className = className,
		name = propertyName,
	}, PropertyDescriptor)
end

function PropertyDescriptor:read(instance)
	if self.scriptability == "ReadWrite" or self.scriptability == "Read" then
		local success, value = xpcall(get, debug.traceback, instance, self.name)

		if success then
			return success, value
		else
			return false, Error.new(Error.Kind.Roblox, value)
		end
	end

	if self.scriptability == "Custom" then
		local interface = customProperties[self.className][self.name]

		return interface.read(instance, self.name)
	end

	if self.scriptability == "None" or self.scriptability == "Write" then
		local fullName = ("%s.%s"):format(instance.className, self.name)

		return false, Error.new(Error.Kind.PropertyNotReadable, fullName)
	end

	error(("Internal error: unexpected value of 'scriptability': %s"):format(tostring(self.scriptability)), 2)
end

function PropertyDescriptor:write(instance, value)
	if self.scriptability == "ReadWrite" or self.scriptability == "Write" then
		local success, err = xpcall(set, debug.traceback, instance, self.name, value)

		if success then
			return success
		else
			return false, Error.new(Error.Kind.Roblox, err)
		end
	end

	if self.scriptability == "Custom" then
		local interface = customProperties[self.className][self.name]

		return interface.write(instance, self.name, value)
	end

	if self.scriptability == "None" or self.scriptability == "Read" then
		local fullName = ("%s.%s"):format(instance.className, self.name)

		return false, Error.new(Error.Kind.PropertyNotWritable, fullName)
	end
end

return PropertyDescriptor
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e91f</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXf2cdec5a655846f6b0bb46d168c023f2">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">allValues</string>
							<string name="ScriptGuid">{7f9aed09-dbd4-49b4-aac2-d12d345b0491}</string>
							<ProtectedString name="Source"><![CDATA[return {
	Attributes = {
		ty = "Attributes",
		value = {
			Attributes = {
				TestBool = {
					Bool = true,
				},
				TestBrickColor = {
					BrickColor = 24,
				},
				TestColor3 = {
					Color3 = {1, 0.5, 0},
				},
				TestNumber = {
					Float64 = 1337,
				},
				TestRect = {
					Rect = {{1, 2}, {3, 4}},
				},
				TestString = {
					String = "Test",
				},
				TestUDim = {
					UDim = {1, 2},
				},
				TestUDim2 = {
					UDim2 = {{1, 2}, {3, 4}},
				},
				TestVector2 = {
					Vector2 = {1, 2},
				},
				TestVector3 = {
					Vector3 = {1, 2, 3},
				},
			},
		},
	},
	Axes = {
		ty = "Axes",
		value = {
			Axes = {"X", "Y", "Z"},
		},
	},
	BinaryString = {
		ty = "BinaryString",
		value = {
			BinaryString = "SGVsbG8h",
		},
	},
	Bool = {
		ty = "Bool",
		value = {
			Bool = true,
		},
	},
	BrickColor = {
		ty = "BrickColor",
		value = {
			BrickColor = 1004,
		},
	},
	CFrame = {
		ty = "CFrame",
		value = {
			CFrame = {
				orientation = {{4, 5, 6}, {7, 8, 9}, {10, 11, 12}},
				position = {1, 2, 3},
			},
		},
	},
	Color3 = {
		ty = "Color3",
		value = {
			Color3 = {1, 2, 3},
		},
	},
	Color3uint8 = {
		ty = "Color3uint8",
		value = {
			Color3uint8 = {0, 128, 255},
		},
	},
	ColorSequence = {
		ty = "ColorSequence",
		value = {
			ColorSequence = {
				keypoints = {{
					color = {1, 1, 0.5},
					time = 0,
				}, {
					color = {0, 0, 0},
					time = 1,
				}},
			},
		},
	},
	Content = {
		ty = "Content",
		value = {
			Content = "rbxassetid://12345",
		},
	},
	Enum = {
		ty = "Enum",
		value = {
			Enum = 1234,
		},
	},
	Faces = {
		ty = "Faces",
		value = {
			Faces = {"Right", "Top", "Back", "Left", "Bottom", "Front"},
		},
	},
	Float32 = {
		ty = "Float32",
		value = {
			Float32 = 15,
		},
	},
	Float64 = {
		ty = "Float64",
		value = {
			Float64 = 15123,
		},
	},
	Int32 = {
		ty = "Int32",
		value = {
			Int32 = 6014,
		},
	},
	Int64 = {
		ty = "Int64",
		value = {
			Int64 = 23491023,
		},
	},
	NumberRange = {
		ty = "NumberRange",
		value = {
			NumberRange = {-36, 94},
		},
	},
	NumberSequence = {
		ty = "NumberSequence",
		value = {
			NumberSequence = {
				keypoints = {{
					envelope = 2,
					time = 0,
					value = 5,
				}, {
					envelope = 0,
					time = 1,
					value = 22,
				}},
			},
		},
	},
	["PhysicalProperties-Custom"] = {
		ty = "PhysicalProperties",
		value = {
			PhysicalProperties = {
				density = 0.5,
				elasticity = 0,
				elasticityWeight = 25,
				friction = 1,
				frictionWeight = 50,
			},
		},
	},
	["PhysicalProperties-Default"] = {
		ty = "PhysicalProperties",
		value = {
			PhysicalProperties = "Default",
		},
	},
	Ray = {
		ty = "Ray",
		value = {
			Ray = {
				direction = {4, 5, 6},
				origin = {1, 2, 3},
			},
		},
	},
	Rect = {
		ty = "Rect",
		value = {
			Rect = {{0, 5}, {10, 15}},
		},
	},
	Region3int16 = {
		ty = "Region3int16",
		value = {
			Region3int16 = {{-10, -5, 0}, {5, 10, 15}},
		},
	},
	String = {
		ty = "String",
		value = {
			String = "Hello, world!",
		},
	},
	Tags = {
		ty = "Tags",
		value = {
			Tags = {"foo", "con'fusion?!", "bar"},
		},
	},
	UDim = {
		ty = "UDim",
		value = {
			UDim = {1, 32},
		},
	},
	UDim2 = {
		ty = "UDim2",
		value = {
			UDim2 = {{-1, 100}, {1, -100}},
		},
	},
	Vector2 = {
		ty = "Vector2",
		value = {
			Vector2 = {-50, 50},
		},
	},
	Vector2int16 = {
		ty = "Vector2int16",
		value = {
			Vector2int16 = {-300, 300},
		},
	},
	Vector3 = {
		ty = "Vector3",
		value = {
			Vector3 = {-300, 0, 1500},
		},
	},
	Vector3int16 = {
		ty = "Vector3int16",
		value = {
			Vector3int16 = {60, 37, -450},
		},
	},
}]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e920</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX782fc84bf36248afba7cd6feba0a1b52">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">base64</string>
							<string name="ScriptGuid">{46aa5212-54fa-4697-a7d3-0ddf31f44ac9}</string>
							<ProtectedString name="Source"><![CDATA[-- Thanks to Tiffany352 for this base64 implementation!

local floor = math.floor
local char = string.char

local function encodeBase64(str)
	local out = {}
	local nOut = 0
	local alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
	local strLen = #str

	-- 3 octets become 4 hextets
	for i = 1, strLen - 2, 3 do
		local b1, b2, b3 = str:byte(i, i + 3)
		local word = b3 + b2 * 256 + b1 * 256 * 256

		local h4 = word % 64 + 1
		word = floor(word / 64)
		local h3 = word % 64 + 1
		word = floor(word / 64)
		local h2 = word % 64 + 1
		word = floor(word / 64)
		local h1 = word % 64 + 1

		out[nOut + 1] = alphabet:sub(h1, h1)
		out[nOut + 2] = alphabet:sub(h2, h2)
		out[nOut + 3] = alphabet:sub(h3, h3)
		out[nOut + 4] = alphabet:sub(h4, h4)
		nOut = nOut + 4
	end

	local remainder = strLen % 3

	if remainder == 2 then
		-- 16 input bits -> 3 hextets (2 full, 1 partial)
		local b1, b2 = str:byte(-2, -1)
		-- partial is 4 bits long, leaving 2 bits of zero padding ->
		-- offset = 4
		local word = b2 * 4 + b1 * 4 * 256

		local h3 = word % 64 + 1
		word = floor(word / 64)
		local h2 = word % 64 + 1
		word = floor(word / 64)
		local h1 = word % 64 + 1

		out[nOut + 1] = alphabet:sub(h1, h1)
		out[nOut + 2] = alphabet:sub(h2, h2)
		out[nOut + 3] = alphabet:sub(h3, h3)
		out[nOut + 4] = "="
	elseif remainder == 1 then
		-- 8 input bits -> 2 hextets (2 full, 1 partial)
		local b1 = str:byte(-1, -1)
		-- partial is 2 bits long, leaving 4 bits of zero padding ->
		-- offset = 16
		local word = b1 * 16

		local h2 = word % 64 + 1
		word = floor(word / 64)
		local h1 = word % 64 + 1

		out[nOut + 1] = alphabet:sub(h1, h1)
		out[nOut + 2] = alphabet:sub(h2, h2)
		out[nOut + 3] = "="
		out[nOut + 4] = "="
	end
	-- if the remainder is 0, then no work is needed

	return table.concat(out, "")
end

local function decodeBase64(str)
	local out = {}
	local nOut = 0
	local alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
	local strLen = #str
	local acc = 0
	local nAcc = 0

	local alphabetLut = {}
	for i = 1, #alphabet do
		alphabetLut[alphabet:sub(i, i)] = i - 1
	end

	-- 4 hextets become 3 octets
	for i = 1, strLen do
		local ch = str:sub(i, i)
		local byte = alphabetLut[ch]
		if byte then
			acc = acc * 64 + byte
			nAcc = nAcc + 1
		end

		if nAcc == 4 then
			local b3 = acc % 256
			acc = floor(acc / 256)
			local b2 = acc % 256
			acc = floor(acc / 256)
			local b1 = acc % 256

			out[nOut + 1] = char(b1)
			out[nOut + 2] = char(b2)
			out[nOut + 3] = char(b3)
			nOut = nOut + 3
			nAcc = 0
			acc = 0
		end
	end

	if nAcc == 3 then
		-- 3 hextets -> 16 bit output
		acc = acc * 64
		acc = floor(acc / 256)
		local b2 = acc % 256
		acc = floor(acc / 256)
		local b1 = acc % 256

		out[nOut + 1] = char(b1)
		out[nOut + 2] = char(b2)
	elseif nAcc == 2 then
		-- 2 hextets -> 8 bit output
		acc = acc * 64
		acc = floor(acc / 256)
		acc = acc * 64
		acc = floor(acc / 256)
		local b1 = acc % 256

		out[nOut + 1] = char(b1)
	elseif nAcc == 1 then
		error("Base64 has invalid length")
	end

	return table.concat(out, "")
end

return {
	decode = decodeBase64,
	encode = encodeBase64,
}]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e921</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX357ad0045162409a9938cdc9e84fe1bf">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">base64.spec</string>
							<string name="ScriptGuid">{6a98dc91-a597-44fa-8515-aaff3819e4f4}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local base64 = require(script.Parent.base64)

	it("should encode and decode", function()
		local function try(str, expected)
			local encoded = base64.encode(str)
			expect(encoded).to.equal(expected)
			expect(base64.decode(encoded)).to.equal(str)
		end

		try("Man", "TWFu")
		try("Ma", "TWE=")
		try("M", "TQ==")
		try("ManM", "TWFuTQ==")
		try(
			[[Man is distinguished, not only by his reason, but by this ]]..
			[[singular passion from other animals, which is a lust of the ]]..
			[[mind, that by a perseverance of delight in the continued and ]]..
			[[indefatigable generation of knowledge, exceeds the short ]]..
			[[vehemence of any carnal pleasure.]],
			[[TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sI]]..
			[[GJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYW]]..
			[[xzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJ]]..
			[[zZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRl]]..
			[[ZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZ]]..
			[[SBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=]]
		)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e922</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX432507538ffb4297b494ddacd5c067c1">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">customProperties</string>
							<string name="ScriptGuid">{21ef114f-fad8-4125-a7c9-0417f29b16aa}</string>
							<ProtectedString name="Source"><![CDATA[local CollectionService = game:GetService("CollectionService")

-- Defines how to read and write properties that aren't directly scriptable.
--
-- The reflection database refers to these as having scriptability = "Custom"
return {
	Instance = {
		Attributes = {
			read = function(instance)
				return true, instance:GetAttributes()
			end,
			write = function(instance, _, value)
				local existing = instance:GetAttributes()

				for key, attr in pairs(value) do
					instance:SetAttribute(key, attr)
				end

				for key in pairs(existing) do
					if value[key] == nil then
						instance:SetAttribute(key, nil)
					end
				end

				return true
			end,
		},
		Tags = {
			read = function(instance)
				return true, CollectionService:GetTags(instance)
			end,
			write = function(instance, _, value)
				local existingTags = CollectionService:GetTags(instance)

				local unseenTags = {}
				for _, tag in ipairs(existingTags) do
					unseenTags[tag] = true
				end

				for _, tag in ipairs(value) do
					unseenTags[tag] = nil
					CollectionService:AddTag(instance, tag)
				end

				for tag in pairs(unseenTags) do
					CollectionService:RemoveTag(instance, tag)
				end

				return true
			end,
		},
	},
	LocalizationTable = {
		Contents = {
			read = function(instance, key)
				return true, instance:GetContents()
			end,
			write = function(instance, key, value)
				instance:SetContents(value)
				return true
			end,
		},
	},
}
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e923</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX1f0944dcaf3143ba9ed5a60929a47af7">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">database</string>
							<string name="ScriptGuid">{64960e0b-fbe7-4122-bce6-a126da6693d0}</string>
							<ProtectedString name="Source"><![CDATA[local HttpService = game:GetService("HttpService")
local json_string = [[{
  "Version": [
    0,
    530,
    0,
    5300290
  ],
  "Classes": {
    "ABTestService": {
      "Name": "ABTestService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Accessory": {
      "Name": "Accessory",
      "Tags": [],
      "Superclass": "Accoutrement",
      "Properties": {
        "AccessoryType": {
          "Name": "AccessoryType",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "AccessoryType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AccessoryType": {
          "Enum": 0
        },
        "AttachmentPoint": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Accoutrement": {
      "Name": "Accoutrement",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AttachmentForward": {
          "Name": "AttachmentForward",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AttachmentPoint": {
          "Name": "AttachmentPoint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AttachmentPos": {
          "Name": "AttachmentPos",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AttachmentRight": {
          "Name": "AttachmentRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AttachmentUp": {
          "Name": "AttachmentUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "AttachmentPoint": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Actor": {
      "Name": "Actor",
      "Tags": [],
      "Superclass": "Model",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "LevelOfDetail": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AdService": {
      "Name": "AdService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AdvancedDragger": {
      "Name": "AdvancedDragger",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AlignOrientation": {
      "Name": "AlignOrientation",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "AlignType": {
          "Name": "AlignType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AlignType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxAngularVelocity": {
          "Name": "MaxAngularVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxTorque": {
          "Name": "MaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Mode": {
          "Name": "Mode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "OrientationAlignmentMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrimaryAxis": {
          "Name": "PrimaryAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrimaryAxisOnly": {
          "Name": "PrimaryAxisOnly",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReactionTorqueEnabled": {
          "Name": "ReactionTorqueEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Responsiveness": {
          "Name": "Responsiveness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RigidityEnabled": {
          "Name": "RigidityEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SecondaryAxis": {
          "Name": "SecondaryAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AlignType": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color": {
          "Int32": 23
        },
        "Enabled": {
          "Bool": true
        },
        "MaxAngularVelocity": {
          "Float32": null
        },
        "MaxTorque": {
          "Float32": 10000.0
        },
        "Mode": {
          "Enum": 1
        },
        "PrimaryAxis": {
          "Vector3": [
            1.0,
            0.0,
            0.0
          ]
        },
        "PrimaryAxisOnly": {
          "Bool": false
        },
        "ReactionTorqueEnabled": {
          "Bool": false
        },
        "Responsiveness": {
          "Float32": 10.0
        },
        "RigidityEnabled": {
          "Bool": false
        },
        "SecondaryAxis": {
          "Vector3": [
            0.0,
            1.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "AlignPosition": {
      "Name": "AlignPosition",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "ApplyAtCenterOfMass": {
          "Name": "ApplyAtCenterOfMass",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxForce": {
          "Name": "MaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxVelocity": {
          "Name": "MaxVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Mode": {
          "Name": "Mode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "PositionAlignmentMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReactionForceEnabled": {
          "Name": "ReactionForceEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Responsiveness": {
          "Name": "Responsiveness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RigidityEnabled": {
          "Name": "RigidityEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ApplyAtCenterOfMass": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 194
        },
        "Enabled": {
          "Bool": true
        },
        "MaxForce": {
          "Float32": 10000.0
        },
        "MaxVelocity": {
          "Float32": null
        },
        "Mode": {
          "Enum": 1
        },
        "Position": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "ReactionForceEnabled": {
          "Bool": false
        },
        "Responsiveness": {
          "Float32": 10.0
        },
        "RigidityEnabled": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "AnalysticsSettings": {
      "Name": "AnalysticsSettings",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GenericSettings",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AnalyticsService": {
      "Name": "AnalyticsService",
      "Tags": [
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ApiKey": {
          "Name": "ApiKey",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ApiKey": {
          "String": ""
        },
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AngularVelocity": {
      "Name": "AngularVelocity",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "AngularVelocity": {
          "Name": "AngularVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxTorque": {
          "Name": "MaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReactionTorqueEnabled": {
          "Name": "ReactionTorqueEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RelativeTo": {
          "Name": "RelativeTo",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorRelativeTo"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AngularVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 23
        },
        "Enabled": {
          "Bool": true
        },
        "MaxTorque": {
          "Float32": 0.0
        },
        "ReactionTorqueEnabled": {
          "Bool": false
        },
        "RelativeTo": {
          "Enum": 2
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "Animation": {
      "Name": "Animation",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AnimationId": {
          "Name": "AnimationId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AnimationId": {
          "Content": ""
        },
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AnimationClip": {
      "Name": "AnimationClip",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Loop": {
          "Name": "Loop",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Priority": {
          "Name": "Priority",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AnimationPriority"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "AnimationClipProvider": {
      "Name": "AnimationClipProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AnimationController": {
      "Name": "AnimationController",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AnimationFromVideoCreatorService": {
      "Name": "AnimationFromVideoCreatorService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AnimationFromVideoCreatorStudioService": {
      "Name": "AnimationFromVideoCreatorStudioService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AnimationRigData": {
      "Name": "AnimationRigData",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AnimationStreamTrack": {
      "Name": "AnimationStreamTrack",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "IsPlaying": {
          "Name": "IsPlaying",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Priority": {
          "Name": "Priority",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AnimationPriority"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WeightCurrent": {
          "Name": "WeightCurrent",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WeightTarget": {
          "Name": "WeightTarget",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "AnimationTrack": {
      "Name": "AnimationTrack",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Animation": {
          "Name": "Animation",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsPlaying": {
          "Name": "IsPlaying",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Length": {
          "Name": "Length",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Looped": {
          "Name": "Looped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Priority": {
          "Name": "Priority",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AnimationPriority"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Speed": {
          "Name": "Speed",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TimePosition": {
          "Name": "TimePosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WeightCurrent": {
          "Name": "WeightCurrent",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WeightTarget": {
          "Name": "WeightTarget",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Animator": {
      "Name": "Animator",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "AppStorageService": {
      "Name": "AppStorageService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "LocalStorageService",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AppUpdateService": {
      "Name": "AppUpdateService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ArcHandles": {
      "Name": "ArcHandles",
      "Tags": [],
      "Superclass": "HandlesBase",
      "Properties": {
        "Axes": {
          "Name": "Axes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Axes"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Axes": {
          "Axes": [
            "X",
            "Y",
            "Z"
          ]
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "AssetCounterService": {
      "Name": "AssetCounterService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AssetDeliveryProxy": {
      "Name": "AssetDeliveryProxy",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AssetImportService": {
      "Name": "AssetImportService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AssetManagerService": {
      "Name": "AssetManagerService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AssetService": {
      "Name": "AssetService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Atmosphere": {
      "Name": "Atmosphere",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Decay": {
          "Name": "Decay",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Density": {
          "Name": "Density",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Glare": {
          "Name": "Glare",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Haze": {
          "Name": "Haze",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Offset": {
          "Name": "Offset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Color3": [
            0.7843,
            0.6667,
            0.4235
          ]
        },
        "Decay": {
          "Color3": [
            0.3608,
            0.2353,
            0.0549
          ]
        },
        "Density": {
          "Float32": 0.395
        },
        "Glare": {
          "Float32": 0.0
        },
        "Haze": {
          "Float32": 0.0
        },
        "Offset": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Attachment": {
      "Name": "Attachment",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Axis": {
          "Name": "Axis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Orientation": {
          "Name": "Orientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Rotation": {
          "Name": "Rotation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SecondaryAxis": {
          "Name": "SecondaryAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Visible": {
          "Name": "Visible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WorldAxis": {
          "Name": "WorldAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WorldCFrame": {
          "Name": "WorldCFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WorldOrientation": {
          "Name": "WorldOrientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WorldPosition": {
          "Name": "WorldPosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WorldRotation": {
          "Name": "WorldRotation",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WorldSecondaryAxis": {
          "Name": "WorldSecondaryAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "AvatarEditorService": {
      "Name": "AvatarEditorService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "AvatarImportService": {
      "Name": "AvatarImportService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Backpack": {
      "Name": "Backpack",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BackpackItem": {
      "Name": "BackpackItem",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "TextureId": {
          "Name": "TextureId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "BadgeService": {
      "Name": "BadgeService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "BallSocketConstraint": {
      "Name": "BallSocketConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxFrictionTorque": {
          "Name": "MaxFrictionTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Restitution": {
          "Name": "Restitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TwistLimitsEnabled": {
          "Name": "TwistLimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TwistLowerAngle": {
          "Name": "TwistLowerAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TwistUpperAngle": {
          "Name": "TwistUpperAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UpperAngle": {
          "Name": "UpperAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 1009
        },
        "Enabled": {
          "Bool": true
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "Radius": {
          "Float32": 0.15
        },
        "Restitution": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TwistLimitsEnabled": {
          "Bool": false
        },
        "TwistLowerAngle": {
          "Float32": -45.0
        },
        "TwistUpperAngle": {
          "Float32": 45.0
        },
        "UpperAngle": {
          "Float32": 45.0
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "BasePart": {
      "Name": "BasePart",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "PVInstance",
      "Properties": {
        "Anchored": {
          "Name": "Anchored",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AssemblyAngularVelocity": {
          "Name": "AssemblyAngularVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AssemblyCenterOfMass": {
          "Name": "AssemblyCenterOfMass",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AssemblyLinearVelocity": {
          "Name": "AssemblyLinearVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AssemblyMass": {
          "Name": "AssemblyMass",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AssemblyRootPart": {
          "Name": "AssemblyRootPart",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "BackParamA": {
          "Name": "BackParamA",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BackParamB": {
          "Name": "BackParamB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BackSurface": {
          "Name": "BackSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BackSurfaceInput": {
          "Name": "BackSurfaceInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InputType"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BottomParamA": {
          "Name": "BottomParamA",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BottomParamB": {
          "Name": "BottomParamB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BottomSurface": {
          "Name": "BottomSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BottomSurfaceInput": {
          "Name": "BottomSurfaceInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InputType"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BrickColor": {
          "Name": "BrickColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Color"
            }
          }
        },
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanCollide": {
          "Name": "CanCollide",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanQuery": {
          "Name": "CanQuery",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanTouch": {
          "Name": "CanTouch",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CastShadow": {
          "Name": "CastShadow",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CenterOfMass": {
          "Name": "CenterOfMass",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CollisionGroupId": {
          "Name": "CollisionGroupId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CollisionGroups": {
          "Name": "CollisionGroups",
          "Scriptability": "Custom",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "Color3uint8"
              }
            }
          }
        },
        "Color3uint8": {
          "Name": "Color3uint8",
          "Scriptability": "None",
          "DataType": {
            "Value": "Color3uint8"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Color"
            }
          }
        },
        "CustomPhysicalProperties": {
          "Name": "CustomPhysicalProperties",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "PhysicalProperties"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Elasticity": {
          "Name": "Elasticity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Friction": {
          "Name": "Friction",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FrontParamA": {
          "Name": "FrontParamA",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FrontParamB": {
          "Name": "FrontParamB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FrontSurface": {
          "Name": "FrontSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FrontSurfaceInput": {
          "Name": "FrontSurfaceInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InputType"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftParamA": {
          "Name": "LeftParamA",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftParamB": {
          "Name": "LeftParamB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftSurface": {
          "Name": "LeftSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftSurfaceInput": {
          "Name": "LeftSurfaceInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InputType"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LocalTransparencyModifier": {
          "Name": "LocalTransparencyModifier",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Locked": {
          "Name": "Locked",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Mass": {
          "Name": "Mass",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Massless": {
          "Name": "Massless",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Material": {
          "Name": "Material",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "Material"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaterialVariant": {
          "Name": "MaterialVariant",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Orientation": {
          "Name": "Orientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PivotOffset": {
          "Name": "PivotOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ReceiveAge": {
          "Name": "ReceiveAge",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Reflectance": {
          "Name": "Reflectance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ResizeIncrement": {
          "Name": "ResizeIncrement",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ResizeableFaces": {
          "Name": "ResizeableFaces",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Faces"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightParamA": {
          "Name": "RightParamA",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightParamB": {
          "Name": "RightParamB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightSurface": {
          "Name": "RightSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightSurfaceInput": {
          "Name": "RightSurfaceInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InputType"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RootPriority": {
          "Name": "RootPriority",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RotVelocity": {
          "Name": "RotVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rotation": {
          "Name": "Rotation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "size"
              }
            }
          }
        },
        "SpecificGravity": {
          "Name": "SpecificGravity",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TopParamA": {
          "Name": "TopParamA",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TopParamB": {
          "Name": "TopParamB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TopSurface": {
          "Name": "TopSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TopSurfaceInput": {
          "Name": "TopSurfaceInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InputType"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Velocity": {
          "Name": "Velocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "brickColor": {
          "Name": "brickColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Color"
            }
          }
        },
        "size": {
          "Name": "size",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Size"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "BasePlayerGui": {
      "Name": "BasePlayerGui",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "BaseScript": {
      "Name": "BaseScript",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "LuaSourceContainer",
      "Properties": {
        "Disabled": {
          "Name": "Disabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LinkedSource": {
          "Name": "LinkedSource",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "BaseWrap": {
      "Name": "BaseWrap",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CageMeshId": {
          "Name": "CageMeshId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CageOrigin": {
          "Name": "CageOrigin",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CageOriginWorld": {
          "Name": "CageOriginWorld",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HSRAssetId": {
          "Name": "HSRAssetId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImportOrigin": {
          "Name": "ImportOrigin",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImportOriginWorld": {
          "Name": "ImportOriginWorld",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Beam": {
      "Name": "Beam",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Attachment0": {
          "Name": "Attachment0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Attachment1": {
          "Name": "Attachment1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "ColorSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurveSize0": {
          "Name": "CurveSize0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurveSize1": {
          "Name": "CurveSize1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FaceCamera": {
          "Name": "FaceCamera",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightEmission": {
          "Name": "LightEmission",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightInfluence": {
          "Name": "LightInfluence",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Segments": {
          "Name": "Segments",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Texture": {
          "Name": "Texture",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureLength": {
          "Name": "TextureLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureMode": {
          "Name": "TextureMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextureMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureSpeed": {
          "Name": "TextureSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Width0": {
          "Name": "Width0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Width1": {
          "Name": "Width1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ZOffset": {
          "Name": "ZOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "Color": {
          "ColorSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              },
              {
                "time": 1.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              }
            ]
          }
        },
        "CurveSize0": {
          "Float32": 0.0
        },
        "CurveSize1": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "FaceCamera": {
          "Bool": false
        },
        "LightEmission": {
          "Float32": 0.0
        },
        "LightInfluence": {
          "Float32": 0.0
        },
        "Segments": {
          "Int32": 10
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Texture": {
          "Content": ""
        },
        "TextureLength": {
          "Float32": 1.0
        },
        "TextureMode": {
          "Enum": 0
        },
        "TextureSpeed": {
          "Float32": 1.0
        },
        "Transparency": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 0.5,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 0.5,
                "envelope": 0.0
              }
            ]
          }
        },
        "Width0": {
          "Float32": 1.0
        },
        "Width1": {
          "Float32": 1.0
        },
        "ZOffset": {
          "Float32": 0.0
        }
      }
    },
    "BevelMesh": {
      "Name": "BevelMesh",
      "Tags": [
        "Deprecated",
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "DataModelMesh",
      "Properties": {},
      "DefaultProperties": {}
    },
    "BillboardGui": {
      "Name": "BillboardGui",
      "Tags": [],
      "Superclass": "LayerCollector",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Adornee": {
          "Name": "Adornee",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AlwaysOnTop": {
          "Name": "AlwaysOnTop",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClipsDescendants": {
          "Name": "ClipsDescendants",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentDistance": {
          "Name": "CurrentDistance",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DistanceLowerLimit": {
          "Name": "DistanceLowerLimit",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DistanceStep": {
          "Name": "DistanceStep",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DistanceUpperLimit": {
          "Name": "DistanceUpperLimit",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ExtentsOffset": {
          "Name": "ExtentsOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ExtentsOffsetWorldSpace": {
          "Name": "ExtentsOffsetWorldSpace",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightInfluence": {
          "Name": "LightInfluence",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxDistance": {
          "Name": "MaxDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlayerToHideFrom": {
          "Name": "PlayerToHideFrom",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SizeOffset": {
          "Name": "SizeOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsOffset": {
          "Name": "StudsOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsOffsetWorldSpace": {
          "Name": "StudsOffsetWorldSpace",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "Brightness": {
          "Float32": 1.0
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "DistanceLowerLimit": {
          "Float32": 0.0
        },
        "DistanceStep": {
          "Float32": 0.0
        },
        "DistanceUpperLimit": {
          "Float32": -1.0
        },
        "Enabled": {
          "Bool": true
        },
        "ExtentsOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "ExtentsOffsetWorldSpace": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "LightInfluence": {
          "Float32": 0.0
        },
        "MaxDistance": {
          "Float32": null
        },
        "ResetOnSpawn": {
          "Bool": true
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeOffset": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StudsOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "StudsOffsetWorldSpace": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Tags": {
          "BinaryString": ""
        },
        "ZIndexBehavior": {
          "Enum": 0
        }
      }
    },
    "BinaryStringValue": {
      "Name": "BinaryStringValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BindableEvent": {
      "Name": "BindableEvent",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BindableFunction": {
      "Name": "BindableFunction",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BlockMesh": {
      "Name": "BlockMesh",
      "Tags": [],
      "Superclass": "BevelMesh",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Offset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Scale": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "VertexColor": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        }
      }
    },
    "BloomEffect": {
      "Name": "BloomEffect",
      "Tags": [],
      "Superclass": "PostEffect",
      "Properties": {
        "Intensity": {
          "Name": "Intensity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Threshold": {
          "Name": "Threshold",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "Intensity": {
          "Float32": 0.4
        },
        "Size": {
          "Float32": 24.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Threshold": {
          "Float32": 0.95
        }
      }
    },
    "BlurEffect": {
      "Name": "BlurEffect",
      "Tags": [],
      "Superclass": "PostEffect",
      "Properties": {
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "Size": {
          "Float32": 24.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BodyAngularVelocity": {
      "Name": "BodyAngularVelocity",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "AngularVelocity": {
          "Name": "AngularVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxTorque": {
          "Name": "MaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "P": {
          "Name": "P",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "angularvelocity": {
          "Name": "angularvelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "AngularVelocity"
            }
          }
        },
        "maxTorque": {
          "Name": "maxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "MaxTorque"
            }
          }
        }
      },
      "DefaultProperties": {
        "AngularVelocity": {
          "Vector3": [
            0.0,
            2.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "MaxTorque": {
          "Vector3": [
            4000.0,
            4000.0,
            4000.0
          ]
        },
        "P": {
          "Float32": 1250.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BodyColors": {
      "Name": "BodyColors",
      "Tags": [],
      "Superclass": "CharacterAppearance",
      "Properties": {
        "HeadColor": {
          "Name": "HeadColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HeadColor3": {
          "Name": "HeadColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftArmColor": {
          "Name": "LeftArmColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftArmColor3": {
          "Name": "LeftArmColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftLegColor": {
          "Name": "LeftLegColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftLegColor3": {
          "Name": "LeftLegColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightArmColor": {
          "Name": "RightArmColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightArmColor3": {
          "Name": "RightArmColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightLegColor": {
          "Name": "RightLegColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightLegColor3": {
          "Name": "RightLegColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TorsoColor": {
          "Name": "TorsoColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TorsoColor3": {
          "Name": "TorsoColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "HeadColor3": {
          "Color3": [
            0.9921569,
            0.9176471,
            0.5529412
          ]
        },
        "LeftArmColor3": {
          "Color3": [
            0.9921569,
            0.9176471,
            0.5529412
          ]
        },
        "LeftLegColor3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "RightArmColor3": {
          "Color3": [
            0.9921569,
            0.9176471,
            0.5529412
          ]
        },
        "RightLegColor3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TorsoColor3": {
          "Color3": [
            0.15686275,
            0.49803925,
            0.2784314
          ]
        }
      }
    },
    "BodyForce": {
      "Name": "BodyForce",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "Force": {
          "Name": "Force",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "force": {
          "Name": "force",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Force"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Force": {
          "Vector3": [
            0.0,
            1.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BodyGyro": {
      "Name": "BodyGyro",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "D": {
          "Name": "D",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxTorque": {
          "Name": "MaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "P": {
          "Name": "P",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "cframe": {
          "Name": "cframe",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "CFrame"
            }
          }
        },
        "maxTorque": {
          "Name": "maxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "MaxTorque"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "D": {
          "Float32": 500.0
        },
        "MaxTorque": {
          "Vector3": [
            400000.0,
            0.0,
            400000.0
          ]
        },
        "P": {
          "Float32": 3000.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BodyMover": {
      "Name": "BodyMover",
      "Tags": [
        "Deprecated",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "BodyPosition": {
      "Name": "BodyPosition",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "D": {
          "Name": "D",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxForce": {
          "Name": "MaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "P": {
          "Name": "P",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "maxForce": {
          "Name": "maxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "MaxForce"
            }
          }
        },
        "position": {
          "Name": "position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Position"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "D": {
          "Float32": 1250.0
        },
        "MaxForce": {
          "Vector3": [
            4000.0,
            4000.0,
            4000.0
          ]
        },
        "P": {
          "Float32": 10000.0
        },
        "Position": {
          "Vector3": [
            0.0,
            50.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BodyThrust": {
      "Name": "BodyThrust",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "Force": {
          "Name": "Force",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Location": {
          "Name": "Location",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "force": {
          "Name": "force",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Force"
            }
          }
        },
        "location": {
          "Name": "location",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Location"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Force": {
          "Vector3": [
            0.0,
            1.0,
            0.0
          ]
        },
        "Location": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "BodyVelocity": {
      "Name": "BodyVelocity",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "MaxForce": {
          "Name": "MaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "P": {
          "Name": "P",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Velocity": {
          "Name": "Velocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "maxForce": {
          "Name": "maxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "MaxForce"
            }
          }
        },
        "velocity": {
          "Name": "velocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Velocity"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MaxForce": {
          "Vector3": [
            4000.0,
            4000.0,
            4000.0
          ]
        },
        "P": {
          "Float32": 1250.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Velocity": {
          "Vector3": [
            0.0,
            2.0,
            0.0
          ]
        }
      }
    },
    "Bone": {
      "Name": "Bone",
      "Tags": [],
      "Superclass": "Attachment",
      "Properties": {
        "IsCFrameDriven": {
          "Name": "IsCFrameDriven",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Transform": {
          "Name": "Transform",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TransformedCFrame": {
          "Name": "TransformedCFrame",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TransformedWorldCFrame": {
          "Name": "TransformedWorldCFrame",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "BoolValue": {
      "Name": "BoolValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Bool": false
        }
      }
    },
    "BoxHandleAdornment": {
      "Name": "BoxHandleAdornment",
      "Tags": [],
      "Superclass": "HandleAdornment",
      "Properties": {
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AdornCullingMode": {
          "Enum": 0
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Size": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "SizeRelativeOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": -1
        }
      }
    },
    "Breakpoint": {
      "Name": "Breakpoint",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Condition": {
          "Name": "Condition",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ContinueExecution": {
          "Name": "ContinueExecution",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Id": {
          "Name": "Id",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Line": {
          "Name": "Line",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LogMessage": {
          "Name": "LogMessage",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MetaBreakpointId": {
          "Name": "MetaBreakpointId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Script": {
          "Name": "Script",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Verified": {
          "Name": "Verified",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "BreakpointManager": {
      "Name": "BreakpointManager",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "BrickColorValue": {
      "Name": "BrickColorValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Int32": 194
        }
      }
    },
    "BrowserService": {
      "Name": "BrowserService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "BulkImportService": {
      "Name": "BulkImportService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CFrameValue": {
      "Name": "CFrameValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        }
      }
    },
    "CSGDictionaryService": {
      "Name": "CSGDictionaryService",
      "Tags": [
        "Service"
      ],
      "Superclass": "FlyweightService",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CacheableContentProvider": {
      "Name": "CacheableContentProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CalloutService": {
      "Name": "CalloutService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Camera": {
      "Name": "Camera",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraSubject": {
          "Name": "CameraSubject",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraType": {
          "Name": "CameraType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "CameraType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CoordinateFrame": {
          "Name": "CoordinateFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "CFrame"
            }
          }
        },
        "DiagonalFieldOfView": {
          "Name": "DiagonalFieldOfView",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FieldOfView": {
          "Name": "FieldOfView",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FieldOfViewMode": {
          "Name": "FieldOfViewMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FieldOfViewMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Focus": {
          "Name": "Focus",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HeadLocked": {
          "Name": "HeadLocked",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HeadScale": {
          "Name": "HeadScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxAxisFieldOfView": {
          "Name": "MaxAxisFieldOfView",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "NearPlaneZ": {
          "Name": "NearPlaneZ",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ViewportSize": {
          "Name": "ViewportSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "focus": {
          "Name": "focus",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Focus"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              20.0,
              20.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                -0.0
              ],
              [
                -0.0,
                0.7071068,
                0.7071068
              ],
              [
                0.0,
                -0.7071068,
                0.7071068
              ]
            ]
          }
        },
        "CameraType": {
          "Enum": 0
        },
        "FieldOfView": {
          "Float32": 70.0
        },
        "FieldOfViewMode": {
          "Enum": 0
        },
        "Focus": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              -5.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "HeadLocked": {
          "Bool": true
        },
        "HeadScale": {
          "Float32": 1.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CanvasGroup": {
      "Name": "CanvasGroup",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "GuiObject",
      "Properties": {
        "GroupColor3": {
          "Name": "GroupColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GroupTransparency": {
          "Name": "GroupTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "GroupColor3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "GroupTransparency": {
          "Float32": 0.0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "CatalogPages": {
      "Name": "CatalogPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ChangeHistoryService": {
      "Name": "ChangeHistoryService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ChannelSelectorSoundEffect": {
      "Name": "ChannelSelectorSoundEffect",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "CustomDspSoundEffect",
      "Properties": {
        "Channel": {
          "Name": "Channel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Channel": {
          "Int32": 1
        },
        "Enabled": {
          "Bool": true
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CharacterAppearance": {
      "Name": "CharacterAppearance",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CharacterMesh": {
      "Name": "CharacterMesh",
      "Tags": [],
      "Superclass": "CharacterAppearance",
      "Properties": {
        "BaseTextureId": {
          "Name": "BaseTextureId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BodyPart": {
          "Name": "BodyPart",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "BodyPart"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshId": {
          "Name": "MeshId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OverlayTextureId": {
          "Name": "OverlayTextureId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BaseTextureId": {
          "Int64": 0
        },
        "BodyPart": {
          "Enum": 0
        },
        "MeshId": {
          "Int64": 0
        },
        "OverlayTextureId": {
          "Int64": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Chat": {
      "Name": "Chat",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "BubbleChatEnabled": {
          "Name": "BubbleChatEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LoadDefaultChat": {
          "Name": "LoadDefaultChat",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BubbleChatEnabled": {
          "Bool": false
        },
        "LoadDefaultChat": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ChatInputBarConfiguration": {
      "Name": "ChatInputBarConfiguration",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "TextChatConfigurations",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetTextChannel": {
          "Name": "TargetTextChannel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ChatWindowConfiguration": {
      "Name": "ChatWindowConfiguration",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "TextChatConfigurations",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ChorusSoundEffect": {
      "Name": "ChorusSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Depth": {
          "Name": "Depth",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Mix": {
          "Name": "Mix",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rate": {
          "Name": "Rate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Depth": {
          "Float32": 0.15
        },
        "Enabled": {
          "Bool": true
        },
        "Mix": {
          "Float32": 0.5
        },
        "Priority": {
          "Int32": 0
        },
        "Rate": {
          "Float32": 0.5
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ClickDetector": {
      "Name": "ClickDetector",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "CursorIcon": {
          "Name": "CursorIcon",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxActivationDistance": {
          "Name": "MaxActivationDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CursorIcon": {
          "Content": ""
        },
        "MaxActivationDistance": {
          "Float32": 32.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ClientReplicator": {
      "Name": "ClientReplicator",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "NetworkReplicator",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Clothing": {
      "Name": "Clothing",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "CharacterAppearance",
      "Properties": {
        "Color3": {
          "Name": "Color3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Clouds": {
      "Name": "Clouds",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Cover": {
          "Name": "Cover",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Density": {
          "Name": "Density",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Cover": {
          "Float32": 0.5
        },
        "Density": {
          "Float32": 0.7
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ClusterPacketCache": {
      "Name": "ClusterPacketCache",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CollectionService": {
      "Name": "CollectionService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Color3Value": {
      "Name": "Color3Value",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "ColorCorrectionEffect": {
      "Name": "ColorCorrectionEffect",
      "Tags": [],
      "Superclass": "PostEffect",
      "Properties": {
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Contrast": {
          "Name": "Contrast",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Saturation": {
          "Name": "Saturation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TintColor": {
          "Name": "TintColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 0.0
        },
        "Contrast": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "Saturation": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TintColor": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        }
      }
    },
    "CommandInstance": {
      "Name": "CommandInstance",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllowGUIAccessPoints": {
          "Name": "AllowGUIAccessPoints",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Checked": {
          "Name": "Checked",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DefaultShortcut": {
          "Name": "DefaultShortcut",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DisplayName": {
          "Name": "DisplayName",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Icon": {
          "Name": "Icon",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Name": {
          "Name": "Name",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Permission": {
          "Name": "Permission",
          "Scriptability": "None",
          "DataType": {
            "Enum": "CommandPermission"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "StatusTip": {
          "Name": "StatusTip",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "CommandService": {
      "Name": "CommandService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CompressorSoundEffect": {
      "Name": "CompressorSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Attack": {
          "Name": "Attack",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GainMakeup": {
          "Name": "GainMakeup",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Ratio": {
          "Name": "Ratio",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Release": {
          "Name": "Release",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SideChain": {
          "Name": "SideChain",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Threshold": {
          "Name": "Threshold",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attack": {
          "Float32": 0.1
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "GainMakeup": {
          "Float32": 0.0
        },
        "Priority": {
          "Int32": 0
        },
        "Ratio": {
          "Float32": 40.0
        },
        "Release": {
          "Float32": 0.1
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Threshold": {
          "Float32": -40.0
        }
      }
    },
    "ConeHandleAdornment": {
      "Name": "ConeHandleAdornment",
      "Tags": [],
      "Superclass": "HandleAdornment",
      "Properties": {
        "Height": {
          "Name": "Height",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AdornCullingMode": {
          "Enum": 0
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Height": {
          "Float32": 2.0
        },
        "Radius": {
          "Float32": 0.5
        },
        "SizeRelativeOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": -1
        }
      }
    },
    "Configuration": {
      "Name": "Configuration",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ConfigureServerService": {
      "Name": "ConfigureServerService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Constraint": {
      "Name": "Constraint",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Attachment0": {
          "Name": "Attachment0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Attachment1": {
          "Name": "Attachment1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Visible": {
          "Name": "Visible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ContentProvider": {
      "Name": "ContentProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "BaseUrl": {
          "Name": "BaseUrl",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RequestQueueSize": {
          "Name": "RequestQueueSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ContextActionService": {
      "Name": "ContextActionService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Controller": {
      "Name": "Controller",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ControllerService": {
      "Name": "ControllerService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CookiesService": {
      "Name": "CookiesService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CoreGui": {
      "Name": "CoreGui",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "BasePlayerGui",
      "Properties": {
        "SelectionImageObject": {
          "Name": "SelectionImageObject",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Version": {
          "Name": "Version",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "CorePackages": {
      "Name": "CorePackages",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CoreScript": {
      "Name": "CoreScript",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "BaseScript",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CoreScriptSyncService": {
      "Name": "CoreScriptSyncService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CornerWedgePart": {
      "Name": "CornerWedgePart",
      "Tags": [],
      "Superclass": "BasePart",
      "Properties": {},
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 0
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            2.0,
            2.0,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 0
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "CrossDMScriptChangeListener": {
      "Name": "CrossDMScriptChangeListener",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CurveAnimation": {
      "Name": "CurveAnimation",
      "Tags": [],
      "Superclass": "AnimationClip",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Loop": {
          "Bool": true
        },
        "Priority": {
          "Enum": 2
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CustomDspSoundEffect": {
      "Name": "CustomDspSoundEffect",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "SoundEffect",
      "Properties": {},
      "DefaultProperties": {}
    },
    "CustomEvent": {
      "Name": "CustomEvent",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CustomEventReceiver": {
      "Name": "CustomEventReceiver",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Source": {
          "Name": "Source",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "CylinderHandleAdornment": {
      "Name": "CylinderHandleAdornment",
      "Tags": [],
      "Superclass": "HandleAdornment",
      "Properties": {
        "Angle": {
          "Name": "Angle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Height": {
          "Name": "Height",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InnerRadius": {
          "Name": "InnerRadius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AdornCullingMode": {
          "Enum": 0
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Angle": {
          "Float32": 360.0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Height": {
          "Float32": 1.0
        },
        "InnerRadius": {
          "Float32": 0.0
        },
        "Radius": {
          "Float32": 1.0
        },
        "SizeRelativeOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": -1
        }
      }
    },
    "CylinderMesh": {
      "Name": "CylinderMesh",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BevelMesh",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Offset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Scale": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "VertexColor": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        }
      }
    },
    "CylindricalConstraint": {
      "Name": "CylindricalConstraint",
      "Tags": [],
      "Superclass": "SlidingBallConstraint",
      "Properties": {
        "AngularActuatorType": {
          "Name": "AngularActuatorType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularLimitsEnabled": {
          "Name": "AngularLimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularResponsiveness": {
          "Name": "AngularResponsiveness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularRestitution": {
          "Name": "AngularRestitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularSpeed": {
          "Name": "AngularSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularVelocity": {
          "Name": "AngularVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentAngle": {
          "Name": "CurrentAngle",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "InclinationAngle": {
          "Name": "InclinationAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LowerAngle": {
          "Name": "LowerAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MotorMaxAngularAcceleration": {
          "Name": "MotorMaxAngularAcceleration",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MotorMaxTorque": {
          "Name": "MotorMaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RotationAxisVisible": {
          "Name": "RotationAxisVisible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ServoMaxTorque": {
          "Name": "ServoMaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetAngle": {
          "Name": "TargetAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UpperAngle": {
          "Name": "UpperAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WorldRotationAxis": {
          "Name": "WorldRotationAxis",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "ActuatorType": {
          "Enum": 0
        },
        "AngularActuatorType": {
          "Enum": 0
        },
        "AngularLimitsEnabled": {
          "Bool": false
        },
        "AngularResponsiveness": {
          "Float32": 45.0
        },
        "AngularRestitution": {
          "Float32": 0.0
        },
        "AngularSpeed": {
          "Float32": 0.0
        },
        "AngularVelocity": {
          "Float32": 0.0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 1009
        },
        "Enabled": {
          "Bool": true
        },
        "InclinationAngle": {
          "Float32": 0.0
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "LinearResponsiveness": {
          "Float32": 45.0
        },
        "LowerAngle": {
          "Float32": -45.0
        },
        "LowerLimit": {
          "Float32": 0.0
        },
        "MotorMaxAcceleration": {
          "Float32": null
        },
        "MotorMaxAngularAcceleration": {
          "Float32": null
        },
        "MotorMaxForce": {
          "Float32": 0.0
        },
        "MotorMaxTorque": {
          "Float32": 0.0
        },
        "Restitution": {
          "Float32": 0.0
        },
        "RotationAxisVisible": {
          "Bool": false
        },
        "ServoMaxForce": {
          "Float32": 0.0
        },
        "ServoMaxTorque": {
          "Float32": 0.0
        },
        "Size": {
          "Float32": 0.15
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Speed": {
          "Float32": 0.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "TargetAngle": {
          "Float32": 0.0
        },
        "TargetPosition": {
          "Float32": 0.0
        },
        "UpperAngle": {
          "Float32": 45.0
        },
        "UpperLimit": {
          "Float32": 5.0
        },
        "Velocity": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "DataModel": {
      "Name": "DataModel",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "ServiceProvider",
      "Properties": {
        "CreatorId": {
          "Name": "CreatorId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CreatorType": {
          "Name": "CreatorType",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "CreatorType"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GameId": {
          "Name": "GameId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GearGenreSetting": {
          "Name": "GearGenreSetting",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "GearGenreSetting"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Genre": {
          "Name": "Genre",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "Genre"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsSFFlagsLoaded": {
          "Name": "IsSFFlagsLoaded",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "JobId": {
          "Name": "JobId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlaceId": {
          "Name": "PlaceId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlaceVersion": {
          "Name": "PlaceVersion",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PrivateServerId": {
          "Name": "PrivateServerId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PrivateServerOwnerId": {
          "Name": "PrivateServerOwnerId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VIPServerId": {
          "Name": "VIPServerId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VIPServerOwnerId": {
          "Name": "VIPServerOwnerId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Workspace": {
          "Name": "Workspace",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "lighting": {
          "Name": "lighting",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "workspace": {
          "Name": "workspace",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataModelMesh": {
      "Name": "DataModelMesh",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Offset": {
          "Name": "Offset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Scale": {
          "Name": "Scale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VertexColor": {
          "Name": "VertexColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataModelPatchService": {
      "Name": "DataModelPatchService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataModelSession": {
      "Name": "DataModelSession",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CurrentDataModelType": {
          "Name": "CurrentDataModelType",
          "Scriptability": "None",
          "DataType": {
            "Enum": "StudioDataModelType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SessionId": {
          "Name": "SessionId",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataStore": {
      "Name": "DataStore",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "GlobalDataStore",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataStoreIncrementOptions": {
      "Name": "DataStoreIncrementOptions",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataStoreInfo": {
      "Name": "DataStoreInfo",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CreatedTime": {
          "Name": "CreatedTime",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataStoreName": {
          "Name": "DataStoreName",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UpdatedTime": {
          "Name": "UpdatedTime",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataStoreKey": {
      "Name": "DataStoreKey",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "KeyName": {
          "Name": "KeyName",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataStoreKeyInfo": {
      "Name": "DataStoreKeyInfo",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CreatedTime": {
          "Name": "CreatedTime",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UpdatedTime": {
          "Name": "UpdatedTime",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Version": {
          "Name": "Version",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataStoreKeyPages": {
      "Name": "DataStoreKeyPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataStoreListingPages": {
      "Name": "DataStoreListingPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataStoreObjectVersionInfo": {
      "Name": "DataStoreObjectVersionInfo",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CreatedTime": {
          "Name": "CreatedTime",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsDeleted": {
          "Name": "IsDeleted",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Version": {
          "Name": "Version",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataStoreOptions": {
      "Name": "DataStoreOptions",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllScopes": {
          "Name": "AllScopes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DataStorePages": {
      "Name": "DataStorePages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataStoreService": {
      "Name": "DataStoreService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AutomaticRetry": {
          "Name": "AutomaticRetry",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LegacyNamingScheme": {
          "Name": "LegacyNamingScheme",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutomaticRetry": {
          "Bool": true
        },
        "LegacyNamingScheme": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "DataStoreSetOptions": {
      "Name": "DataStoreSetOptions",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DataStoreVersionPages": {
      "Name": "DataStoreVersionPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Debris": {
      "Name": "Debris",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "MaxItems": {
          "Name": "MaxItems",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MaxItems": {
          "Int32": 1000
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "DebugSettings": {
      "Name": "DebugSettings",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Settings"
      ],
      "Superclass": "Instance",
      "Properties": {
        "DataModel": {
          "Name": "DataModel",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "InstanceCount": {
          "Name": "InstanceCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsScriptStackTracingEnabled": {
          "Name": "IsScriptStackTracingEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "JobCount": {
          "Name": "JobCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlayerCount": {
          "Name": "PlayerCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ReportSoundWarnings": {
          "Name": "ReportSoundWarnings",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RobloxVersion": {
          "Name": "RobloxVersion",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TickCountPreciseOverride": {
          "Name": "TickCountPreciseOverride",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TickCountSampleMethod"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggablePluginWatcher": {
      "Name": "DebuggablePluginWatcher",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DebuggerBreakpoint": {
      "Name": "DebuggerBreakpoint",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Condition": {
          "Name": "Condition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ContinueExecution": {
          "Name": "ContinueExecution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsEnabled": {
          "Name": "IsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Line": {
          "Name": "Line",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LogExpression": {
          "Name": "LogExpression",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "isContextDependentBreakpoint": {
          "Name": "isContextDependentBreakpoint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggerConnection": {
      "Name": "DebuggerConnection",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ErrorMessage": {
          "Name": "ErrorMessage",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HasError": {
          "Name": "HasError",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Id": {
          "Name": "Id",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsPaused": {
          "Name": "IsPaused",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggerConnectionManager": {
      "Name": "DebuggerConnectionManager",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Timeout": {
          "Name": "Timeout",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggerLuaResponse": {
      "Name": "DebuggerLuaResponse",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "IsError": {
          "Name": "IsError",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsSuccess": {
          "Name": "IsSuccess",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Message": {
          "Name": "Message",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RequestId": {
          "Name": "RequestId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Status": {
          "Name": "Status",
          "Scriptability": "None",
          "DataType": {
            "Enum": "DebuggerStatus"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggerManager": {
      "Name": "DebuggerManager",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "DebuggingEnabled": {
          "Name": "DebuggingEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggerUIService": {
      "Name": "DebuggerUIService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DebuggerVariable": {
      "Name": "DebuggerVariable",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Name": {
          "Name": "Name",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Populated": {
          "Name": "Populated",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Type": {
          "Name": "Type",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Value": {
          "Name": "Value",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VariableId": {
          "Name": "VariableId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VariablesCount": {
          "Name": "VariablesCount",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DebuggerWatch": {
      "Name": "DebuggerWatch",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Expression": {
          "Name": "Expression",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Decal": {
      "Name": "Decal",
      "Tags": [],
      "Superclass": "FaceInstance",
      "Properties": {
        "Color3": {
          "Name": "Color3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LocalTransparencyModifier": {
          "Name": "LocalTransparencyModifier",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Shiny": {
          "Name": "Shiny",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Specular": {
          "Name": "Specular",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Texture": {
          "Name": "Texture",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ZIndex": {
          "Name": "ZIndex",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Face": {
          "Enum": 5
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Texture": {
          "Content": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "DepthOfFieldEffect": {
      "Name": "DepthOfFieldEffect",
      "Tags": [],
      "Superclass": "PostEffect",
      "Properties": {
        "FarIntensity": {
          "Name": "FarIntensity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FocusDistance": {
          "Name": "FocusDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InFocusRadius": {
          "Name": "InFocusRadius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NearIntensity": {
          "Name": "NearIntensity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "FarIntensity": {
          "Float32": 0.75
        },
        "FocusDistance": {
          "Float32": 0.05
        },
        "InFocusRadius": {
          "Float32": 10.0
        },
        "NearIntensity": {
          "Float32": 0.75
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Dialog": {
      "Name": "Dialog",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "BehaviorType": {
          "Name": "BehaviorType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DialogBehaviorType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ConversationDistance": {
          "Name": "ConversationDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GoodbyeChoiceActive": {
          "Name": "GoodbyeChoiceActive",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GoodbyeDialog": {
          "Name": "GoodbyeDialog",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InUse": {
          "Name": "InUse",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "InitialPrompt": {
          "Name": "InitialPrompt",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Purpose": {
          "Name": "Purpose",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DialogPurpose"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Tone": {
          "Name": "Tone",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DialogTone"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TriggerDistance": {
          "Name": "TriggerDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TriggerOffset": {
          "Name": "TriggerOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BehaviorType": {
          "Enum": 0
        },
        "ConversationDistance": {
          "Float32": 25.0
        },
        "GoodbyeChoiceActive": {
          "Bool": true
        },
        "GoodbyeDialog": {
          "String": ""
        },
        "InitialPrompt": {
          "String": ""
        },
        "Purpose": {
          "Enum": 1
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Tone": {
          "Enum": 0
        },
        "TriggerDistance": {
          "Float32": 0.0
        },
        "TriggerOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "DialogChoice": {
      "Name": "DialogChoice",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "GoodbyeChoiceActive": {
          "Name": "GoodbyeChoiceActive",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GoodbyeDialog": {
          "Name": "GoodbyeDialog",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ResponseDialog": {
          "Name": "ResponseDialog",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UserDialog": {
          "Name": "UserDialog",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "GoodbyeChoiceActive": {
          "Bool": true
        },
        "GoodbyeDialog": {
          "String": ""
        },
        "ResponseDialog": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UserDialog": {
          "String": ""
        }
      }
    },
    "DistortionSoundEffect": {
      "Name": "DistortionSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Level": {
          "Name": "Level",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "Level": {
          "Float32": 0.75
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "DockWidgetPluginGui": {
      "Name": "DockWidgetPluginGui",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "PluginGui",
      "Properties": {
        "HostWidgetWasRestored": {
          "Name": "HostWidgetWasRestored",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DoubleConstrainedValue": {
      "Name": "DoubleConstrainedValue",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "ValueBase",
      "Properties": {
        "ConstrainedValue": {
          "Name": "ConstrainedValue",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxValue": {
          "Name": "MaxValue",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MinValue": {
          "Name": "MinValue",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MaxValue": {
          "Float64": 1.0
        },
        "MinValue": {
          "Float64": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "DraftsService": {
      "Name": "DraftsService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Dragger": {
      "Name": "Dragger",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "DraggerService": {
      "Name": "DraggerService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AlignDraggedObjects": {
          "Name": "AlignDraggedObjects",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AngleSnapEnabled": {
          "Name": "AngleSnapEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AngleSnapIncrement": {
          "Name": "AngleSnapIncrement",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AnimateHover": {
          "Name": "AnimateHover",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CollisionsEnabled": {
          "Name": "CollisionsEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DraggerCoordinateSpace": {
          "Name": "DraggerCoordinateSpace",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "DraggerCoordinateSpace"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DraggerMovementMode": {
          "Name": "DraggerMovementMode",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "DraggerMovementMode"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GeometrySnapColor": {
          "Name": "GeometrySnapColor",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HoverAnimateFrequency": {
          "Name": "HoverAnimateFrequency",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HoverThickness": {
          "Name": "HoverThickness",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "JointsEnabled": {
          "Name": "JointsEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LinearSnapEnabled": {
          "Name": "LinearSnapEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LinearSnapIncrement": {
          "Name": "LinearSnapIncrement",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PivotSnapToGeometry": {
          "Name": "PivotSnapToGeometry",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShowHover": {
          "Name": "ShowHover",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShowPivotIndicator": {
          "Name": "ShowPivotIndicator",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "DynamicRotate": {
      "Name": "DynamicRotate",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "JointInstance",
      "Properties": {
        "BaseAngle": {
          "Name": "BaseAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "EchoSoundEffect": {
      "Name": "EchoSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Delay": {
          "Name": "Delay",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DryLevel": {
          "Name": "DryLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Feedback": {
          "Name": "Feedback",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WetLevel": {
          "Name": "WetLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Delay": {
          "Float32": 1.0
        },
        "DryLevel": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "Feedback": {
          "Float32": 0.5
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "WetLevel": {
          "Float32": 0.0
        }
      }
    },
    "EmotesPages": {
      "Name": "EmotesPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "InventoryPages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "EqualizerSoundEffect": {
      "Name": "EqualizerSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "HighGain": {
          "Name": "HighGain",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LowGain": {
          "Name": "LowGain",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MidGain": {
          "Name": "MidGain",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "HighGain": {
          "Float32": 0.0
        },
        "LowGain": {
          "Float32": -20.0
        },
        "MidGain": {
          "Float32": -10.0
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "EulerRotationCurve": {
      "Name": "EulerRotationCurve",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "RotationOrder": {
          "Name": "RotationOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RotationOrder"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "RotationOrder": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "EventIngestService": {
      "Name": "EventIngestService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Explosion": {
      "Name": "Explosion",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "BlastPressure": {
          "Name": "BlastPressure",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BlastRadius": {
          "Name": "BlastRadius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DestroyJointRadiusPercent": {
          "Name": "DestroyJointRadiusPercent",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ExplosionType": {
          "Name": "ExplosionType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ExplosionType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TimeScale": {
          "Name": "TimeScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Visible": {
          "Name": "Visible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BlastPressure": {
          "Float32": 500000.0
        },
        "BlastRadius": {
          "Float32": 4.0
        },
        "DestroyJointRadiusPercent": {
          "Float32": 1.0
        },
        "ExplosionType": {
          "Enum": 1
        },
        "Position": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TimeScale": {
          "Float32": 1.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "FaceAnimatorService": {
      "Name": "FaceAnimatorService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AudioAnimationEnabled": {
          "Name": "AudioAnimationEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FlipHeadOrientation": {
          "Name": "FlipHeadOrientation",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VideoAnimationEnabled": {
          "Name": "VideoAnimationEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "FaceControls": {
      "Name": "FaceControls",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ChinRaiser": {
          "Name": "ChinRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ChinRaiserUpperLip": {
          "Name": "ChinRaiserUpperLip",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Corrugator": {
          "Name": "Corrugator",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EyesLookDown": {
          "Name": "EyesLookDown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EyesLookLeft": {
          "Name": "EyesLookLeft",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EyesLookRight": {
          "Name": "EyesLookRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EyesLookUp": {
          "Name": "EyesLookUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FlatPucker": {
          "Name": "FlatPucker",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Funneler": {
          "Name": "Funneler",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "JawDrop": {
          "Name": "JawDrop",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "JawLeft": {
          "Name": "JawLeft",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "JawRight": {
          "Name": "JawRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftBrowLowerer": {
          "Name": "LeftBrowLowerer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftCheekPuff": {
          "Name": "LeftCheekPuff",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftCheekRaiser": {
          "Name": "LeftCheekRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftDimpler": {
          "Name": "LeftDimpler",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftEyeClosed": {
          "Name": "LeftEyeClosed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftEyeUpperLidRaiser": {
          "Name": "LeftEyeUpperLidRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftInnerBrowRaiser": {
          "Name": "LeftInnerBrowRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftLipCornerDown": {
          "Name": "LeftLipCornerDown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftLipCornerPuller": {
          "Name": "LeftLipCornerPuller",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftLipStretcher": {
          "Name": "LeftLipStretcher",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftLowerLipDepressor": {
          "Name": "LeftLowerLipDepressor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftNoseWrinkler": {
          "Name": "LeftNoseWrinkler",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftOuterBrowRaiser": {
          "Name": "LeftOuterBrowRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LeftUpperLipRaiser": {
          "Name": "LeftUpperLipRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LipPresser": {
          "Name": "LipPresser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LipsTogether": {
          "Name": "LipsTogether",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LowerLipSuck": {
          "Name": "LowerLipSuck",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MouthLeft": {
          "Name": "MouthLeft",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MouthRight": {
          "Name": "MouthRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Pucker": {
          "Name": "Pucker",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightBrowLowerer": {
          "Name": "RightBrowLowerer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightCheekPuff": {
          "Name": "RightCheekPuff",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightCheekRaiser": {
          "Name": "RightCheekRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightDimpler": {
          "Name": "RightDimpler",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightEyeClosed": {
          "Name": "RightEyeClosed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightEyeUpperLidRaiser": {
          "Name": "RightEyeUpperLidRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightInnerBrowRaiser": {
          "Name": "RightInnerBrowRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightLipCornerDown": {
          "Name": "RightLipCornerDown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightLipCornerPuller": {
          "Name": "RightLipCornerPuller",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightLipStretcher": {
          "Name": "RightLipStretcher",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightLowerLipDepressor": {
          "Name": "RightLowerLipDepressor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightNoseWrinkler": {
          "Name": "RightNoseWrinkler",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightOuterBrowRaiser": {
          "Name": "RightOuterBrowRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightUpperLipRaiser": {
          "Name": "RightUpperLipRaiser",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TongueDown": {
          "Name": "TongueDown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TongueOut": {
          "Name": "TongueOut",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TongueUp": {
          "Name": "TongueUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UpperLipSuck": {
          "Name": "UpperLipSuck",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "FaceInstance": {
      "Name": "FaceInstance",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Face": {
          "Name": "Face",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "FacialAnimationStreamingService": {
      "Name": "FacialAnimationStreamingService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Feature": {
      "Name": "Feature",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "FaceId": {
          "Name": "FaceId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InOut": {
          "Name": "InOut",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InOut"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftRight": {
          "Name": "LeftRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "LeftRight"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TopBottom": {
          "Name": "TopBottom",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TopBottom"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "File": {
      "Name": "File",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Size": {
          "Name": "Size",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "FileMesh": {
      "Name": "FileMesh",
      "Tags": [],
      "Superclass": "DataModelMesh",
      "Properties": {
        "MeshId": {
          "Name": "MeshId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureId": {
          "Name": "TextureId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MeshId": {
          "Content": ""
        },
        "Offset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Scale": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TextureId": {
          "Content": ""
        },
        "VertexColor": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        }
      }
    },
    "Fire": {
      "Name": "Fire",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Heat": {
          "Name": "Heat",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "heat_xml"
              }
            }
          }
        },
        "SecondaryColor": {
          "Name": "SecondaryColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "size_xml"
              }
            }
          }
        },
        "TimeScale": {
          "Name": "TimeScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "heat_xml": {
          "Name": "heat_xml",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Heat"
            }
          }
        },
        "size": {
          "Name": "size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Size"
            }
          }
        },
        "size_xml": {
          "Name": "size_xml",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Size"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Color3": [
            0.92549026,
            0.54509807,
            0.27450982
          ]
        },
        "Enabled": {
          "Bool": true
        },
        "Heat": {
          "Float32": 9.0
        },
        "SecondaryColor": {
          "Color3": [
            0.54509807,
            0.3137255,
            0.21568629
          ]
        },
        "Size": {
          "Float32": 5.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TimeScale": {
          "Float32": 1.0
        }
      }
    },
    "Flag": {
      "Name": "Flag",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Tool",
      "Properties": {
        "TeamColor": {
          "Name": "TeamColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CanBeDropped": {
          "Bool": true
        },
        "Enabled": {
          "Bool": true
        },
        "Grip": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "ManualActivationOnly": {
          "Bool": false
        },
        "RequiresHandle": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TeamColor": {
          "Int32": 194
        },
        "TextureId": {
          "Content": ""
        },
        "ToolTip": {
          "String": ""
        }
      }
    },
    "FlagStand": {
      "Name": "FlagStand",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Part",
      "Properties": {
        "TeamColor": {
          "Name": "TeamColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FormFactor": {
          "Enum": 1
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Shape": {
          "Enum": 1
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TeamColor": {
          "Int32": 194
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "FlagStandService": {
      "Name": "FlagStandService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "FlangeSoundEffect": {
      "Name": "FlangeSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Depth": {
          "Name": "Depth",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Mix": {
          "Name": "Mix",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rate": {
          "Name": "Rate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Depth": {
          "Float32": 0.45
        },
        "Enabled": {
          "Bool": true
        },
        "Mix": {
          "Float32": 0.85
        },
        "Priority": {
          "Int32": 0
        },
        "Rate": {
          "Float32": 5.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "FloatCurve": {
      "Name": "FloatCurve",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Length": {
          "Name": "Length",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "FloorWire": {
      "Name": "FloorWire",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "GuiBase3d",
      "Properties": {
        "CycleOffset": {
          "Name": "CycleOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "From": {
          "Name": "From",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsBetweenTextures": {
          "Name": "StudsBetweenTextures",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Texture": {
          "Name": "Texture",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureSize": {
          "Name": "TextureSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "To": {
          "Name": "To",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Velocity": {
          "Name": "Velocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WireRadius": {
          "Name": "WireRadius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "CycleOffset": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StudsBetweenTextures": {
          "Float32": 4.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Texture": {
          "Content": ""
        },
        "TextureSize": {
          "Vector2": [
            1.0,
            1.0
          ]
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Float32": 2.0
        },
        "Visible": {
          "Bool": true
        },
        "WireRadius": {
          "Float32": 0.0625
        }
      }
    },
    "FlyweightService": {
      "Name": "FlyweightService",
      "Tags": [
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Folder": {
      "Name": "Folder",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ForceField": {
      "Name": "ForceField",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Visible": {
          "Name": "Visible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "FormFactorPart": {
      "Name": "FormFactorPart",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "BasePart",
      "Properties": {
        "FormFactor": {
          "Name": "FormFactor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FormFactor"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "formFactorRaw"
              }
            }
          }
        },
        "formFactor": {
          "Name": "formFactor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FormFactor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "FormFactor"
            }
          }
        },
        "formFactorRaw": {
          "Name": "formFactorRaw",
          "Scriptability": "None",
          "DataType": {
            "Enum": "FormFactor"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "FormFactor"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Frame": {
      "Name": "Frame",
      "Tags": [],
      "Superclass": "GuiObject",
      "Properties": {
        "Style": {
          "Name": "Style",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FrameStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Style": {
          "Enum": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "FriendPages": {
      "Name": "FriendPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "FriendService": {
      "Name": "FriendService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "FunctionalTest": {
      "Name": "FunctionalTest",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Description": {
          "Name": "Description",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Description": {
          "String": "?"
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "GamePassService": {
      "Name": "GamePassService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "GameSettings": {
      "Name": "GameSettings",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Settings"
      ],
      "Superclass": "Instance",
      "Properties": {
        "VideoCaptureEnabled": {
          "Name": "VideoCaptureEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VideoRecording": {
          "Name": "VideoRecording",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GamepadService": {
      "Name": "GamepadService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "GamepadCursorEnabled": {
          "Name": "GamepadCursorEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GenericSettings": {
      "Name": "GenericSettings",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "ServiceProvider",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Geometry": {
      "Name": "Geometry",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "GetTextBoundsParams": {
      "Name": "GetTextBoundsParams",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Width": {
          "Name": "Width",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GlobalDataStore": {
      "Name": "GlobalDataStore",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "GlobalSettings": {
      "Name": "GlobalSettings",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "GenericSettings",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Glue": {
      "Name": "Glue",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "JointInstance",
      "Properties": {
        "F0": {
          "Name": "F0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "F1": {
          "Name": "F1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "F2": {
          "Name": "F2",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "F3": {
          "Name": "F3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "F0": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "F1": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "F2": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "F3": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "GoogleAnalyticsConfiguration": {
      "Name": "GoogleAnalyticsConfiguration",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "GroupService": {
      "Name": "GroupService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "GuiBase": {
      "Name": "GuiBase",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "GuiBase2d": {
      "Name": "GuiBase2d",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "GuiBase",
      "Properties": {
        "AbsolutePosition": {
          "Name": "AbsolutePosition",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AbsoluteRotation": {
          "Name": "AbsoluteRotation",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AbsoluteSize": {
          "Name": "AbsoluteSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AutoLocalize": {
          "Name": "AutoLocalize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClippedRect": {
          "Name": "ClippedRect",
          "Scriptability": "None",
          "DataType": {
            "Value": "Rect"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsNotOccluded": {
          "Name": "IsNotOccluded",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Localize": {
          "Name": "Localize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RawRect2D": {
          "Name": "RawRect2D",
          "Scriptability": "None",
          "DataType": {
            "Value": "Rect"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RootLocalizationTable": {
          "Name": "RootLocalizationTable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionBehaviorDown": {
          "Name": "SelectionBehaviorDown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SelectionBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionBehaviorLeft": {
          "Name": "SelectionBehaviorLeft",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SelectionBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionBehaviorRight": {
          "Name": "SelectionBehaviorRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SelectionBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionBehaviorUp": {
          "Name": "SelectionBehaviorUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SelectionBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionGroup": {
          "Name": "SelectionGroup",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TotalGroupScale": {
          "Name": "TotalGroupScale",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GuiBase3d": {
      "Name": "GuiBase3d",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GuiBase",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Color3": {
          "Name": "Color3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Visible": {
          "Name": "Visible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GuiButton": {
      "Name": "GuiButton",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "GuiObject",
      "Properties": {
        "AutoButtonColor": {
          "Name": "AutoButtonColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Modal": {
          "Name": "Modal",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Selected": {
          "Name": "Selected",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Style": {
          "Name": "Style",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ButtonStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GuiLabel": {
      "Name": "GuiLabel",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GuiObject",
      "Properties": {},
      "DefaultProperties": {}
    },
    "GuiMain": {
      "Name": "GuiMain",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "ScreenGui",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "DisplayOrder": {
          "Int32": 0
        },
        "Enabled": {
          "Bool": true
        },
        "IgnoreGuiInset": {
          "Bool": false
        },
        "ResetOnSpawn": {
          "Bool": true
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "ZIndexBehavior": {
          "Enum": 0
        }
      }
    },
    "GuiObject": {
      "Name": "GuiObject",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "GuiBase2d",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AnchorPoint": {
          "Name": "AnchorPoint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AutomaticSize": {
          "Name": "AutomaticSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AutomaticSize"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BackgroundColor": {
          "Name": "BackgroundColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "BackgroundColor3": {
          "Name": "BackgroundColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BackgroundTransparency": {
          "Name": "BackgroundTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BorderColor": {
          "Name": "BorderColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "BorderColor3": {
          "Name": "BorderColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BorderMode": {
          "Name": "BorderMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "BorderMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BorderSizePixel": {
          "Name": "BorderSizePixel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClipsDescendants": {
          "Name": "ClipsDescendants",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Draggable": {
          "Name": "Draggable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LayoutOrder": {
          "Name": "LayoutOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NextSelectionDown": {
          "Name": "NextSelectionDown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NextSelectionLeft": {
          "Name": "NextSelectionLeft",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NextSelectionRight": {
          "Name": "NextSelectionRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NextSelectionUp": {
          "Name": "NextSelectionUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rotation": {
          "Name": "Rotation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Selectable": {
          "Name": "Selectable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionImageObject": {
          "Name": "SelectionImageObject",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionOrder": {
          "Name": "SelectionOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SizeConstraint": {
          "Name": "SizeConstraint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SizeConstraint"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Visible": {
          "Name": "Visible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ZIndex": {
          "Name": "ZIndex",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GuiService": {
      "Name": "GuiService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AutoSelectGuiEnabled": {
          "Name": "AutoSelectGuiEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CoreEffectFolder": {
          "Name": "CoreEffectFolder",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CoreGuiFolder": {
          "Name": "CoreGuiFolder",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CoreGuiNavigationEnabled": {
          "Name": "CoreGuiNavigationEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GuiNavigationEnabled": {
          "Name": "GuiNavigationEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsModalDialog": {
          "Name": "IsModalDialog",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsWindows": {
          "Name": "IsWindows",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MenuIsOpen": {
          "Name": "MenuIsOpen",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SelectedCoreObject": {
          "Name": "SelectedCoreObject",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SelectedObject": {
          "Name": "SelectedObject",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TouchControlsEnabled": {
          "Name": "TouchControlsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "GuidRegistryService": {
      "Name": "GuidRegistryService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HSRDataContentProvider": {
      "Name": "HSRDataContentProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "CacheableContentProvider",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HandleAdornment": {
      "Name": "HandleAdornment",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "PVAdornment",
      "Properties": {
        "AdornCullingMode": {
          "Name": "AdornCullingMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AdornCullingMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AlwaysOnTop": {
          "Name": "AlwaysOnTop",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SizeRelativeOffset": {
          "Name": "SizeRelativeOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ZIndex": {
          "Name": "ZIndex",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Handles": {
      "Name": "Handles",
      "Tags": [],
      "Superclass": "HandlesBase",
      "Properties": {
        "Faces": {
          "Name": "Faces",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Faces"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Style": {
          "Name": "Style",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HandlesStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Faces": {
          "Faces": [
            "Right",
            "Top",
            "Back",
            "Left",
            "Bottom",
            "Front"
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Style": {
          "Enum": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "HandlesBase": {
      "Name": "HandlesBase",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "PartAdornment",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HapticService": {
      "Name": "HapticService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Hat": {
      "Name": "Hat",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Accoutrement",
      "Properties": {},
      "DefaultProperties": {
        "AttachmentPoint": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "HeightmapImporterService": {
      "Name": "HeightmapImporterService",
      "Tags": [
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HiddenSurfaceRemovalAsset": {
      "Name": "HiddenSurfaceRemovalAsset",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Highlight": {
      "Name": "Highlight",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Adornee": {
          "Name": "Adornee",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DepthMode": {
          "Name": "DepthMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HighlightDepthMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FillColor": {
          "Name": "FillColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FillTransparency": {
          "Name": "FillTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OutlineColor": {
          "Name": "OutlineColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OutlineTransparency": {
          "Name": "OutlineTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "DepthMode": {
          "Enum": 0
        },
        "Enabled": {
          "Bool": true
        },
        "FillColor": {
          "Color3": [
            1.0,
            0.0,
            0.0
          ]
        },
        "FillTransparency": {
          "Float32": 0.5
        },
        "OutlineColor": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "OutlineTransparency": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "HingeConstraint": {
      "Name": "HingeConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "ActuatorType": {
          "Name": "ActuatorType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularResponsiveness": {
          "Name": "AngularResponsiveness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularSpeed": {
          "Name": "AngularSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AngularVelocity": {
          "Name": "AngularVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentAngle": {
          "Name": "CurrentAngle",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LowerAngle": {
          "Name": "LowerAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MotorMaxAcceleration": {
          "Name": "MotorMaxAcceleration",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MotorMaxTorque": {
          "Name": "MotorMaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Restitution": {
          "Name": "Restitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ServoMaxTorque": {
          "Name": "ServoMaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetAngle": {
          "Name": "TargetAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UpperAngle": {
          "Name": "UpperAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ActuatorType": {
          "Enum": 0
        },
        "AngularResponsiveness": {
          "Float32": 45.0
        },
        "AngularSpeed": {
          "Float32": 0.0
        },
        "AngularVelocity": {
          "Float32": 0.0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 1009
        },
        "Enabled": {
          "Bool": true
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "LowerAngle": {
          "Float32": -45.0
        },
        "MotorMaxAcceleration": {
          "Float32": null
        },
        "MotorMaxTorque": {
          "Float32": 0.0
        },
        "Radius": {
          "Float32": 0.15
        },
        "Restitution": {
          "Float32": 0.0
        },
        "ServoMaxTorque": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TargetAngle": {
          "Float32": 0.0
        },
        "UpperAngle": {
          "Float32": 45.0
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "Hint": {
      "Name": "Hint",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Message",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Text": {
          "String": ""
        }
      }
    },
    "Hole": {
      "Name": "Hole",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Feature",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "FaceId": {
          "Enum": 0
        },
        "InOut": {
          "Enum": 2
        },
        "LeftRight": {
          "Enum": 1
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopBottom": {
          "Enum": 1
        }
      }
    },
    "Hopper": {
      "Name": "Hopper",
      "Tags": [
        "Deprecated",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HopperBin": {
      "Name": "HopperBin",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BackpackItem",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BinType": {
          "Name": "BinType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "BinType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BinType": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TextureId": {
          "Content": ""
        }
      }
    },
    "HttpRbxApiService": {
      "Name": "HttpRbxApiService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HttpRequest": {
      "Name": "HttpRequest",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "HttpService": {
      "Name": "HttpService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "HttpEnabled": {
          "Name": "HttpEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "HttpEnabled": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Humanoid": {
      "Name": "Humanoid",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AutoJumpEnabled": {
          "Name": "AutoJumpEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AutoRotate": {
          "Name": "AutoRotate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AutomaticScalingEnabled": {
          "Name": "AutomaticScalingEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BreakJointsOnDeath": {
          "Name": "BreakJointsOnDeath",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraOffset": {
          "Name": "CameraOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CollisionType": {
          "Name": "CollisionType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HumanoidCollisionType"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DisplayDistanceType": {
          "Name": "DisplayDistanceType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HumanoidDisplayDistanceType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DisplayName": {
          "Name": "DisplayName",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FloorMaterial": {
          "Name": "FloorMaterial",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "Material"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Health": {
          "Name": "Health",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HealthDisplayDistance": {
          "Name": "HealthDisplayDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HealthDisplayType": {
          "Name": "HealthDisplayType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HumanoidHealthDisplayType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HipHeight": {
          "Name": "HipHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Jump": {
          "Name": "Jump",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "JumpHeight": {
          "Name": "JumpHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "JumpPower": {
          "Name": "JumpPower",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftLeg": {
          "Name": "LeftLeg",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxHealth": {
          "Name": "MaxHealth",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxSlopeAngle": {
          "Name": "MaxSlopeAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MoveDirection": {
          "Name": "MoveDirection",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "NameDisplayDistance": {
          "Name": "NameDisplayDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NameOcclusion": {
          "Name": "NameOcclusion",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NameOcclusion"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlatformStand": {
          "Name": "PlatformStand",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RequiresNeck": {
          "Name": "RequiresNeck",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RigType": {
          "Name": "RigType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HumanoidRigType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightLeg": {
          "Name": "RightLeg",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RootPart": {
          "Name": "RootPart",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SeatPart": {
          "Name": "SeatPart",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Sit": {
          "Name": "Sit",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TargetPoint": {
          "Name": "TargetPoint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Torso": {
          "Name": "Torso",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UseJumpPower": {
          "Name": "UseJumpPower",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WalkSpeed": {
          "Name": "WalkSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WalkToPart": {
          "Name": "WalkToPart",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WalkToPoint": {
          "Name": "WalkToPoint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "maxHealth": {
          "Name": "maxHealth",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutoJumpEnabled": {
          "Bool": true
        },
        "AutoRotate": {
          "Bool": true
        },
        "AutomaticScalingEnabled": {
          "Bool": true
        },
        "BreakJointsOnDeath": {
          "Bool": true
        },
        "CollisionType": {
          "Enum": 0
        },
        "DisplayDistanceType": {
          "Enum": 0
        },
        "DisplayName": {
          "String": ""
        },
        "HealthDisplayDistance": {
          "Float32": 100.0
        },
        "HealthDisplayType": {
          "Enum": 0
        },
        "HipHeight": {
          "Float32": 0.0
        },
        "JumpHeight": {
          "Float32": 7.2
        },
        "JumpPower": {
          "Float32": 50.0
        },
        "MaxHealth": {
          "Float32": 100.0
        },
        "MaxSlopeAngle": {
          "Float32": 89.0
        },
        "NameDisplayDistance": {
          "Float32": 100.0
        },
        "NameOcclusion": {
          "Enum": 2
        },
        "RequiresNeck": {
          "Bool": true
        },
        "RigType": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UseJumpPower": {
          "Bool": true
        },
        "WalkSpeed": {
          "Float32": 16.0
        }
      }
    },
    "HumanoidController": {
      "Name": "HumanoidController",
      "Tags": [],
      "Superclass": "Controller",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "HumanoidDescription": {
      "Name": "HumanoidDescription",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AccessoryBlob": {
          "Name": "AccessoryBlob",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BackAccessory": {
          "Name": "BackAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BodyTypeScale": {
          "Name": "BodyTypeScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClimbAnimation": {
          "Name": "ClimbAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DepthScale": {
          "Name": "DepthScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Face": {
          "Name": "Face",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FaceAccessory": {
          "Name": "FaceAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FallAnimation": {
          "Name": "FallAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FrontAccessory": {
          "Name": "FrontAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GraphicTShirt": {
          "Name": "GraphicTShirt",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HairAccessory": {
          "Name": "HairAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HatAccessory": {
          "Name": "HatAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Head": {
          "Name": "Head",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HeadColor": {
          "Name": "HeadColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HeadScale": {
          "Name": "HeadScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HeightScale": {
          "Name": "HeightScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IdleAnimation": {
          "Name": "IdleAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "JumpAnimation": {
          "Name": "JumpAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftArm": {
          "Name": "LeftArm",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftArmColor": {
          "Name": "LeftArmColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftLeg": {
          "Name": "LeftLeg",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeftLegColor": {
          "Name": "LeftLegColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NeckAccessory": {
          "Name": "NeckAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NumberEmotesLoaded": {
          "Name": "NumberEmotesLoaded",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Pants": {
          "Name": "Pants",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ProportionScale": {
          "Name": "ProportionScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightArm": {
          "Name": "RightArm",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightArmColor": {
          "Name": "RightArmColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightLeg": {
          "Name": "RightLeg",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RightLegColor": {
          "Name": "RightLegColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RunAnimation": {
          "Name": "RunAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Shirt": {
          "Name": "Shirt",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShouldersAccessory": {
          "Name": "ShouldersAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SwimAnimation": {
          "Name": "SwimAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Torso": {
          "Name": "Torso",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TorsoColor": {
          "Name": "TorsoColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WaistAccessory": {
          "Name": "WaistAccessory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WalkAnimation": {
          "Name": "WalkAnimation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WidthScale": {
          "Name": "WidthScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AccessoryBlob": {
          "String": "[]"
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackAccessory": {
          "String": ""
        },
        "BodyTypeScale": {
          "Float32": 0.3
        },
        "ClimbAnimation": {
          "Int64": 0
        },
        "DepthScale": {
          "Float32": 1.0
        },
        "Face": {
          "Int64": 0
        },
        "FaceAccessory": {
          "String": ""
        },
        "FallAnimation": {
          "Int64": 0
        },
        "FrontAccessory": {
          "String": ""
        },
        "GraphicTShirt": {
          "Int64": 0
        },
        "HairAccessory": {
          "String": ""
        },
        "HatAccessory": {
          "String": ""
        },
        "Head": {
          "Int64": 0
        },
        "HeadColor": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "HeadScale": {
          "Float32": 1.0
        },
        "HeightScale": {
          "Float32": 1.0
        },
        "IdleAnimation": {
          "Int64": 0
        },
        "JumpAnimation": {
          "Int64": 0
        },
        "LeftArm": {
          "Int64": 0
        },
        "LeftArmColor": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "LeftLeg": {
          "Int64": 0
        },
        "LeftLegColor": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "NeckAccessory": {
          "String": ""
        },
        "Pants": {
          "Int64": 0
        },
        "ProportionScale": {
          "Float32": 1.0
        },
        "RightArm": {
          "Int64": 0
        },
        "RightArmColor": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "RightLeg": {
          "Int64": 0
        },
        "RightLegColor": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "RunAnimation": {
          "Int64": 0
        },
        "Shirt": {
          "Int64": 0
        },
        "ShouldersAccessory": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "SwimAnimation": {
          "Int64": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Torso": {
          "Int64": 0
        },
        "TorsoColor": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "WaistAccessory": {
          "String": ""
        },
        "WalkAnimation": {
          "Int64": 0
        },
        "WidthScale": {
          "Float32": 1.0
        }
      }
    },
    "ILegacyStudioBridge": {
      "Name": "ILegacyStudioBridge",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "IXPService": {
      "Name": "IXPService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ImageButton": {
      "Name": "ImageButton",
      "Tags": [],
      "Superclass": "GuiButton",
      "Properties": {
        "ContentImageSize": {
          "Name": "ContentImageSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HoverImage": {
          "Name": "HoverImage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Image": {
          "Name": "Image",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageColor3": {
          "Name": "ImageColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageRectOffset": {
          "Name": "ImageRectOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageRectSize": {
          "Name": "ImageRectSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageTransparency": {
          "Name": "ImageTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsLoaded": {
          "Name": "IsLoaded",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PressedImage": {
          "Name": "PressedImage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ResampleMode": {
          "Name": "ResampleMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ResamplerMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScaleType": {
          "Name": "ScaleType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScaleType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SliceCenter": {
          "Name": "SliceCenter",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Rect"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SliceScale": {
          "Name": "SliceScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TileSize": {
          "Name": "TileSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": true
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoButtonColor": {
          "Bool": true
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "HoverImage": {
          "Content": ""
        },
        "Image": {
          "Content": ""
        },
        "ImageColor3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "ImageRectOffset": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "ImageRectSize": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "ImageTransparency": {
          "Float32": 0.0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "Modal": {
          "Bool": false
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "PressedImage": {
          "Content": ""
        },
        "ResampleMode": {
          "Enum": 0
        },
        "Rotation": {
          "Float32": 0.0
        },
        "ScaleType": {
          "Enum": 0
        },
        "Selectable": {
          "Bool": true
        },
        "Selected": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SliceCenter": {
          "Rect": [
            [
              0.0,
              0.0
            ],
            [
              0.0,
              0.0
            ]
          ]
        },
        "SliceScale": {
          "Float32": 1.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Style": {
          "Enum": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "TileSize": {
          "UDim2": [
            [
              1.0,
              0
            ],
            [
              1.0,
              0
            ]
          ]
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "ImageHandleAdornment": {
      "Name": "ImageHandleAdornment",
      "Tags": [],
      "Superclass": "HandleAdornment",
      "Properties": {
        "Image": {
          "Name": "Image",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AdornCullingMode": {
          "Enum": 0
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color3": {
          "Color3": [
            0.9490197,
            0.95294124,
            0.95294124
          ]
        },
        "Image": {
          "Content": "rbxasset://textures/SurfacesDefault.png"
        },
        "Size": {
          "Vector2": [
            1.0,
            1.0
          ]
        },
        "SizeRelativeOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": -1
        }
      }
    },
    "ImageLabel": {
      "Name": "ImageLabel",
      "Tags": [],
      "Superclass": "GuiLabel",
      "Properties": {
        "ContentImageSize": {
          "Name": "ContentImageSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Image": {
          "Name": "Image",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageColor3": {
          "Name": "ImageColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageRectOffset": {
          "Name": "ImageRectOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageRectSize": {
          "Name": "ImageRectSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageTransparency": {
          "Name": "ImageTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsLoaded": {
          "Name": "IsLoaded",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ResampleMode": {
          "Name": "ResampleMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ResamplerMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScaleType": {
          "Name": "ScaleType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScaleType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SliceCenter": {
          "Name": "SliceCenter",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Rect"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SliceScale": {
          "Name": "SliceScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TileSize": {
          "Name": "TileSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "Image": {
          "Content": ""
        },
        "ImageColor3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "ImageRectOffset": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "ImageRectSize": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "ImageTransparency": {
          "Float32": 0.0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "ResampleMode": {
          "Enum": 0
        },
        "Rotation": {
          "Float32": 0.0
        },
        "ScaleType": {
          "Enum": 0
        },
        "Selectable": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SliceCenter": {
          "Rect": [
            [
              0.0,
              0.0
            ],
            [
              0.0,
              0.0
            ]
          ]
        },
        "SliceScale": {
          "Float32": 1.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TileSize": {
          "UDim2": [
            [
              1.0,
              0
            ],
            [
              1.0,
              0
            ]
          ]
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "ImporterAnimationSettings": {
      "Name": "ImporterAnimationSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "ImporterBaseSettings",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ImporterBaseSettings": {
      "Name": "ImporterBaseSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Id": {
          "Name": "Id",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ImportName": {
          "Name": "ImportName",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShouldImport": {
          "Name": "ShouldImport",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ImporterGroupSettings": {
      "Name": "ImporterGroupSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "ImporterBaseSettings",
      "Properties": {
        "Anchored": {
          "Name": "Anchored",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImportAsModelAsset": {
          "Name": "ImportAsModelAsset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InsertInWorkspace": {
          "Name": "InsertInWorkspace",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ImporterJointSettings": {
      "Name": "ImporterJointSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "ImporterBaseSettings",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ImporterMaterialSettings": {
      "Name": "ImporterMaterialSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "ImporterBaseSettings",
      "Properties": {
        "DiffuseFilePath": {
          "Name": "DiffuseFilePath",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsPbr": {
          "Name": "IsPbr",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MetalnessFilePath": {
          "Name": "MetalnessFilePath",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "NormalFilePath": {
          "Name": "NormalFilePath",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RoughnessFilePath": {
          "Name": "RoughnessFilePath",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ImporterMeshSettings": {
      "Name": "ImporterMeshSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "ImporterBaseSettings",
      "Properties": {
        "Anchored": {
          "Name": "Anchored",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CageManifold": {
          "Name": "CageManifold",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CageManifoldPreview": {
          "Name": "CageManifoldPreview",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CageNoOverlappingVertices": {
          "Name": "CageNoOverlappingVertices",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CageNoOverlappingVerticesPreview": {
          "Name": "CageNoOverlappingVerticesPreview",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Dimensions": {
          "Name": "Dimensions",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DoubleSided": {
          "Name": "DoubleSided",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IgnoreVertexColors": {
          "Name": "IgnoreVertexColors",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PolygonCount": {
          "Name": "PolygonCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ImporterRootSettings": {
      "Name": "ImporterRootSettings",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "ImporterBaseSettings",
      "Properties": {
        "Anchored": {
          "Name": "Anchored",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FileDimensions": {
          "Name": "FileDimensions",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ImportAsModelAsset": {
          "Name": "ImportAsModelAsset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InsertInWorkspace": {
          "Name": "InsertInWorkspace",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InsertWithScenePosition": {
          "Name": "InsertWithScenePosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InvertNegativeFaces": {
          "Name": "InvertNegativeFaces",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MergeMeshes": {
          "Name": "MergeMeshes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PolygonCount": {
          "Name": "PolygonCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RigType": {
          "Name": "RigType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RigType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScaleUnit": {
          "Name": "ScaleUnit",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "MeshScaleUnit"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UseSceneOriginAsPivot": {
          "Name": "UseSceneOriginAsPivot",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WorldForward": {
          "Name": "WorldForward",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WorldUp": {
          "Name": "WorldUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "IncrementalPatchBuilder": {
      "Name": "IncrementalPatchBuilder",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "InputObject": {
      "Name": "InputObject",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Delta": {
          "Name": "Delta",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "KeyCode": {
          "Name": "KeyCode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "KeyCode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UserInputState": {
          "Name": "UserInputState",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "UserInputState"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UserInputType": {
          "Name": "UserInputType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "UserInputType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "InsertService": {
      "Name": "InsertService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllowClientInsertModels": {
          "Name": "AllowClientInsertModels",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AllowInsertFreeModels": {
          "Name": "AllowInsertFreeModels",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotBrowsable",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AllowClientInsertModels": {
          "Bool": false
        },
        "AllowInsertFreeModels": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Instance": {
      "Name": "Instance",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": null,
      "Properties": {
        "Archivable": {
          "Name": "Archivable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "archivable"
              }
            }
          }
        },
        "Attributes": {
          "Name": "Attributes",
          "Scriptability": "Custom",
          "DataType": {
            "Value": "Attributes"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "AttributesSerialize"
              }
            }
          }
        },
        "AttributesSerialize": {
          "Name": "AttributesSerialize",
          "Scriptability": "None",
          "DataType": {
            "Value": "BinaryString"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Attributes"
            }
          }
        },
        "ClassName": {
          "Name": "ClassName",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataCost": {
          "Name": "DataCost",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Name": {
          "Name": "Name",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Parent": {
          "Name": "Parent",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RobloxLocked": {
          "Name": "RobloxLocked",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SourceAssetId": {
          "Name": "SourceAssetId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Tags": {
          "Name": "Tags",
          "Scriptability": "Custom",
          "DataType": {
            "Value": "Tags"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "archivable": {
          "Name": "archivable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Archivable"
            }
          }
        },
        "className": {
          "Name": "className",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "ClassName"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "InstanceAdornment": {
      "Name": "InstanceAdornment",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GuiBase3d",
      "Properties": {
        "Adornee": {
          "Name": "Adornee",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "IntConstrainedValue": {
      "Name": "IntConstrainedValue",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "ValueBase",
      "Properties": {
        "ConstrainedValue": {
          "Name": "ConstrainedValue",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxValue": {
          "Name": "MaxValue",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MinValue": {
          "Name": "MinValue",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MaxValue": {
          "Int64": 10
        },
        "MinValue": {
          "Int64": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "IntValue": {
      "Name": "IntValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Int64": 0
        }
      }
    },
    "InventoryPages": {
      "Name": "InventoryPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "JointInstance": {
      "Name": "JointInstance",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "C0": {
          "Name": "C0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "C1": {
          "Name": "C1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Part0": {
          "Name": "Part0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Part1": {
          "Name": "Part1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "part1": {
          "Name": "part1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "Part1"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "JointsService": {
      "Name": "JointsService",
      "Tags": [
        "Deprecated",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "KeyboardService": {
      "Name": "KeyboardService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Keyframe": {
      "Name": "Keyframe",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Time": {
          "Name": "Time",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Time": {
          "Float32": 0.0
        }
      }
    },
    "KeyframeMarker": {
      "Name": "KeyframeMarker",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "String": ""
        }
      }
    },
    "KeyframeSequence": {
      "Name": "KeyframeSequence",
      "Tags": [],
      "Superclass": "AnimationClip",
      "Properties": {
        "AuthoredHipHeight": {
          "Name": "AuthoredHipHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AuthoredHipHeight": {
          "Float32": 2.0
        },
        "Loop": {
          "Bool": true
        },
        "Priority": {
          "Enum": 2
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "KeyframeSequenceProvider": {
      "Name": "KeyframeSequenceProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LSPFileSyncService": {
      "Name": "LSPFileSyncService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LanguageService": {
      "Name": "LanguageService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "LayerCollector": {
      "Name": "LayerCollector",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "GuiBase2d",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ResetOnSpawn": {
          "Name": "ResetOnSpawn",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ZIndexBehavior": {
          "Name": "ZIndexBehavior",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ZIndexBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "LegacyStudioBridge": {
      "Name": "LegacyStudioBridge",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "ILegacyStudioBridge",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Light": {
      "Name": "Light",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Shadows": {
          "Name": "Shadows",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Lighting": {
      "Name": "Lighting",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Ambient": {
          "Name": "Ambient",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClockTime": {
          "Name": "ClockTime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ColorShift_Bottom": {
          "Name": "ColorShift_Bottom",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ColorShift_Top": {
          "Name": "ColorShift_Top",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EnvironmentDiffuseScale": {
          "Name": "EnvironmentDiffuseScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EnvironmentSpecularScale": {
          "Name": "EnvironmentSpecularScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ExposureCompensation": {
          "Name": "ExposureCompensation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FogColor": {
          "Name": "FogColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FogEnd": {
          "Name": "FogEnd",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FogStart": {
          "Name": "FogStart",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GeographicLatitude": {
          "Name": "GeographicLatitude",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GlobalShadows": {
          "Name": "GlobalShadows",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OutdoorAmbient": {
          "Name": "OutdoorAmbient",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Outlines": {
          "Name": "Outlines",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShadowColor": {
          "Name": "ShadowColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShadowSoftness": {
          "Name": "ShadowSoftness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Technology": {
          "Name": "Technology",
          "Scriptability": "None",
          "DataType": {
            "Enum": "Technology"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TempUseNewSkyRemovalBehaviour": {
          "Name": "TempUseNewSkyRemovalBehaviour",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TimeOfDay": {
          "Name": "TimeOfDay",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Ambient": {
          "Color3": [
            0.5,
            0.5,
            0.5
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "ColorShift_Bottom": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "ColorShift_Top": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "EnvironmentDiffuseScale": {
          "Float32": 0.0
        },
        "EnvironmentSpecularScale": {
          "Float32": 0.0
        },
        "ExposureCompensation": {
          "Float32": 0.0
        },
        "FogColor": {
          "Color3": [
            0.75,
            0.75,
            0.75
          ]
        },
        "FogEnd": {
          "Float32": 100000.0
        },
        "FogStart": {
          "Float32": 0.0
        },
        "GeographicLatitude": {
          "Float32": 41.7333
        },
        "GlobalShadows": {
          "Bool": false
        },
        "OutdoorAmbient": {
          "Color3": [
            0.5,
            0.5,
            0.5
          ]
        },
        "Outlines": {
          "Bool": true
        },
        "ShadowSoftness": {
          "Float32": 0.5
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Technology": {
          "Enum": 2
        },
        "TimeOfDay": {
          "String": "14:00:00"
        }
      }
    },
    "LineForce": {
      "Name": "LineForce",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "ApplyAtCenterOfMass": {
          "Name": "ApplyAtCenterOfMass",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InverseSquareLaw": {
          "Name": "InverseSquareLaw",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Magnitude": {
          "Name": "Magnitude",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxForce": {
          "Name": "MaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReactionForceEnabled": {
          "Name": "ReactionForceEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ApplyAtCenterOfMass": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 23
        },
        "Enabled": {
          "Bool": true
        },
        "InverseSquareLaw": {
          "Bool": false
        },
        "Magnitude": {
          "Float32": 1000.0
        },
        "MaxForce": {
          "Float32": null
        },
        "ReactionForceEnabled": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "LineHandleAdornment": {
      "Name": "LineHandleAdornment",
      "Tags": [],
      "Superclass": "HandleAdornment",
      "Properties": {
        "Length": {
          "Name": "Length",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Thickness": {
          "Name": "Thickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AdornCullingMode": {
          "Enum": 0
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Length": {
          "Float32": 5.0
        },
        "SizeRelativeOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Thickness": {
          "Float32": 1.0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": -1
        }
      }
    },
    "LinearVelocity": {
      "Name": "LinearVelocity",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "LineDirection": {
          "Name": "LineDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LineVelocity": {
          "Name": "LineVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxForce": {
          "Name": "MaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlaneVelocity": {
          "Name": "PlaneVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrimaryTangentAxis": {
          "Name": "PrimaryTangentAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RelativeTo": {
          "Name": "RelativeTo",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorRelativeTo"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SecondaryTangentAxis": {
          "Name": "SecondaryTangentAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VectorVelocity": {
          "Name": "VectorVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VelocityConstraintMode": {
          "Name": "VelocityConstraintMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "VelocityConstraintMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 26
        },
        "Enabled": {
          "Bool": true
        },
        "LineDirection": {
          "Vector3": [
            1.0,
            0.0,
            0.0
          ]
        },
        "LineVelocity": {
          "Float32": -0.0
        },
        "MaxForce": {
          "Float32": 1000.0
        },
        "PlaneVelocity": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "PrimaryTangentAxis": {
          "Vector3": [
            1.0,
            0.0,
            0.0
          ]
        },
        "RelativeTo": {
          "Enum": 2
        },
        "SecondaryTangentAxis": {
          "Vector3": [
            0.0,
            1.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "VectorVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "VelocityConstraintMode": {
          "Enum": 2
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "LocalDebuggerConnection": {
      "Name": "LocalDebuggerConnection",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "DebuggerConnection",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LocalScript": {
      "Name": "LocalScript",
      "Tags": [],
      "Superclass": "Script",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Disabled": {
          "Bool": false
        },
        "LinkedSource": {
          "Content": ""
        },
        "Source": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "LocalStorageService": {
      "Name": "LocalStorageService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LocalizationService": {
      "Name": "LocalizationService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ForcePlayModeGameLocaleId": {
          "Name": "ForcePlayModeGameLocaleId",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ForcePlayModeRobloxLocaleId": {
          "Name": "ForcePlayModeRobloxLocaleId",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsTextScraperRunning": {
          "Name": "IsTextScraperRunning",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RobloxForcePlayModeGameLocaleId": {
          "Name": "RobloxForcePlayModeGameLocaleId",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RobloxForcePlayModeRobloxLocaleId": {
          "Name": "RobloxForcePlayModeRobloxLocaleId",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RobloxLocaleId": {
          "Name": "RobloxLocaleId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SystemLocaleId": {
          "Name": "SystemLocaleId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "LocalizationTable": {
      "Name": "LocalizationTable",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Contents": {
          "Name": "Contents",
          "Scriptability": "Custom",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevelopmentLanguage": {
          "Name": "DevelopmentLanguage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Root": {
          "Name": "Root",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SourceLocaleId": {
          "Name": "SourceLocaleId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Contents": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "SourceLocaleId": {
          "String": "en-us"
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "LodDataEntity": {
      "Name": "LodDataEntity",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "EntityLodEnabled": {
          "Name": "EntityLodEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "LodDataService": {
      "Name": "LodDataService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "LogService": {
      "Name": "LogService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LoginService": {
      "Name": "LoginService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LuaSettings": {
      "Name": "LuaSettings",
      "Tags": [
        "NotCreatable",
        "Settings"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "LuaSourceContainer": {
      "Name": "LuaSourceContainer",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CurrentEditor": {
          "Name": "CurrentEditor",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "LuaWebService": {
      "Name": "LuaWebService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "LuauScriptAnalyzerService": {
      "Name": "LuauScriptAnalyzerService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ManualGlue": {
      "Name": "ManualGlue",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "ManualSurfaceJointInstance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ManualSurfaceJointInstance": {
      "Name": "ManualSurfaceJointInstance",
      "Tags": [
        "Deprecated",
        "NotCreatable"
      ],
      "Superclass": "JointInstance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ManualWeld": {
      "Name": "ManualWeld",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "ManualSurfaceJointInstance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "MarkerCurve": {
      "Name": "MarkerCurve",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Length": {
          "Name": "Length",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "MarketplaceService": {
      "Name": "MarketplaceService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MaterialService": {
      "Name": "MaterialService",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AsphaltName": {
          "Name": "AsphaltName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BasaltName": {
          "Name": "BasaltName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BrickName": {
          "Name": "BrickName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CobblestoneName": {
          "Name": "CobblestoneName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ConcreteName": {
          "Name": "ConcreteName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CorrodedMetalName": {
          "Name": "CorrodedMetalName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CrackedLavaName": {
          "Name": "CrackedLavaName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DiamondPlateName": {
          "Name": "DiamondPlateName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FabricName": {
          "Name": "FabricName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FoilName": {
          "Name": "FoilName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GlacierName": {
          "Name": "GlacierName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GraniteName": {
          "Name": "GraniteName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GrassName": {
          "Name": "GrassName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GroundName": {
          "Name": "GroundName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IceName": {
          "Name": "IceName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LeafyGrassName": {
          "Name": "LeafyGrassName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimestoneName": {
          "Name": "LimestoneName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MarbleName": {
          "Name": "MarbleName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MetalName": {
          "Name": "MetalName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MudName": {
          "Name": "MudName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PavementName": {
          "Name": "PavementName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PebbleName": {
          "Name": "PebbleName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlasticName": {
          "Name": "PlasticName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RockName": {
          "Name": "RockName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SaltName": {
          "Name": "SaltName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SandName": {
          "Name": "SandName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SandstoneName": {
          "Name": "SandstoneName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SlateName": {
          "Name": "SlateName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SmoothPlasticName": {
          "Name": "SmoothPlasticName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SnowName": {
          "Name": "SnowName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Use2022Materials": {
          "Name": "Use2022Materials",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WoodName": {
          "Name": "WoodName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WoodPlanksName": {
          "Name": "WoodPlanksName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "hasPropertyWarningInStudio": {
          "Name": "hasPropertyWarningInStudio",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "AsphaltName": {
          "String": ""
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BasaltName": {
          "String": ""
        },
        "BrickName": {
          "String": ""
        },
        "CobblestoneName": {
          "String": ""
        },
        "ConcreteName": {
          "String": ""
        },
        "CorrodedMetalName": {
          "String": ""
        },
        "CrackedLavaName": {
          "String": ""
        },
        "DiamondPlateName": {
          "String": ""
        },
        "FabricName": {
          "String": ""
        },
        "FoilName": {
          "String": ""
        },
        "GlacierName": {
          "String": ""
        },
        "GraniteName": {
          "String": ""
        },
        "GrassName": {
          "String": ""
        },
        "GroundName": {
          "String": ""
        },
        "IceName": {
          "String": ""
        },
        "LeafyGrassName": {
          "String": ""
        },
        "LimestoneName": {
          "String": ""
        },
        "MarbleName": {
          "String": ""
        },
        "MetalName": {
          "String": ""
        },
        "MudName": {
          "String": ""
        },
        "PavementName": {
          "String": ""
        },
        "PebbleName": {
          "String": ""
        },
        "PlasticName": {
          "String": ""
        },
        "RockName": {
          "String": ""
        },
        "SaltName": {
          "String": ""
        },
        "SandName": {
          "String": ""
        },
        "SandstoneName": {
          "String": ""
        },
        "SlateName": {
          "String": ""
        },
        "SmoothPlasticName": {
          "String": ""
        },
        "SnowName": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "WoodName": {
          "String": ""
        },
        "WoodPlanksName": {
          "String": ""
        }
      }
    },
    "MaterialVariant": {
      "Name": "MaterialVariant",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "BaseMaterial": {
          "Name": "BaseMaterial",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "Material"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ColorMap": {
          "Name": "ColorMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaterialPattern": {
          "Name": "MaterialPattern",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "MaterialPattern"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MetalnessMap": {
          "Name": "MetalnessMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NormalMap": {
          "Name": "NormalMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RoughnessMap": {
          "Name": "RoughnessMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsPerTile": {
          "Name": "StudsPerTile",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BaseMaterial": {
          "Enum": 256
        },
        "ColorMap": {
          "Content": ""
        },
        "MaterialPattern": {
          "Enum": 0
        },
        "MetalnessMap": {
          "Content": ""
        },
        "NormalMap": {
          "Content": ""
        },
        "RoughnessMap": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StudsPerTile": {
          "Float32": 10.0
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "MemStorageConnection": {
      "Name": "MemStorageConnection",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MemStorageService": {
      "Name": "MemStorageService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MemoryStoreQueue": {
      "Name": "MemoryStoreQueue",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MemoryStoreService": {
      "Name": "MemoryStoreService",
      "Tags": [
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "MemoryStoreSortedMap": {
      "Name": "MemoryStoreSortedMap",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MeshContentProvider": {
      "Name": "MeshContentProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "CacheableContentProvider",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MeshPart": {
      "Name": "MeshPart",
      "Tags": [],
      "Superclass": "TriangleMeshPart",
      "Properties": {
        "DoubleSided": {
          "Name": "DoubleSided",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HasJointOffset": {
          "Name": "HasJointOffset",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HasSkinnedMesh": {
          "Name": "HasSkinnedMesh",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "JointOffset": {
          "Name": "JointOffset",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshID": {
          "Name": "MeshID",
          "Scriptability": "None",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [
            "Deprecated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshId": {
          "Name": "MeshId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshSize": {
          "Name": "MeshSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RenderFidelity": {
          "Name": "RenderFidelity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RenderFidelity"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureID": {
          "Name": "TextureID",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 0
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "DoubleSided": {
          "Bool": false
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "HasJointOffset": {
          "Bool": false
        },
        "HasSkinnedMesh": {
          "Bool": false
        },
        "JointOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "MeshID": {
          "Content": ""
        },
        "MeshId": {
          "Content": ""
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RenderFidelity": {
          "Enum": 1
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TextureID": {
          "Content": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 0
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "Message": {
      "Name": "Message",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Text": {
          "String": ""
        }
      }
    },
    "MessageBusConnection": {
      "Name": "MessageBusConnection",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MessageBusService": {
      "Name": "MessageBusService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MessagingService": {
      "Name": "MessagingService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MetaBreakpoint": {
      "Name": "MetaBreakpoint",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Condition": {
          "Name": "Condition",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ContinueExecution": {
          "Name": "ContinueExecution",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Id": {
          "Name": "Id",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsLogpoint": {
          "Name": "IsLogpoint",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Line": {
          "Name": "Line",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LogMessage": {
          "Name": "LogMessage",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Script": {
          "Name": "Script",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Condition": {
          "String": ""
        },
        "ContinueExecution": {
          "Bool": false
        },
        "Enabled": {
          "Bool": true
        },
        "Line": {
          "Int32": 0
        },
        "LogMessage": {
          "String": ""
        },
        "Script": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "MetaBreakpointContext": {
      "Name": "MetaBreakpointContext",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Model": {
      "Name": "Model",
      "Tags": [],
      "Superclass": "PVInstance",
      "Properties": {
        "LevelOfDetail": {
          "Name": "LevelOfDetail",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ModelLevelOfDetail"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrimaryPart": {
          "Name": "PrimaryPart",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "World Pivot Orientation": {
          "Name": "World Pivot Orientation",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "World Pivot Position": {
          "Name": "World Pivot Position",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WorldPivot": {
          "Name": "WorldPivot",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "LevelOfDetail": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ModuleScript": {
      "Name": "ModuleScript",
      "Tags": [],
      "Superclass": "LuaSourceContainer",
      "Properties": {
        "LinkedSource": {
          "Name": "LinkedSource",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Source": {
          "Name": "Source",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "LinkedSource": {
          "Content": ""
        },
        "Source": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Motor": {
      "Name": "Motor",
      "Tags": [],
      "Superclass": "JointInstance",
      "Properties": {
        "CurrentAngle": {
          "Name": "CurrentAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DesiredAngle": {
          "Name": "DesiredAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxVelocity": {
          "Name": "MaxVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "DesiredAngle": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "MaxVelocity": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Motor6D": {
      "Name": "Motor6D",
      "Tags": [],
      "Superclass": "Motor",
      "Properties": {
        "ChildName": {
          "Name": "ChildName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ParentName": {
          "Name": "ParentName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Transform": {
          "Name": "Transform",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "DesiredAngle": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "MaxVelocity": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "MotorFeature": {
      "Name": "MotorFeature",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Feature",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "FaceId": {
          "Enum": 0
        },
        "InOut": {
          "Enum": 2
        },
        "LeftRight": {
          "Enum": 1
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopBottom": {
          "Enum": 1
        }
      }
    },
    "Mouse": {
      "Name": "Mouse",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Hit": {
          "Name": "Hit",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Icon": {
          "Name": "Icon",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Origin": {
          "Name": "Origin",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Target": {
          "Name": "Target",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TargetFilter": {
          "Name": "TargetFilter",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetSurface": {
          "Name": "TargetSurface",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UnitRay": {
          "Name": "UnitRay",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ray"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ViewSizeX": {
          "Name": "ViewSizeX",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ViewSizeY": {
          "Name": "ViewSizeY",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "X": {
          "Name": "X",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Y": {
          "Name": "Y",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "hit": {
          "Name": "hit",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "target": {
          "Name": "target",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "MouseService": {
      "Name": "MouseService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "MultipleDocumentInterfaceInstance": {
      "Name": "MultipleDocumentInterfaceInstance",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "FocusedDataModelSession": {
          "Name": "FocusedDataModelSession",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "NegateOperation": {
      "Name": "NegateOperation",
      "Tags": [],
      "Superclass": "PartOperation",
      "Properties": {},
      "DefaultProperties": {
        "Anchored": {
          "Bool": true
        },
        "AssetId": {
          "Content": ""
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 0
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": false
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            255,
            255,
            255
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RenderFidelity": {
          "Enum": 1
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SmoothingAngle": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 0
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.1
        },
        "UsePartColor": {
          "Bool": false
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "NetworkClient": {
      "Name": "NetworkClient",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "NetworkPeer",
      "Properties": {},
      "DefaultProperties": {}
    },
    "NetworkMarker": {
      "Name": "NetworkMarker",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "NetworkPeer": {
      "Name": "NetworkPeer",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "NetworkReplicator": {
      "Name": "NetworkReplicator",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "NetworkServer": {
      "Name": "NetworkServer",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "NetworkPeer",
      "Properties": {},
      "DefaultProperties": {}
    },
    "NetworkSettings": {
      "Name": "NetworkSettings",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "EmulatedTotalMemoryInMB": {
          "Name": "EmulatedTotalMemoryInMB",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FreeMemoryMBytes": {
          "Name": "FreeMemoryMBytes",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HttpProxyEnabled": {
          "Name": "HttpProxyEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HttpProxyURL": {
          "Name": "HttpProxyURL",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IncomingReplicationLag": {
          "Name": "IncomingReplicationLag",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrintJoinSizeBreakdown": {
          "Name": "PrintJoinSizeBreakdown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrintPhysicsErrors": {
          "Name": "PrintPhysicsErrors",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrintStreamInstanceQuota": {
          "Name": "PrintStreamInstanceQuota",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RandomizeJoinInstanceOrder": {
          "Name": "RandomizeJoinInstanceOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RenderStreamedRegions": {
          "Name": "RenderStreamedRegions",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShowActiveAnimationAsset": {
          "Name": "ShowActiveAnimationAsset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "NoCollisionConstraint": {
      "Name": "NoCollisionConstraint",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Part0": {
          "Name": "Part0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Part1": {
          "Name": "Part1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "NonReplicatedCSGDictionaryService": {
      "Name": "NonReplicatedCSGDictionaryService",
      "Tags": [
        "Service"
      ],
      "Superclass": "FlyweightService",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "NotificationService": {
      "Name": "NotificationService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "IsLuaChatEnabled": {
          "Name": "IsLuaChatEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsLuaGameDetailsEnabled": {
          "Name": "IsLuaGameDetailsEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SelectedTheme": {
          "Name": "SelectedTheme",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "NumberPose": {
      "Name": "NumberPose",
      "Tags": [],
      "Superclass": "PoseBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "EasingDirection": {
          "Enum": 0
        },
        "EasingStyle": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Float64": 0.0
        },
        "Weight": {
          "Float32": 1.0
        }
      }
    },
    "NumberValue": {
      "Name": "NumberValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Float64": 0.0
        }
      }
    },
    "ObjectValue": {
      "Name": "ObjectValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "OrderedDataStore": {
      "Name": "OrderedDataStore",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "GlobalDataStore",
      "Properties": {},
      "DefaultProperties": {}
    },
    "OutfitPages": {
      "Name": "OutfitPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PVAdornment": {
      "Name": "PVAdornment",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GuiBase3d",
      "Properties": {
        "Adornee": {
          "Name": "Adornee",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PVInstance": {
      "Name": "PVInstance",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Origin Orientation": {
          "Name": "Origin Orientation",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Origin Position": {
          "Name": "Origin Position",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Pivot Offset Orientation": {
          "Name": "Pivot Offset Orientation",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Pivot Offset Position": {
          "Name": "Pivot Offset Position",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PackageLink": {
      "Name": "PackageLink",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AutoUpdate": {
          "Name": "AutoUpdate",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Creator": {
          "Name": "Creator",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PackageAssetName": {
          "Name": "PackageAssetName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PackageId": {
          "Name": "PackageId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "PackageIdSerialize"
              }
            }
          }
        },
        "PackageIdSerialize": {
          "Name": "PackageIdSerialize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "PackageId"
            }
          }
        },
        "PermissionLevel": {
          "Name": "PermissionLevel",
          "Scriptability": "None",
          "DataType": {
            "Enum": "PackagePermission"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Status": {
          "Name": "Status",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VersionNumber": {
          "Name": "VersionNumber",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PackageService": {
      "Name": "PackageService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PackageUIService": {
      "Name": "PackageUIService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Pages": {
      "Name": "Pages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "IsFinished": {
          "Name": "IsFinished",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Pants": {
      "Name": "Pants",
      "Tags": [],
      "Superclass": "Clothing",
      "Properties": {
        "PantsTemplate": {
          "Name": "PantsTemplate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "PantsTemplate": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ParabolaAdornment": {
      "Name": "ParabolaAdornment",
      "Tags": [],
      "Superclass": "PVAdornment",
      "Properties": {
        "A": {
          "Name": "A",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "B": {
          "Name": "B",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "C": {
          "Name": "C",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Range": {
          "Name": "Range",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Thickness": {
          "Name": "Thickness",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.9490197,
            0.95294124,
            0.95294124
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "Part": {
      "Name": "Part",
      "Tags": [],
      "Superclass": "FormFactorPart",
      "Properties": {
        "Shape": {
          "Name": "Shape",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "PartType"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "shape"
              }
            }
          }
        },
        "shape": {
          "Name": "shape",
          "Scriptability": "None",
          "DataType": {
            "Enum": "PartType"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Shape"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FormFactor": {
          "Enum": 1
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Shape": {
          "Enum": 1
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "PartAdornment": {
      "Name": "PartAdornment",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GuiBase3d",
      "Properties": {
        "Adornee": {
          "Name": "Adornee",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PartOperation": {
      "Name": "PartOperation",
      "Tags": [],
      "Superclass": "TriangleMeshPart",
      "Properties": {
        "AssetId": {
          "Name": "AssetId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RenderFidelity": {
          "Name": "RenderFidelity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RenderFidelity"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SmoothingAngle": {
          "Name": "SmoothingAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TriangleCount": {
          "Name": "TriangleCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UsePartColor": {
          "Name": "UsePartColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "AssetId": {
          "Content": ""
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 0
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            255,
            255,
            255
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RenderFidelity": {
          "Enum": 1
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SmoothingAngle": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 0
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "UsePartColor": {
          "Bool": false
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "PartOperationAsset": {
      "Name": "PartOperationAsset",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ParticleEmitter": {
      "Name": "ParticleEmitter",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Acceleration": {
          "Name": "Acceleration",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "ColorSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Drag": {
          "Name": "Drag",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EmissionDirection": {
          "Name": "EmissionDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FlipbookFramerate": {
          "Name": "FlipbookFramerate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FlipbookIncompatible": {
          "Name": "FlipbookIncompatible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FlipbookLayout": {
          "Name": "FlipbookLayout",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ParticleFlipbookLayout"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FlipbookMode": {
          "Name": "FlipbookMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ParticleFlipbookMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FlipbookStartRandom": {
          "Name": "FlipbookStartRandom",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Lifetime": {
          "Name": "Lifetime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightEmission": {
          "Name": "LightEmission",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightInfluence": {
          "Name": "LightInfluence",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LockedToPart": {
          "Name": "LockedToPart",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Orientation": {
          "Name": "Orientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ParticleOrientation"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rate": {
          "Name": "Rate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RotSpeed": {
          "Name": "RotSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rotation": {
          "Name": "Rotation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Shape": {
          "Name": "Shape",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ParticleEmitterShape"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShapeInOut": {
          "Name": "ShapeInOut",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ParticleEmitterShapeInOut"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShapePartial": {
          "Name": "ShapePartial",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShapeStyle": {
          "Name": "ShapeStyle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ParticleEmitterShapeStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Speed": {
          "Name": "Speed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SpreadAngle": {
          "Name": "SpreadAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Squash": {
          "Name": "Squash",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Texture": {
          "Name": "Texture",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TimeScale": {
          "Name": "TimeScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VelocityInheritance": {
          "Name": "VelocityInheritance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VelocitySpread": {
          "Name": "VelocitySpread",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ZOffset": {
          "Name": "ZOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Acceleration": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "Color": {
          "ColorSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              },
              {
                "time": 1.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              }
            ]
          }
        },
        "Drag": {
          "Float32": 0.0
        },
        "EmissionDirection": {
          "Enum": 1
        },
        "Enabled": {
          "Bool": true
        },
        "FlipbookFramerate": {
          "NumberRange": [
            1.0,
            1.0
          ]
        },
        "FlipbookIncompatible": {
          "String": "Particle texture must be 1024 by 1024 to use flipbooks."
        },
        "FlipbookLayout": {
          "Enum": 0
        },
        "FlipbookMode": {
          "Enum": 0
        },
        "FlipbookStartRandom": {
          "Bool": false
        },
        "Lifetime": {
          "NumberRange": [
            5.0,
            10.0
          ]
        },
        "LightEmission": {
          "Float32": 0.0
        },
        "LightInfluence": {
          "Float32": 0.0
        },
        "LockedToPart": {
          "Bool": false
        },
        "Orientation": {
          "Enum": 0
        },
        "Rate": {
          "Float32": 20.0
        },
        "RotSpeed": {
          "NumberRange": [
            0.0,
            0.0
          ]
        },
        "Rotation": {
          "NumberRange": [
            0.0,
            0.0
          ]
        },
        "Shape": {
          "Enum": 0
        },
        "ShapeInOut": {
          "Enum": 0
        },
        "ShapePartial": {
          "Float32": 1.0
        },
        "ShapeStyle": {
          "Enum": 0
        },
        "Size": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 1.0,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 1.0,
                "envelope": 0.0
              }
            ]
          }
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Speed": {
          "NumberRange": [
            5.0,
            5.0
          ]
        },
        "SpreadAngle": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Squash": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 0.0,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 0.0,
                "envelope": 0.0
              }
            ]
          }
        },
        "Tags": {
          "BinaryString": ""
        },
        "Texture": {
          "Content": "rbxasset://textures/particles/sparkles_main.dds"
        },
        "TimeScale": {
          "Float32": 1.0
        },
        "Transparency": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 0.0,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 0.0,
                "envelope": 0.0
              }
            ]
          }
        },
        "VelocityInheritance": {
          "Float32": 0.0
        },
        "ZOffset": {
          "Float32": 0.0
        }
      }
    },
    "Path": {
      "Name": "Path",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Status": {
          "Name": "Status",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "PathStatus"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PathfindingLink": {
      "Name": "PathfindingLink",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Attachment0": {
          "Name": "Attachment0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Attachment1": {
          "Name": "Attachment1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsBidirectional": {
          "Name": "IsBidirectional",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Label": {
          "Name": "Label",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "IsBidirectional": {
          "Bool": true
        },
        "Label": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PathfindingModifier": {
      "Name": "PathfindingModifier",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Label": {
          "Name": "Label",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PassThrough": {
          "Name": "PassThrough",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Label": {
          "String": ""
        },
        "PassThrough": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PathfindingService": {
      "Name": "PathfindingService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "EmptyCutoff": {
          "Name": "EmptyCutoff",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PausedState": {
      "Name": "PausedState",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllThreadsPaused": {
          "Name": "AllThreadsPaused",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Reason": {
          "Name": "Reason",
          "Scriptability": "None",
          "DataType": {
            "Enum": "DebuggerPauseReason"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ThreadId": {
          "Name": "ThreadId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PausedStateBreakpoint": {
      "Name": "PausedStateBreakpoint",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "PausedState",
      "Properties": {
        "Breakpoint": {
          "Name": "Breakpoint",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PausedStateException": {
      "Name": "PausedStateException",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "PausedState",
      "Properties": {
        "ExceptionText": {
          "Name": "ExceptionText",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PermissionsService": {
      "Name": "PermissionsService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PhysicsService": {
      "Name": "PhysicsService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PhysicsSettings": {
      "Name": "PhysicsSettings",
      "Tags": [
        "NotCreatable",
        "Settings"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllowSleep": {
          "Name": "AllowSleep",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreAnchorsShown": {
          "Name": "AreAnchorsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreAssembliesShown": {
          "Name": "AreAssembliesShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreAwakePartsHighlighted": {
          "Name": "AreAwakePartsHighlighted",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreBodyTypesShown": {
          "Name": "AreBodyTypesShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreContactIslandsShown": {
          "Name": "AreContactIslandsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreContactPointsShown": {
          "Name": "AreContactPointsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreJointCoordinatesShown": {
          "Name": "AreJointCoordinatesShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreMechanismsShown": {
          "Name": "AreMechanismsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreModelCoordsShown": {
          "Name": "AreModelCoordsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreOwnersShown": {
          "Name": "AreOwnersShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ArePartCoordsShown": {
          "Name": "ArePartCoordsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreRegionsShown": {
          "Name": "AreRegionsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreTerrainReplicationRegionsShown": {
          "Name": "AreTerrainReplicationRegionsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreTimestepsShown": {
          "Name": "AreTimestepsShown",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreUnalignedPartsShown": {
          "Name": "AreUnalignedPartsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AreWorldCoordsShown": {
          "Name": "AreWorldCoordsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DisableCSGv2": {
          "Name": "DisableCSGv2",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ForceCSGv2": {
          "Name": "ForceCSGv2",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsInterpolationThrottleShown": {
          "Name": "IsInterpolationThrottleShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsReceiveAgeShown": {
          "Name": "IsReceiveAgeShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsTreeShown": {
          "Name": "IsTreeShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PhysicsEnvironmentalThrottle": {
          "Name": "PhysicsEnvironmentalThrottle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "EnviromentalPhysicsThrottle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShowDecompositionGeometry": {
          "Name": "ShowDecompositionGeometry",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ThrottleAdjustTime": {
          "Name": "ThrottleAdjustTime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UseCSGv2": {
          "Name": "UseCSGv2",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PitchShiftSoundEffect": {
      "Name": "PitchShiftSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Octave": {
          "Name": "Octave",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "Octave": {
          "Float32": 1.25
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Plane": {
      "Name": "Plane",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "PlaneConstraint",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 194
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "PlaneConstraint": {
      "Name": "PlaneConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 194
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "Platform": {
      "Name": "Platform",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Part",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Player": {
      "Name": "Player",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AccountAge": {
          "Name": "AccountAge",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AppearanceDidLoad": {
          "Name": "AppearanceDidLoad",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AutoJumpEnabled": {
          "Name": "AutoJumpEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMaxZoomDistance": {
          "Name": "CameraMaxZoomDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMinZoomDistance": {
          "Name": "CameraMinZoomDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMode": {
          "Name": "CameraMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "CameraMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanLoadCharacterAppearance": {
          "Name": "CanLoadCharacterAppearance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Character": {
          "Name": "Character",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterAppearance": {
          "Name": "CharacterAppearance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Deprecated",
            "NotBrowsable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterAppearanceId": {
          "Name": "CharacterAppearanceId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ChatMode": {
          "Name": "ChatMode",
          "Scriptability": "None",
          "DataType": {
            "Enum": "ChatMode"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataComplexity": {
          "Name": "DataComplexity",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataComplexityLimit": {
          "Name": "DataComplexityLimit",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataReady": {
          "Name": "DataReady",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DevCameraOcclusionMode": {
          "Name": "DevCameraOcclusionMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevCameraOcclusionMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevComputerCameraMode": {
          "Name": "DevComputerCameraMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevComputerCameraMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevComputerMovementMode": {
          "Name": "DevComputerMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevComputerMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevEnableMouseLock": {
          "Name": "DevEnableMouseLock",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevTouchCameraMode": {
          "Name": "DevTouchCameraMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevTouchCameraMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevTouchMovementMode": {
          "Name": "DevTouchMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevTouchMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DisplayName": {
          "Name": "DisplayName",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FollowUserId": {
          "Name": "FollowUserId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GameplayPaused": {
          "Name": "GameplayPaused",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Guest": {
          "Name": "Guest",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HealthDisplayDistance": {
          "Name": "HealthDisplayDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LocaleId": {
          "Name": "LocaleId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaximumSimulationRadius": {
          "Name": "MaximumSimulationRadius",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MembershipType": {
          "Name": "MembershipType",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "MembershipType"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "NameDisplayDistance": {
          "Name": "NameDisplayDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Neutral": {
          "Name": "Neutral",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OsPlatform": {
          "Name": "OsPlatform",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlatformName": {
          "Name": "PlatformName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ReplicationFocus": {
          "Name": "ReplicationFocus",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RespawnLocation": {
          "Name": "RespawnLocation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SimulationRadius": {
          "Name": "SimulationRadius",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Team": {
          "Name": "Team",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TeamColor": {
          "Name": "TeamColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Teleported": {
          "Name": "Teleported",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TeleportedIn": {
          "Name": "TeleportedIn",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UserId": {
          "Name": "UserId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VRDevice": {
          "Name": "VRDevice",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "userId": {
          "Name": "userId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PlayerEmulatorService": {
      "Name": "PlayerEmulatorService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CustomPoliciesEnabled": {
          "Name": "CustomPoliciesEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EmulatedCountryCode": {
          "Name": "EmulatedCountryCode",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EmulatedGameLocale": {
          "Name": "EmulatedGameLocale",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlayerEmulationEnabled": {
          "Name": "PlayerEmulationEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SerializedEmulatedPolicyInfo": {
          "Name": "SerializedEmulatedPolicyInfo",
          "Scriptability": "None",
          "DataType": {
            "Value": "BinaryString"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CustomPoliciesEnabled": {
          "Bool": false
        },
        "EmulatedCountryCode": {
          "String": ""
        },
        "EmulatedGameLocale": {
          "String": ""
        },
        "PlayerEmulationEnabled": {
          "Bool": false
        },
        "SerializedEmulatedPolicyInfo": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PlayerGui": {
      "Name": "PlayerGui",
      "Tags": [
        "NotCreatable",
        "PlayerReplicated"
      ],
      "Superclass": "BasePlayerGui",
      "Properties": {
        "CurrentScreenOrientation": {
          "Name": "CurrentScreenOrientation",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "ScreenOrientation"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ScreenOrientation": {
          "Name": "ScreenOrientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScreenOrientation"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionImageObject": {
          "Name": "SelectionImageObject",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PlayerMouse": {
      "Name": "PlayerMouse",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Mouse",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PlayerScripts": {
      "Name": "PlayerScripts",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Players": {
      "Name": "Players",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "BubbleChat": {
          "Name": "BubbleChat",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CharacterAutoLoads": {
          "Name": "CharacterAutoLoads",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClassicChat": {
          "Name": "ClassicChat",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LocalPlayer": {
          "Name": "LocalPlayer",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxPlayers": {
          "Name": "MaxPlayers",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "MaxPlayersInternal"
              }
            }
          }
        },
        "MaxPlayersInternal": {
          "Name": "MaxPlayersInternal",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "MaxPlayers"
            }
          }
        },
        "NumPlayers": {
          "Name": "NumPlayers",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PreferredPlayers": {
          "Name": "PreferredPlayers",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "PreferredPlayersInternal"
              }
            }
          }
        },
        "PreferredPlayersInternal": {
          "Name": "PreferredPlayersInternal",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Alias": {
              "AliasFor": "PreferredPlayers"
            }
          }
        },
        "RespawnTime": {
          "Name": "RespawnTime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "localPlayer": {
          "Name": "localPlayer",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "numPlayers": {
          "Name": "numPlayers",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CharacterAutoLoads": {
          "Bool": true
        },
        "MaxPlayers": {
          "Int32": 12
        },
        "PreferredPlayers": {
          "Int32": 0
        },
        "RespawnTime": {
          "Float32": 5.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Plugin": {
      "Name": "Plugin",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CollisionEnabled": {
          "Name": "CollisionEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GridSize": {
          "Name": "GridSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HostDataModelType": {
          "Name": "HostDataModelType",
          "Scriptability": "None",
          "DataType": {
            "Enum": "StudioDataModelType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HostDataModelTypeIsCurrent": {
          "Name": "HostDataModelTypeIsCurrent",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MultipleDocumentInterfaceInstance": {
          "Name": "MultipleDocumentInterfaceInstance",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UsesAssetInsertionDrag": {
          "Name": "UsesAssetInsertionDrag",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PluginAction": {
      "Name": "PluginAction",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ActionId": {
          "Name": "ActionId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AllowBinding": {
          "Name": "AllowBinding",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Checked": {
          "Name": "Checked",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DefaultShortcut": {
          "Name": "DefaultShortcut",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "StatusTip": {
          "Name": "StatusTip",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PluginDebugService": {
      "Name": "PluginDebugService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginDragEvent": {
      "Name": "PluginDragEvent",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Data": {
          "Name": "Data",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MimeType": {
          "Name": "MimeType",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Sender": {
          "Name": "Sender",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PluginGui": {
      "Name": "PluginGui",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "LayerCollector",
      "Properties": {
        "Title": {
          "Name": "Title",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PluginGuiService": {
      "Name": "PluginGuiService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginManager": {
      "Name": "PluginManager",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginManagerInterface": {
      "Name": "PluginManagerInterface",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginMenu": {
      "Name": "PluginMenu",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Icon": {
          "Name": "Icon",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Title": {
          "Name": "Title",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PluginMouse": {
      "Name": "PluginMouse",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Mouse",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginPolicyService": {
      "Name": "PluginPolicyService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginToolbar": {
      "Name": "PluginToolbar",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PluginToolbarButton": {
      "Name": "PluginToolbarButton",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ClickableWhenViewportHidden": {
          "Name": "ClickableWhenViewportHidden",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Icon": {
          "Name": "Icon",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PointLight": {
      "Name": "PointLight",
      "Tags": [],
      "Superclass": "Light",
      "Properties": {
        "Range": {
          "Name": "Range",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "Color": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Enabled": {
          "Bool": true
        },
        "Range": {
          "Float32": 8.0
        },
        "Shadows": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PointsService": {
      "Name": "PointsService",
      "Tags": [
        "Deprecated",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "PolicyService": {
      "Name": "PolicyService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "IsLuobuServer": {
          "Name": "IsLuobuServer",
          "Scriptability": "None",
          "DataType": {
            "Enum": "TriStateBoolean"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LuobuWhitelisted": {
          "Name": "LuobuWhitelisted",
          "Scriptability": "None",
          "DataType": {
            "Enum": "TriStateBoolean"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Pose": {
      "Name": "Pose",
      "Tags": [],
      "Superclass": "PoseBase",
      "Properties": {
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaskWeight": {
          "Name": "MaskWeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "EasingDirection": {
          "Enum": 0
        },
        "EasingStyle": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Weight": {
          "Float32": 1.0
        }
      }
    },
    "PoseBase": {
      "Name": "PoseBase",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "EasingDirection": {
          "Name": "EasingDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "PoseEasingDirection"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EasingStyle": {
          "Name": "EasingStyle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "PoseEasingStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Weight": {
          "Name": "Weight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PostEffect": {
      "Name": "PostEffect",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "PrismaticConstraint": {
      "Name": "PrismaticConstraint",
      "Tags": [],
      "Superclass": "SlidingBallConstraint",
      "Properties": {},
      "DefaultProperties": {
        "ActuatorType": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 1009
        },
        "Enabled": {
          "Bool": true
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "LinearResponsiveness": {
          "Float32": 45.0
        },
        "LowerLimit": {
          "Float32": 0.0
        },
        "MotorMaxAcceleration": {
          "Float32": null
        },
        "MotorMaxForce": {
          "Float32": 0.0
        },
        "Restitution": {
          "Float32": 0.0
        },
        "ServoMaxForce": {
          "Float32": 0.0
        },
        "Size": {
          "Float32": 0.15
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Speed": {
          "Float32": 0.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "TargetPosition": {
          "Float32": 0.0
        },
        "UpperLimit": {
          "Float32": 5.0
        },
        "Velocity": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "ProcessInstancePhysicsService": {
      "Name": "ProcessInstancePhysicsService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ProximityPrompt": {
      "Name": "ProximityPrompt",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "ActionText": {
          "Name": "ActionText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AutoLocalize": {
          "Name": "AutoLocalize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClickablePrompt": {
          "Name": "ClickablePrompt",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Exclusivity": {
          "Name": "Exclusivity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ProximityPromptExclusivity"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GamepadKeyCode": {
          "Name": "GamepadKeyCode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "KeyCode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HoldDuration": {
          "Name": "HoldDuration",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "KeyboardKeyCode": {
          "Name": "KeyboardKeyCode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "KeyCode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxActivationDistance": {
          "Name": "MaxActivationDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ObjectText": {
          "Name": "ObjectText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RequiresLineOfSight": {
          "Name": "RequiresLineOfSight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RootLocalizationTable": {
          "Name": "RootLocalizationTable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Style": {
          "Name": "Style",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ProximityPromptStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UIOffset": {
          "Name": "UIOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ActionText": {
          "String": "Interact"
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "ClickablePrompt": {
          "Bool": true
        },
        "Enabled": {
          "Bool": true
        },
        "Exclusivity": {
          "Enum": 0
        },
        "GamepadKeyCode": {
          "Enum": 1000
        },
        "HoldDuration": {
          "Float32": 0.0
        },
        "KeyboardKeyCode": {
          "Enum": 101
        },
        "MaxActivationDistance": {
          "Float32": 10.0
        },
        "ObjectText": {
          "String": ""
        },
        "RequiresLineOfSight": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Style": {
          "Enum": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "UIOffset": {
          "Vector2": [
            0.0,
            0.0
          ]
        }
      }
    },
    "ProximityPromptService": {
      "Name": "ProximityPromptService",
      "Tags": [
        "NotBrowsable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxPromptsVisible": {
          "Name": "MaxPromptsVisible",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "MaxPromptsVisible": {
          "Int32": 16
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "PublishService": {
      "Name": "PublishService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "QWidgetPluginGui": {
      "Name": "QWidgetPluginGui",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "PluginGui",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RayValue": {
      "Name": "RayValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ray"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Ray": {
            "origin": [
              0.0,
              0.0,
              0.0
            ],
            "direction": [
              0.0,
              0.0,
              0.0
            ]
          }
        }
      }
    },
    "RbxAnalyticsService": {
      "Name": "RbxAnalyticsService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ReflectionMetadata": {
      "Name": "ReflectionMetadata",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataCallbacks": {
      "Name": "ReflectionMetadataCallbacks",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataClass": {
      "Name": "ReflectionMetadataClass",
      "Tags": [],
      "Superclass": "ReflectionMetadataItem",
      "Properties": {
        "ExplorerImageIndex": {
          "Name": "ExplorerImageIndex",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ExplorerOrder": {
          "Name": "ExplorerOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Insertable": {
          "Name": "Insertable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PreferredParent": {
          "Name": "PreferredParent",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Browsable": {
          "Bool": true
        },
        "ClassCategory": {
          "String": ""
        },
        "ClientOnly": {
          "Bool": false
        },
        "Constraint": {
          "String": ""
        },
        "Deprecated": {
          "Bool": false
        },
        "EditingDisabled": {
          "Bool": false
        },
        "EditorType": {
          "String": ""
        },
        "ExplorerImageIndex": {
          "Int32": 0
        },
        "ExplorerOrder": {
          "Int32": 2147483647
        },
        "FFlag": {
          "String": ""
        },
        "Insertable": {
          "Bool": true
        },
        "IsBackend": {
          "Bool": false
        },
        "PreferredParent": {
          "String": ""
        },
        "PropertyOrder": {
          "Int32": 5000
        },
        "ScriptContext": {
          "String": ""
        },
        "ServerOnly": {
          "Bool": false
        },
        "SliderScaling": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UIMaximum": {
          "Float64": 0.0
        },
        "UIMinimum": {
          "Float64": 0.0
        },
        "UINumTicks": {
          "Float64": 0.0
        }
      }
    },
    "ReflectionMetadataClasses": {
      "Name": "ReflectionMetadataClasses",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataEnum": {
      "Name": "ReflectionMetadataEnum",
      "Tags": [],
      "Superclass": "ReflectionMetadataItem",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Browsable": {
          "Bool": true
        },
        "ClassCategory": {
          "String": ""
        },
        "ClientOnly": {
          "Bool": false
        },
        "Constraint": {
          "String": ""
        },
        "Deprecated": {
          "Bool": false
        },
        "EditingDisabled": {
          "Bool": false
        },
        "EditorType": {
          "String": ""
        },
        "FFlag": {
          "String": ""
        },
        "IsBackend": {
          "Bool": false
        },
        "PropertyOrder": {
          "Int32": 5000
        },
        "ScriptContext": {
          "String": ""
        },
        "ServerOnly": {
          "Bool": false
        },
        "SliderScaling": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UIMaximum": {
          "Float64": 0.0
        },
        "UIMinimum": {
          "Float64": 0.0
        },
        "UINumTicks": {
          "Float64": 0.0
        }
      }
    },
    "ReflectionMetadataEnumItem": {
      "Name": "ReflectionMetadataEnumItem",
      "Tags": [],
      "Superclass": "ReflectionMetadataItem",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Browsable": {
          "Bool": true
        },
        "ClassCategory": {
          "String": ""
        },
        "ClientOnly": {
          "Bool": false
        },
        "Constraint": {
          "String": ""
        },
        "Deprecated": {
          "Bool": false
        },
        "EditingDisabled": {
          "Bool": false
        },
        "EditorType": {
          "String": ""
        },
        "FFlag": {
          "String": ""
        },
        "IsBackend": {
          "Bool": false
        },
        "PropertyOrder": {
          "Int32": 5000
        },
        "ScriptContext": {
          "String": ""
        },
        "ServerOnly": {
          "Bool": false
        },
        "SliderScaling": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UIMaximum": {
          "Float64": 0.0
        },
        "UIMinimum": {
          "Float64": 0.0
        },
        "UINumTicks": {
          "Float64": 0.0
        }
      }
    },
    "ReflectionMetadataEnums": {
      "Name": "ReflectionMetadataEnums",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataEvents": {
      "Name": "ReflectionMetadataEvents",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataFunctions": {
      "Name": "ReflectionMetadataFunctions",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataItem": {
      "Name": "ReflectionMetadataItem",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Browsable": {
          "Name": "Browsable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClassCategory": {
          "Name": "ClassCategory",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClientOnly": {
          "Name": "ClientOnly",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Constraint": {
          "Name": "Constraint",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Deprecated": {
          "Name": "Deprecated",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EditingDisabled": {
          "Name": "EditingDisabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EditorType": {
          "Name": "EditorType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FFlag": {
          "Name": "FFlag",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsBackend": {
          "Name": "IsBackend",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PropertyOrder": {
          "Name": "PropertyOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScriptContext": {
          "Name": "ScriptContext",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ServerOnly": {
          "Name": "ServerOnly",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SliderScaling": {
          "Name": "SliderScaling",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UIMaximum": {
          "Name": "UIMaximum",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UIMinimum": {
          "Name": "UIMinimum",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UINumTicks": {
          "Name": "UINumTicks",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ReflectionMetadataMember": {
      "Name": "ReflectionMetadataMember",
      "Tags": [],
      "Superclass": "ReflectionMetadataItem",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Browsable": {
          "Bool": true
        },
        "ClassCategory": {
          "String": ""
        },
        "ClientOnly": {
          "Bool": false
        },
        "Constraint": {
          "String": ""
        },
        "Deprecated": {
          "Bool": false
        },
        "EditingDisabled": {
          "Bool": false
        },
        "EditorType": {
          "String": ""
        },
        "FFlag": {
          "String": ""
        },
        "IsBackend": {
          "Bool": false
        },
        "PropertyOrder": {
          "Int32": 5000
        },
        "ScriptContext": {
          "String": ""
        },
        "ServerOnly": {
          "Bool": false
        },
        "SliderScaling": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UIMaximum": {
          "Float64": 0.0
        },
        "UIMinimum": {
          "Float64": 0.0
        },
        "UINumTicks": {
          "Float64": 0.0
        }
      }
    },
    "ReflectionMetadataProperties": {
      "Name": "ReflectionMetadataProperties",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReflectionMetadataYieldFunctions": {
      "Name": "ReflectionMetadataYieldFunctions",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RemoteDebuggerServer": {
      "Name": "RemoteDebuggerServer",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RemoteEvent": {
      "Name": "RemoteEvent",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RemoteFunction": {
      "Name": "RemoteFunction",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RenderSettings": {
      "Name": "RenderSettings",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AutoFRMLevel": {
          "Name": "AutoFRMLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EagerBulkExecution": {
          "Name": "EagerBulkExecution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EditQualityLevel": {
          "Name": "EditQualityLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "QualityLevel"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EnableFRM": {
          "Name": "EnableFRM",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ExportMergeByMaterial": {
          "Name": "ExportMergeByMaterial",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FrameRateManager": {
          "Name": "FrameRateManager",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FramerateManagerMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GraphicsMode": {
          "Name": "GraphicsMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "GraphicsMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshCacheSize": {
          "Name": "MeshCacheSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshPartDetailLevel": {
          "Name": "MeshPartDetailLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "MeshPartDetailLevel"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "QualityLevel": {
          "Name": "QualityLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "QualityLevel"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReloadAssets": {
          "Name": "ReloadAssets",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RenderCSGTrianglesDebug": {
          "Name": "RenderCSGTrianglesDebug",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShowBoundingBoxes": {
          "Name": "ShowBoundingBoxes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "RenderingTest": {
      "Name": "RenderingTest",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "CFrame": {
          "Name": "CFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ComparisonDiffThreshold": {
          "Name": "ComparisonDiffThreshold",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ComparisonMethod": {
          "Name": "ComparisonMethod",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RenderingTestComparisonMethod"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ComparisonPsnrThreshold": {
          "Name": "ComparisonPsnrThreshold",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Description": {
          "Name": "Description",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FieldOfView": {
          "Name": "FieldOfView",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Orientation": {
          "Name": "Orientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Position": {
          "Name": "Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "QualityLevel": {
          "Name": "QualityLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShouldSkip": {
          "Name": "ShouldSkip",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Ticket": {
          "Name": "Ticket",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "ComparisonDiffThreshold": {
          "Int32": 10
        },
        "ComparisonMethod": {
          "Enum": 0
        },
        "ComparisonPsnrThreshold": {
          "Float32": 50.0
        },
        "Description": {
          "String": ""
        },
        "FieldOfView": {
          "Float32": 70.0
        },
        "QualityLevel": {
          "Int32": 21
        },
        "ShouldSkip": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Ticket": {
          "String": ""
        }
      }
    },
    "ReplicatedFirst": {
      "Name": "ReplicatedFirst",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReplicatedStorage": {
      "Name": "ReplicatedStorage",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ReverbSoundEffect": {
      "Name": "ReverbSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "DecayTime": {
          "Name": "DecayTime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Density": {
          "Name": "Density",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Diffusion": {
          "Name": "Diffusion",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DryLevel": {
          "Name": "DryLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WetLevel": {
          "Name": "WetLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "DecayTime": {
          "Float32": 1.5
        },
        "Density": {
          "Float32": 1.0
        },
        "Diffusion": {
          "Float32": 1.0
        },
        "DryLevel": {
          "Float32": -6.0
        },
        "Enabled": {
          "Bool": true
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "WetLevel": {
          "Float32": 0.0
        }
      }
    },
    "RigidConstraint": {
      "Name": "RigidConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "Broken": {
          "Name": "Broken",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotBrowsable",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DestructionEnabled": {
          "Name": "DestructionEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotBrowsable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DestructionForce": {
          "Name": "DestructionForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotBrowsable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DestructionTorque": {
          "Name": "DestructionTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotBrowsable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 194
        },
        "DestructionEnabled": {
          "Bool": false
        },
        "DestructionForce": {
          "Float32": null
        },
        "DestructionTorque": {
          "Float32": null
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "RobloxPluginGuiService": {
      "Name": "RobloxPluginGuiService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RobloxReplicatedStorage": {
      "Name": "RobloxReplicatedStorage",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RocketPropulsion": {
      "Name": "RocketPropulsion",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "BodyMover",
      "Properties": {
        "CartoonFactor": {
          "Name": "CartoonFactor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxSpeed": {
          "Name": "MaxSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxThrust": {
          "Name": "MaxThrust",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxTorque": {
          "Name": "MaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Target": {
          "Name": "Target",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetOffset": {
          "Name": "TargetOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetRadius": {
          "Name": "TargetRadius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ThrustD": {
          "Name": "ThrustD",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ThrustP": {
          "Name": "ThrustP",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TurnD": {
          "Name": "TurnD",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TurnP": {
          "Name": "TurnP",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CartoonFactor": {
          "Float32": 0.7
        },
        "MaxSpeed": {
          "Float32": 30.0
        },
        "MaxThrust": {
          "Float32": 4000.0
        },
        "MaxTorque": {
          "Vector3": [
            400000.0,
            400000.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TargetOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "TargetRadius": {
          "Float32": 4.0
        },
        "ThrustD": {
          "Float32": 0.001
        },
        "ThrustP": {
          "Float32": 5.0
        },
        "TurnD": {
          "Float32": 500.0
        },
        "TurnP": {
          "Float32": 3000.0
        }
      }
    },
    "RodConstraint": {
      "Name": "RodConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "CurrentDistance": {
          "Name": "CurrentDistance",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Length": {
          "Name": "Length",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimitAngle0": {
          "Name": "LimitAngle0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimitAngle1": {
          "Name": "LimitAngle1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Thickness": {
          "Name": "Thickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 26
        },
        "Enabled": {
          "Bool": true
        },
        "Length": {
          "Float32": 5.0
        },
        "LimitAngle0": {
          "Float32": 90.0
        },
        "LimitAngle1": {
          "Float32": 90.0
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Thickness": {
          "Float32": 0.1
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "RopeConstraint": {
      "Name": "RopeConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "CurrentDistance": {
          "Name": "CurrentDistance",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Length": {
          "Name": "Length",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Restitution": {
          "Name": "Restitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Thickness": {
          "Name": "Thickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WinchEnabled": {
          "Name": "WinchEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WinchForce": {
          "Name": "WinchForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WinchResponsiveness": {
          "Name": "WinchResponsiveness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WinchSpeed": {
          "Name": "WinchSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WinchTarget": {
          "Name": "WinchTarget",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 25
        },
        "Enabled": {
          "Bool": true
        },
        "Length": {
          "Float32": 5.0
        },
        "Restitution": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Thickness": {
          "Float32": 0.1
        },
        "Visible": {
          "Bool": false
        },
        "WinchEnabled": {
          "Bool": false
        },
        "WinchForce": {
          "Float32": 10000.0
        },
        "WinchResponsiveness": {
          "Float32": 45.0
        },
        "WinchSpeed": {
          "Float32": 2.0
        },
        "WinchTarget": {
          "Float32": 5.0
        }
      }
    },
    "Rotate": {
      "Name": "Rotate",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "JointInstance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RotateP": {
      "Name": "RotateP",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "DynamicRotate",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BaseAngle": {
          "Float32": 0.0
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RotateV": {
      "Name": "RotateV",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "DynamicRotate",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "BaseAngle": {
          "Float32": 0.0
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RotationCurve": {
      "Name": "RotationCurve",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Length": {
          "Name": "Length",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "RtMessagingService": {
      "Name": "RtMessagingService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RunService": {
      "Name": "RunService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ClientGitHash": {
          "Name": "ClientGitHash",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "RunningAverageItemDouble": {
      "Name": "RunningAverageItemDouble",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "StatsItem",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RunningAverageItemInt": {
      "Name": "RunningAverageItemInt",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "StatsItem",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RunningAverageTimeIntervalItem": {
      "Name": "RunningAverageTimeIntervalItem",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "StatsItem",
      "Properties": {},
      "DefaultProperties": {}
    },
    "RuntimeScriptService": {
      "Name": "RuntimeScriptService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScreenGui": {
      "Name": "ScreenGui",
      "Tags": [],
      "Superclass": "LayerCollector",
      "Properties": {
        "DisplayOrder": {
          "Name": "DisplayOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IgnoreGuiInset": {
          "Name": "IgnoreGuiInset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OnTopOfCoreBlur": {
          "Name": "OnTopOfCoreBlur",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "DisplayOrder": {
          "Int32": 0
        },
        "Enabled": {
          "Bool": true
        },
        "IgnoreGuiInset": {
          "Bool": false
        },
        "ResetOnSpawn": {
          "Bool": true
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "ZIndexBehavior": {
          "Enum": 0
        }
      }
    },
    "Script": {
      "Name": "Script",
      "Tags": [],
      "Superclass": "BaseScript",
      "Properties": {
        "Source": {
          "Name": "Source",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Disabled": {
          "Bool": false
        },
        "LinkedSource": {
          "Content": ""
        },
        "Source": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ScriptChangeService": {
      "Name": "ScriptChangeService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScriptCloneWatcher": {
      "Name": "ScriptCloneWatcher",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScriptCloneWatcherHelper": {
      "Name": "ScriptCloneWatcherHelper",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScriptContext": {
      "Name": "ScriptContext",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ScriptsDisabled": {
          "Name": "ScriptsDisabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ScriptDebugger": {
      "Name": "ScriptDebugger",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CurrentLine": {
          "Name": "CurrentLine",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsDebugging": {
          "Name": "IsDebugging",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsPaused": {
          "Name": "IsPaused",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Script": {
          "Name": "Script",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "ScriptDocument": {
      "Name": "ScriptDocument",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScriptEditorService": {
      "Name": "ScriptEditorService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScriptRegistrationService": {
      "Name": "ScriptRegistrationService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ScriptService": {
      "Name": "ScriptService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ScrollingFrame": {
      "Name": "ScrollingFrame",
      "Tags": [],
      "Superclass": "GuiObject",
      "Properties": {
        "AbsoluteCanvasSize": {
          "Name": "AbsoluteCanvasSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AbsoluteWindowSize": {
          "Name": "AbsoluteWindowSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AutomaticCanvasSize": {
          "Name": "AutomaticCanvasSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AutomaticSize"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BottomImage": {
          "Name": "BottomImage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanvasPosition": {
          "Name": "CanvasPosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanvasSize": {
          "Name": "CanvasSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ElasticBehavior": {
          "Name": "ElasticBehavior",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ElasticBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HorizontalBarRect": {
          "Name": "HorizontalBarRect",
          "Scriptability": "None",
          "DataType": {
            "Value": "Rect"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HorizontalScrollBarInset": {
          "Name": "HorizontalScrollBarInset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScrollBarInset"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxCanvasPosition": {
          "Name": "MaxCanvasPosition",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MidImage": {
          "Name": "MidImage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScrollBarImageColor3": {
          "Name": "ScrollBarImageColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScrollBarImageTransparency": {
          "Name": "ScrollBarImageTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScrollBarThickness": {
          "Name": "ScrollBarThickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScrollVelocity": {
          "Name": "ScrollVelocity",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ScrollingDirection": {
          "Name": "ScrollingDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScrollingDirection"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScrollingEnabled": {
          "Name": "ScrollingEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TopImage": {
          "Name": "TopImage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VerticalBarRect": {
          "Name": "VerticalBarRect",
          "Scriptability": "None",
          "DataType": {
            "Value": "Rect"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VerticalScrollBarInset": {
          "Name": "VerticalScrollBarInset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScrollBarInset"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VerticalScrollBarPosition": {
          "Name": "VerticalScrollBarPosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "VerticalScrollBarPosition"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticCanvasSize": {
          "Enum": 0
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "BottomImage": {
          "Content": "rbxasset://textures/ui/Scroll/scroll-bottom.png"
        },
        "CanvasPosition": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "CanvasSize": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              2.0,
              0
            ]
          ]
        },
        "ClipsDescendants": {
          "Bool": true
        },
        "Draggable": {
          "Bool": false
        },
        "ElasticBehavior": {
          "Enum": 0
        },
        "HorizontalScrollBarInset": {
          "Enum": 0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "MidImage": {
          "Content": "rbxasset://textures/ui/Scroll/scroll-middle.png"
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "Rotation": {
          "Float32": 0.0
        },
        "ScrollBarImageColor3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "ScrollBarImageTransparency": {
          "Float32": 0.0
        },
        "ScrollBarThickness": {
          "Int32": 12
        },
        "ScrollingDirection": {
          "Enum": 4
        },
        "ScrollingEnabled": {
          "Bool": true
        },
        "Selectable": {
          "Bool": true
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": true
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopImage": {
          "Content": "rbxasset://textures/ui/Scroll/scroll-top.png"
        },
        "VerticalScrollBarInset": {
          "Enum": 0
        },
        "VerticalScrollBarPosition": {
          "Enum": 0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "Seat": {
      "Name": "Seat",
      "Tags": [],
      "Superclass": "Part",
      "Properties": {
        "Disabled": {
          "Name": "Disabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Occupant": {
          "Name": "Occupant",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "Disabled": {
          "Bool": false
        },
        "FormFactor": {
          "Enum": 1
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Shape": {
          "Enum": 1
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "Selection": {
      "Name": "Selection",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ActiveInstance": {
          "Name": "ActiveInstance",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SelectionThickness": {
          "Name": "SelectionThickness",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SelectionBox": {
      "Name": "SelectionBox",
      "Tags": [],
      "Superclass": "InstanceAdornment",
      "Properties": {
        "LineThickness": {
          "Name": "LineThickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SurfaceColor": {
          "Name": "SurfaceColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SurfaceColor3": {
          "Name": "SurfaceColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SurfaceTransparency": {
          "Name": "SurfaceTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "LineThickness": {
          "Float32": 0.15
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "SurfaceColor3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SurfaceTransparency": {
          "Float32": 1.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "SelectionLasso": {
      "Name": "SelectionLasso",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GuiBase3d",
      "Properties": {
        "Humanoid": {
          "Name": "Humanoid",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "SelectionPartLasso": {
      "Name": "SelectionPartLasso",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "SelectionLasso",
      "Properties": {
        "Part": {
          "Name": "Part",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "SelectionPointLasso": {
      "Name": "SelectionPointLasso",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "SelectionLasso",
      "Properties": {
        "Point": {
          "Name": "Point",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Point": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "SelectionSphere": {
      "Name": "SelectionSphere",
      "Tags": [],
      "Superclass": "PVAdornment",
      "Properties": {
        "SurfaceColor": {
          "Name": "SurfaceColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SurfaceColor3": {
          "Name": "SurfaceColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SurfaceTransparency": {
          "Name": "SurfaceTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "SurfaceColor3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SurfaceTransparency": {
          "Float32": 1.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "ServerReplicator": {
      "Name": "ServerReplicator",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "NetworkReplicator",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ServerScriptService": {
      "Name": "ServerScriptService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "LoadStringEnabled": {
          "Name": "LoadStringEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "LoadStringEnabled": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ServerStorage": {
      "Name": "ServerStorage",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ServiceProvider": {
      "Name": "ServiceProvider",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "SessionService": {
      "Name": "SessionService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Shirt": {
      "Name": "Shirt",
      "Tags": [],
      "Superclass": "Clothing",
      "Properties": {
        "ShirtTemplate": {
          "Name": "ShirtTemplate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "ShirtTemplate": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ShirtGraphic": {
      "Name": "ShirtGraphic",
      "Tags": [],
      "Superclass": "CharacterAppearance",
      "Properties": {
        "Color3": {
          "Name": "Color3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Graphic": {
          "Name": "Graphic",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Graphic": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SkateboardController": {
      "Name": "SkateboardController",
      "Tags": [],
      "Superclass": "Controller",
      "Properties": {
        "Steer": {
          "Name": "Steer",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Throttle": {
          "Name": "Throttle",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SkateboardPlatform": {
      "Name": "SkateboardPlatform",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Part",
      "Properties": {
        "Controller": {
          "Name": "Controller",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ControllingHumanoid": {
          "Name": "ControllingHumanoid",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Steer": {
          "Name": "Steer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StickyWheels": {
          "Name": "StickyWheels",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Throttle": {
          "Name": "Throttle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FormFactor": {
          "Enum": 1
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Shape": {
          "Enum": 1
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Steer": {
          "Int32": 0
        },
        "StickyWheels": {
          "Bool": true
        },
        "Tags": {
          "BinaryString": ""
        },
        "Throttle": {
          "Int32": 0
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "Skin": {
      "Name": "Skin",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "CharacterAppearance",
      "Properties": {
        "SkinColor": {
          "Name": "SkinColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SkinColor": {
          "Int32": 226
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Sky": {
      "Name": "Sky",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "CelestialBodiesShown": {
          "Name": "CelestialBodiesShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MoonAngularSize": {
          "Name": "MoonAngularSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MoonTextureId": {
          "Name": "MoonTextureId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SkyboxBk": {
          "Name": "SkyboxBk",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SkyboxDn": {
          "Name": "SkyboxDn",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SkyboxFt": {
          "Name": "SkyboxFt",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SkyboxLf": {
          "Name": "SkyboxLf",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SkyboxRt": {
          "Name": "SkyboxRt",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SkyboxUp": {
          "Name": "SkyboxUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StarCount": {
          "Name": "StarCount",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SunAngularSize": {
          "Name": "SunAngularSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SunTextureId": {
          "Name": "SunTextureId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CelestialBodiesShown": {
          "Bool": true
        },
        "MoonAngularSize": {
          "Float32": 11.0
        },
        "MoonTextureId": {
          "Content": "rbxasset://sky/moon.jpg"
        },
        "SkyboxBk": {
          "Content": "rbxasset://textures/sky/sky512_bk.tex"
        },
        "SkyboxDn": {
          "Content": "rbxasset://textures/sky/sky512_dn.tex"
        },
        "SkyboxFt": {
          "Content": "rbxasset://textures/sky/sky512_ft.tex"
        },
        "SkyboxLf": {
          "Content": "rbxasset://textures/sky/sky512_lf.tex"
        },
        "SkyboxRt": {
          "Content": "rbxasset://textures/sky/sky512_rt.tex"
        },
        "SkyboxUp": {
          "Content": "rbxasset://textures/sky/sky512_up.tex"
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StarCount": {
          "Int32": 3000
        },
        "SunAngularSize": {
          "Float32": 21.0
        },
        "SunTextureId": {
          "Content": "rbxasset://sky/sun.jpg"
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SlidingBallConstraint": {
      "Name": "SlidingBallConstraint",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Constraint",
      "Properties": {
        "ActuatorType": {
          "Name": "ActuatorType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentPosition": {
          "Name": "CurrentPosition",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LinearResponsiveness": {
          "Name": "LinearResponsiveness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LowerLimit": {
          "Name": "LowerLimit",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MotorMaxAcceleration": {
          "Name": "MotorMaxAcceleration",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MotorMaxForce": {
          "Name": "MotorMaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Restitution": {
          "Name": "Restitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ServoMaxForce": {
          "Name": "ServoMaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Speed": {
          "Name": "Speed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TargetPosition": {
          "Name": "TargetPosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UpperLimit": {
          "Name": "UpperLimit",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Velocity": {
          "Name": "Velocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Smoke": {
      "Name": "Smoke",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Opacity": {
          "Name": "Opacity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "opacity_xml"
              }
            }
          }
        },
        "RiseVelocity": {
          "Name": "RiseVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "riseVelocity_xml"
              }
            }
          }
        },
        "Size": {
          "Name": "Size",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "size_xml"
              }
            }
          }
        },
        "TimeScale": {
          "Name": "TimeScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "opacity_xml": {
          "Name": "opacity_xml",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Opacity"
            }
          }
        },
        "riseVelocity_xml": {
          "Name": "riseVelocity_xml",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "RiseVelocity"
            }
          }
        },
        "size_xml": {
          "Name": "size_xml",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Size"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Enabled": {
          "Bool": true
        },
        "Opacity": {
          "Float32": 0.5
        },
        "RiseVelocity": {
          "Float32": 1.0
        },
        "Size": {
          "Float32": 1.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TimeScale": {
          "Float32": 1.0
        }
      }
    },
    "Snap": {
      "Name": "Snap",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "JointInstance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SnippetService": {
      "Name": "SnippetService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "SocialService": {
      "Name": "SocialService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "SolidModelContentProvider": {
      "Name": "SolidModelContentProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "CacheableContentProvider",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Sound": {
      "Name": "Sound",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "ChannelCount": {
          "Name": "ChannelCount",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotBrowsable",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EmitterSize": {
          "Name": "EmitterSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsLoaded": {
          "Name": "IsLoaded",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsPaused": {
          "Name": "IsPaused",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsPlaying": {
          "Name": "IsPlaying",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Looped": {
          "Name": "Looped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxDistance": {
          "Name": "MaxDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "xmlRead_MaxDistance_3"
              }
            }
          }
        },
        "MinDistance": {
          "Name": "MinDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Pitch": {
          "Name": "Pitch",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlayOnRemove": {
          "Name": "PlayOnRemove",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlaybackLoudness": {
          "Name": "PlaybackLoudness",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlaybackSpeed": {
          "Name": "PlaybackSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Playing": {
          "Name": "Playing",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RollOffMaxDistance": {
          "Name": "RollOffMaxDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RollOffMinDistance": {
          "Name": "RollOffMinDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RollOffMode": {
          "Name": "RollOffMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RollOffMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SoundGroup": {
          "Name": "SoundGroup",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SoundId": {
          "Name": "SoundId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TimeLength": {
          "Name": "TimeLength",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TimePosition": {
          "Name": "TimePosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UsageContextPermission": {
          "Name": "UsageContextPermission",
          "Scriptability": "None",
          "DataType": {
            "Enum": "UsageContext"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Volume": {
          "Name": "Volume",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "isPlaying": {
          "Name": "isPlaying",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "xmlRead_MaxDistance_3": {
          "Name": "xmlRead_MaxDistance_3",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "MaxDistance"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "EmitterSize": {
          "Float32": 10.0
        },
        "Looped": {
          "Bool": false
        },
        "MaxDistance": {
          "Float32": 10000.0
        },
        "PlayOnRemove": {
          "Bool": false
        },
        "PlaybackSpeed": {
          "Float32": 1.0
        },
        "Playing": {
          "Bool": false
        },
        "RollOffMode": {
          "Enum": 0
        },
        "SoundId": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TimePosition": {
          "Float64": 0.0
        },
        "Volume": {
          "Float32": 0.5
        }
      }
    },
    "SoundEffect": {
      "Name": "SoundEffect",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Priority": {
          "Name": "Priority",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "SoundGroup": {
      "Name": "SoundGroup",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Volume": {
          "Name": "Volume",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Volume": {
          "Float32": 0.5
        }
      }
    },
    "SoundService": {
      "Name": "SoundService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AmbientReverb": {
          "Name": "AmbientReverb",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ReverbType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DistanceFactor": {
          "Name": "DistanceFactor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DopplerScale": {
          "Name": "DopplerScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RespectFilteringEnabled": {
          "Name": "RespectFilteringEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RolloffScale": {
          "Name": "RolloffScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AmbientReverb": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "DistanceFactor": {
          "Float32": 3.33
        },
        "DopplerScale": {
          "Float32": 1.0
        },
        "RespectFilteringEnabled": {
          "Bool": false
        },
        "RolloffScale": {
          "Float32": 1.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Sparkles": {
      "Name": "Sparkles",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SparkleColor": {
          "Name": "SparkleColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TimeScale": {
          "Name": "TimeScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "SparkleColor": {
          "Color3": [
            0.5647059,
            0.098039225,
            1.0
          ]
        },
        "Tags": {
          "BinaryString": ""
        },
        "TimeScale": {
          "Float32": 1.0
        }
      }
    },
    "SpawnLocation": {
      "Name": "SpawnLocation",
      "Tags": [],
      "Superclass": "Part",
      "Properties": {
        "AllowTeamChangeOnTouch": {
          "Name": "AllowTeamChangeOnTouch",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Duration": {
          "Name": "Duration",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Neutral": {
          "Name": "Neutral",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TeamColor": {
          "Name": "TeamColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AllowTeamChangeOnTouch": {
          "Bool": false
        },
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "Duration": {
          "Int32": 10
        },
        "Enabled": {
          "Bool": true
        },
        "FormFactor": {
          "Enum": 1
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "Neutral": {
          "Bool": true
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Shape": {
          "Enum": 1
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TeamColor": {
          "Int32": 194
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "SpawnerService": {
      "Name": "SpawnerService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Speaker": {
      "Name": "Speaker",
      "Tags": [
        "Deprecated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ChannelCount": {
          "Name": "ChannelCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotBrowsable",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlaybackLoudness": {
          "Name": "PlaybackLoudness",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RollOffMaxDistance": {
          "Name": "RollOffMaxDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RollOffMinDistance": {
          "Name": "RollOffMinDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RollOffMode": {
          "Name": "RollOffMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RollOffMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SoundGroup": {
          "Name": "SoundGroup",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Source": {
          "Name": "Source",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Volume": {
          "Name": "Volume",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "RollOffMode": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Volume": {
          "Float32": 0.0
        }
      }
    },
    "SpecialMesh": {
      "Name": "SpecialMesh",
      "Tags": [],
      "Superclass": "FileMesh",
      "Properties": {
        "MeshType": {
          "Name": "MeshType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "MeshType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MeshId": {
          "Content": ""
        },
        "MeshType": {
          "Enum": 0
        },
        "Offset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Scale": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TextureId": {
          "Content": ""
        },
        "VertexColor": {
          "Vector3": [
            1.0,
            1.0,
            1.0
          ]
        }
      }
    },
    "SphereHandleAdornment": {
      "Name": "SphereHandleAdornment",
      "Tags": [],
      "Superclass": "HandleAdornment",
      "Properties": {
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AdornCullingMode": {
          "Enum": 0
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "Radius": {
          "Float32": 1.0
        },
        "SizeRelativeOffset": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": -1
        }
      }
    },
    "SpotLight": {
      "Name": "SpotLight",
      "Tags": [],
      "Superclass": "Light",
      "Properties": {
        "Angle": {
          "Name": "Angle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Face": {
          "Name": "Face",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Range": {
          "Name": "Range",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Angle": {
          "Float32": 90.0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "Color": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Enabled": {
          "Bool": true
        },
        "Face": {
          "Enum": 5
        },
        "Range": {
          "Float32": 16.0
        },
        "Shadows": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SpringConstraint": {
      "Name": "SpringConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "Coils": {
          "Name": "Coils",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentLength": {
          "Name": "CurrentLength",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Damping": {
          "Name": "Damping",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FreeLength": {
          "Name": "FreeLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxForce": {
          "Name": "MaxForce",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxLength": {
          "Name": "MaxLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MinLength": {
          "Name": "MinLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Stiffness": {
          "Name": "Stiffness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Thickness": {
          "Name": "Thickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Coils": {
          "Float32": 3.0
        },
        "Color": {
          "Int32": 200
        },
        "Damping": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "FreeLength": {
          "Float32": 1.0
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "MaxForce": {
          "Float32": null
        },
        "MaxLength": {
          "Float32": 5.0
        },
        "MinLength": {
          "Float32": 0.0
        },
        "Radius": {
          "Float32": 0.4
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Stiffness": {
          "Float32": 0.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Thickness": {
          "Float32": 0.1
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "StackFrame": {
      "Name": "StackFrame",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "FrameId": {
          "Name": "FrameId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FrameName": {
          "Name": "FrameName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FrameType": {
          "Name": "FrameType",
          "Scriptability": "None",
          "DataType": {
            "Enum": "DebuggerFrameType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Globals": {
          "Name": "Globals",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Line": {
          "Name": "Line",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Locals": {
          "Name": "Locals",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Populated": {
          "Name": "Populated",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Script": {
          "Name": "Script",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Upvalues": {
          "Name": "Upvalues",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "StandalonePluginScripts": {
      "Name": "StandalonePluginScripts",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "StandardPages": {
      "Name": "StandardPages",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Pages",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StarterCharacterScripts": {
      "Name": "StarterCharacterScripts",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "StarterPlayerScripts",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "StarterGear": {
      "Name": "StarterGear",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "StarterGui": {
      "Name": "StarterGui",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "BasePlayerGui",
      "Properties": {
        "ProcessUserInput": {
          "Name": "ProcessUserInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ResetPlayerGuiOnSpawn": {
          "Name": "ResetPlayerGuiOnSpawn",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScreenOrientation": {
          "Name": "ScreenOrientation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ScreenOrientation"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShowDevelopmentGui": {
          "Name": "ShowDevelopmentGui",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VirtualCursorMode": {
          "Name": "VirtualCursorMode",
          "Scriptability": "None",
          "DataType": {
            "Enum": "VirtualCursorMode"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "ResetPlayerGuiOnSpawn": {
          "Bool": true
        },
        "ScreenOrientation": {
          "Enum": 2
        },
        "ShowDevelopmentGui": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "VirtualCursorMode": {
          "Enum": 0
        }
      }
    },
    "StarterPack": {
      "Name": "StarterPack",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "StarterPlayer": {
      "Name": "StarterPlayer",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllowCustomAnimations": {
          "Name": "AllowCustomAnimations",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AutoJumpEnabled": {
          "Name": "AutoJumpEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMaxZoomDistance": {
          "Name": "CameraMaxZoomDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMinZoomDistance": {
          "Name": "CameraMinZoomDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMode": {
          "Name": "CameraMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "CameraMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterJumpHeight": {
          "Name": "CharacterJumpHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterJumpPower": {
          "Name": "CharacterJumpPower",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterMaxSlopeAngle": {
          "Name": "CharacterMaxSlopeAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterUseJumpPower": {
          "Name": "CharacterUseJumpPower",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CharacterWalkSpeed": {
          "Name": "CharacterWalkSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevCameraOcclusionMode": {
          "Name": "DevCameraOcclusionMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevCameraOcclusionMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevComputerCameraMovementMode": {
          "Name": "DevComputerCameraMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevComputerCameraMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevComputerMovementMode": {
          "Name": "DevComputerMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevComputerMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevTouchCameraMovementMode": {
          "Name": "DevTouchCameraMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevTouchCameraMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DevTouchMovementMode": {
          "Name": "DevTouchMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DevTouchMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EnableMouseLockOption": {
          "Name": "EnableMouseLockOption",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDFace": {
          "Name": "GameSettingsAssetIDFace",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDHead": {
          "Name": "GameSettingsAssetIDHead",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDLeftArm": {
          "Name": "GameSettingsAssetIDLeftArm",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDLeftLeg": {
          "Name": "GameSettingsAssetIDLeftLeg",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDPants": {
          "Name": "GameSettingsAssetIDPants",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDRightArm": {
          "Name": "GameSettingsAssetIDRightArm",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDRightLeg": {
          "Name": "GameSettingsAssetIDRightLeg",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDShirt": {
          "Name": "GameSettingsAssetIDShirt",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDTeeShirt": {
          "Name": "GameSettingsAssetIDTeeShirt",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAssetIDTorso": {
          "Name": "GameSettingsAssetIDTorso",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsAvatar": {
          "Name": "GameSettingsAvatar",
          "Scriptability": "None",
          "DataType": {
            "Enum": "GameAvatarType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsR15Collision": {
          "Name": "GameSettingsR15Collision",
          "Scriptability": "None",
          "DataType": {
            "Enum": "R15CollisionType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsScaleRangeBodyType": {
          "Name": "GameSettingsScaleRangeBodyType",
          "Scriptability": "None",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsScaleRangeHead": {
          "Name": "GameSettingsScaleRangeHead",
          "Scriptability": "None",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsScaleRangeHeight": {
          "Name": "GameSettingsScaleRangeHeight",
          "Scriptability": "None",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsScaleRangeProportion": {
          "Name": "GameSettingsScaleRangeProportion",
          "Scriptability": "None",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GameSettingsScaleRangeWidth": {
          "Name": "GameSettingsScaleRangeWidth",
          "Scriptability": "None",
          "DataType": {
            "Value": "NumberRange"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HealthDisplayDistance": {
          "Name": "HealthDisplayDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LoadCharacterAppearance": {
          "Name": "LoadCharacterAppearance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LoadCharacterLayeredClothing ": {
          "Name": "LoadCharacterLayeredClothing ",
          "Scriptability": "None",
          "DataType": {
            "Enum": "LoadCharacterLayeredClothing"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "NameDisplayDistance": {
          "Name": "NameDisplayDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UserEmotesEnabled": {
          "Name": "UserEmotesEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AllowCustomAnimations": {
          "Bool": true
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoJumpEnabled": {
          "Bool": true
        },
        "CameraMaxZoomDistance": {
          "Float32": 400.0
        },
        "CameraMinZoomDistance": {
          "Float32": 0.5
        },
        "CameraMode": {
          "Enum": 0
        },
        "CharacterJumpHeight": {
          "Float32": 7.2
        },
        "CharacterJumpPower": {
          "Float32": 50.0
        },
        "CharacterMaxSlopeAngle": {
          "Float32": 89.0
        },
        "CharacterUseJumpPower": {
          "Bool": true
        },
        "CharacterWalkSpeed": {
          "Float32": 16.0
        },
        "DevCameraOcclusionMode": {
          "Enum": 0
        },
        "DevComputerCameraMovementMode": {
          "Enum": 0
        },
        "DevComputerMovementMode": {
          "Enum": 0
        },
        "DevTouchCameraMovementMode": {
          "Enum": 0
        },
        "DevTouchMovementMode": {
          "Enum": 0
        },
        "EnableMouseLockOption": {
          "Bool": true
        },
        "GameSettingsAssetIDFace": {
          "Int64": 0
        },
        "GameSettingsAssetIDHead": {
          "Int64": 0
        },
        "GameSettingsAssetIDLeftArm": {
          "Int64": 0
        },
        "GameSettingsAssetIDLeftLeg": {
          "Int64": 0
        },
        "GameSettingsAssetIDPants": {
          "Int64": 0
        },
        "GameSettingsAssetIDRightArm": {
          "Int64": 0
        },
        "GameSettingsAssetIDRightLeg": {
          "Int64": 0
        },
        "GameSettingsAssetIDShirt": {
          "Int64": 0
        },
        "GameSettingsAssetIDTeeShirt": {
          "Int64": 0
        },
        "GameSettingsAssetIDTorso": {
          "Int64": 0
        },
        "GameSettingsAvatar": {
          "Enum": 1
        },
        "GameSettingsR15Collision": {
          "Enum": 0
        },
        "GameSettingsScaleRangeBodyType": {
          "NumberRange": [
            0.0,
            1.0
          ]
        },
        "GameSettingsScaleRangeHead": {
          "NumberRange": [
            0.95,
            1.0
          ]
        },
        "GameSettingsScaleRangeHeight": {
          "NumberRange": [
            0.9,
            1.05
          ]
        },
        "GameSettingsScaleRangeProportion": {
          "NumberRange": [
            0.0,
            1.0
          ]
        },
        "GameSettingsScaleRangeWidth": {
          "NumberRange": [
            0.7,
            1.0
          ]
        },
        "HealthDisplayDistance": {
          "Float32": 100.0
        },
        "LoadCharacterAppearance": {
          "Bool": true
        },
        "NameDisplayDistance": {
          "Float32": 100.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "UserEmotesEnabled": {
          "Bool": true
        }
      }
    },
    "StarterPlayerScripts": {
      "Name": "StarterPlayerScripts",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Stats": {
      "Name": "Stats",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ContactsCount": {
          "Name": "ContactsCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataReceiveKbps": {
          "Name": "DataReceiveKbps",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DataSendKbps": {
          "Name": "DataSendKbps",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HeartbeatTimeMs": {
          "Name": "HeartbeatTimeMs",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "InstanceCount": {
          "Name": "InstanceCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MovingPrimitivesCount": {
          "Name": "MovingPrimitivesCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PhysicsReceiveKbps": {
          "Name": "PhysicsReceiveKbps",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PhysicsSendKbps": {
          "Name": "PhysicsSendKbps",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PhysicsStepTimeMs": {
          "Name": "PhysicsStepTimeMs",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PrimitivesCount": {
          "Name": "PrimitivesCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "StatsItem": {
      "Name": "StatsItem",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "DisplayName": {
          "Name": "DisplayName",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Status": {
      "Name": "Status",
      "Tags": [
        "Deprecated",
        "NotCreatable"
      ],
      "Superclass": "Model",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StopWatchReporter": {
      "Name": "StopWatchReporter",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StringValue": {
      "Name": "StringValue",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "String": ""
        }
      }
    },
    "Studio": {
      "Name": "Studio",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "\"TODO\" Color": {
          "Name": "\"TODO\" Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "\"function\" Color": {
          "Name": "\"function\" Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "\"local\" Color": {
          "Name": "\"local\" Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "\"nil\" Color": {
          "Name": "\"nil\" Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "\"self\" Color": {
          "Name": "\"self\" Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Active Color": {
          "Name": "Active Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Active Hover Over Color": {
          "Name": "Active Hover Over Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Always Save Script Changes": {
          "Name": "Always Save Script Changes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Animate Hover Over": {
          "Name": "Animate Hover Over",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Auto Clean Empty Line": {
          "Name": "Auto Clean Empty Line",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Auto Closing Brackets": {
          "Name": "Auto Closing Brackets",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Auto Closing Quotes": {
          "Name": "Auto Closing Quotes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Auto Indent Rule": {
          "Name": "Auto Indent Rule",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AutoIndentRule"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Auto-Recovery Enabled": {
          "Name": "Auto-Recovery Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Auto-Recovery Interval (Minutes)": {
          "Name": "Auto-Recovery Interval (Minutes)",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Background Color": {
          "Name": "Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Basic Objects Display Mode": {
          "Name": "Basic Objects Display Mode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ListDisplayMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Bool Color": {
          "Name": "Bool Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Bracket Color": {
          "Name": "Bracket Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Built-in Function Color": {
          "Name": "Built-in Function Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Camera Mouse Wheel Speed": {
          "Name": "Camera Mouse Wheel Speed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Camera Shift Speed": {
          "Name": "Camera Shift Speed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Camera Speed": {
          "Name": "Camera Speed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Camera Zoom to Mouse Position": {
          "Name": "Camera Zoom to Mouse Position",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Clear Output On Start": {
          "Name": "Clear Output On Start",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CommandBarLocalState": {
          "Name": "CommandBarLocalState",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Comment Color": {
          "Name": "Comment Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Current Line Highlight Color": {
          "Name": "Current Line Highlight Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Debugger Current Line Color": {
          "Name": "Debugger Current Line Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Debugger Error Line Color": {
          "Name": "Debugger Error Line Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DeprecatedObjectsShown": {
          "Name": "DeprecatedObjectsShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DisplayLanguage": {
          "Name": "DisplayLanguage",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Doc View Code Background Color": {
          "Name": "Doc View Code Background Color",
          "Scriptability": "None",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Drag Multiple Parts As Single Part": {
          "Name": "Drag Multiple Parts As Single Part",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Autocomplete": {
          "Name": "Enable Autocomplete",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Autocomplete Doc View": {
          "Name": "Enable Autocomplete Doc View",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable CoreScript Debugger": {
          "Name": "Enable CoreScript Debugger",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Http Sandboxing": {
          "Name": "Enable Http Sandboxing",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Internal Beta Features": {
          "Name": "Enable Internal Beta Features",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Internal Features": {
          "Name": "Enable Internal Features",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Script Analysis": {
          "Name": "Enable Script Analysis",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Scrollbar Markers": {
          "Name": "Enable Scrollbar Markers",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Signature Help": {
          "Name": "Enable Signature Help",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Signature Help Doc View": {
          "Name": "Enable Signature Help Doc View",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Temporary Tabs": {
          "Name": "Enable Temporary Tabs",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Temporary Tabs In Explorer": {
          "Name": "Enable Temporary Tabs In Explorer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enable Type Hover": {
          "Name": "Enable Type Hover",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EnableOnTypeAutocomplete": {
          "Name": "EnableOnTypeAutocomplete",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Error Color": {
          "Name": "Error Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Find Selection Background Color": {
          "Name": "Find Selection Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Format On Paste": {
          "Name": "Format On Paste",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Format On Type": {
          "Name": "Format On Type",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Function Name Color": {
          "Name": "Function Name Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Highlight Current Line": {
          "Name": "Highlight Current Line",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Highlight Occurances": {
          "Name": "Highlight Occurances",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Hover Animate Speed": {
          "Name": "Hover Animate Speed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HoverAnimateSpeed"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Hover Box Thickness": {
          "Name": "Hover Box Thickness",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Hover Over Color": {
          "Name": "Hover Over Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Indent Using Spaces": {
          "Name": "Indent Using Spaces",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Keyword Color": {
          "Name": "Keyword Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Line Thickness": {
          "Name": "Line Thickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LuaDebuggerEnabled": {
          "Name": "LuaDebuggerEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LuaDebuggerEnabledAtStartup": {
          "Name": "LuaDebuggerEnabledAtStartup",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Luau Keyword Color": {
          "Name": "Luau Keyword Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Main Volume": {
          "Name": "Main Volume",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Matching Word Background Color": {
          "Name": "Matching Word Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Maximum Output Lines": {
          "Name": "Maximum Output Lines",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Menu Item Background Color": {
          "Name": "Menu Item Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Method Color": {
          "Name": "Method Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Number Color": {
          "Name": "Number Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Only Play Audio from Window in Focus": {
          "Name": "Only Play Audio from Window in Focus",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Operator Color": {
          "Name": "Operator Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Output Layout Mode": {
          "Name": "Output Layout Mode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "OutputLayoutMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PermissionLevelShown": {
          "Name": "PermissionLevelShown",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "PermissionLevelShown"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Physical Draggers Select Scope By Default": {
          "Name": "Physical Draggers Select Scope By Default",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Pivot Snap To Geometry Color": {
          "Name": "Pivot Snap To Geometry Color",
          "Scriptability": "None",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PluginDebuggingEnabled": {
          "Name": "PluginDebuggingEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Primary Text Color": {
          "Name": "Primary Text Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Property Color": {
          "Name": "Property Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Render Throttle Percentage": {
          "Name": "Render Throttle Percentage",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Respect Studio shortcuts when game has focus": {
          "Name": "Respect Studio shortcuts when game has focus",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Ruler Color": {
          "Name": "Ruler Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Rulers": {
          "Name": "Rulers",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RuntimeUndoBehavior": {
          "Name": "RuntimeUndoBehavior",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RuntimeUndoBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Script Editor Color Preset": {
          "Name": "Script Editor Color Preset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "StudioScriptEditorColorPresets"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Script Editor Scrollbar Background Color": {
          "Name": "Script Editor Scrollbar Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Script Editor Scrollbar Handle Color": {
          "Name": "Script Editor Scrollbar Handle Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ScriptEditorMenuBorderColor": {
          "Name": "ScriptEditorMenuBorderColor",
          "Scriptability": "None",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ScriptEditorShouldShowPluginMethods": {
          "Name": "ScriptEditorShouldShowPluginMethods",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScriptTimeoutLength": {
          "Name": "ScriptTimeoutLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Scroll Past Last Line": {
          "Name": "Scroll Past Last Line",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Search Content For Core Scripts": {
          "Name": "Search Content For Core Scripts",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Secondary Text Color": {
          "Name": "Secondary Text Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Select Color": {
          "Name": "Select Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Select/Hover Color": {
          "Name": "Select/Hover Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Selected Menu Item Background Color": {
          "Name": "Selected Menu Item Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Selected Text Color": {
          "Name": "Selected Text Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Selection Background Color": {
          "Name": "Selection Background Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Selection Color": {
          "Name": "Selection Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Selection Highlight Thickness": {
          "Name": "Selection Highlight Thickness",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Server Audio Behavior": {
          "Name": "Server Audio Behavior",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ServerAudioBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Set Pivot of Imported Parts": {
          "Name": "Set Pivot of Imported Parts",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Core GUI in Explorer while Playing": {
          "Name": "Show Core GUI in Explorer while Playing",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Deployment Warnings": {
          "Name": "Show Deployment Warnings",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Diagnostics Bar": {
          "Name": "Show Diagnostics Bar",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show FileSyncService": {
          "Name": "Show FileSyncService",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Hidden Objects in Explorer": {
          "Name": "Show Hidden Objects in Explorer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Hover Over": {
          "Name": "Show Hover Over",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Light Guides": {
          "Name": "Show Light Guides",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Navigation Labels": {
          "Name": "Show Navigation Labels",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Navigation Mesh": {
          "Name": "Show Navigation Mesh",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Pathfinding Links": {
          "Name": "Show Pathfinding Links",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Plugin GUI Service in Explorer": {
          "Name": "Show Plugin GUI Service in Explorer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show QT warnings in output": {
          "Name": "Show QT warnings in output",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show Whitespace": {
          "Name": "Show Whitespace",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Show plus button on hover in Explorer": {
          "Name": "Show plus button on hover in Explorer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShowCorePackagesInExplorer": {
          "Name": "ShowCorePackagesInExplorer",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Skip Closing Brackets and Quotes": {
          "Name": "Skip Closing Brackets and Quotes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "String Color": {
          "Name": "String Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Tab Width": {
          "Name": "Tab Width",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Text Color": {
          "Name": "Text Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Text Wrapping": {
          "Name": "Text Wrapping",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Theme": {
          "Name": "Theme",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UI Theme": {
          "Name": "UI Theme",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "UITheme"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Use Bounding Box Move Handles": {
          "Name": "Use Bounding Box Move Handles",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Warning Color": {
          "Name": "Warning Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Whitespace Color": {
          "Name": "Whitespace Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "StudioAssetService": {
      "Name": "StudioAssetService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StudioData": {
      "Name": "StudioData",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "EnableScriptCollabByDefaultOnLoad": {
          "Name": "EnableScriptCollabByDefaultOnLoad",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SrcPlaceId": {
          "Name": "SrcPlaceId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SrcUniverseId": {
          "Name": "SrcUniverseId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "EnableScriptCollabByDefaultOnLoad": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "SrcPlaceId": {
          "Int64": 0
        },
        "SrcUniverseId": {
          "Int64": 0
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "StudioDeviceEmulatorService": {
      "Name": "StudioDeviceEmulatorService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StudioHighDpiService": {
      "Name": "StudioHighDpiService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StudioPublishService": {
      "Name": "StudioPublishService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StudioScriptDebugEventListener": {
      "Name": "StudioScriptDebugEventListener",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "StudioService": {
      "Name": "StudioService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ActiveScript": {
          "Name": "ActiveScript",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AlignDraggedObjects": {
          "Name": "AlignDraggedObjects",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DraggerSolveConstraints": {
          "Name": "DraggerSolveConstraints",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DrawConstraintsOnTop": {
          "Name": "DrawConstraintsOnTop",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GridSize": {
          "Name": "GridSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "HoverInstance": {
          "Name": "HoverInstance",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "InstalledPluginData": {
          "Name": "InstalledPluginData",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PivotSnapToGeometry": {
          "Name": "PivotSnapToGeometry",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RotateIncrement": {
          "Name": "RotateIncrement",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShowActiveInstanceHighlight": {
          "Name": "ShowActiveInstanceHighlight",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShowConstraintDetails": {
          "Name": "ShowConstraintDetails",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "StudioLocaleId": {
          "Name": "StudioLocaleId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UseLocalSpace": {
          "Name": "UseLocalSpace",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "StudioTheme": {
      "Name": "StudioTheme",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "SunRaysEffect": {
      "Name": "SunRaysEffect",
      "Tags": [],
      "Superclass": "PostEffect",
      "Properties": {
        "Intensity": {
          "Name": "Intensity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Spread": {
          "Name": "Spread",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "Intensity": {
          "Float32": 0.25
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Spread": {
          "Float32": 1.0
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SurfaceAppearance": {
      "Name": "SurfaceAppearance",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AlphaMode": {
          "Name": "AlphaMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AlphaMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ColorMap": {
          "Name": "ColorMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MetalnessMap": {
          "Name": "MetalnessMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NormalMap": {
          "Name": "NormalMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RoughnessMap": {
          "Name": "RoughnessMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TexturePack": {
          "Name": "TexturePack",
          "Scriptability": "None",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AlphaMode": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "ColorMap": {
          "Content": ""
        },
        "MetalnessMap": {
          "Content": ""
        },
        "NormalMap": {
          "Content": ""
        },
        "RoughnessMap": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TexturePack": {
          "Content": ""
        }
      }
    },
    "SurfaceGui": {
      "Name": "SurfaceGui",
      "Tags": [],
      "Superclass": "LayerCollector",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Adornee": {
          "Name": "Adornee",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AlwaysOnTop": {
          "Name": "AlwaysOnTop",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CanvasSize": {
          "Name": "CanvasSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClipsDescendants": {
          "Name": "ClipsDescendants",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Face": {
          "Name": "Face",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightInfluence": {
          "Name": "LightInfluence",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PixelsPerStud": {
          "Name": "PixelsPerStud",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SizingMode": {
          "Name": "SizingMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SurfaceGuiSizingMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ToolPunchThroughDistance": {
          "Name": "ToolPunchThroughDistance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ZOffset": {
          "Name": "ZOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": true
        },
        "AlwaysOnTop": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "Brightness": {
          "Float32": 1.0
        },
        "CanvasSize": {
          "Vector2": [
            800.0,
            600.0
          ]
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Enabled": {
          "Bool": true
        },
        "Face": {
          "Enum": 5
        },
        "LightInfluence": {
          "Float32": 0.0
        },
        "PixelsPerStud": {
          "Float32": 50.0
        },
        "ResetOnSpawn": {
          "Bool": true
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SizingMode": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "ToolPunchThroughDistance": {
          "Float32": 0.0
        },
        "ZIndexBehavior": {
          "Enum": 0
        },
        "ZOffset": {
          "Float32": 0.0
        }
      }
    },
    "SurfaceLight": {
      "Name": "SurfaceLight",
      "Tags": [],
      "Superclass": "Light",
      "Properties": {
        "Angle": {
          "Name": "Angle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Face": {
          "Name": "Face",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Range": {
          "Name": "Range",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Angle": {
          "Float32": 90.0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "Color": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Enabled": {
          "Bool": true
        },
        "Face": {
          "Enum": 5
        },
        "Range": {
          "Float32": 16.0
        },
        "Shadows": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "SurfaceSelection": {
      "Name": "SurfaceSelection",
      "Tags": [],
      "Superclass": "PartAdornment",
      "Properties": {
        "TargetSurface": {
          "Name": "TargetSurface",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "NormalId"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            0.050980397,
            0.41176474,
            0.6745098
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TargetSurface": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Visible": {
          "Bool": true
        }
      }
    },
    "TaskScheduler": {
      "Name": "TaskScheduler",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "SchedulerDutyCycle": {
          "Name": "SchedulerDutyCycle",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SchedulerRate": {
          "Name": "SchedulerRate",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ThreadPoolConfig": {
          "Name": "ThreadPoolConfig",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ThreadPoolConfig"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ThreadPoolSize": {
          "Name": "ThreadPoolSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Team": {
      "Name": "Team",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "AutoAssignable": {
          "Name": "AutoAssignable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AutoColorCharacters": {
          "Name": "AutoColorCharacters",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ChildOrder": {
          "Name": "ChildOrder",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Score": {
          "Name": "Score",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TeamColor": {
          "Name": "TeamColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutoAssignable": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TeamColor": {
          "Int32": 1
        }
      }
    },
    "Teams": {
      "Name": "Teams",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TeleportAsyncResult": {
      "Name": "TeleportAsyncResult",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "PrivateServerId": {
          "Name": "PrivateServerId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ReservedServerAccessCode": {
          "Name": "ReservedServerAccessCode",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "TeleportOptions": {
      "Name": "TeleportOptions",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "ReservedServerAccessCode": {
          "Name": "ReservedServerAccessCode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ServerInstanceId": {
          "Name": "ServerInstanceId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ShouldReserveServer": {
          "Name": "ShouldReserveServer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "ReservedServerAccessCode": {
          "String": ""
        },
        "ServerInstanceId": {
          "String": ""
        },
        "ShouldReserveServer": {
          "Bool": false
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TeleportService": {
      "Name": "TeleportService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CustomizedTeleportUI": {
          "Name": "CustomizedTeleportUI",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TemporaryCageMeshProvider": {
      "Name": "TemporaryCageMeshProvider",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TemporaryScriptService": {
      "Name": "TemporaryScriptService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Terrain": {
      "Name": "Terrain",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "BasePart",
      "Properties": {
        "Decoration": {
          "Name": "Decoration",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsSmooth": {
          "Name": "IsSmooth",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LastUsedModificationMethod": {
          "Name": "LastUsedModificationMethod",
          "Scriptability": "None",
          "DataType": {
            "Enum": "TerrainAcquisitionMethod"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaterialColors": {
          "Name": "MaterialColors",
          "Scriptability": "None",
          "DataType": {
            "Value": "BinaryString"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxExtents": {
          "Name": "MaxExtents",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Region3int16"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "WaterColor": {
          "Name": "WaterColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WaterReflectance": {
          "Name": "WaterReflectance",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WaterTransparency": {
          "Name": "WaterTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WaterWaveSize": {
          "Name": "WaterWaveSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WaterWaveSpeed": {
          "Name": "WaterWaveSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": true
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "Decoration": {
          "Bool": false
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": true
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "MaterialColors": {
          "BinaryString": "AAAAAAAAan8/P39rf2Y/ilY+j35fi21PZmxvZbDqw8faiVpHOi4kHh4lZlw76JxKc3trhHtagcLgc4RKxr21zq2UlJSM"
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            2044.0,
            252.0,
            2044.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "WaterColor": {
          "Color3": [
            0.05,
            0.33,
            0.36
          ]
        },
        "WaterReflectance": {
          "Float32": 1.0
        },
        "WaterTransparency": {
          "Float32": 0.3
        },
        "WaterWaveSize": {
          "Float32": 0.15
        },
        "WaterWaveSpeed": {
          "Float32": 10.0
        }
      }
    },
    "TerrainDetail": {
      "Name": "TerrainDetail",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ColorMap": {
          "Name": "ColorMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Face": {
          "Name": "Face",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TerrainFace"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaterialPattern": {
          "Name": "MaterialPattern",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "MaterialPattern"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MetalnessMap": {
          "Name": "MetalnessMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NormalMap": {
          "Name": "NormalMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RoughnessMap": {
          "Name": "RoughnessMap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsPerTile": {
          "Name": "StudsPerTile",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "ColorMap": {
          "Content": ""
        },
        "Face": {
          "Enum": 1
        },
        "MaterialPattern": {
          "Enum": 0
        },
        "MetalnessMap": {
          "Content": ""
        },
        "NormalMap": {
          "Content": ""
        },
        "RoughnessMap": {
          "Content": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StudsPerTile": {
          "Float32": 10.0
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TerrainRegion": {
      "Name": "TerrainRegion",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "IsSmooth": {
          "Name": "IsSmooth",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SizeInCells": {
          "Name": "SizeInCells",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TestService": {
      "Name": "TestService",
      "Tags": [
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AutoRuns": {
          "Name": "AutoRuns",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Description": {
          "Name": "Description",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ErrorCount": {
          "Name": "ErrorCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ExecuteWithStudioRun": {
          "Name": "ExecuteWithStudioRun",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Is30FpsThrottleEnabled": {
          "Name": "Is30FpsThrottleEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsPhysicsEnvironmentalThrottled": {
          "Name": "IsPhysicsEnvironmentalThrottled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsSleepAllowed": {
          "Name": "IsSleepAllowed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NumberOfPlayers": {
          "Name": "NumberOfPlayers",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SimulateSecondsLag": {
          "Name": "SimulateSecondsLag",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TestCount": {
          "Name": "TestCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Timeout": {
          "Name": "Timeout",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WarnCount": {
          "Name": "WarnCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutoRuns": {
          "Bool": true
        },
        "Description": {
          "String": ""
        },
        "ExecuteWithStudioRun": {
          "Bool": false
        },
        "Is30FpsThrottleEnabled": {
          "Bool": true
        },
        "IsPhysicsEnvironmentalThrottled": {
          "Bool": true
        },
        "IsSleepAllowed": {
          "Bool": true
        },
        "NumberOfPlayers": {
          "Int32": 0
        },
        "SimulateSecondsLag": {
          "Float64": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Timeout": {
          "Float64": 10.0
        }
      }
    },
    "TextBox": {
      "Name": "TextBox",
      "Tags": [],
      "Superclass": "GuiObject",
      "Properties": {
        "ClearTextOnFocus": {
          "Name": "ClearTextOnFocus",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ContentText": {
          "Name": "ContentText",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CursorPosition": {
          "Name": "CursorPosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EnableRealtimeFilteringHints": {
          "Name": "EnableRealtimeFilteringHints",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Font": {
          "Name": "Font",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "Font"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FontSize": {
          "Name": "FontSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FontSize"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LineHeight": {
          "Name": "LineHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ManualFocusRelease": {
          "Name": "ManualFocusRelease",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxVisibleGraphemes": {
          "Name": "MaxVisibleGraphemes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MultiLine": {
          "Name": "MultiLine",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OverlayNativeInput": {
          "Name": "OverlayNativeInput",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PlaceholderColor3": {
          "Name": "PlaceholderColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PlaceholderText": {
          "Name": "PlaceholderText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReturnKeyType": {
          "Name": "ReturnKeyType",
          "Scriptability": "None",
          "DataType": {
            "Enum": "ReturnKeyType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RichText": {
          "Name": "RichText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SelectionStart": {
          "Name": "SelectionStart",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShowNativeInput": {
          "Name": "ShowNativeInput",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextBounds": {
          "Name": "TextBounds",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextColor": {
          "Name": "TextColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextColor3": {
          "Name": "TextColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextEditable": {
          "Name": "TextEditable",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextFits": {
          "Name": "TextFits",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextInputType": {
          "Name": "TextInputType",
          "Scriptability": "None",
          "DataType": {
            "Enum": "TextInputType"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextScaled": {
          "Name": "TextScaled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextSize": {
          "Name": "TextSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextStrokeColor3": {
          "Name": "TextStrokeColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextStrokeTransparency": {
          "Name": "TextStrokeTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextTransparency": {
          "Name": "TextTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextTruncate": {
          "Name": "TextTruncate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextTruncate"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextWrap": {
          "Name": "TextWrap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextWrapped": {
          "Name": "TextWrapped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextXAlignment": {
          "Name": "TextXAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextXAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextYAlignment": {
          "Name": "TextYAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextYAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": true
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClearTextOnFocus": {
          "Bool": true
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "Font": {
          "Enum": 0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "LineHeight": {
          "Float32": 1.0
        },
        "MaxVisibleGraphemes": {
          "Int32": -1
        },
        "MultiLine": {
          "Bool": false
        },
        "PlaceholderColor3": {
          "Color3": [
            0.7,
            0.7,
            0.7
          ]
        },
        "PlaceholderText": {
          "String": ""
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "RichText": {
          "Bool": false
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": true
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "ShowNativeInput": {
          "Bool": true
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Text": {
          "String": "TextBox"
        },
        "TextColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "TextEditable": {
          "Bool": true
        },
        "TextScaled": {
          "Bool": false
        },
        "TextSize": {
          "Float32": 8.0
        },
        "TextStrokeColor3": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "TextStrokeTransparency": {
          "Float32": 1.0
        },
        "TextTransparency": {
          "Float32": 0.0
        },
        "TextTruncate": {
          "Enum": 0
        },
        "TextWrapped": {
          "Bool": false
        },
        "TextXAlignment": {
          "Enum": 2
        },
        "TextYAlignment": {
          "Enum": 1
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "TextBoxService": {
      "Name": "TextBoxService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TextButton": {
      "Name": "TextButton",
      "Tags": [],
      "Superclass": "GuiButton",
      "Properties": {
        "ContentText": {
          "Name": "ContentText",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Font": {
          "Name": "Font",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "Font"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FontSize": {
          "Name": "FontSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FontSize"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LineHeight": {
          "Name": "LineHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LocalizedText": {
          "Name": "LocalizedText",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxVisibleGraphemes": {
          "Name": "MaxVisibleGraphemes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RichText": {
          "Name": "RichText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextBounds": {
          "Name": "TextBounds",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextColor": {
          "Name": "TextColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextColor3": {
          "Name": "TextColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextFits": {
          "Name": "TextFits",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextScaled": {
          "Name": "TextScaled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextSize": {
          "Name": "TextSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextStrokeColor3": {
          "Name": "TextStrokeColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextStrokeTransparency": {
          "Name": "TextStrokeTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextTransparency": {
          "Name": "TextTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextTruncate": {
          "Name": "TextTruncate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextTruncate"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextWrap": {
          "Name": "TextWrap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextWrapped": {
          "Name": "TextWrapped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextXAlignment": {
          "Name": "TextXAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextXAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextYAlignment": {
          "Name": "TextYAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextYAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": true
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoButtonColor": {
          "Bool": true
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "Font": {
          "Enum": 0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "LineHeight": {
          "Float32": 1.0
        },
        "MaxVisibleGraphemes": {
          "Int32": -1
        },
        "Modal": {
          "Bool": false
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "RichText": {
          "Bool": false
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": true
        },
        "Selected": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Style": {
          "Enum": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Text": {
          "String": "Button"
        },
        "TextColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "TextScaled": {
          "Bool": false
        },
        "TextSize": {
          "Float32": 8.0
        },
        "TextStrokeColor3": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "TextStrokeTransparency": {
          "Float32": 1.0
        },
        "TextTransparency": {
          "Float32": 0.0
        },
        "TextTruncate": {
          "Enum": 0
        },
        "TextWrapped": {
          "Bool": false
        },
        "TextXAlignment": {
          "Enum": 2
        },
        "TextYAlignment": {
          "Enum": 1
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "TextChannel": {
      "Name": "TextChannel",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TextChatCommand": {
      "Name": "TextChatCommand",
      "Tags": [
        "NotBrowsable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PrimaryAlias": {
          "Name": "PrimaryAlias",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SecondaryAlias": {
          "Name": "SecondaryAlias",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Enabled": {
          "Bool": true
        },
        "PrimaryAlias": {
          "String": ""
        },
        "SecondaryAlias": {
          "String": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TextChatConfigurations": {
      "Name": "TextChatConfigurations",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TextChatMessage": {
      "Name": "TextChatMessage",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "MessageId": {
          "Name": "MessageId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Metadata": {
          "Name": "Metadata",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PrefixText": {
          "Name": "PrefixText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Status": {
          "Name": "Status",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextChatMessageStatus"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextChannel": {
          "Name": "TextChannel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextSource": {
          "Name": "TextSource",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "TextChatMessageProperties": {
      "Name": "TextChatMessageProperties",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "PrefixText": {
          "Name": "PrefixText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TextChatService": {
      "Name": "TextChatService",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ChatVersion": {
          "Name": "ChatVersion",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "ChatVersion"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CreateDefaultCommands": {
          "Name": "CreateDefaultCommands",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CreateDefaultTextChannels": {
          "Name": "CreateDefaultTextChannels",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "ChatVersion": {
          "Enum": 0
        },
        "CreateDefaultCommands": {
          "Bool": true
        },
        "CreateDefaultTextChannels": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TextFilterResult": {
      "Name": "TextFilterResult",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TextLabel": {
      "Name": "TextLabel",
      "Tags": [],
      "Superclass": "GuiLabel",
      "Properties": {
        "ContentText": {
          "Name": "ContentText",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Font": {
          "Name": "Font",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "Font"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FontSize": {
          "Name": "FontSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FontSize"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LineHeight": {
          "Name": "LineHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LocalizedText": {
          "Name": "LocalizedText",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MaxVisibleGraphemes": {
          "Name": "MaxVisibleGraphemes",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RichText": {
          "Name": "RichText",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Text": {
          "Name": "Text",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextBounds": {
          "Name": "TextBounds",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextColor": {
          "Name": "TextColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "BrickColor"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextColor3": {
          "Name": "TextColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextFits": {
          "Name": "TextFits",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextScaled": {
          "Name": "TextScaled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextSize": {
          "Name": "TextSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextStrokeColor3": {
          "Name": "TextStrokeColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextStrokeTransparency": {
          "Name": "TextStrokeTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextTransparency": {
          "Name": "TextTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextTruncate": {
          "Name": "TextTruncate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextTruncate"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextWrap": {
          "Name": "TextWrap",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TextWrapped": {
          "Name": "TextWrapped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextXAlignment": {
          "Name": "TextXAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextXAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextYAlignment": {
          "Name": "TextYAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextYAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "Font": {
          "Enum": 0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "LineHeight": {
          "Float32": 1.0
        },
        "MaxVisibleGraphemes": {
          "Int32": -1
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "RichText": {
          "Bool": false
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Text": {
          "String": "Label"
        },
        "TextColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "TextScaled": {
          "Bool": false
        },
        "TextSize": {
          "Float32": 8.0
        },
        "TextStrokeColor3": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "TextStrokeTransparency": {
          "Float32": 1.0
        },
        "TextTransparency": {
          "Float32": 0.0
        },
        "TextTruncate": {
          "Enum": 0
        },
        "TextWrapped": {
          "Bool": false
        },
        "TextXAlignment": {
          "Enum": 2
        },
        "TextYAlignment": {
          "Enum": 1
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "TextService": {
      "Name": "TextService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TextSource": {
      "Name": "TextSource",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "CanSend": {
          "Name": "CanSend",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UserId": {
          "Name": "UserId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "Texture": {
      "Name": "Texture",
      "Tags": [],
      "Superclass": "Decal",
      "Properties": {
        "OffsetStudsU": {
          "Name": "OffsetStudsU",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OffsetStudsV": {
          "Name": "OffsetStudsV",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsPerTileU": {
          "Name": "StudsPerTileU",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StudsPerTileV": {
          "Name": "StudsPerTileV",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "Face": {
          "Enum": 5
        },
        "OffsetStudsU": {
          "Float32": 0.0
        },
        "OffsetStudsV": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StudsPerTileU": {
          "Float32": 2.0
        },
        "StudsPerTileV": {
          "Float32": 2.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Texture": {
          "Content": ""
        },
        "Transparency": {
          "Float32": 0.0
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "ThirdPartyUserService": {
      "Name": "ThirdPartyUserService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "ThreadState": {
      "Name": "ThreadState",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "FrameCount": {
          "Name": "FrameCount",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Populated": {
          "Name": "Populated",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ThreadId": {
          "Name": "ThreadId",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ThreadName": {
          "Name": "ThreadName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "TimerService": {
      "Name": "TimerService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ToastNotificationService": {
      "Name": "ToastNotificationService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Tool": {
      "Name": "Tool",
      "Tags": [],
      "Superclass": "BackpackItem",
      "Properties": {
        "CanBeDropped": {
          "Name": "CanBeDropped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Grip": {
          "Name": "Grip",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GripForward": {
          "Name": "GripForward",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GripPos": {
          "Name": "GripPos",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GripRight": {
          "Name": "GripRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GripUp": {
          "Name": "GripUp",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ManualActivationOnly": {
          "Name": "ManualActivationOnly",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RequiresHandle": {
          "Name": "RequiresHandle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ToolTip": {
          "Name": "ToolTip",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CanBeDropped": {
          "Bool": true
        },
        "Enabled": {
          "Bool": true
        },
        "Grip": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "ManualActivationOnly": {
          "Bool": false
        },
        "RequiresHandle": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TextureId": {
          "Content": ""
        },
        "ToolTip": {
          "String": ""
        }
      }
    },
    "ToolboxService": {
      "Name": "ToolboxService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Torque": {
      "Name": "Torque",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "RelativeTo": {
          "Name": "RelativeTo",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorRelativeTo"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Torque": {
          "Name": "Torque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 23
        },
        "Enabled": {
          "Bool": true
        },
        "RelativeTo": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Torque": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "TorsionSpringConstraint": {
      "Name": "TorsionSpringConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "Coils": {
          "Name": "Coils",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentAngle": {
          "Name": "CurrentAngle",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Damping": {
          "Name": "Damping",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimitEnabled": {
          "Name": "LimitEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxAngle": {
          "Name": "MaxAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxTorque": {
          "Name": "MaxTorque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Restitution": {
          "Name": "Restitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Stiffness": {
          "Name": "Stiffness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Coils": {
          "Float32": 8.0
        },
        "Color": {
          "Int32": 200
        },
        "Damping": {
          "Float32": 0.01
        },
        "Enabled": {
          "Bool": true
        },
        "LimitEnabled": {
          "Bool": false
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "MaxAngle": {
          "Float32": 45.0
        },
        "MaxTorque": {
          "Float32": null
        },
        "Radius": {
          "Float32": 0.4
        },
        "Restitution": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Stiffness": {
          "Float32": 100.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "TotalCountTimeIntervalItem": {
      "Name": "TotalCountTimeIntervalItem",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "StatsItem",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TouchInputService": {
      "Name": "TouchInputService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TouchTransmitter": {
      "Name": "TouchTransmitter",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TracerService": {
      "Name": "TracerService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "TrackerStreamAnimation": {
      "Name": "TrackerStreamAnimation",
      "Tags": [
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Trail": {
      "Name": "Trail",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Attachment0": {
          "Name": "Attachment0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Attachment1": {
          "Name": "Attachment1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Brightness": {
          "Name": "Brightness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "ColorSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FaceCamera": {
          "Name": "FaceCamera",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Lifetime": {
          "Name": "Lifetime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightEmission": {
          "Name": "LightEmission",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightInfluence": {
          "Name": "LightInfluence",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxLength": {
          "Name": "MaxLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MinLength": {
          "Name": "MinLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Texture": {
          "Name": "Texture",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureLength": {
          "Name": "TextureLength",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TextureMode": {
          "Name": "TextureMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TextureMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "WidthScale": {
          "Name": "WidthScale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Brightness": {
          "Float32": 1.0
        },
        "Color": {
          "ColorSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              },
              {
                "time": 1.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              }
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "FaceCamera": {
          "Bool": false
        },
        "Lifetime": {
          "Float32": 2.0
        },
        "LightEmission": {
          "Float32": 0.0
        },
        "LightInfluence": {
          "Float32": 0.0
        },
        "MaxLength": {
          "Float32": 0.0
        },
        "MinLength": {
          "Float32": 0.1
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Texture": {
          "Content": ""
        },
        "TextureLength": {
          "Float32": 1.0
        },
        "TextureMode": {
          "Enum": 0
        },
        "Transparency": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 0.5,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 0.5,
                "envelope": 0.0
              }
            ]
          }
        },
        "WidthScale": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 1.0,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 1.0,
                "envelope": 0.0
              }
            ]
          }
        }
      }
    },
    "Translator": {
      "Name": "Translator",
      "Tags": [
        "NotCreatable",
        "NotReplicated"
      ],
      "Superclass": "Instance",
      "Properties": {
        "LocaleId": {
          "Name": "LocaleId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "TremoloSoundEffect": {
      "Name": "TremoloSoundEffect",
      "Tags": [],
      "Superclass": "SoundEffect",
      "Properties": {
        "Depth": {
          "Name": "Depth",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Duty": {
          "Name": "Duty",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Frequency": {
          "Name": "Frequency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Depth": {
          "Float32": 1.0
        },
        "Duty": {
          "Float32": 0.5
        },
        "Enabled": {
          "Bool": true
        },
        "Frequency": {
          "Float32": 5.0
        },
        "Priority": {
          "Int32": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TriangleMeshPart": {
      "Name": "TriangleMeshPart",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "BasePart",
      "Properties": {
        "CollisionFidelity": {
          "Name": "CollisionFidelity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "CollisionFidelity"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "TrussPart": {
      "Name": "TrussPart",
      "Tags": [],
      "Superclass": "BasePart",
      "Properties": {
        "Style": {
          "Name": "Style",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "Style"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 5
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 5
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 5
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 5
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 5
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            2.0,
            2.0,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 5
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "Tween": {
      "Name": "Tween",
      "Tags": [],
      "Superclass": "TweenBase",
      "Properties": {
        "Instance": {
          "Name": "Instance",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "TweenBase": {
      "Name": "TweenBase",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "PlaybackState": {
          "Name": "PlaybackState",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "PlaybackState"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "TweenService": {
      "Name": "TweenService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UGCValidationService": {
      "Name": "UGCValidationService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UIAspectRatioConstraint": {
      "Name": "UIAspectRatioConstraint",
      "Tags": [],
      "Superclass": "UIConstraint",
      "Properties": {
        "AspectRatio": {
          "Name": "AspectRatio",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AspectType": {
          "Name": "AspectType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AspectType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DominantAxis": {
          "Name": "DominantAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "DominantAxis"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AspectRatio": {
          "Float32": 1.0
        },
        "AspectType": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "DominantAxis": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UIBase": {
      "Name": "UIBase",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UIComponent": {
      "Name": "UIComponent",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "UIBase",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UIConstraint": {
      "Name": "UIConstraint",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "UIComponent",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UICorner": {
      "Name": "UICorner",
      "Tags": [],
      "Superclass": "UIComponent",
      "Properties": {
        "CornerRadius": {
          "Name": "CornerRadius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CornerRadius": {
          "UDim": [
            0.0,
            8
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UIGradient": {
      "Name": "UIGradient",
      "Tags": [],
      "Superclass": "UIComponent",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "ColorSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Offset": {
          "Name": "Offset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Rotation": {
          "Name": "Rotation",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "NumberSequence"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "ColorSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              },
              {
                "time": 1.0,
                "color": [
                  1.0,
                  1.0,
                  1.0
                ]
              }
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "Offset": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Rotation": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Transparency": {
          "NumberSequence": {
            "keypoints": [
              {
                "time": 0.0,
                "value": 0.0,
                "envelope": 0.0
              },
              {
                "time": 1.0,
                "value": 0.0,
                "envelope": 0.0
              }
            ]
          }
        }
      }
    },
    "UIGridLayout": {
      "Name": "UIGridLayout",
      "Tags": [],
      "Superclass": "UIGridStyleLayout",
      "Properties": {
        "AbsoluteCellCount": {
          "Name": "AbsoluteCellCount",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "AbsoluteCellSize": {
          "Name": "AbsoluteCellSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CellPadding": {
          "Name": "CellPadding",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CellSize": {
          "Name": "CellSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FillDirectionMaxCells": {
          "Name": "FillDirectionMaxCells",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StartCorner": {
          "Name": "StartCorner",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "StartCorner"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CellPadding": {
          "UDim2": [
            [
              0.0,
              5
            ],
            [
              0.0,
              5
            ]
          ]
        },
        "CellSize": {
          "UDim2": [
            [
              0.0,
              100
            ],
            [
              0.0,
              100
            ]
          ]
        },
        "FillDirection": {
          "Enum": 0
        },
        "FillDirectionMaxCells": {
          "Int32": 0
        },
        "HorizontalAlignment": {
          "Enum": 1
        },
        "SortOrder": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StartCorner": {
          "Enum": 0
        },
        "Tags": {
          "BinaryString": ""
        },
        "VerticalAlignment": {
          "Enum": 1
        }
      }
    },
    "UIGridStyleLayout": {
      "Name": "UIGridStyleLayout",
      "Tags": [
        "NotBrowsable",
        "NotCreatable"
      ],
      "Superclass": "UILayout",
      "Properties": {
        "AbsoluteContentSize": {
          "Name": "AbsoluteContentSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "FillDirection": {
          "Name": "FillDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "FillDirection"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HorizontalAlignment": {
          "Name": "HorizontalAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "HorizontalAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SortOrder": {
          "Name": "SortOrder",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SortOrder"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VerticalAlignment": {
          "Name": "VerticalAlignment",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "VerticalAlignment"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "UILayout": {
      "Name": "UILayout",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "UIComponent",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UIListLayout": {
      "Name": "UIListLayout",
      "Tags": [],
      "Superclass": "UIGridStyleLayout",
      "Properties": {
        "Padding": {
          "Name": "Padding",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "FillDirection": {
          "Enum": 1
        },
        "HorizontalAlignment": {
          "Enum": 1
        },
        "Padding": {
          "UDim": [
            0.0,
            0
          ]
        },
        "SortOrder": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "VerticalAlignment": {
          "Enum": 1
        }
      }
    },
    "UIPadding": {
      "Name": "UIPadding",
      "Tags": [],
      "Superclass": "UIComponent",
      "Properties": {
        "PaddingBottom": {
          "Name": "PaddingBottom",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PaddingLeft": {
          "Name": "PaddingLeft",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PaddingRight": {
          "Name": "PaddingRight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PaddingTop": {
          "Name": "PaddingTop",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "PaddingBottom": {
          "UDim": [
            0.0,
            0
          ]
        },
        "PaddingLeft": {
          "UDim": [
            0.0,
            0
          ]
        },
        "PaddingRight": {
          "UDim": [
            0.0,
            0
          ]
        },
        "PaddingTop": {
          "UDim": [
            0.0,
            0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UIPageLayout": {
      "Name": "UIPageLayout",
      "Tags": [],
      "Superclass": "UIGridStyleLayout",
      "Properties": {
        "Animated": {
          "Name": "Animated",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Circular": {
          "Name": "Circular",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentPage": {
          "Name": "CurrentPage",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "EasingDirection": {
          "Name": "EasingDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "EasingDirection"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "EasingStyle": {
          "Name": "EasingStyle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "EasingStyle"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GamepadInputEnabled": {
          "Name": "GamepadInputEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Padding": {
          "Name": "Padding",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ScrollWheelInputEnabled": {
          "Name": "ScrollWheelInputEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TouchInputEnabled": {
          "Name": "TouchInputEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TweenTime": {
          "Name": "TweenTime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Animated": {
          "Bool": true
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Circular": {
          "Bool": false
        },
        "EasingDirection": {
          "Enum": 1
        },
        "EasingStyle": {
          "Enum": 2
        },
        "FillDirection": {
          "Enum": 0
        },
        "GamepadInputEnabled": {
          "Bool": true
        },
        "HorizontalAlignment": {
          "Enum": 1
        },
        "Padding": {
          "UDim": [
            0.0,
            0
          ]
        },
        "ScrollWheelInputEnabled": {
          "Bool": true
        },
        "SortOrder": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TouchInputEnabled": {
          "Bool": true
        },
        "TweenTime": {
          "Float32": 1.0
        },
        "VerticalAlignment": {
          "Enum": 1
        }
      }
    },
    "UIScale": {
      "Name": "UIScale",
      "Tags": [],
      "Superclass": "UIComponent",
      "Properties": {
        "Scale": {
          "Name": "Scale",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Scale": {
          "Float32": 1.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UISizeConstraint": {
      "Name": "UISizeConstraint",
      "Tags": [],
      "Superclass": "UIConstraint",
      "Properties": {
        "MaxSize": {
          "Name": "MaxSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MinSize": {
          "Name": "MinSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MaxSize": {
          "Vector2": [
            null,
            null
          ]
        },
        "MinSize": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UIStroke": {
      "Name": "UIStroke",
      "Tags": [],
      "Superclass": "UIComponent",
      "Properties": {
        "ApplyStrokeMode": {
          "Name": "ApplyStrokeMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ApplyStrokeMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LineJoinMode": {
          "Name": "LineJoinMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "LineJoinMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Thickness": {
          "Name": "Thickness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Transparency": {
          "Name": "Transparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ApplyStrokeMode": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Color3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Enabled": {
          "Bool": true
        },
        "LineJoinMode": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Thickness": {
          "Float32": 1.0
        },
        "Transparency": {
          "Float32": 0.0
        }
      }
    },
    "UITableLayout": {
      "Name": "UITableLayout",
      "Tags": [],
      "Superclass": "UIGridStyleLayout",
      "Properties": {
        "FillEmptySpaceColumns": {
          "Name": "FillEmptySpaceColumns",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FillEmptySpaceRows": {
          "Name": "FillEmptySpaceRows",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MajorAxis": {
          "Name": "MajorAxis",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TableMajorAxis"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Padding": {
          "Name": "Padding",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "UDim2"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "FillDirection": {
          "Enum": 1
        },
        "FillEmptySpaceColumns": {
          "Bool": false
        },
        "FillEmptySpaceRows": {
          "Bool": false
        },
        "HorizontalAlignment": {
          "Enum": 1
        },
        "MajorAxis": {
          "Enum": 0
        },
        "Padding": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SortOrder": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "VerticalAlignment": {
          "Enum": 1
        }
      }
    },
    "UITextSizeConstraint": {
      "Name": "UITextSizeConstraint",
      "Tags": [],
      "Superclass": "UIConstraint",
      "Properties": {
        "MaxTextSize": {
          "Name": "MaxTextSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MinTextSize": {
          "Name": "MinTextSize",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "MaxTextSize": {
          "Int32": 100
        },
        "MinTextSize": {
          "Int32": 1
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UnionOperation": {
      "Name": "UnionOperation",
      "Tags": [],
      "Superclass": "PartOperation",
      "Properties": {},
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "AssetId": {
          "Content": ""
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 0
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            255,
            255,
            255
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RenderFidelity": {
          "Enum": 1
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SmoothingAngle": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 0
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "UsePartColor": {
          "Bool": false
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "UniversalConstraint": {
      "Name": "UniversalConstraint",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "LimitsEnabled": {
          "Name": "LimitsEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxAngle": {
          "Name": "MaxAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Radius": {
          "Name": "Radius",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Restitution": {
          "Name": "Restitution",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 1009
        },
        "Enabled": {
          "Bool": true
        },
        "LimitsEnabled": {
          "Bool": false
        },
        "MaxAngle": {
          "Float32": 45.0
        },
        "Radius": {
          "Float32": 0.2
        },
        "Restitution": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "UnvalidatedAssetService": {
      "Name": "UnvalidatedAssetService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "UserGameSettings": {
      "Name": "UserGameSettings",
      "Tags": [
        "NotCreatable",
        "UserSettings"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AllTutorialsDisabled": {
          "Name": "AllTutorialsDisabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraMode": {
          "Name": "CameraMode",
          "Scriptability": "None",
          "DataType": {
            "Enum": "CustomCameraMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CameraYInverted": {
          "Name": "CameraYInverted",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ChatVisible": {
          "Name": "ChatVisible",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ComputerCameraMovementMode": {
          "Name": "ComputerCameraMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ComputerCameraMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ComputerMovementMode": {
          "Name": "ComputerMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ComputerMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ControlMode": {
          "Name": "ControlMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ControlMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DefaultCameraID": {
          "Name": "DefaultCameraID",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Fullscreen": {
          "Name": "Fullscreen",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GamepadCameraSensitivity": {
          "Name": "GamepadCameraSensitivity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "GraphicsQualityLevel": {
          "Name": "GraphicsQualityLevel",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HasEverUsedVR": {
          "Name": "HasEverUsedVR",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "IsUsingCameraYInverted": {
          "Name": "IsUsingCameraYInverted",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "IsUsingGamepadCameraSensitivity": {
          "Name": "IsUsingGamepadCameraSensitivity",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MasterVolume": {
          "Name": "MasterVolume",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MicroProfilerWebServerEnabled": {
          "Name": "MicroProfilerWebServerEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MicroProfilerWebServerIP": {
          "Name": "MicroProfilerWebServerIP",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MicroProfilerWebServerPort": {
          "Name": "MicroProfilerWebServerPort",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MouseSensitivity": {
          "Name": "MouseSensitivity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MouseSensitivityFirstPerson": {
          "Name": "MouseSensitivityFirstPerson",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MouseSensitivityThirdPerson": {
          "Name": "MouseSensitivityThirdPerson",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OnScreenProfilerEnabled": {
          "Name": "OnScreenProfilerEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "OnboardingsCompleted": {
          "Name": "OnboardingsCompleted",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PerformanceStatsVisible": {
          "Name": "PerformanceStatsVisible",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RCCProfilerRecordFrameRate": {
          "Name": "RCCProfilerRecordFrameRate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RCCProfilerRecordTimeFrame": {
          "Name": "RCCProfilerRecordTimeFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RotationType": {
          "Name": "RotationType",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "RotationType"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "SavedQualityLevel": {
          "Name": "SavedQualityLevel",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "SavedQualitySetting"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StartMaximized": {
          "Name": "StartMaximized",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StartScreenPosition": {
          "Name": "StartScreenPosition",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StartScreenSize": {
          "Name": "StartScreenSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TouchCameraMovementMode": {
          "Name": "TouchCameraMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TouchCameraMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TouchMovementMode": {
          "Name": "TouchMovementMode",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "TouchMovementMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UsedCoreGuiIsVisibleToggle": {
          "Name": "UsedCoreGuiIsVisibleToggle",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UsedCustomGuiIsVisibleToggle": {
          "Name": "UsedCustomGuiIsVisibleToggle",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "UsedHideHudShortcut": {
          "Name": "UsedHideHudShortcut",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VREnabled": {
          "Name": "VREnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VRRotationIntensity": {
          "Name": "VRRotationIntensity",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VignetteEnabled": {
          "Name": "VignetteEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "UserInputService": {
      "Name": "UserInputService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AccelerometerEnabled": {
          "Name": "AccelerometerEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "BottomBarSize": {
          "Name": "BottomBarSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GamepadEnabled": {
          "Name": "GamepadEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GazeSelectionEnabled": {
          "Name": "GazeSelectionEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GyroscopeEnabled": {
          "Name": "GyroscopeEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "KeyboardEnabled": {
          "Name": "KeyboardEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "LegacyInputEventsEnabled": {
          "Name": "LegacyInputEventsEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ModalEnabled": {
          "Name": "ModalEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MouseBehavior": {
          "Name": "MouseBehavior",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "MouseBehavior"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MouseDeltaSensitivity": {
          "Name": "MouseDeltaSensitivity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MouseEnabled": {
          "Name": "MouseEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "MouseIconEnabled": {
          "Name": "MouseIconEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "NavBarSize": {
          "Name": "NavBarSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "OnScreenKeyboardAnimationDuration": {
          "Name": "OnScreenKeyboardAnimationDuration",
          "Scriptability": "None",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "OnScreenKeyboardPosition": {
          "Name": "OnScreenKeyboardPosition",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "OnScreenKeyboardSize": {
          "Name": "OnScreenKeyboardSize",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "OnScreenKeyboardVisible": {
          "Name": "OnScreenKeyboardVisible",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "OverrideMouseIconBehavior": {
          "Name": "OverrideMouseIconBehavior",
          "Scriptability": "None",
          "DataType": {
            "Enum": "OverrideMouseIconBehavior"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "RightBarSize": {
          "Name": "RightBarSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "StatusBarSize": {
          "Name": "StatusBarSize",
          "Scriptability": "None",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TouchEnabled": {
          "Name": "TouchEnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "UserHeadCFrame": {
          "Name": "UserHeadCFrame",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Deprecated",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VREnabled": {
          "Name": "VREnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "UserService": {
      "Name": "UserService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UserSettings": {
      "Name": "UserSettings",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "GenericSettings",
      "Properties": {},
      "DefaultProperties": {}
    },
    "UserStorageService": {
      "Name": "UserStorageService",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "LocalStorageService",
      "Properties": {},
      "DefaultProperties": {}
    },
    "VRService": {
      "Name": "VRService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "DidPointerHit": {
          "Name": "DidPointerHit",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GuiInputUserCFrame": {
          "Name": "GuiInputUserCFrame",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "UserCFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PointerHitCFrame": {
          "Name": "PointerHitCFrame",
          "Scriptability": "None",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VRDeviceAvailable": {
          "Name": "VRDeviceAvailable",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VRDeviceName": {
          "Name": "VRDeviceName",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VREnabled": {
          "Name": "VREnabled",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "ValueBase": {
      "Name": "ValueBase",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Vector3Curve": {
      "Name": "Vector3Curve",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Vector3Value": {
      "Name": "Vector3Value",
      "Tags": [],
      "Superclass": "ValueBase",
      "Properties": {
        "Value": {
          "Name": "Value",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Value": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "VectorForce": {
      "Name": "VectorForce",
      "Tags": [],
      "Superclass": "Constraint",
      "Properties": {
        "ApplyAtCenterOfMass": {
          "Name": "ApplyAtCenterOfMass",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Force": {
          "Name": "Force",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "RelativeTo": {
          "Name": "RelativeTo",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ActuatorRelativeTo"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "ApplyAtCenterOfMass": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "Color": {
          "Int32": 23
        },
        "Enabled": {
          "Bool": true
        },
        "Force": {
          "Vector3": [
            1000.0,
            0.0,
            0.0
          ]
        },
        "RelativeTo": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": false
        }
      }
    },
    "VehicleController": {
      "Name": "VehicleController",
      "Tags": [],
      "Superclass": "Controller",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VehicleSeat": {
      "Name": "VehicleSeat",
      "Tags": [],
      "Superclass": "BasePart",
      "Properties": {
        "AreHingesDetected": {
          "Name": "AreHingesDetected",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Disabled": {
          "Name": "Disabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HeadsUpDisplay": {
          "Name": "HeadsUpDisplay",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxSpeed": {
          "Name": "MaxSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Occupant": {
          "Name": "Occupant",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Steer": {
          "Name": "Steer",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SteerFloat": {
          "Name": "SteerFloat",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Throttle": {
          "Name": "Throttle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ThrottleFloat": {
          "Name": "ThrottleFloat",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Torque": {
          "Name": "Torque",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "TurnSpeed": {
          "Name": "TurnSpeed",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "Disabled": {
          "Bool": false
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "HeadsUpDisplay": {
          "Bool": true
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "MaxSpeed": {
          "Float32": 25.0
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Steer": {
          "Int32": 0
        },
        "SteerFloat": {
          "Float32": 0.0
        },
        "Tags": {
          "BinaryString": ""
        },
        "Throttle": {
          "Int32": 0
        },
        "ThrottleFloat": {
          "Float32": 0.0
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 3
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Torque": {
          "Float32": 10.0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "TurnSpeed": {
          "Float32": 1.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "VelocityMotor": {
      "Name": "VelocityMotor",
      "Tags": [],
      "Superclass": "JointInstance",
      "Properties": {
        "CurrentAngle": {
          "Name": "CurrentAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DesiredAngle": {
          "Name": "DesiredAngle",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Hole": {
          "Name": "Hole",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MaxVelocity": {
          "Name": "MaxVelocity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CurrentAngle": {
          "Float32": 0.0
        },
        "DesiredAngle": {
          "Float32": 0.0
        },
        "Enabled": {
          "Bool": true
        },
        "MaxVelocity": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VersionControlService": {
      "Name": "VersionControlService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "ScriptCollabEnabled": {
          "Name": "ScriptCollabEnabled",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {}
    },
    "VideoCaptureService": {
      "Name": "VideoCaptureService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "CameraID": {
          "Name": "CameraID",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VideoFrame": {
      "Name": "VideoFrame",
      "Tags": [],
      "Superclass": "GuiObject",
      "Properties": {
        "IsLoaded": {
          "Name": "IsLoaded",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Looped": {
          "Name": "Looped",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Playing": {
          "Name": "Playing",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Resolution": {
          "Name": "Resolution",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Vector2"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TimeLength": {
          "Name": "TimeLength",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TimePosition": {
          "Name": "TimePosition",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Video": {
          "Name": "Video",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Volume": {
          "Name": "Volume",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "Looped": {
          "Bool": false
        },
        "Playing": {
          "Bool": false
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TimePosition": {
          "Float64": 0.0
        },
        "Video": {
          "Content": ""
        },
        "Visible": {
          "Bool": true
        },
        "Volume": {
          "Float32": 1.0
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "ViewportFrame": {
      "Name": "ViewportFrame",
      "Tags": [],
      "Superclass": "GuiObject",
      "Properties": {
        "Ambient": {
          "Name": "Ambient",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentCamera": {
          "Name": "CurrentCamera",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ImageColor3": {
          "Name": "ImageColor3",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ImageTransparency": {
          "Name": "ImageTransparency",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightColor": {
          "Name": "LightColor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "LightDirection": {
          "Name": "LightDirection",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Active": {
          "Bool": false
        },
        "Ambient": {
          "Color3": [
            0.78431374,
            0.78431374,
            0.78431374
          ]
        },
        "AnchorPoint": {
          "Vector2": [
            0.0,
            0.0
          ]
        },
        "Attributes": {
          "BinaryString": ""
        },
        "AutoLocalize": {
          "Bool": true
        },
        "AutomaticSize": {
          "Enum": 0
        },
        "BackgroundColor3": {
          "Color3": [
            0.6392157,
            0.63529414,
            0.64705884
          ]
        },
        "BackgroundTransparency": {
          "Float32": 0.0
        },
        "BorderColor3": {
          "Color3": [
            0.10588236,
            0.16470589,
            0.20784315
          ]
        },
        "BorderMode": {
          "Enum": 0
        },
        "BorderSizePixel": {
          "Int32": 1
        },
        "ClipsDescendants": {
          "Bool": false
        },
        "Draggable": {
          "Bool": false
        },
        "ImageColor3": {
          "Color3": [
            1.0,
            1.0,
            1.0
          ]
        },
        "ImageTransparency": {
          "Float32": 0.0
        },
        "LayoutOrder": {
          "Int32": 0
        },
        "LightColor": {
          "Color3": [
            0.54901963,
            0.54901963,
            0.54901963
          ]
        },
        "LightDirection": {
          "Vector3": [
            -1.0,
            -1.0,
            -1.0
          ]
        },
        "Position": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "Rotation": {
          "Float32": 0.0
        },
        "Selectable": {
          "Bool": false
        },
        "SelectionBehaviorDown": {
          "Enum": 0
        },
        "SelectionBehaviorLeft": {
          "Enum": 0
        },
        "SelectionBehaviorRight": {
          "Enum": 0
        },
        "SelectionBehaviorUp": {
          "Enum": 0
        },
        "SelectionGroup": {
          "Bool": false
        },
        "SelectionOrder": {
          "Int32": 0
        },
        "Size": {
          "UDim2": [
            [
              0.0,
              0
            ],
            [
              0.0,
              0
            ]
          ]
        },
        "SizeConstraint": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "Visible": {
          "Bool": true
        },
        "ZIndex": {
          "Int32": 1
        }
      }
    },
    "VirtualInputManager": {
      "Name": "VirtualInputManager",
      "Tags": [
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "AdditionalLuaState": {
          "Name": "AdditionalLuaState",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VirtualUser": {
      "Name": "VirtualUser",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "VisibilityService": {
      "Name": "VisibilityService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "Visit": {
      "Name": "Visit",
      "Tags": [
        "NotCreatable",
        "NotReplicated",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {}
    },
    "VoiceChannel": {
      "Name": "VoiceChannel",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VoiceChatInternal": {
      "Name": "VoiceChatInternal",
      "Tags": [
        "NotBrowsable",
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "VoiceChatState": {
          "Name": "VoiceChatState",
          "Scriptability": "Read",
          "DataType": {
            "Enum": "VoiceChatState"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VoiceChatService": {
      "Name": "VoiceChatService",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "Instance",
      "Properties": {
        "EnableDefaultVoice": {
          "Name": "EnableDefaultVoice",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "VoiceChatEnabledForPlaceOnRcc": {
          "Name": "VoiceChatEnabledForPlaceOnRcc",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "VoiceChatEnabledForUniverseOnRcc": {
          "Name": "VoiceChatEnabledForUniverseOnRcc",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Hidden"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "EnableDefaultVoice": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "VoiceSource": {
      "Name": "VoiceSource",
      "Tags": [
        "Deprecated",
        "NotCreatable"
      ],
      "Superclass": "Instance",
      "Properties": {
        "UserId": {
          "Name": "UserId",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Int64"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "WedgePart": {
      "Name": "WedgePart",
      "Tags": [],
      "Superclass": "FormFactorPart",
      "Properties": {},
      "DefaultProperties": {
        "Anchored": {
          "Bool": false
        },
        "Attributes": {
          "BinaryString": ""
        },
        "BackParamA": {
          "Float32": -0.5
        },
        "BackParamB": {
          "Float32": 0.5
        },
        "BackSurface": {
          "Enum": 0
        },
        "BackSurfaceInput": {
          "Enum": 0
        },
        "BottomParamA": {
          "Float32": -0.5
        },
        "BottomParamB": {
          "Float32": 0.5
        },
        "BottomSurface": {
          "Enum": 4
        },
        "BottomSurfaceInput": {
          "Enum": 0
        },
        "CFrame": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CanCollide": {
          "Bool": true
        },
        "CanQuery": {
          "Bool": true
        },
        "CanTouch": {
          "Bool": true
        },
        "CastShadow": {
          "Bool": true
        },
        "CollisionGroupId": {
          "Int32": 0
        },
        "Color": {
          "Color3uint8": [
            163,
            162,
            165
          ]
        },
        "CustomPhysicalProperties": {
          "PhysicalProperties": "Default"
        },
        "FormFactor": {
          "Enum": 1
        },
        "FrontParamA": {
          "Float32": -0.5
        },
        "FrontParamB": {
          "Float32": 0.5
        },
        "FrontSurface": {
          "Enum": 0
        },
        "FrontSurfaceInput": {
          "Enum": 0
        },
        "LeftParamA": {
          "Float32": -0.5
        },
        "LeftParamB": {
          "Float32": 0.5
        },
        "LeftSurface": {
          "Enum": 0
        },
        "LeftSurfaceInput": {
          "Enum": 0
        },
        "Locked": {
          "Bool": false
        },
        "Massless": {
          "Bool": false
        },
        "Material": {
          "Enum": 256
        },
        "PivotOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Reflectance": {
          "Float32": 0.0
        },
        "RightParamA": {
          "Float32": -0.5
        },
        "RightParamB": {
          "Float32": 0.5
        },
        "RightSurface": {
          "Enum": 0
        },
        "RightSurfaceInput": {
          "Enum": 0
        },
        "RootPriority": {
          "Int32": 0
        },
        "RotVelocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Size": {
          "Vector3": [
            4.0,
            1.2,
            2.0
          ]
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        },
        "TopParamA": {
          "Float32": -0.5
        },
        "TopParamB": {
          "Float32": 0.5
        },
        "TopSurface": {
          "Enum": 0
        },
        "TopSurfaceInput": {
          "Enum": 0
        },
        "Transparency": {
          "Float32": 0.0
        },
        "Velocity": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        }
      }
    },
    "Weld": {
      "Name": "Weld",
      "Tags": [],
      "Superclass": "JointInstance",
      "Properties": {},
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "C0": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "C1": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "WeldConstraint": {
      "Name": "WeldConstraint",
      "Tags": [],
      "Superclass": "Instance",
      "Properties": {
        "Active": {
          "Name": "Active",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Part0": {
          "Name": "Part0",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "Part0Internal"
              }
            }
          }
        },
        "Part0Internal": {
          "Name": "Part0Internal",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Part0"
            }
          }
        },
        "Part1": {
          "Name": "Part1",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": {
                "SerializesAs": "Part1Internal"
              }
            }
          }
        },
        "Part1Internal": {
          "Name": "Part1Internal",
          "Scriptability": "None",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [],
          "Kind": {
            "Alias": {
              "AliasFor": "Part1"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "Workspace": {
      "Name": "Workspace",
      "Tags": [
        "NotCreatable",
        "Service"
      ],
      "Superclass": "WorldRoot",
      "Properties": {
        "AllowThirdPartySales": {
          "Name": "AllowThirdPartySales",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "AnimationWeightedBlendFix": {
          "Name": "AnimationWeightedBlendFix",
          "Scriptability": "None",
          "DataType": {
            "Enum": "NewAnimationRuntimeSetting"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ClientAnimatorThrottling": {
          "Name": "ClientAnimatorThrottling",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "ClientAnimatorThrottlingMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CollisionGroups": {
          "Name": "CollisionGroups",
          "Scriptability": "None",
          "DataType": {
            "Value": "String"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "CurrentCamera": {
          "Name": "CurrentCamera",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "DistributedGameTime": {
          "Name": "DistributedGameTime",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float64"
          },
          "Tags": [
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ExplicitAutoJoints": {
          "Name": "ExplicitAutoJoints",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FallenPartsDestroyHeight": {
          "Name": "FallenPartsDestroyHeight",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "FilteringEnabled": {
          "Name": "FilteringEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "Deprecated",
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "GlobalWind": {
          "Name": "GlobalWind",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Vector3"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Gravity": {
          "Name": "Gravity",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "HumanoidOnlySetCollisionsOnStateChange": {
          "Name": "HumanoidOnlySetCollisionsOnStateChange",
          "Scriptability": "None",
          "DataType": {
            "Enum": "HumanoidOnlySetCollisionsOnStateChange"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "InterpolationThrottling": {
          "Name": "InterpolationThrottling",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "InterpolationThrottlingMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "MeshPartHeadsAndAccessories": {
          "Name": "MeshPartHeadsAndAccessories",
          "Scriptability": "None",
          "DataType": {
            "Enum": "MeshPartHeadsAndAccessories"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PhysicsInertiaAndVolumeFix": {
          "Name": "PhysicsInertiaAndVolumeFix",
          "Scriptability": "None",
          "DataType": {
            "Enum": "PhysicsInertiaAndVolumeFix"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "PhysicsSimulationRate": {
          "Name": "PhysicsSimulationRate",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "PhysicsSimulationRate"
          },
          "Tags": [
            "Hidden",
            "NotReplicated"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "PhysicsSteppingMethod": {
          "Name": "PhysicsSteppingMethod",
          "Scriptability": "None",
          "DataType": {
            "Enum": "PhysicsSteppingMethod"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReplicateInstanceDestroySetting": {
          "Name": "ReplicateInstanceDestroySetting",
          "Scriptability": "None",
          "DataType": {
            "Enum": "ReplicateInstanceDestroySetting"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Retargeting": {
          "Name": "Retargeting",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "AnimatorRetargetingMode"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "SignalBehavior": {
          "Name": "SignalBehavior",
          "Scriptability": "None",
          "DataType": {
            "Enum": "SignalBehavior"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StreamOutBehavior": {
          "Name": "StreamOutBehavior",
          "Scriptability": "None",
          "DataType": {
            "Enum": "StreamOutBehavior"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StreamingEnabled": {
          "Name": "StreamingEnabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StreamingMinRadius": {
          "Name": "StreamingMinRadius",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StreamingPauseMode": {
          "Name": "StreamingPauseMode",
          "Scriptability": "None",
          "DataType": {
            "Enum": "StreamingPauseMode"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "StreamingTargetRadius": {
          "Name": "StreamingTargetRadius",
          "Scriptability": "None",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Terrain": {
          "Name": "Terrain",
          "Scriptability": "Read",
          "DataType": {
            "Value": "Ref"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "TouchesUseCollisionGroups": {
          "Name": "TouchesUseCollisionGroups",
          "Scriptability": "None",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "AllowThirdPartySales": {
          "Bool": false
        },
        "AnimationWeightedBlendFix": {
          "Enum": 0
        },
        "Attributes": {
          "BinaryString": ""
        },
        "ClientAnimatorThrottling": {
          "Enum": 0
        },
        "CollisionGroups": {
          "String": "Default^0^-1"
        },
        "DistributedGameTime": {
          "Float64": 0.0
        },
        "ExplicitAutoJoints": {
          "Bool": true
        },
        "FallenPartsDestroyHeight": {
          "Float32": -500.0
        },
        "GlobalWind": {
          "Vector3": [
            0.0,
            0.0,
            0.0
          ]
        },
        "Gravity": {
          "Float32": 196.2
        },
        "HumanoidOnlySetCollisionsOnStateChange": {
          "Enum": 0
        },
        "InterpolationThrottling": {
          "Enum": 0
        },
        "LevelOfDetail": {
          "Enum": 0
        },
        "MeshPartHeadsAndAccessories": {
          "Enum": 0
        },
        "PhysicsInertiaAndVolumeFix": {
          "Enum": 0
        },
        "PhysicsSteppingMethod": {
          "Enum": 0
        },
        "ReplicateInstanceDestroySetting": {
          "Enum": 0
        },
        "Retargeting": {
          "Enum": 0
        },
        "SignalBehavior": {
          "Enum": 0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "StreamOutBehavior": {
          "Enum": 0
        },
        "StreamingEnabled": {
          "Bool": false
        },
        "StreamingMinRadius": {
          "Int32": 64
        },
        "StreamingPauseMode": {
          "Enum": 0
        },
        "StreamingTargetRadius": {
          "Int32": 1024
        },
        "Tags": {
          "BinaryString": ""
        },
        "TouchesUseCollisionGroups": {
          "Bool": false
        }
      }
    },
    "WorldModel": {
      "Name": "WorldModel",
      "Tags": [],
      "Superclass": "WorldRoot",
      "Properties": {},
      "DefaultProperties": {}
    },
    "WorldRoot": {
      "Name": "WorldRoot",
      "Tags": [
        "NotCreatable"
      ],
      "Superclass": "Model",
      "Properties": {},
      "DefaultProperties": {}
    },
    "WrapLayer": {
      "Name": "WrapLayer",
      "Tags": [],
      "Superclass": "BaseWrap",
      "Properties": {
        "AutoSkin": {
          "Name": "AutoSkin",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Enum": "WrapLayerAutoSkin"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "BindOffset": {
          "Name": "BindOffset",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Color": {
          "Name": "Color",
          "Scriptability": "None",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DebugMode": {
          "Name": "DebugMode",
          "Scriptability": "None",
          "DataType": {
            "Enum": "WrapLayerDebugMode"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Enabled": {
          "Name": "Enabled",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Bool"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Order": {
          "Name": "Order",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Int32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "Puffiness": {
          "Name": "Puffiness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReferenceMeshId": {
          "Name": "ReferenceMeshId",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Content"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReferenceOrigin": {
          "Name": "ReferenceOrigin",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        },
        "ReferenceOriginWorld": {
          "Name": "ReferenceOriginWorld",
          "Scriptability": "Read",
          "DataType": {
            "Value": "CFrame"
          },
          "Tags": [
            "NotReplicated",
            "ReadOnly"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "ShrinkFactor": {
          "Name": "ShrinkFactor",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "AutoSkin": {
          "Enum": 0
        },
        "BindOffset": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "CageMeshId": {
          "Content": ""
        },
        "CageOrigin": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Enabled": {
          "Bool": true
        },
        "HSRAssetId": {
          "Content": ""
        },
        "ImportOrigin": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "Order": {
          "Int32": 1
        },
        "Puffiness": {
          "Float32": 1.0
        },
        "ReferenceMeshId": {
          "Content": ""
        },
        "ReferenceOrigin": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "ShrinkFactor": {
          "Float32": 0.0
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    },
    "WrapTarget": {
      "Name": "WrapTarget",
      "Tags": [],
      "Superclass": "BaseWrap",
      "Properties": {
        "Color": {
          "Name": "Color",
          "Scriptability": "None",
          "DataType": {
            "Value": "Color3"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "DebugMode": {
          "Name": "DebugMode",
          "Scriptability": "None",
          "DataType": {
            "Enum": "WrapTargetDebugMode"
          },
          "Tags": [
            "NotReplicated",
            "NotScriptable"
          ],
          "Kind": {
            "Canonical": {
              "Serialization": "DoesNotSerialize"
            }
          }
        },
        "Stiffness": {
          "Name": "Stiffness",
          "Scriptability": "ReadWrite",
          "DataType": {
            "Value": "Float32"
          },
          "Tags": [],
          "Kind": {
            "Canonical": {
              "Serialization": "Serializes"
            }
          }
        }
      },
      "DefaultProperties": {
        "Attributes": {
          "BinaryString": ""
        },
        "CageMeshId": {
          "Content": ""
        },
        "CageOrigin": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "HSRAssetId": {
          "Content": ""
        },
        "ImportOrigin": {
          "CFrame": {
            "position": [
              0.0,
              0.0,
              0.0
            ],
            "orientation": [
              [
                1.0,
                0.0,
                0.0
              ],
              [
                0.0,
                1.0,
                0.0
              ],
              [
                0.0,
                0.0,
                1.0
              ]
            ]
          }
        },
        "SourceAssetId": {
          "Int64": -1
        },
        "Stiffness": {
          "Float32": 0.0
        },
        "Tags": {
          "BinaryString": ""
        }
      }
    }
  },
  "Enums": {
    "ABTestLoadingStatus": {
      "name": "ABTestLoadingStatus",
      "items": {
        "Error": 3,
        "Initialized": 2,
        "None": 0,
        "Pending": 1,
        "ShutOff": 5,
        "TimedOut": 4
      }
    },
    "AccessoryType": {
      "name": "AccessoryType",
      "items": {
        "Back": 7,
        "DressSkirt": 17,
        "Eyebrow": 18,
        "Eyelash": 19,
        "Face": 3,
        "Front": 6,
        "Hair": 2,
        "Hat": 1,
        "Jacket": 12,
        "LeftShoe": 15,
        "Neck": 4,
        "Pants": 11,
        "RightShoe": 16,
        "Shirt": 10,
        "Shorts": 14,
        "Shoulder": 5,
        "Sweater": 13,
        "TShirt": 9,
        "Unknown": 0,
        "Waist": 8
      }
    },
    "ActionType": {
      "name": "ActionType",
      "items": {
        "Draw": 3,
        "Lose": 2,
        "Nothing": 0,
        "Pause": 1,
        "Win": 4
      }
    },
    "ActuatorRelativeTo": {
      "name": "ActuatorRelativeTo",
      "items": {
        "Attachment0": 0,
        "Attachment1": 1,
        "World": 2
      }
    },
    "ActuatorType": {
      "name": "ActuatorType",
      "items": {
        "Motor": 1,
        "None": 0,
        "Servo": 2
      }
    },
    "AdornCullingMode": {
      "name": "AdornCullingMode",
      "items": {
        "Automatic": 0,
        "Never": 1
      }
    },
    "AlignType": {
      "name": "AlignType",
      "items": {
        "Parallel": 0,
        "Perpendicular": 1
      }
    },
    "AlphaMode": {
      "name": "AlphaMode",
      "items": {
        "Overlay": 0,
        "Transparency": 1
      }
    },
    "AnalyticsEconomyAction": {
      "name": "AnalyticsEconomyAction",
      "items": {
        "Acquire": 1,
        "Default": 0,
        "Spend": 2
      }
    },
    "AnalyticsLogLevel": {
      "name": "AnalyticsLogLevel",
      "items": {
        "Debug": 1,
        "Error": 4,
        "Fatal": 5,
        "Information": 2,
        "Trace": 0,
        "Warning": 3
      }
    },
    "AnalyticsProgressionStatus": {
      "name": "AnalyticsProgressionStatus",
      "items": {
        "Abandon": 3,
        "Begin": 1,
        "Complete": 2,
        "Default": 0,
        "Fail": 4
      }
    },
    "AnimationPriority": {
      "name": "AnimationPriority",
      "items": {
        "Action": 2,
        "Action2": 3,
        "Action3": 4,
        "Action4": 5,
        "Core": 1000,
        "Idle": 0,
        "Movement": 1
      }
    },
    "AnimatorRetargetingMode": {
      "name": "AnimatorRetargetingMode",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "AppShellActionType": {
      "name": "AppShellActionType",
      "items": {
        "AvatarEditorPageLoaded": 10,
        "GamePageLoaded": 8,
        "HomePageLoaded": 9,
        "None": 0,
        "OpenApp": 1,
        "ReadConversation": 5,
        "TapAvatarTab": 4,
        "TapChatTab": 2,
        "TapConversationEntry": 3,
        "TapGamePageTab": 6,
        "TapHomePageTab": 7
      }
    },
    "AppShellFeature": {
      "name": "AppShellFeature",
      "items": {
        "AvatarEditor": 2,
        "Chat": 1,
        "GamePage": 3,
        "HomePage": 4,
        "Landing": 6,
        "More": 5,
        "None": 0
      }
    },
    "AppUpdateStatus": {
      "name": "AppUpdateStatus",
      "items": {
        "Available": 4,
        "Failed": 2,
        "NotAvailable": 3,
        "NotSupported": 1,
        "Unknown": 0
      }
    },
    "ApplyStrokeMode": {
      "name": "ApplyStrokeMode",
      "items": {
        "Border": 1,
        "Contextual": 0
      }
    },
    "AspectType": {
      "name": "AspectType",
      "items": {
        "FitWithinMaxSize": 0,
        "ScaleWithParentSize": 1
      }
    },
    "AssetFetchStatus": {
      "name": "AssetFetchStatus",
      "items": {
        "Failure": 1,
        "Success": 0
      }
    },
    "AssetType": {
      "name": "AssetType",
      "items": {
        "Animation": 24,
        "Audio": 3,
        "BackAccessory": 46,
        "Badge": 21,
        "ClimbAnimation": 48,
        "DeathAnimation": 49,
        "Decal": 13,
        "DressSkirtAccessory": 72,
        "EarAccessory": 57,
        "EmoteAnimation": 61,
        "EyeAccessory": 58,
        "EyebrowAccessory": 76,
        "EyelashAccessory": 77,
        "Face": 18,
        "FaceAccessory": 42,
        "FallAnimation": 50,
        "FrontAccessory": 45,
        "GamePass": 34,
        "Gear": 19,
        "HairAccessory": 41,
        "Hat": 8,
        "Head": 17,
        "IdleAnimation": 51,
        "Image": 1,
        "JacketAccessory": 67,
        "JumpAnimation": 52,
        "LeftArm": 29,
        "LeftLeg": 30,
        "LeftShoeAccessory": 70,
        "Lua": 5,
        "Mesh": 4,
        "MeshPart": 40,
        "Model": 10,
        "NeckAccessory": 43,
        "Package": 32,
        "Pants": 12,
        "PantsAccessory": 66,
        "Place": 9,
        "Plugin": 38,
        "PoseAnimation": 56,
        "RightArm": 28,
        "RightLeg": 31,
        "RightShoeAccessory": 71,
        "RunAnimation": 53,
        "Shirt": 11,
        "ShirtAccessory": 65,
        "ShortsAccessory": 69,
        "ShoulderAccessory": 44,
        "SweaterAccessory": 68,
        "SwimAnimation": 54,
        "TShirt": 2,
        "TShirtAccessory": 64,
        "Torso": 27,
        "Video": 62,
        "WaistAccessory": 47,
        "WalkAnimation": 55
      }
    },
    "AssetTypeVerification": {
      "name": "AssetTypeVerification",
      "items": {
        "Always": 3,
        "ClientOnly": 2,
        "Default": 1
      }
    },
    "AutoIndentRule": {
      "name": "AutoIndentRule",
      "items": {
        "Absolute": 1,
        "Off": 0,
        "Relative": 2
      }
    },
    "AutomaticSize": {
      "name": "AutomaticSize",
      "items": {
        "None": 0,
        "X": 1,
        "XY": 3,
        "Y": 2
      }
    },
    "AvatarAssetType": {
      "name": "AvatarAssetType",
      "items": {
        "BackAccessory": 46,
        "ClimbAnimation": 48,
        "DressSkirtAccessory": 72,
        "EmoteAnimation": 61,
        "EyebrowAccessory": 76,
        "EyelashAccessory": 77,
        "Face": 18,
        "FaceAccessory": 42,
        "FallAnimation": 50,
        "FrontAccessory": 45,
        "Gear": 19,
        "HairAccessory": 41,
        "Hat": 8,
        "Head": 17,
        "IdleAnimation": 51,
        "JacketAccessory": 67,
        "JumpAnimation": 52,
        "LeftArm": 29,
        "LeftLeg": 30,
        "LeftShoeAccessory": 70,
        "NeckAccessory": 43,
        "Pants": 12,
        "PantsAccessory": 66,
        "RightArm": 28,
        "RightLeg": 31,
        "RightShoeAccessory": 71,
        "RunAnimation": 53,
        "Shirt": 11,
        "ShirtAccessory": 65,
        "ShortsAccessory": 69,
        "ShoulderAccessory": 44,
        "SweaterAccessory": 68,
        "SwimAnimation": 54,
        "TShirt": 2,
        "TShirtAccessory": 64,
        "Torso": 27,
        "WaistAccessory": 47,
        "WalkAnimation": 55
      }
    },
    "AvatarContextMenuOption": {
      "name": "AvatarContextMenuOption",
      "items": {
        "Chat": 1,
        "Emote": 2,
        "Friend": 0,
        "InspectMenu": 3
      }
    },
    "AvatarItemType": {
      "name": "AvatarItemType",
      "items": {
        "Asset": 1,
        "Bundle": 2
      }
    },
    "AvatarPromptResult": {
      "name": "AvatarPromptResult",
      "items": {
        "Failed": 3,
        "PermissionDenied": 2,
        "Success": 1
      }
    },
    "Axis": {
      "name": "Axis",
      "items": {
        "X": 0,
        "Y": 1,
        "Z": 2
      }
    },
    "BinType": {
      "name": "BinType",
      "items": {
        "Clone": 3,
        "GameTool": 1,
        "Grab": 2,
        "Hammer": 4,
        "Script": 0
      }
    },
    "BodyPart": {
      "name": "BodyPart",
      "items": {
        "Head": 0,
        "LeftArm": 2,
        "LeftLeg": 4,
        "RightArm": 3,
        "RightLeg": 5,
        "Torso": 1
      }
    },
    "BodyPartR15": {
      "name": "BodyPartR15",
      "items": {
        "Head": 0,
        "LeftFoot": 3,
        "LeftHand": 9,
        "LeftLowerArm": 10,
        "LeftLowerLeg": 4,
        "LeftUpperArm": 11,
        "LeftUpperLeg": 5,
        "LowerTorso": 2,
        "RightFoot": 6,
        "RightHand": 12,
        "RightLowerArm": 13,
        "RightLowerLeg": 7,
        "RightUpperArm": 14,
        "RightUpperLeg": 8,
        "RootPart": 15,
        "Unknown": 17,
        "UpperTorso": 1
      }
    },
    "BorderMode": {
      "name": "BorderMode",
      "items": {
        "Inset": 2,
        "Middle": 1,
        "Outline": 0
      }
    },
    "BreakReason": {
      "name": "BreakReason",
      "items": {
        "Error": 1,
        "Other": 0,
        "SpecialBreakpoint": 2,
        "UserBreakpoint": 3
      }
    },
    "BreakpointRemoveReason": {
      "name": "BreakpointRemoveReason",
      "items": {
        "Requested": 0,
        "ScriptChanged": 1,
        "ScriptRemoved": 2
      }
    },
    "BulkMoveMode": {
      "name": "BulkMoveMode",
      "items": {
        "FireAllEvents": 0,
        "FireCFrameChanged": 1
      }
    },
    "BundleType": {
      "name": "BundleType",
      "items": {
        "Animations": 2,
        "BodyParts": 1,
        "Shoes": 3
      }
    },
    "Button": {
      "name": "Button",
      "items": {
        "Dismount": 8,
        "Jump": 32
      }
    },
    "ButtonStyle": {
      "name": "ButtonStyle",
      "items": {
        "Custom": 0,
        "RobloxButton": 2,
        "RobloxButtonDefault": 1,
        "RobloxRoundButton": 3,
        "RobloxRoundDefaultButton": 4,
        "RobloxRoundDropdownButton": 5
      }
    },
    "CageType": {
      "name": "CageType",
      "items": {
        "Inner": 0,
        "Outer": 1
      }
    },
    "CameraMode": {
      "name": "CameraMode",
      "items": {
        "Classic": 0,
        "LockFirstPerson": 1
      }
    },
    "CameraPanMode": {
      "name": "CameraPanMode",
      "items": {
        "Classic": 0,
        "EdgeBump": 1
      }
    },
    "CameraType": {
      "name": "CameraType",
      "items": {
        "Attach": 1,
        "Custom": 5,
        "Fixed": 0,
        "Follow": 4,
        "Orbital": 7,
        "Scriptable": 6,
        "Track": 3,
        "Watch": 2
      }
    },
    "CatalogCategoryFilter": {
      "name": "CatalogCategoryFilter",
      "items": {
        "Collectibles": 3,
        "CommunityCreations": 4,
        "Featured": 2,
        "None": 1,
        "Premium": 5,
        "Recommended": 6
      }
    },
    "CatalogSortType": {
      "name": "CatalogSortType",
      "items": {
        "MostFavorited": 5,
        "PriceHighToLow": 2,
        "PriceLowToHigh": 3,
        "RecentlyUpdated": 4,
        "Relevance": 1
      }
    },
    "CellBlock": {
      "name": "CellBlock",
      "items": {
        "CornerWedge": 2,
        "HorizontalWedge": 4,
        "InverseCornerWedge": 3,
        "Solid": 0,
        "VerticalWedge": 1
      }
    },
    "CellMaterial": {
      "name": "CellMaterial",
      "items": {
        "Aluminum": 7,
        "Asphalt": 5,
        "BluePlastic": 16,
        "Brick": 3,
        "Cement": 14,
        "CinderBlock": 12,
        "Empty": 0,
        "Gold": 8,
        "Granite": 4,
        "Grass": 1,
        "Gravel": 11,
        "Iron": 6,
        "MossyStone": 13,
        "RedPlastic": 15,
        "Sand": 2,
        "Water": 17,
        "WoodLog": 10,
        "WoodPlank": 9
      }
    },
    "CellOrientation": {
      "name": "CellOrientation",
      "items": {
        "NegX": 3,
        "NegZ": 0,
        "X": 1,
        "Z": 2
      }
    },
    "CenterDialogType": {
      "name": "CenterDialogType",
      "items": {
        "ModalDialog": 3,
        "PlayerInitiatedDialog": 2,
        "QuitDialog": 4,
        "UnsolicitedDialog": 1
      }
    },
    "ChatCallbackType": {
      "name": "ChatCallbackType",
      "items": {
        "OnClientFormattingMessage": 3,
        "OnClientSendingMessage": 2,
        "OnCreatingChatWindow": 1,
        "OnServerReceivingMessage": 17
      }
    },
    "ChatColor": {
      "name": "ChatColor",
      "items": {
        "Blue": 0,
        "Green": 1,
        "Red": 2,
        "White": 3
      }
    },
    "ChatMode": {
      "name": "ChatMode",
      "items": {
        "Menu": 0,
        "TextAndMenu": 1
      }
    },
    "ChatPrivacyMode": {
      "name": "ChatPrivacyMode",
      "items": {
        "AllUsers": 0,
        "Friends": 2,
        "NoOne": 1
      }
    },
    "ChatStyle": {
      "name": "ChatStyle",
      "items": {
        "Bubble": 1,
        "Classic": 0,
        "ClassicAndBubble": 2
      }
    },
    "ChatVersion": {
      "name": "ChatVersion",
      "items": {
        "LegacyChatService": 0,
        "TextChatService": 1
      }
    },
    "ClientAnimatorThrottlingMode": {
      "name": "ClientAnimatorThrottlingMode",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "CollisionFidelity": {
      "name": "CollisionFidelity",
      "items": {
        "Box": 2,
        "Default": 0,
        "Hull": 1,
        "PreciseConvexDecomposition": 3
      }
    },
    "CommandPermission": {
      "name": "CommandPermission",
      "items": {
        "LocalUser": 1,
        "Plugin": 0
      }
    },
    "ComputerCameraMovementMode": {
      "name": "ComputerCameraMovementMode",
      "items": {
        "CameraToggle": 4,
        "Classic": 1,
        "Default": 0,
        "Follow": 2,
        "Orbital": 3
      }
    },
    "ComputerMovementMode": {
      "name": "ComputerMovementMode",
      "items": {
        "ClickToMove": 2,
        "Default": 0,
        "KeyboardMouse": 1
      }
    },
    "ConnectionError": {
      "name": "ConnectionError",
      "items": {
        "DisconnectBadhash": 257,
        "DisconnectBlockedIP": 282,
        "DisconnectBySecurityPolicy": 281,
        "DisconnectClientFailure": 284,
        "DisconnectClientRequest": 285,
        "DisconnectCloudEditKick": 270,
        "DisconnectConnectionLost": 277,
        "DisconnectDevMaintenance": 274,
        "DisconnectDuplicatePlayer": 264,
        "DisconnectDuplicateTicket": 265,
        "DisconnectErrors": 256,
        "DisconnectEvicted": 273,
        "DisconnectHashTimeout": 269,
        "DisconnectIdle": 278,
        "DisconnectIllegalTeleport": 263,
        "DisconnectLuaKick": 267,
        "DisconnectModeratedGame": 287,
        "DisconnectNewSecurityKeyMismatch": 272,
        "DisconnectOnRemoteSysStats": 268,
        "DisconnectOutOfMemory": 286,
        "DisconnectOutOfMemoryExitContinue": 288,
        "DisconnectPlayerless": 271,
        "DisconnectProtocolMismatch": 259,
        "DisconnectRaknetErrors": 279,
        "DisconnectReceivePacketError": 260,
        "DisconnectReceivePacketStreamError": 261,
        "DisconnectRejoin": 276,
        "DisconnectRobloxMaintenance": 275,
        "DisconnectSecurityKeyMismatch": 258,
        "DisconnectSendPacketError": 262,
        "DisconnectTimeout": 266,
        "DisconnectWrongVersion": 280,
        "OK": 0,
        "PlacelaunchCustomMessage": 610,
        "PlacelaunchDisabled": 515,
        "PlacelaunchError": 516,
        "PlacelaunchErrors": 512,
        "PlacelaunchFlooded": 525,
        "PlacelaunchGameEnded": 517,
        "PlacelaunchGameFull": 518,
        "PlacelaunchHashException": 527,
        "PlacelaunchHashExpired": 526,
        "PlacelaunchHttpError": 529,
        "PlacelaunchOtherError": 611,
        "PlacelaunchPartyCannotFit": 528,
        "PlacelaunchRestricted": 523,
        "PlacelaunchUnauthorized": 524,
        "PlacelaunchUserLeft": 522,
        "TeleportErrors": 768,
        "TeleportFailure": 769,
        "TeleportFlooded": 774,
        "TeleportGameEnded": 771,
        "TeleportGameFull": 772,
        "TeleportGameNotFound": 770,
        "TeleportIsTeleporting": 775,
        "TeleportUnauthorized": 773
      }
    },
    "ConnectionState": {
      "name": "ConnectionState",
      "items": {
        "Connected": 0,
        "Disconnected": 1
      }
    },
    "ContextActionPriority": {
      "name": "ContextActionPriority",
      "items": {
        "Default": 2000,
        "High": 3000,
        "Low": 1000,
        "Medium": 2000
      }
    },
    "ContextActionResult": {
      "name": "ContextActionResult",
      "items": {
        "Pass": 1,
        "Sink": 0
      }
    },
    "ControlMode": {
      "name": "ControlMode",
      "items": {
        "Classic": 0,
        "MouseLockSwitch": 1
      }
    },
    "CoreGuiType": {
      "name": "CoreGuiType",
      "items": {
        "All": 4,
        "Backpack": 2,
        "Chat": 3,
        "EmotesMenu": 5,
        "Health": 1,
        "PlayerList": 0
      }
    },
    "CreateOutfitFailure": {
      "name": "CreateOutfitFailure",
      "items": {
        "InvalidName": 1,
        "Other": 3,
        "OutfitLimitReached": 2
      }
    },
    "CreatorType": {
      "name": "CreatorType",
      "items": {
        "Group": 1,
        "User": 0
      }
    },
    "CurrencyType": {
      "name": "CurrencyType",
      "items": {
        "Default": 0,
        "Robux": 1,
        "Tix": 2
      }
    },
    "CustomCameraMode": {
      "name": "CustomCameraMode",
      "items": {
        "Classic": 1,
        "Default": 0,
        "Follow": 2
      }
    },
    "DataStoreRequestType": {
      "name": "DataStoreRequestType",
      "items": {
        "GetAsync": 0,
        "GetSortedAsync": 3,
        "OnUpdate": 5,
        "SetIncrementAsync": 1,
        "SetIncrementSortedAsync": 4,
        "UpdateAsync": 2
      }
    },
    "DebuggerEndReason": {
      "name": "DebuggerEndReason",
      "items": {
        "ClientRequest": 0,
        "ConfigurationFailed": 6,
        "Disconnected": 3,
        "InvalidHost": 2,
        "RpcError": 7,
        "ServerProtocolMismatch": 5,
        "ServerShutdown": 4,
        "Timeout": 1
      }
    },
    "DebuggerExceptionBreakMode": {
      "name": "DebuggerExceptionBreakMode",
      "items": {
        "Always": 2,
        "Never": 0,
        "Unhandled": 1
      }
    },
    "DebuggerFrameType": {
      "name": "DebuggerFrameType",
      "items": {
        "C": 0,
        "Lua": 1
      }
    },
    "DebuggerPauseReason": {
      "name": "DebuggerPauseReason",
      "items": {
        "Breakpoint": 2,
        "Entrypoint": 5,
        "Exception": 3,
        "Requested": 1,
        "SingleStep": 4,
        "Unknown": 0
      }
    },
    "DebuggerStatus": {
      "name": "DebuggerStatus",
      "items": {
        "ConnectionClosed": 8,
        "ConnectionLost": 2,
        "InternalError": 4,
        "InvalidArgument": 7,
        "InvalidResponse": 3,
        "InvalidState": 5,
        "RpcError": 6,
        "Success": 0,
        "Timeout": 1
      }
    },
    "DevCameraOcclusionMode": {
      "name": "DevCameraOcclusionMode",
      "items": {
        "Invisicam": 1,
        "Zoom": 0
      }
    },
    "DevComputerCameraMovementMode": {
      "name": "DevComputerCameraMovementMode",
      "items": {
        "CameraToggle": 4,
        "Classic": 1,
        "Follow": 2,
        "Orbital": 3,
        "UserChoice": 0
      }
    },
    "DevComputerMovementMode": {
      "name": "DevComputerMovementMode",
      "items": {
        "ClickToMove": 2,
        "KeyboardMouse": 1,
        "Scriptable": 3,
        "UserChoice": 0
      }
    },
    "DevTouchCameraMovementMode": {
      "name": "DevTouchCameraMovementMode",
      "items": {
        "Classic": 1,
        "Follow": 2,
        "Orbital": 3,
        "UserChoice": 0
      }
    },
    "DevTouchMovementMode": {
      "name": "DevTouchMovementMode",
      "items": {
        "ClickToMove": 4,
        "DPad": 2,
        "DynamicThumbstick": 6,
        "Scriptable": 5,
        "Thumbpad": 3,
        "Thumbstick": 1,
        "UserChoice": 0
      }
    },
    "DeveloperMemoryTag": {
      "name": "DeveloperMemoryTag",
      "items": {
        "Animation": 22,
        "GeometryCSG": 24,
        "GraphicsMeshParts": 10,
        "GraphicsParticles": 11,
        "GraphicsParts": 12,
        "GraphicsSolidModels": 8,
        "GraphicsSpatialHash": 13,
        "GraphicsTerrain": 14,
        "GraphicsTexture": 15,
        "GraphicsTextureCharacter": 16,
        "Gui": 21,
        "HttpCache": 1,
        "Instances": 2,
        "Internal": 0,
        "LuaHeap": 4,
        "Navigation": 23,
        "PhysicsCollision": 6,
        "PhysicsParts": 7,
        "Script": 5,
        "Signals": 3,
        "Sounds": 17,
        "StreamingSounds": 18,
        "TerrainVoxels": 19
      }
    },
    "DeviceType": {
      "name": "DeviceType",
      "items": {
        "Desktop": 1,
        "Phone": 3,
        "Tablet": 2,
        "Unknown": 0
      }
    },
    "DialogBehaviorType": {
      "name": "DialogBehaviorType",
      "items": {
        "MultiplePlayers": 1,
        "SinglePlayer": 0
      }
    },
    "DialogPurpose": {
      "name": "DialogPurpose",
      "items": {
        "Help": 1,
        "Quest": 0,
        "Shop": 2
      }
    },
    "DialogTone": {
      "name": "DialogTone",
      "items": {
        "Enemy": 2,
        "Friendly": 1,
        "Neutral": 0
      }
    },
    "DominantAxis": {
      "name": "DominantAxis",
      "items": {
        "Height": 1,
        "Width": 0
      }
    },
    "DraftStatusCode": {
      "name": "DraftStatusCode",
      "items": {
        "DraftCommitted": 3,
        "DraftOutdated": 1,
        "OK": 0,
        "ScriptRemoved": 2
      }
    },
    "DraggerCoordinateSpace": {
      "name": "DraggerCoordinateSpace",
      "items": {
        "Object": 0,
        "World": 1
      }
    },
    "DraggerMovementMode": {
      "name": "DraggerMovementMode",
      "items": {
        "Geometric": 0,
        "Physical": 1
      }
    },
    "EasingDirection": {
      "name": "EasingDirection",
      "items": {
        "In": 0,
        "InOut": 2,
        "Out": 1
      }
    },
    "EasingStyle": {
      "name": "EasingStyle",
      "items": {
        "Back": 2,
        "Bounce": 6,
        "Circular": 9,
        "Cubic": 10,
        "Elastic": 7,
        "Exponential": 8,
        "Linear": 0,
        "Quad": 3,
        "Quart": 4,
        "Quint": 5,
        "Sine": 1
      }
    },
    "ElasticBehavior": {
      "name": "ElasticBehavior",
      "items": {
        "Always": 1,
        "Never": 2,
        "WhenScrollable": 0
      }
    },
    "EnviromentalPhysicsThrottle": {
      "name": "EnviromentalPhysicsThrottle",
      "items": {
        "Always": 2,
        "DefaultAuto": 0,
        "Disabled": 1,
        "Skip16": 6,
        "Skip2": 3,
        "Skip4": 4,
        "Skip8": 5
      }
    },
    "ExplosionType": {
      "name": "ExplosionType",
      "items": {
        "Craters": 1,
        "NoCraters": 0
      }
    },
    "FieldOfViewMode": {
      "name": "FieldOfViewMode",
      "items": {
        "Diagonal": 1,
        "MaxAxis": 2,
        "Vertical": 0
      }
    },
    "FillDirection": {
      "name": "FillDirection",
      "items": {
        "Horizontal": 0,
        "Vertical": 1
      }
    },
    "FilterResult": {
      "name": "FilterResult",
      "items": {
        "Accepted": 0,
        "Rejected": 1
      }
    },
    "Font": {
      "name": "Font",
      "items": {
        "AmaticSC": 21,
        "Antique": 15,
        "Arcade": 13,
        "Arial": 1,
        "ArialBold": 2,
        "Bangers": 22,
        "Bodoni": 7,
        "Cartoon": 9,
        "Code": 10,
        "Creepster": 23,
        "DenkOne": 24,
        "Fantasy": 14,
        "Fondamento": 25,
        "FredokaOne": 26,
        "Garamond": 8,
        "Gotham": 17,
        "GothamBlack": 20,
        "GothamBold": 19,
        "GothamMedium": 18,
        "GrenzeGotisch": 27,
        "Highway": 11,
        "IndieFlower": 28,
        "JosefinSans": 29,
        "Jura": 30,
        "Kalam": 31,
        "Legacy": 0,
        "LuckiestGuy": 32,
        "Merriweather": 33,
        "Michroma": 34,
        "Nunito": 35,
        "Oswald": 36,
        "PatrickHand": 37,
        "PermanentMarker": 38,
        "Roboto": 39,
        "RobotoCondensed": 40,
        "RobotoMono": 41,
        "Sarpanch": 42,
        "SciFi": 12,
        "SourceSans": 3,
        "SourceSansBold": 4,
        "SourceSansItalic": 6,
        "SourceSansLight": 5,
        "SourceSansSemibold": 16,
        "SpecialElite": 43,
        "TitilliumWeb": 44,
        "Ubuntu": 45,
        "Unknown": 100
      }
    },
    "FontSize": {
      "name": "FontSize",
      "items": {
        "Size10": 2,
        "Size11": 3,
        "Size12": 4,
        "Size14": 5,
        "Size18": 6,
        "Size24": 7,
        "Size28": 10,
        "Size32": 11,
        "Size36": 8,
        "Size42": 12,
        "Size48": 9,
        "Size60": 13,
        "Size8": 0,
        "Size9": 1,
        "Size96": 14
      }
    },
    "FontStyle": {
      "name": "FontStyle",
      "items": {
        "Italic": 1,
        "Normal": 0
      }
    },
    "FontWeight": {
      "name": "FontWeight",
      "items": {
        "Bold": 700,
        "ExtraBold": 800,
        "ExtraLight": 200,
        "Heavy": 900,
        "Light": 300,
        "Medium": 500,
        "Regular": 400,
        "SemiBold": 600,
        "Thin": 100
      }
    },
    "FormFactor": {
      "name": "FormFactor",
      "items": {
        "Brick": 1,
        "Custom": 3,
        "Plate": 2,
        "Symmetric": 0
      }
    },
    "FrameStyle": {
      "name": "FrameStyle",
      "items": {
        "ChatBlue": 1,
        "ChatGreen": 4,
        "ChatRed": 5,
        "Custom": 0,
        "DropShadow": 6,
        "RobloxRound": 3,
        "RobloxSquare": 2
      }
    },
    "FramerateManagerMode": {
      "name": "FramerateManagerMode",
      "items": {
        "Automatic": 0,
        "Off": 2,
        "On": 1
      }
    },
    "FriendRequestEvent": {
      "name": "FriendRequestEvent",
      "items": {
        "Accept": 2,
        "Deny": 3,
        "Issue": 0,
        "Revoke": 1
      }
    },
    "FriendStatus": {
      "name": "FriendStatus",
      "items": {
        "Friend": 2,
        "FriendRequestReceived": 4,
        "FriendRequestSent": 3,
        "NotFriend": 1,
        "Unknown": 0
      }
    },
    "FunctionalTestResult": {
      "name": "FunctionalTestResult",
      "items": {
        "Error": 2,
        "Passed": 0,
        "Warning": 1
      }
    },
    "GameAvatarType": {
      "name": "GameAvatarType",
      "items": {
        "PlayerChoice": 2,
        "R15": 1,
        "R6": 0
      }
    },
    "GearGenreSetting": {
      "name": "GearGenreSetting",
      "items": {
        "AllGenres": 0,
        "MatchingGenreOnly": 1
      }
    },
    "GearType": {
      "name": "GearType",
      "items": {
        "BuildingTools": 7,
        "Explosives": 2,
        "MeleeWeapons": 0,
        "MusicalInstruments": 5,
        "NavigationEnhancers": 4,
        "PowerUps": 3,
        "RangedWeapons": 1,
        "SocialItems": 6,
        "Transport": 8
      }
    },
    "Genre": {
      "name": "Genre",
      "items": {
        "Adventure": 7,
        "All": 0,
        "Fantasy": 2,
        "Funny": 9,
        "Ninja": 4,
        "Pirate": 6,
        "Scary": 5,
        "SciFi": 3,
        "SkatePark": 12,
        "Sports": 8,
        "TownAndCity": 1,
        "Tutorial": 13,
        "War": 11,
        "WildWest": 10
      }
    },
    "GraphicsMode": {
      "name": "GraphicsMode",
      "items": {
        "Automatic": 1,
        "Direct3D11": 2,
        "Metal": 5,
        "NoGraphics": 7,
        "OpenGL": 4,
        "Vulkan": 6
      }
    },
    "HandlesStyle": {
      "name": "HandlesStyle",
      "items": {
        "Movement": 1,
        "Resize": 0
      }
    },
    "HighlightDepthMode": {
      "name": "HighlightDepthMode",
      "items": {
        "AlwaysOnTop": 0,
        "Occluded": 1
      }
    },
    "HorizontalAlignment": {
      "name": "HorizontalAlignment",
      "items": {
        "Center": 0,
        "Left": 1,
        "Right": 2
      }
    },
    "HoverAnimateSpeed": {
      "name": "HoverAnimateSpeed",
      "items": {
        "Fast": 3,
        "Medium": 2,
        "Slow": 1,
        "VeryFast": 4,
        "VerySlow": 0
      }
    },
    "HttpCachePolicy": {
      "name": "HttpCachePolicy",
      "items": {
        "DataOnly": 2,
        "Default": 3,
        "Full": 1,
        "InternalRedirectRefresh": 4,
        "None": 0
      }
    },
    "HttpContentType": {
      "name": "HttpContentType",
      "items": {
        "ApplicationJson": 0,
        "ApplicationUrlEncoded": 2,
        "ApplicationXml": 1,
        "TextPlain": 3,
        "TextXml": 4
      }
    },
    "HttpError": {
      "name": "HttpError",
      "items": {
        "Aborted": 9,
        "ConnectFail": 3,
        "DnsResolve": 2,
        "InvalidRedirect": 7,
        "InvalidUrl": 1,
        "NetFail": 8,
        "OK": 0,
        "OutOfMemory": 4,
        "SslConnectFail": 10,
        "SslVerificationFail": 11,
        "TimedOut": 5,
        "TooManyRedirects": 6,
        "Unknown": 12
      }
    },
    "HttpRequestType": {
      "name": "HttpRequestType",
      "items": {
        "Analytics": 23,
        "Avatar": 16,
        "Chat": 15,
        "Default": 0,
        "Localization": 25,
        "MarketplaceService": 2,
        "Players": 7
      }
    },
    "HumanoidCollisionType": {
      "name": "HumanoidCollisionType",
      "items": {
        "InnerBox": 1,
        "OuterBox": 0
      }
    },
    "HumanoidDisplayDistanceType": {
      "name": "HumanoidDisplayDistanceType",
      "items": {
        "None": 2,
        "Subject": 1,
        "Viewer": 0
      }
    },
    "HumanoidHealthDisplayType": {
      "name": "HumanoidHealthDisplayType",
      "items": {
        "AlwaysOff": 2,
        "AlwaysOn": 1,
        "DisplayWhenDamaged": 0
      }
    },
    "HumanoidOnlySetCollisionsOnStateChange": {
      "name": "HumanoidOnlySetCollisionsOnStateChange",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "HumanoidRigType": {
      "name": "HumanoidRigType",
      "items": {
        "R15": 1,
        "R6": 0
      }
    },
    "HumanoidStateType": {
      "name": "HumanoidStateType",
      "items": {
        "Climbing": 12,
        "Dead": 15,
        "FallingDown": 0,
        "Flying": 6,
        "Freefall": 5,
        "GettingUp": 2,
        "Jumping": 3,
        "Landed": 7,
        "None": 18,
        "Physics": 16,
        "PlatformStanding": 14,
        "Ragdoll": 1,
        "Running": 8,
        "RunningNoPhysics": 10,
        "Seated": 13,
        "StrafingNoPhysics": 11,
        "Swimming": 4
      }
    },
    "IKCollisionsMode": {
      "name": "IKCollisionsMode",
      "items": {
        "IncludeContactedMechanisms": 2,
        "NoCollisions": 0,
        "OtherMechanismsAnchored": 1
      }
    },
    "IXPLoadingStatus": {
      "name": "IXPLoadingStatus",
      "items": {
        "ErrorConnection": 5,
        "ErrorInvalidUser": 4,
        "ErrorJsonParse": 6,
        "ErrorTimedOut": 7,
        "Initialized": 2,
        "None": 0,
        "Pending": 1,
        "ShutOff": 3
      }
    },
    "InOut": {
      "name": "InOut",
      "items": {
        "Center": 2,
        "Edge": 0,
        "Inset": 1
      }
    },
    "InfoType": {
      "name": "InfoType",
      "items": {
        "Asset": 0,
        "Bundle": 4,
        "GamePass": 2,
        "Product": 1,
        "Subscription": 3
      }
    },
    "InitialDockState": {
      "name": "InitialDockState",
      "items": {
        "Bottom": 1,
        "Float": 4,
        "Left": 2,
        "Right": 3,
        "Top": 0
      }
    },
    "InputType": {
      "name": "InputType",
      "items": {
        "Constant": 12,
        "NoInput": 0,
        "Sin": 13
      }
    },
    "InterpolationThrottlingMode": {
      "name": "InterpolationThrottlingMode",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "JointCreationMode": {
      "name": "JointCreationMode",
      "items": {
        "All": 0,
        "None": 2,
        "Surface": 1
      }
    },
    "KeyCode": {
      "name": "KeyCode",
      "items": {
        "A": 97,
        "Ampersand": 38,
        "Asterisk": 42,
        "At": 64,
        "B": 98,
        "BackSlash": 92,
        "Backquote": 96,
        "Backspace": 8,
        "Break": 318,
        "ButtonA": 1002,
        "ButtonB": 1003,
        "ButtonL1": 1005,
        "ButtonL2": 1007,
        "ButtonL3": 1009,
        "ButtonR1": 1004,
        "ButtonR2": 1006,
        "ButtonR3": 1008,
        "ButtonSelect": 1011,
        "ButtonStart": 1010,
        "ButtonX": 1000,
        "ButtonY": 1001,
        "C": 99,
        "CapsLock": 301,
        "Caret": 94,
        "Clear": 12,
        "Colon": 58,
        "Comma": 44,
        "Compose": 314,
        "D": 100,
        "DPadDown": 1015,
        "DPadLeft": 1012,
        "DPadRight": 1013,
        "DPadUp": 1014,
        "Delete": 127,
        "Dollar": 36,
        "Down": 274,
        "E": 101,
        "Eight": 56,
        "End": 279,
        "Equals": 61,
        "Escape": 27,
        "Euro": 321,
        "F": 102,
        "F1": 282,
        "F10": 291,
        "F11": 292,
        "F12": 293,
        "F13": 294,
        "F14": 295,
        "F15": 296,
        "F2": 283,
        "F3": 284,
        "F4": 285,
        "F5": 286,
        "F6": 287,
        "F7": 288,
        "F8": 289,
        "F9": 290,
        "Five": 53,
        "Four": 52,
        "G": 103,
        "GreaterThan": 62,
        "H": 104,
        "Hash": 35,
        "Help": 315,
        "Home": 278,
        "I": 105,
        "Insert": 277,
        "J": 106,
        "K": 107,
        "KeypadDivide": 267,
        "KeypadEight": 264,
        "KeypadEnter": 271,
        "KeypadEquals": 272,
        "KeypadFive": 261,
        "KeypadFour": 260,
        "KeypadMinus": 269,
        "KeypadMultiply": 268,
        "KeypadNine": 265,
        "KeypadOne": 257,
        "KeypadPeriod": 266,
        "KeypadPlus": 270,
        "KeypadSeven": 263,
        "KeypadSix": 262,
        "KeypadThree": 259,
        "KeypadTwo": 258,
        "KeypadZero": 256,
        "L": 108,
        "Left": 276,
        "LeftAlt": 308,
        "LeftBracket": 91,
        "LeftControl": 306,
        "LeftCurly": 123,
        "LeftMeta": 310,
        "LeftParenthesis": 40,
        "LeftShift": 304,
        "LeftSuper": 311,
        "LessThan": 60,
        "M": 109,
        "Menu": 319,
        "Minus": 45,
        "Mode": 313,
        "N": 110,
        "Nine": 57,
        "NumLock": 300,
        "O": 111,
        "One": 49,
        "P": 112,
        "PageDown": 281,
        "PageUp": 280,
        "Pause": 19,
        "Percent": 37,
        "Period": 46,
        "Pipe": 124,
        "Plus": 43,
        "Power": 320,
        "Print": 316,
        "Q": 113,
        "Question": 63,
        "Quote": 39,
        "QuotedDouble": 34,
        "R": 114,
        "Return": 13,
        "Right": 275,
        "RightAlt": 307,
        "RightBracket": 93,
        "RightControl": 305,
        "RightCurly": 125,
        "RightMeta": 309,
        "RightParenthesis": 41,
        "RightShift": 303,
        "RightSuper": 312,
        "S": 115,
        "ScrollLock": 302,
        "Semicolon": 59,
        "Seven": 55,
        "Six": 54,
        "Slash": 47,
        "Space": 32,
        "SysReq": 317,
        "T": 116,
        "Tab": 9,
        "Three": 51,
        "Thumbstick1": 1016,
        "Thumbstick2": 1017,
        "Tilde": 126,
        "Two": 50,
        "U": 117,
        "Underscore": 95,
        "Undo": 322,
        "Unknown": 0,
        "Up": 273,
        "V": 118,
        "W": 119,
        "World0": 160,
        "World1": 161,
        "World10": 170,
        "World11": 171,
        "World12": 172,
        "World13": 173,
        "World14": 174,
        "World15": 175,
        "World16": 176,
        "World17": 177,
        "World18": 178,
        "World19": 179,
        "World2": 162,
        "World20": 180,
        "World21": 181,
        "World22": 182,
        "World23": 183,
        "World24": 184,
        "World25": 185,
        "World26": 186,
        "World27": 187,
        "World28": 188,
        "World29": 189,
        "World3": 163,
        "World30": 190,
        "World31": 191,
        "World32": 192,
        "World33": 193,
        "World34": 194,
        "World35": 195,
        "World36": 196,
        "World37": 197,
        "World38": 198,
        "World39": 199,
        "World4": 164,
        "World40": 200,
        "World41": 201,
        "World42": 202,
        "World43": 203,
        "World44": 204,
        "World45": 205,
        "World46": 206,
        "World47": 207,
        "World48": 208,
        "World49": 209,
        "World5": 165,
        "World50": 210,
        "World51": 211,
        "World52": 212,
        "World53": 213,
        "World54": 214,
        "World55": 215,
        "World56": 216,
        "World57": 217,
        "World58": 218,
        "World59": 219,
        "World6": 166,
        "World60": 220,
        "World61": 221,
        "World62": 222,
        "World63": 223,
        "World64": 224,
        "World65": 225,
        "World66": 226,
        "World67": 227,
        "World68": 228,
        "World69": 229,
        "World7": 167,
        "World70": 230,
        "World71": 231,
        "World72": 232,
        "World73": 233,
        "World74": 234,
        "World75": 235,
        "World76": 236,
        "World77": 237,
        "World78": 238,
        "World79": 239,
        "World8": 168,
        "World80": 240,
        "World81": 241,
        "World82": 242,
        "World83": 243,
        "World84": 244,
        "World85": 245,
        "World86": 246,
        "World87": 247,
        "World88": 248,
        "World89": 249,
        "World9": 169,
        "World90": 250,
        "World91": 251,
        "World92": 252,
        "World93": 253,
        "World94": 254,
        "World95": 255,
        "X": 120,
        "Y": 121,
        "Z": 122,
        "Zero": 48
      }
    },
    "KeyInterpolationMode": {
      "name": "KeyInterpolationMode",
      "items": {
        "Constant": 0,
        "Cubic": 2,
        "Linear": 1
      }
    },
    "KeywordFilterType": {
      "name": "KeywordFilterType",
      "items": {
        "Exclude": 1,
        "Include": 0
      }
    },
    "LSPMethodType": {
      "name": "LSPMethodType",
      "items": {
        "CancelRequest": 3,
        "Completion": 15,
        "Declaration": 16,
        "DocumentSymbols": 17,
        "Initialize": 1,
        "Initialized": 2,
        "Roblox_findColor3": 27,
        "Roblox_findExecutablePosition": 26,
        "Roblox_patchSnippetData": 28,
        "Roblox_registerSyntaxCategories": 22,
        "Roblox_signalQuiescence": 23,
        "Roblox_suggestExtraSelections": 25,
        "Roblox_syntaxHighlight": 24,
        "ShutdownRequest": 14,
        "TextDocument_didChange": 5,
        "TextDocument_didClose": 6,
        "TextDocument_didOpen": 4,
        "TextDocument_foldingRange": 7,
        "TextDocument_formatting": 9,
        "TextDocument_hover": 11,
        "TextDocument_onTypeFormatting": 8,
        "TextDocument_publishDiagnostics": 19,
        "TextDocument_rangeFormatting": 10,
        "TextDocument_signatureHelp": 12,
        "Window_showMessage": 20,
        "Window_showMessageRequest": 21,
        "Workspace_DidChangeConfiguration": 13
      }
    },
    "Language": {
      "name": "Language",
      "items": {
        "Default": 0
      }
    },
    "LeftRight": {
      "name": "LeftRight",
      "items": {
        "Center": 1,
        "Left": 0,
        "Right": 2
      }
    },
    "LevelOfDetailSetting": {
      "name": "LevelOfDetailSetting",
      "items": {
        "High": 2,
        "Low": 0,
        "Medium": 1
      }
    },
    "Limb": {
      "name": "Limb",
      "items": {
        "Head": 0,
        "LeftArm": 2,
        "LeftLeg": 4,
        "RightArm": 3,
        "RightLeg": 5,
        "Torso": 1,
        "Unknown": 6
      }
    },
    "LineJoinMode": {
      "name": "LineJoinMode",
      "items": {
        "Bevel": 1,
        "Miter": 2,
        "Round": 0
      }
    },
    "ListDisplayMode": {
      "name": "ListDisplayMode",
      "items": {
        "Horizontal": 0,
        "Vertical": 1
      }
    },
    "ListenerType": {
      "name": "ListenerType",
      "items": {
        "CFrame": 1,
        "Camera": 0,
        "ObjectCFrame": 3,
        "ObjectPosition": 2
      }
    },
    "LoadCharacterLayeredClothing": {
      "name": "LoadCharacterLayeredClothing",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "Material": {
      "name": "Material",
      "items": {
        "Air": 1792,
        "Asphalt": 1376,
        "Basalt": 788,
        "Brick": 848,
        "Cobblestone": 880,
        "Concrete": 816,
        "CorrodedMetal": 1040,
        "CrackedLava": 804,
        "DiamondPlate": 1056,
        "Fabric": 1312,
        "Foil": 1072,
        "ForceField": 1584,
        "Glacier": 1552,
        "Glass": 1568,
        "Granite": 832,
        "Grass": 1280,
        "Ground": 1360,
        "Ice": 1536,
        "LeafyGrass": 1284,
        "Limestone": 820,
        "Marble": 784,
        "Metal": 1088,
        "Mud": 1344,
        "Neon": 288,
        "Pavement": 836,
        "Pebble": 864,
        "Plastic": 256,
        "Rock": 896,
        "Salt": 1392,
        "Sand": 1296,
        "Sandstone": 912,
        "Slate": 800,
        "SmoothPlastic": 272,
        "Snow": 1328,
        "Water": 2048,
        "Wood": 512,
        "WoodPlanks": 528
      }
    },
    "MaterialPattern": {
      "name": "MaterialPattern",
      "items": {
        "Organic": 1,
        "Regular": 0
      }
    },
    "MembershipType": {
      "name": "MembershipType",
      "items": {
        "BuildersClub": 1,
        "None": 0,
        "OutrageousBuildersClub": 3,
        "Premium": 4,
        "TurboBuildersClub": 2
      }
    },
    "MeshPartDetailLevel": {
      "name": "MeshPartDetailLevel",
      "items": {
        "DistanceBased": 0,
        "Level01": 1,
        "Level02": 2,
        "Level03": 3,
        "Level04": 4
      }
    },
    "MeshPartHeadsAndAccessories": {
      "name": "MeshPartHeadsAndAccessories",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "MeshScaleUnit": {
      "name": "MeshScaleUnit",
      "items": {
        "CM": 2,
        "Foot": 4,
        "Inch": 5,
        "MM": 3,
        "Meter": 1,
        "Stud": 0
      }
    },
    "MeshType": {
      "name": "MeshType",
      "items": {
        "Brick": 6,
        "CornerWedge": 11,
        "Cylinder": 4,
        "FileMesh": 5,
        "Head": 0,
        "ParallelRamp": 9,
        "Prism": 7,
        "Pyramid": 8,
        "RightAngleRamp": 10,
        "Sphere": 3,
        "Torso": 1,
        "Wedge": 2
      }
    },
    "MessageType": {
      "name": "MessageType",
      "items": {
        "MessageError": 3,
        "MessageInfo": 1,
        "MessageOutput": 0,
        "MessageWarning": 2
      }
    },
    "ModelLevelOfDetail": {
      "name": "ModelLevelOfDetail",
      "items": {
        "Automatic": 0,
        "Disabled": 2,
        "StreamingMesh": 1
      }
    },
    "ModifierKey": {
      "name": "ModifierKey",
      "items": {
        "Alt": 2,
        "Ctrl": 1,
        "Meta": 3,
        "Shift": 0
      }
    },
    "MouseBehavior": {
      "name": "MouseBehavior",
      "items": {
        "Default": 0,
        "LockCenter": 1,
        "LockCurrentPosition": 2
      }
    },
    "MoveState": {
      "name": "MoveState",
      "items": {
        "AirFree": 4,
        "Coasting": 1,
        "Pushing": 2,
        "Stopped": 0,
        "Stopping": 3
      }
    },
    "NameOcclusion": {
      "name": "NameOcclusion",
      "items": {
        "EnemyOcclusion": 1,
        "NoOcclusion": 0,
        "OccludeAll": 2
      }
    },
    "NetworkOwnership": {
      "name": "NetworkOwnership",
      "items": {
        "Automatic": 0,
        "Manual": 1,
        "OnContact": 2
      }
    },
    "NewAnimationRuntimeSetting": {
      "name": "NewAnimationRuntimeSetting",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "NormalId": {
      "name": "NormalId",
      "items": {
        "Back": 2,
        "Bottom": 4,
        "Front": 5,
        "Left": 3,
        "Right": 0,
        "Top": 1
      }
    },
    "OrientationAlignmentMode": {
      "name": "OrientationAlignmentMode",
      "items": {
        "OneAttachment": 0,
        "TwoAttachment": 1
      }
    },
    "OutfitSource": {
      "name": "OutfitSource",
      "items": {
        "All": 1,
        "Created": 2,
        "Purchased": 3
      }
    },
    "OutputLayoutMode": {
      "name": "OutputLayoutMode",
      "items": {
        "Horizontal": 0,
        "Vertical": 1
      }
    },
    "OverrideMouseIconBehavior": {
      "name": "OverrideMouseIconBehavior",
      "items": {
        "ForceHide": 2,
        "ForceShow": 1,
        "None": 0
      }
    },
    "PackagePermission": {
      "name": "PackagePermission",
      "items": {
        "Edit": 4,
        "NoAccess": 1,
        "None": 0,
        "Own": 5,
        "Revoked": 2,
        "UseView": 3
      }
    },
    "PartType": {
      "name": "PartType",
      "items": {
        "Ball": 0,
        "Block": 1,
        "Cylinder": 2
      }
    },
    "ParticleEmitterShape": {
      "name": "ParticleEmitterShape",
      "items": {
        "Box": 0,
        "Cylinder": 2,
        "Disc": 3,
        "Sphere": 1
      }
    },
    "ParticleEmitterShapeInOut": {
      "name": "ParticleEmitterShapeInOut",
      "items": {
        "InAndOut": 2,
        "Inward": 1,
        "Outward": 0
      }
    },
    "ParticleEmitterShapeStyle": {
      "name": "ParticleEmitterShapeStyle",
      "items": {
        "Surface": 1,
        "Volume": 0
      }
    },
    "ParticleFlipbookLayout": {
      "name": "ParticleFlipbookLayout",
      "items": {
        "EightByEight": 3,
        "FourByFour": 2,
        "None": 0,
        "TwoByTwo": 1
      }
    },
    "ParticleFlipbookMode": {
      "name": "ParticleFlipbookMode",
      "items": {
        "Loop": 0,
        "OneShot": 1,
        "PingPong": 2,
        "Random": 3
      }
    },
    "ParticleOrientation": {
      "name": "ParticleOrientation",
      "items": {
        "FacingCamera": 0,
        "FacingCameraWorldUp": 1,
        "VelocityParallel": 2,
        "VelocityPerpendicular": 3
      }
    },
    "PathStatus": {
      "name": "PathStatus",
      "items": {
        "ClosestNoPath": 1,
        "ClosestOutOfRange": 2,
        "FailFinishNotEmpty": 4,
        "FailStartNotEmpty": 3,
        "NoPath": 5,
        "Success": 0
      }
    },
    "PathWaypointAction": {
      "name": "PathWaypointAction",
      "items": {
        "Custom": 2,
        "Jump": 1,
        "Walk": 0
      }
    },
    "PermissionLevelShown": {
      "name": "PermissionLevelShown",
      "items": {
        "Game": 0,
        "Roblox": 4,
        "RobloxGame": 1,
        "RobloxScript": 2,
        "Studio": 3
      }
    },
    "PhysicsInertiaAndVolumeFix": {
      "name": "PhysicsInertiaAndVolumeFix",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "PhysicsSimulationRate": {
      "name": "PhysicsSimulationRate",
      "items": {
        "Fixed120Hz": 1,
        "Fixed240Hz": 0,
        "Fixed60Hz": 2
      }
    },
    "PhysicsSteppingMethod": {
      "name": "PhysicsSteppingMethod",
      "items": {
        "Adaptive": 2,
        "Default": 0,
        "Fixed": 1
      }
    },
    "Platform": {
      "name": "Platform",
      "items": {
        "Android": 3,
        "AndroidTV": 11,
        "BeOS": 17,
        "Chromecast": 12,
        "DOS": 16,
        "IOS": 2,
        "Linux": 13,
        "NX": 9,
        "None": 19,
        "OSX": 1,
        "Ouya": 10,
        "PS3": 6,
        "PS4": 5,
        "SteamOS": 14,
        "UWP": 18,
        "WebOS": 15,
        "WiiU": 8,
        "Windows": 0,
        "XBox360": 7,
        "XBoxOne": 4
      }
    },
    "PlaybackState": {
      "name": "PlaybackState",
      "items": {
        "Begin": 0,
        "Cancelled": 5,
        "Completed": 4,
        "Delayed": 1,
        "Paused": 3,
        "Playing": 2
      }
    },
    "PlayerActions": {
      "name": "PlayerActions",
      "items": {
        "CharacterBackward": 1,
        "CharacterForward": 0,
        "CharacterJump": 4,
        "CharacterLeft": 2,
        "CharacterRight": 3
      }
    },
    "PlayerChatType": {
      "name": "PlayerChatType",
      "items": {
        "All": 0,
        "Team": 1,
        "Whisper": 2
      }
    },
    "PoseEasingDirection": {
      "name": "PoseEasingDirection",
      "items": {
        "In": 0,
        "InOut": 2,
        "Out": 1
      }
    },
    "PoseEasingStyle": {
      "name": "PoseEasingStyle",
      "items": {
        "Bounce": 4,
        "Constant": 1,
        "Cubic": 3,
        "Elastic": 2,
        "Linear": 0
      }
    },
    "PositionAlignmentMode": {
      "name": "PositionAlignmentMode",
      "items": {
        "OneAttachment": 0,
        "TwoAttachment": 1
      }
    },
    "PrivilegeType": {
      "name": "PrivilegeType",
      "items": {
        "Admin": 240,
        "Banned": 0,
        "Member": 128,
        "Owner": 255,
        "Visitor": 10
      }
    },
    "ProductLocationRestriction": {
      "name": "ProductLocationRestriction",
      "items": {
        "AllGames": 2,
        "AllowedGames": 1,
        "AvatarShop": 0
      }
    },
    "ProductPurchaseDecision": {
      "name": "ProductPurchaseDecision",
      "items": {
        "NotProcessedYet": 0,
        "PurchaseGranted": 1
      }
    },
    "PropertyStatus": {
      "name": "PropertyStatus",
      "items": {
        "Error": 2,
        "Ok": 0,
        "Warning": 1
      }
    },
    "ProximityPromptExclusivity": {
      "name": "ProximityPromptExclusivity",
      "items": {
        "AlwaysShow": 2,
        "OneGlobally": 1,
        "OnePerButton": 0
      }
    },
    "ProximityPromptInputType": {
      "name": "ProximityPromptInputType",
      "items": {
        "Gamepad": 1,
        "Keyboard": 0,
        "Touch": 2
      }
    },
    "ProximityPromptStyle": {
      "name": "ProximityPromptStyle",
      "items": {
        "Custom": 1,
        "Default": 0
      }
    },
    "QualityLevel": {
      "name": "QualityLevel",
      "items": {
        "Automatic": 0,
        "Level01": 1,
        "Level02": 2,
        "Level03": 3,
        "Level04": 4,
        "Level05": 5,
        "Level06": 6,
        "Level07": 7,
        "Level08": 8,
        "Level09": 9,
        "Level10": 10,
        "Level11": 11,
        "Level12": 12,
        "Level13": 13,
        "Level14": 14,
        "Level15": 15,
        "Level16": 16,
        "Level17": 17,
        "Level18": 18,
        "Level19": 19,
        "Level20": 20,
        "Level21": 21
      }
    },
    "R15CollisionType": {
      "name": "R15CollisionType",
      "items": {
        "InnerBox": 1,
        "OuterBox": 0
      }
    },
    "RaycastFilterType": {
      "name": "RaycastFilterType",
      "items": {
        "Blacklist": 0,
        "Whitelist": 1
      }
    },
    "RenderFidelity": {
      "name": "RenderFidelity",
      "items": {
        "Automatic": 0,
        "Performance": 2,
        "Precise": 1
      }
    },
    "RenderPriority": {
      "name": "RenderPriority",
      "items": {
        "Camera": 200,
        "Character": 300,
        "First": 0,
        "Input": 100,
        "Last": 2000
      }
    },
    "RenderingTestComparisonMethod": {
      "name": "RenderingTestComparisonMethod",
      "items": {
        "diff": 1,
        "psnr": 0
      }
    },
    "ReplicateInstanceDestroySetting": {
      "name": "ReplicateInstanceDestroySetting",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "ResamplerMode": {
      "name": "ResamplerMode",
      "items": {
        "Default": 0,
        "Pixelated": 1
      }
    },
    "ReturnKeyType": {
      "name": "ReturnKeyType",
      "items": {
        "Default": 0,
        "Done": 1,
        "Go": 2,
        "Next": 3,
        "Search": 4,
        "Send": 5
      }
    },
    "ReverbType": {
      "name": "ReverbType",
      "items": {
        "Alley": 15,
        "Arena": 10,
        "Auditorium": 7,
        "Bathroom": 4,
        "CarpettedHallway": 12,
        "Cave": 9,
        "City": 17,
        "ConcertHall": 8,
        "Forest": 16,
        "GenericReverb": 1,
        "Hallway": 13,
        "Hangar": 11,
        "LivingRoom": 5,
        "Mountains": 18,
        "NoReverb": 0,
        "PaddedCell": 2,
        "ParkingLot": 21,
        "Plain": 20,
        "Quarry": 19,
        "Room": 3,
        "SewerPipe": 22,
        "StoneCorridor": 14,
        "StoneRoom": 6,
        "UnderWater": 23
      }
    },
    "RibbonTool": {
      "name": "RibbonTool",
      "items": {
        "ColorPicker": 5,
        "Group": 7,
        "MaterialPicker": 6,
        "Move": 3,
        "None": 9,
        "Rotate": 2,
        "Scale": 1,
        "Select": 0,
        "Transform": 4,
        "Ungroup": 8
      }
    },
    "RigType": {
      "name": "RigType",
      "items": {
        "Custom": 3,
        "None": 4,
        "R15": 0,
        "Rthro": 1,
        "RthroNarrow": 2
      }
    },
    "RollOffMode": {
      "name": "RollOffMode",
      "items": {
        "Inverse": 0,
        "InverseTapered": 3,
        "Linear": 1,
        "LinearSquare": 2
      }
    },
    "RotationOrder": {
      "name": "RotationOrder",
      "items": {
        "XYZ": 0,
        "XZY": 1,
        "YXZ": 3,
        "YZX": 2,
        "ZXY": 4,
        "ZYX": 5
      }
    },
    "RotationType": {
      "name": "RotationType",
      "items": {
        "CameraRelative": 1,
        "MovementRelative": 0
      }
    },
    "RuntimeUndoBehavior": {
      "name": "RuntimeUndoBehavior",
      "items": {
        "Aggregate": 0,
        "Hybrid": 2,
        "Snapshot": 1
      }
    },
    "SaveFilter": {
      "name": "SaveFilter",
      "items": {
        "SaveAll": 2,
        "SaveGame": 1,
        "SaveWorld": 0
      }
    },
    "SavedQualitySetting": {
      "name": "SavedQualitySetting",
      "items": {
        "Automatic": 0,
        "QualityLevel1": 1,
        "QualityLevel10": 10,
        "QualityLevel2": 2,
        "QualityLevel3": 3,
        "QualityLevel4": 4,
        "QualityLevel5": 5,
        "QualityLevel6": 6,
        "QualityLevel7": 7,
        "QualityLevel8": 8,
        "QualityLevel9": 9
      }
    },
    "ScaleType": {
      "name": "ScaleType",
      "items": {
        "Crop": 4,
        "Fit": 3,
        "Slice": 1,
        "Stretch": 0,
        "Tile": 2
      }
    },
    "ScreenOrientation": {
      "name": "ScreenOrientation",
      "items": {
        "LandscapeLeft": 0,
        "LandscapeRight": 1,
        "LandscapeSensor": 2,
        "Portrait": 3,
        "Sensor": 4
      }
    },
    "ScrollBarInset": {
      "name": "ScrollBarInset",
      "items": {
        "Always": 2,
        "None": 0,
        "ScrollBar": 1
      }
    },
    "ScrollingDirection": {
      "name": "ScrollingDirection",
      "items": {
        "X": 1,
        "XY": 4,
        "Y": 2
      }
    },
    "SelectionBehavior": {
      "name": "SelectionBehavior",
      "items": {
        "Escape": 0,
        "Stop": 1
      }
    },
    "ServerAudioBehavior": {
      "name": "ServerAudioBehavior",
      "items": {
        "Enabled": 0,
        "Muted": 1,
        "OnlineGame": 2
      }
    },
    "SignalBehavior": {
      "name": "SignalBehavior",
      "items": {
        "AncestryDeferred": 3,
        "Default": 0,
        "Deferred": 2,
        "Immediate": 1
      }
    },
    "SizeConstraint": {
      "name": "SizeConstraint",
      "items": {
        "RelativeXX": 1,
        "RelativeXY": 0,
        "RelativeYY": 2
      }
    },
    "SortDirection": {
      "name": "SortDirection",
      "items": {
        "Ascending": 0,
        "Descending": 1
      }
    },
    "SortOrder": {
      "name": "SortOrder",
      "items": {
        "Custom": 1,
        "LayoutOrder": 2,
        "Name": 0
      }
    },
    "SpecialKey": {
      "name": "SpecialKey",
      "items": {
        "ChatHotkey": 5,
        "End": 2,
        "Home": 1,
        "Insert": 0,
        "PageDown": 4,
        "PageUp": 3
      }
    },
    "StartCorner": {
      "name": "StartCorner",
      "items": {
        "BottomLeft": 2,
        "BottomRight": 3,
        "TopLeft": 0,
        "TopRight": 1
      }
    },
    "Status": {
      "name": "Status",
      "items": {
        "Confusion": 1,
        "Poison": 0
      }
    },
    "StreamOutBehavior": {
      "name": "StreamOutBehavior",
      "items": {
        "Default": 0,
        "LowMemory": 1,
        "Opportunistic": 2
      }
    },
    "StreamingPauseMode": {
      "name": "StreamingPauseMode",
      "items": {
        "ClientPhysicsPause": 2,
        "Default": 0,
        "Disabled": 1
      }
    },
    "StudioCloseMode": {
      "name": "StudioCloseMode",
      "items": {
        "CloseDoc": 2,
        "CloseStudio": 1,
        "None": 0
      }
    },
    "StudioDataModelType": {
      "name": "StudioDataModelType",
      "items": {
        "Edit": 0,
        "None": 4,
        "PlayClient": 1,
        "PlayServer": 2,
        "Standalone": 3
      }
    },
    "StudioScriptEditorColorCategories": {
      "name": "StudioScriptEditorColorCategories",
      "items": {
        "ActiveLine": 25,
        "Background": 17,
        "Bool": 10,
        "Bracket": 29,
        "Builtin": 6,
        "Comment": 4,
        "DebuggerCurrentLine": 26,
        "DebuggerErrorLine": 27,
        "Default": 0,
        "DocViewCodeBackground": 38,
        "Error": 23,
        "FindSelectionBackground": 20,
        "Function": 11,
        "FunctionName": 15,
        "Keyword": 5,
        "Local": 12,
        "LuauKeyword": 14,
        "MatchingWordBackground": 21,
        "MenuBackground": 33,
        "MenuBorder": 37,
        "MenuPrimaryText": 30,
        "MenuScrollbarBackground": 35,
        "MenuScrollbarHandle": 36,
        "MenuSecondaryText": 31,
        "MenuSelectedBackground": 34,
        "MenuSelectedText": 32,
        "Method": 7,
        "Nil": 9,
        "Number": 2,
        "Operator": 1,
        "Property": 8,
        "Ruler": 28,
        "SelectionBackground": 19,
        "SelectionText": 18,
        "Self": 13,
        "String": 3,
        "TODO": 16,
        "Warning": 22,
        "Whitespace": 24
      }
    },
    "StudioScriptEditorColorPresets": {
      "name": "StudioScriptEditorColorPresets",
      "items": {
        "Custom": 3,
        "Extra1": 1,
        "Extra2": 2,
        "RobloxDefault": 0
      }
    },
    "StudioStyleGuideColor": {
      "name": "StudioStyleGuideColor",
      "items": {
        "AttributeCog": 117,
        "Border": 31,
        "BrightText": 40,
        "Button": 17,
        "ButtonBorder": 89,
        "ButtonText": 90,
        "CategoryItem": 24,
        "ChatIncomingBgColor": 83,
        "ChatIncomingTextColor": 84,
        "ChatModeratedMessageColor": 87,
        "ChatOutgoingBgColor": 85,
        "ChatOutgoingTextColor": 86,
        "CheckedFieldBackground": 92,
        "CheckedFieldBorder": 93,
        "CheckedFieldIndicator": 94,
        "ColorPickerFrame": 29,
        "CurrentMarker": 30,
        "Dark": 35,
        "DebuggerCurrentLine": 65,
        "DebuggerErrorLine": 66,
        "DialogButton": 98,
        "DialogButtonBorder": 100,
        "DialogButtonText": 99,
        "DialogMainButton": 101,
        "DialogMainButtonText": 102,
        "DiffFilePathBackground": 81,
        "DiffFilePathBorder": 82,
        "DiffFilePathText": 67,
        "DiffLineNum": 76,
        "DiffLineNumAdditionBackground": 79,
        "DiffLineNumDeletionBackground": 80,
        "DiffLineNumNoChangeBackground": 78,
        "DiffLineNumSeparatorBackground": 77,
        "DiffTextAddition": 70,
        "DiffTextAdditionBackground": 74,
        "DiffTextDeletion": 71,
        "DiffTextDeletionBackground": 75,
        "DiffTextHunkInfo": 68,
        "DiffTextNoChange": 69,
        "DiffTextNoChangeBackground": 73,
        "DiffTextSeparatorBackground": 72,
        "DimmedText": 41,
        "DocViewCodeBackground": 64,
        "DropShadow": 32,
        "Dropdown": 2,
        "EmulatorBar": 27,
        "EmulatorDropDown": 28,
        "ErrorText": 44,
        "FilterButtonAccent": 12,
        "FilterButtonBorder": 13,
        "FilterButtonBorderAlt": 14,
        "FilterButtonChecked": 11,
        "FilterButtonDefault": 9,
        "FilterButtonHover": 10,
        "GameSettingsTableItem": 25,
        "GameSettingsTooltip": 26,
        "HeaderSection": 95,
        "InfoBarWarningBackground": 103,
        "InfoBarWarningText": 104,
        "InfoText": 45,
        "InputFieldBackground": 21,
        "InputFieldBorder": 91,
        "Item": 22,
        "Light": 34,
        "LinkText": 42,
        "MainBackground": 0,
        "MainButton": 18,
        "MainText": 37,
        "Mid": 36,
        "Midlight": 96,
        "Notification": 4,
        "RibbonButton": 19,
        "RibbonTab": 15,
        "RibbonTabTopBar": 16,
        "ScriptBackground": 48,
        "ScriptBool": 109,
        "ScriptBracket": 116,
        "ScriptBuiltInFunction": 59,
        "ScriptComment": 57,
        "ScriptEditorCurrentLine": 105,
        "ScriptError": 61,
        "ScriptFindSelectionBackground": 52,
        "ScriptFunction": 110,
        "ScriptFunctionName": 114,
        "ScriptKeyword": 58,
        "ScriptLocal": 111,
        "ScriptLuauKeyword": 113,
        "ScriptMatchingWordSelectionBackground": 53,
        "ScriptMethod": 106,
        "ScriptNil": 108,
        "ScriptNumber": 55,
        "ScriptOperator": 54,
        "ScriptProperty": 107,
        "ScriptRuler": 63,
        "ScriptSelectionBackground": 51,
        "ScriptSelectionText": 50,
        "ScriptSelf": 112,
        "ScriptSideWidget": 47,
        "ScriptString": 56,
        "ScriptText": 49,
        "ScriptTodo": 115,
        "ScriptWarning": 60,
        "ScriptWhitespace": 62,
        "ScrollBar": 5,
        "ScrollBarBackground": 6,
        "SensitiveText": 46,
        "Separator": 88,
        "Shadow": 33,
        "StatusBar": 97,
        "SubText": 38,
        "Tab": 8,
        "TabBar": 7,
        "TableItem": 23,
        "Titlebar": 1,
        "TitlebarText": 39,
        "Tooltip": 3,
        "ViewPortBackground": 20,
        "WarningText": 43
      }
    },
    "StudioStyleGuideModifier": {
      "name": "StudioStyleGuideModifier",
      "items": {
        "Default": 0,
        "Disabled": 3,
        "Hover": 4,
        "Pressed": 2,
        "Selected": 1
      }
    },
    "Style": {
      "name": "Style",
      "items": {
        "AlternatingSupports": 0,
        "BridgeStyleSupports": 1,
        "NoSupports": 2
      }
    },
    "SurfaceConstraint": {
      "name": "SurfaceConstraint",
      "items": {
        "Hinge": 1,
        "Motor": 3,
        "None": 0,
        "SteppingMotor": 2
      }
    },
    "SurfaceGuiSizingMode": {
      "name": "SurfaceGuiSizingMode",
      "items": {
        "FixedSize": 0,
        "PixelsPerStud": 1
      }
    },
    "SurfaceType": {
      "name": "SurfaceType",
      "items": {
        "Glue": 1,
        "Hinge": 6,
        "Inlet": 4,
        "Motor": 7,
        "Smooth": 0,
        "SmoothNoOutlines": 10,
        "SteppingMotor": 8,
        "Studs": 3,
        "Universal": 5,
        "Weld": 2
      }
    },
    "SwipeDirection": {
      "name": "SwipeDirection",
      "items": {
        "Down": 3,
        "Left": 1,
        "None": 4,
        "Right": 0,
        "Up": 2
      }
    },
    "TableMajorAxis": {
      "name": "TableMajorAxis",
      "items": {
        "ColumnMajor": 1,
        "RowMajor": 0
      }
    },
    "Technology": {
      "name": "Technology",
      "items": {
        "Compatibility": 2,
        "Future": 4,
        "Legacy": 0,
        "ShadowMap": 3,
        "Voxel": 1
      }
    },
    "TeleportMethod": {
      "name": "TeleportMethod",
      "items": {
        "TeleportPartyAsync": 3,
        "TeleportToPlaceInstance": 1,
        "TeleportToPrivateServer": 2,
        "TeleportToSpawnByName": 0,
        "TeleportUnknown": 4
      }
    },
    "TeleportResult": {
      "name": "TeleportResult",
      "items": {
        "Failure": 1,
        "Flooded": 6,
        "GameEnded": 3,
        "GameFull": 4,
        "GameNotFound": 2,
        "IsTeleporting": 7,
        "Success": 0,
        "Unauthorized": 5
      }
    },
    "TeleportState": {
      "name": "TeleportState",
      "items": {
        "Failed": 3,
        "InProgress": 4,
        "RequestedFromServer": 0,
        "Started": 1,
        "WaitingForServer": 2
      }
    },
    "TeleportType": {
      "name": "TeleportType",
      "items": {
        "ToInstance": 1,
        "ToPlace": 0,
        "ToReservedServer": 2
      }
    },
    "TerrainAcquisitionMethod": {
      "name": "TerrainAcquisitionMethod",
      "items": {
        "Convert": 5,
        "EditAddTool": 6,
        "EditReplaceTool": 8,
        "EditSeaLevelTool": 7,
        "Generate": 3,
        "Import": 4,
        "Legacy": 1,
        "None": 0,
        "Other": 11,
        "RegionFillTool": 9,
        "RegionPasteTool": 10,
        "Template": 2
      }
    },
    "TerrainFace": {
      "name": "TerrainFace",
      "items": {
        "Bottom": 2,
        "Side": 1,
        "Top": 0
      }
    },
    "TextChatMessageStatus": {
      "name": "TextChatMessageStatus",
      "items": {
        "Floodchecked": 5,
        "InvalidPrivacySettings": 6,
        "InvalidTextChannelPermissions": 7,
        "MessageTooLong": 8,
        "Sending": 3,
        "Success": 2,
        "TextFilterFailed": 4,
        "Unknown": 1
      }
    },
    "TextFilterContext": {
      "name": "TextFilterContext",
      "items": {
        "PrivateChat": 2,
        "PublicChat": 1
      }
    },
    "TextInputType": {
      "name": "TextInputType",
      "items": {
        "Default": 0,
        "Email": 3,
        "NoSuggestions": 1,
        "Number": 2,
        "OneTimePassword": 8,
        "Password": 5,
        "PasswordShown": 6,
        "Phone": 4,
        "Username": 7
      }
    },
    "TextTruncate": {
      "name": "TextTruncate",
      "items": {
        "AtEnd": 1,
        "None": 0
      }
    },
    "TextXAlignment": {
      "name": "TextXAlignment",
      "items": {
        "Center": 2,
        "Left": 0,
        "Right": 1
      }
    },
    "TextYAlignment": {
      "name": "TextYAlignment",
      "items": {
        "Bottom": 2,
        "Center": 1,
        "Top": 0
      }
    },
    "TextureMode": {
      "name": "TextureMode",
      "items": {
        "Static": 2,
        "Stretch": 0,
        "Wrap": 1
      }
    },
    "TextureQueryType": {
      "name": "TextureQueryType",
      "items": {
        "Humanoid": 2,
        "HumanoidOrphaned": 3,
        "NonHumanoid": 0,
        "NonHumanoidOrphaned": 1
      }
    },
    "ThreadPoolConfig": {
      "name": "ThreadPoolConfig",
      "items": {
        "Auto": 0,
        "PerCore1": 101,
        "PerCore2": 102,
        "PerCore3": 103,
        "PerCore4": 104,
        "Threads1": 1,
        "Threads16": 16,
        "Threads2": 2,
        "Threads3": 3,
        "Threads4": 4,
        "Threads8": 8
      }
    },
    "ThrottlingPriority": {
      "name": "ThrottlingPriority",
      "items": {
        "Default": 0,
        "ElevatedOnServer": 1,
        "Extreme": 2
      }
    },
    "ThumbnailSize": {
      "name": "ThumbnailSize",
      "items": {
        "Size100x100": 4,
        "Size150x150": 5,
        "Size180x180": 1,
        "Size352x352": 6,
        "Size420x420": 2,
        "Size48x48": 0,
        "Size60x60": 3
      }
    },
    "ThumbnailType": {
      "name": "ThumbnailType",
      "items": {
        "AvatarBust": 1,
        "AvatarThumbnail": 2,
        "HeadShot": 0
      }
    },
    "TickCountSampleMethod": {
      "name": "TickCountSampleMethod",
      "items": {
        "Benchmark": 1,
        "Fast": 0,
        "Precise": 2
      }
    },
    "TopBottom": {
      "name": "TopBottom",
      "items": {
        "Bottom": 2,
        "Center": 1,
        "Top": 0
      }
    },
    "TouchCameraMovementMode": {
      "name": "TouchCameraMovementMode",
      "items": {
        "Classic": 1,
        "Default": 0,
        "Follow": 2,
        "Orbital": 3
      }
    },
    "TouchMovementMode": {
      "name": "TouchMovementMode",
      "items": {
        "ClickToMove": 4,
        "DPad": 2,
        "Default": 0,
        "DynamicThumbstick": 5,
        "Thumbpad": 3,
        "Thumbstick": 1
      }
    },
    "TriStateBoolean": {
      "name": "TriStateBoolean",
      "items": {
        "False": 2,
        "True": 1,
        "Unknown": 0
      }
    },
    "TweenStatus": {
      "name": "TweenStatus",
      "items": {
        "Canceled": 0,
        "Completed": 1
      }
    },
    "UITheme": {
      "name": "UITheme",
      "items": {
        "Dark": 1,
        "Light": 0
      }
    },
    "UiMessageType": {
      "name": "UiMessageType",
      "items": {
        "UiMessageError": 0,
        "UiMessageInfo": 1
      }
    },
    "UsageContext": {
      "name": "UsageContext",
      "items": {
        "Default": 0,
        "Preview": 1
      }
    },
    "UserCFrame": {
      "name": "UserCFrame",
      "items": {
        "Head": 0,
        "LeftHand": 1,
        "RightHand": 2
      }
    },
    "UserInputState": {
      "name": "UserInputState",
      "items": {
        "Begin": 0,
        "Cancel": 3,
        "Change": 1,
        "End": 2,
        "None": 4
      }
    },
    "UserInputType": {
      "name": "UserInputType",
      "items": {
        "Accelerometer": 10,
        "Focus": 9,
        "Gamepad1": 12,
        "Gamepad2": 13,
        "Gamepad3": 14,
        "Gamepad4": 15,
        "Gamepad5": 16,
        "Gamepad6": 17,
        "Gamepad7": 18,
        "Gamepad8": 19,
        "Gyro": 11,
        "InputMethod": 21,
        "Keyboard": 8,
        "MouseButton1": 0,
        "MouseButton2": 1,
        "MouseButton3": 2,
        "MouseMovement": 4,
        "MouseWheel": 3,
        "None": 22,
        "TextInput": 20,
        "Touch": 7
      }
    },
    "VRTouchpad": {
      "name": "VRTouchpad",
      "items": {
        "Left": 0,
        "Right": 1
      }
    },
    "VRTouchpadMode": {
      "name": "VRTouchpadMode",
      "items": {
        "ABXY": 2,
        "Touch": 0,
        "VirtualThumbstick": 1
      }
    },
    "VelocityConstraintMode": {
      "name": "VelocityConstraintMode",
      "items": {
        "Line": 0,
        "Plane": 1,
        "Vector": 2
      }
    },
    "VerticalAlignment": {
      "name": "VerticalAlignment",
      "items": {
        "Bottom": 2,
        "Center": 0,
        "Top": 1
      }
    },
    "VerticalScrollBarPosition": {
      "name": "VerticalScrollBarPosition",
      "items": {
        "Left": 1,
        "Right": 0
      }
    },
    "VibrationMotor": {
      "name": "VibrationMotor",
      "items": {
        "Large": 0,
        "LeftHand": 4,
        "LeftTrigger": 2,
        "RightHand": 5,
        "RightTrigger": 3,
        "Small": 1
      }
    },
    "VirtualCursorMode": {
      "name": "VirtualCursorMode",
      "items": {
        "Default": 0,
        "Disabled": 1,
        "Enabled": 2
      }
    },
    "VirtualInputMode": {
      "name": "VirtualInputMode",
      "items": {
        "None": 0,
        "Playing": 2,
        "Recording": 1
      }
    },
    "VoiceChatState": {
      "name": "VoiceChatState",
      "items": {
        "Ended": 5,
        "Failed": 6,
        "Idle": 0,
        "Joined": 3,
        "Joining": 1,
        "JoiningRetry": 2,
        "Leaving": 4
      }
    },
    "WaterDirection": {
      "name": "WaterDirection",
      "items": {
        "NegX": 0,
        "NegY": 2,
        "NegZ": 4,
        "X": 1,
        "Y": 3,
        "Z": 5
      }
    },
    "WaterForce": {
      "name": "WaterForce",
      "items": {
        "Max": 4,
        "Medium": 2,
        "None": 0,
        "Small": 1,
        "Strong": 3
      }
    },
    "WrapLayerAutoSkin": {
      "name": "WrapLayerAutoSkin",
      "items": {
        "Disabled": 0,
        "EnabledOverride": 2,
        "EnabledPreserve": 1
      }
    },
    "WrapLayerDebugMode": {
      "name": "WrapLayerDebugMode",
      "items": {
        "BoundCage": 1,
        "BoundCageAndLinks": 3,
        "HSRInner": 10,
        "HSRInnerReverse": 11,
        "HSROuter": 9,
        "HSROuterDetail": 8,
        "LayerCage": 2,
        "None": 0,
        "OuterCage": 6,
        "Rbf": 5,
        "Reference": 4,
        "ReferenceMeshAfterMorph": 7
      }
    },
    "WrapTargetDebugMode": {
      "name": "WrapTargetDebugMode",
      "items": {
        "None": 0,
        "OuterCageDetail": 8,
        "Rbf": 7,
        "TargetCageCompressed": 2,
        "TargetCageInterface": 3,
        "TargetCageOriginal": 1,
        "TargetLayerCageCompressed": 5,
        "TargetLayerCageOriginal": 4,
        "TargetLayerInterface": 6
      }
    },
    "ZIndexBehavior": {
      "name": "ZIndexBehavior",
      "items": {
        "Global": 0,
        "Sibling": 1
      }
    }
  }
}]]

return HttpService:JSONDecode(json_string)]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e924</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX8d0d861da9c74b93b0f96404401bb576">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">init.spec</string>
							<string name="ScriptGuid">{3def6e4b-b75b-451f-96b0-58129cce9d8b}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local RbxDom = require(script.Parent)

	it("should load", function()
		expect(RbxDom).to.be.ok()
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0013e925</UniqueId>
						</Properties>
					</Item>
				</Item>
			</Item>
		</Item>
		<Item class="StarterCharacterScripts" referent="RBXe941473fdb744a09a7055792b0492349">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterCharacterScripts</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021fe1</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="StarterPack" referent="RBXf488311de85042a1a04395a4177f5a5f">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterPack</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f4b</UniqueId>
		</Properties>
	</Item>
	<Item class="StarterGui" referent="RBX024302b049334cb8a7086ad638eae1ae">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterGui</string>
			<bool name="ResetPlayerGuiOnSpawn">true</bool>
			<token name="ScreenOrientation">2</token>
			<bool name="ShowDevelopmentGui">true</bool>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f4c</UniqueId>
			<token name="VirtualCursorMode">0</token>
		</Properties>
		<Item class="ScreenGui" referent="RBX16e7dd37da7f421fb79735ca3a26b952">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<int name="DisplayOrder">0</int>
				<bool name="Enabled">true</bool>
				<bool name="IgnoreGuiInset">false</bool>
				<string name="Name">ScreenGui</string>
				<bool name="ResetOnSpawn">true</bool>
				<Ref name="RootLocalizationTable">null</Ref>
				<token name="SelectionBehaviorDown">0</token>
				<token name="SelectionBehaviorLeft">0</token>
				<token name="SelectionBehaviorRight">0</token>
				<token name="SelectionBehaviorUp">0</token>
				<bool name="SelectionGroup">false</bool>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00059925</UniqueId>
				<token name="ZIndexBehavior">1</token>
			</Properties>
			<Item class="TextButton" referent="RBXb0d176b7c9a345ac8016102297e53fc5">
				<Properties>
					<bool name="Active">true</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoButtonColor">true</bool>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">3</token>
					<Font name="FontFace">
						<Family><url>rbxasset://fonts/families/SourceSansPro.json</url></Family>
						<Weight>400</Weight>
						<Style>Normal</Style>
						<CachedFaceId><url>rbxasset://fonts/SourceSansPro-Regular.ttf</url></CachedFaceId>
					</Font>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<bool name="Modal">false</bool>
					<string name="Name">TextButton</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0.5</XS>
						<XO>0</XO>
						<YS>0.5</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">true</bool>
					<bool name="Selected">false</bool>
					<token name="SelectionBehaviorDown">0</token>
					<token name="SelectionBehaviorLeft">0</token>
					<token name="SelectionBehaviorRight">0</token>
					<token name="SelectionBehaviorUp">0</token>
					<bool name="SelectionGroup">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<int name="SelectionOrder">0</int>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>200</XO>
						<YS>0</YS>
						<YO>50</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Sync</string>
					<Color3 name="TextColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">14</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00059958</UniqueId>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="LocalScript" referent="RBXa6ba64dac87348bd8477ef44bdba129c">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">LocalScript</string>
						<token name="RunContext">0</token>
						<string name="ScriptGuid">{2b59cb4d-9dc8-421d-80da-1523eea42a61}</string>
						<ProtectedString name="Source"><![CDATA[local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerScripts = LocalPlayer:WaitForChild("PlayerScripts")
local Rojo = PlayerScripts:WaitForChild("Rojo")
local Plugin = Rojo:WaitForChild("Plugin")
local ChangeBatcher = require(Plugin:WaitForChild("ChangeBatcher"))
local InstanceMap = require(Plugin:WaitForChild("InstanceMap"))
local Reconciler = require(Plugin:WaitForChild("Reconciler"))

local instanceMap = InstanceMap.new(function (instance, propertyName)
	print("instance map changed lol", instance, propertyName)
end)

local rc = Reconciler.new(instanceMap)

local success, patch = rc:diff({}, 50505, game)

print("Made patch", success, patch)
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00059a94</UniqueId>
					</Properties>
				</Item>
			</Item>
		</Item>
	</Item>
	<Item class="LocalizationService" referent="RBX20a9450d0a834a04a13fc9fdec549baa">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LocalizationService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f4e</UniqueId>
		</Properties>
	</Item>
	<Item class="TeleportService" referent="RBXdccc8dd3dfa44fe49af9c72a2277d4a8">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Teleport Service</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f52</UniqueId>
		</Properties>
	</Item>
	<Item class="CollectionService" referent="RBX24f9b890621e4cb381e7370609742291">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CollectionService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f54</UniqueId>
		</Properties>
	</Item>
	<Item class="PhysicsService" referent="RBX827d3c59dded4fc9b91bbd1b5bcef716">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PhysicsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f55</UniqueId>
		</Properties>
	</Item>
	<Item class="Geometry" referent="RBXe98ba5cfc2ef4b0eb165a5c1a020032c">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Geometry</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f57</UniqueId>
		</Properties>
	</Item>
	<Item class="InsertService" referent="RBX70aec3a039644d5696a30780bd0b391f">
		<Properties>
			<bool name="AllowClientInsertModels">false</bool>
			<bool name="AllowInsertFreeModels">false</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">InsertService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f59</UniqueId>
		</Properties>
		<Item class="StringValue" referent="RBX262305134f324ef5bd1c549a51786122">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">InsertionHash</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00032ad4</UniqueId>
				<string name="Value">{5928b144-b5c8-423b-a16f-f67ce039f1a8}</string>
			</Properties>
		</Item>
	</Item>
	<Item class="GamePassService" referent="RBXb989fd96bb344ba494d8110b4b083727">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">GamePassService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f5a</UniqueId>
		</Properties>
	</Item>
	<Item class="Debris" referent="RBX779d7d8d4c154a5da15368260903853c">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int name="MaxItems">1000</int>
			<string name="Name">Debris</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f5b</UniqueId>
		</Properties>
	</Item>
	<Item class="CookiesService" referent="RBX9c0ba77a810b4215af0ed7ee2062af56">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CookiesService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f5c</UniqueId>
		</Properties>
	</Item>
	<Item class="VRService" referent="RBX1ea69bbde46c4f69af6950c59609b396">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">VRService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f66</UniqueId>
		</Properties>
	</Item>
	<Item class="ContextActionService" referent="RBXcc5a5846efd348b187b5f15fc5ad79a2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ContextActionService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f68</UniqueId>
		</Properties>
	</Item>
	<Item class="ScriptService" referent="RBX4c060646bb25469198b679a8b049b704">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f6a</UniqueId>
		</Properties>
	</Item>
	<Item class="AssetService" referent="RBXe64780f415e240559aff126c4f61d242">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AssetService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f6b</UniqueId>
		</Properties>
	</Item>
	<Item class="TouchInputService" referent="RBX140a2693317342178a51bcf20a7f88a6">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TouchInputService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f6c</UniqueId>
		</Properties>
	</Item>
	<Item class="AnalyticsService" referent="RBX58e6a784432443bfaa06ebc220cb142e">
		<Properties>
			<string name="ApiKey"></string>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AnalyticsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f6f</UniqueId>
		</Properties>
		<Item class="ModuleScript" referent="RBX94ee26f6cef04bb194bcf277d0648c0e">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">RobloxLSP_Settings</string>
				<string name="ScriptGuid">{4E92D598-D3E2-427E-9681-5C1B2A83B4D0}</string>
				<ProtectedString name="Source"><![CDATA[return {
	port = 27843,
	startAutomatically = false,
	exclude = {
		-- game:GetService("Workspace")
	}
}]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00032521</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="Selection" referent="RBXdb6adbb0d03e46bd81febbb03e7d8d05">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Selection</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f72</UniqueId>
		</Properties>
	</Item>
	<Item class="ServerScriptService" referent="4">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="LoadStringEnabled">false</bool>
			<string name="Name">ServerScriptService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f73</UniqueId>
		</Properties>
		<Item class="Script" referent="5">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Server</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{5cf3d489-c1ca-4de2-91a3-df3fa8210f55}</string>
				<ProtectedString name="Source">print(&quot;Hello world, from server!&quot;)</ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021fd5</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="ServerStorage" referent="RBXfc1285e1b5c7447fa63103b6c84289f2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ServerStorage</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f74</UniqueId>
		</Properties>
	</Item>
	<Item class="ReplicatedStorage" referent="1">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedStorage</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f75</UniqueId>
		</Properties>
		<Item class="Folder" referent="2">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Common</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021fd3</UniqueId>
			</Properties>
			<Item class="ModuleScript" referent="3">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Hello</string>
					<string name="ScriptGuid">{37e7f353-9b64-4ef3-9700-39712deb5138}</string>
					<ProtectedString name="Source"><![CDATA[return function()
	print("Hello, world!")
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021fd4</UniqueId>
				</Properties>
			</Item>
		</Item>
	</Item>
	<Item class="LuaWebService" referent="RBX15894c4e6a6e4f6cba85e64d075fb39d">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f7c</UniqueId>
		</Properties>
	</Item>
	<Item class="ProcessInstancePhysicsService" referent="RBXc8d31a7945ad43c386d5903aa0e2fbdf">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ProcessInstancePhysicsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021f7e</UniqueId>
		</Properties>
	</Item>
	<Item class="Lighting" referent="0">
		<Properties>
			<Color3 name="Ambient">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="Brightness">2</float>
			<Color3 name="ColorShift_Bottom">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<Color3 name="ColorShift_Top">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<float name="EnvironmentDiffuseScale">0</float>
			<float name="EnvironmentSpecularScale">0</float>
			<float name="ExposureCompensation">0</float>
			<Color3 name="FogColor">
				<R>0.75</R>
				<G>0.75</G>
				<B>0.75</B>
			</Color3>
			<float name="FogEnd">100000</float>
			<float name="FogStart">0</float>
			<float name="GeographicLatitude">41.7332993</float>
			<bool name="GlobalShadows">true</bool>
			<string name="Name">Lighting</string>
			<Color3 name="OutdoorAmbient">
				<R>0.5</R>
				<G>0.5</G>
				<B>0.5</B>
			</Color3>
			<bool name="Outlines">false</bool>
			<float name="ShadowSoftness">0.5</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<token name="Technology">1</token>
			<string name="TimeOfDay">14:00:00</string>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021fa2</UniqueId>
		</Properties>
	</Item>
	<Item class="LodDataService" referent="RBXc45ace2846764a34a34d3d7510df5145">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e00021fa6</UniqueId>
		</Properties>
	</Item>
	<Item class="HttpService" referent="RBXa2f70d3e673746c4bfc5d11fe882cee2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="HttpEnabled">false</bool>
			<string name="Name">HttpService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0002482a</UniqueId>
		</Properties>
	</Item>
	<Item class="Teams" referent="RBX276d8d05a49642ab86d0f4eb262048ae">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Teams</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0002e67a</UniqueId>
		</Properties>
	</Item>
	<Item class="LanguageService" referent="RBX98fe9ea891fc400f98cf787f175cbe5b">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LanguageService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0002e8ca</UniqueId>
		</Properties>
	</Item>
	<Item class="TestService" referent="RBX71ea231d8e5f4f5b8abc112069efd3dd">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoRuns">true</bool>
			<string name="Description"></string>
			<bool name="ExecuteWithStudioRun">false</bool>
			<bool name="Is30FpsThrottleEnabled">true</bool>
			<bool name="IsPhysicsEnvironmentalThrottled">true</bool>
			<bool name="IsSleepAllowed">true</bool>
			<string name="Name">TestService</string>
			<int name="NumberOfPlayers">0</int>
			<double name="SimulateSecondsLag">0</double>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<double name="Timeout">10</double>
			<UniqueId name="UniqueId">512e2b4796a5e62f031e697e0003258b</UniqueId>
		</Properties>
	</Item>
	<SharedStrings>
		<SharedString md5="yuZpQdnvvUBOTYh1jqZ2cA=="></SharedString>
	</SharedStrings>
</roblox>